[
{"title": "Python Tutorial | Learn Python Programming", "h1": ["Python Tutorial"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", " What is Python?", "Python Online Compiler/Interpreter", "Python3", " Why Learn Python?", "Getting Started with Free Python Tutorial", "Python Environment Setup", "Python Basics", " Python Input/Output", "\r\n      ", "Python Data Types", "\r\n    ", "\r\n      ", "Python Variables", "\r\n    ", "\r\n      ", "Python Operators", "\r\n    ", "Python Control Flow", "Python Functions", "Python OOPs Concepts", "Python Exception Handling", "Python Collections", "Django Framework", "Data Science", "Data Analysis", "Python Numpy", "Python Pandas", "Machine Learning with Python", "Python GUI", "Modules in Python", "Working With Database", "Python Projects", "Recommended Python Tutorials", "Python Online Quiz", "Python Jobs", "Careers with Python", "Python Examples", "Applications of Python", "Trending Python Applications in 2024", "Python Tutorial – Prerequisites", "Frequent Asked Questions about Python"], "strong": ["Python Tutorial", "beginners", "experienced", "Python programming language", "latest Python 3", "Machine Learning applications", "Google, Amazon, Facebook, Instagram, Dropbox, Uber", "first", "Second", "RUN", "Output", "“Give this Python 3 code a try, and here’s a fun challenge: print ‘Hello World’ along with your name!”", "Python Setup", "Also, check", "Python", "Python Programming Examples", "Web development:", "Machine learning and artificial intelligence:", "Data science and data visualization:", "Desktop GUI:", "Web scraping:", "Game development:", "Business applications: ", "Audio and video applications:", "Embedded applications:", "NExT-GPT:", "ControlNet:", "ProPainter:", "ivy:", "openpilot:", "Langchain-Chatchat:", "Note: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-programming-language/?ref=ghm"},
{"title": "Python Tkinter Tutorial - GeeksforGeeks", "h1": ["Python Tkinter Tutorial"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "What kind of Experience do you want to share?"], "strong": ["Tkinter", "Table of Contents", "Recent Articles on Python TKinter !", "Basic Widgets", "Toplevel Widgets", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tkinter-tutorial/?ref=ghm"},
{"title": "Python Set Exercise - GeeksforGeeks", "h1": ["Python Set Exercise"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Set Programs", "Conversion of Set Programs ", "Advance Set Programs", "What kind of Experience do you want to share?"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-set-exercise/?ref=ghm"},
{"title": "Python String Exercise - GeeksforGeeks", "h1": ["Python String Exercise"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic String Programs", "Advance String Programs", "Programs on SubString", "What kind of Experience do you want to share?"], "strong": ["Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-string-exercise/?ref=ghm"},
{"title": "Python Tuple Exercise - GeeksforGeeks", "h1": ["Python Tuple Exercise"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Tuple Programs", "List of Tuples Programs", "Conversion of Tuple Programs", "Advance Tuple Programs", "What kind of Experience do you want to share?"], "strong": ["Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-tuple-exercise/?ref=ghm"},
{"title": "Python Programs - Python Programming Example", "h1": ["Python Programs"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Topics :", "2>\r\n", "\r\n", "\r\n", "\r\n", "Basic Programs", "\r\n", "Array Programs", "\r\n", "List Programs", "\r\n", "Matrix Programs", "\r\n", "String Programs", "\r\n", "Dictionary Programs", "\r\n", "Tuple Programs", "\r\n", "\r\n\r\n", "\r\n", "\r\n", "Searching and Sorting Programs", "\r\n", "Pattern Printing", "\r\n", "Date-Time Programs", "\r\n", "Regex Programs", "\r\n", "File Handling Programs", "\r\n", "More Python Programs", "\r\n", "\r\n\r\n\r\n \r\n \r\n\r\n\r\n\r\n\r\n", "Basic Programs: ", "\r\n", "Array Programs:", "List Programs:", "Matrix Programs:", "String Programs:", "Dictionary Programs:", "Tuple Programs:", "Searching and Sorting Programs:", "Pattern Printing Programs:", "Date-Time Programs:", "Python Regex Programs:", "Python File Handling Programs:", "More Python Programs:"], "strong": ["Python Examples", "List", "Strings", "Tuple", "Python Programming Tutorial", "Recent Articles on Python !", "Python Output & Multiple Choice Questions", "Topics :", "More >>", "More >>", "More >>", "More >>", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-programming-examples/?ref=ghm"},
{"title": "Python Dictionary Exercise - GeeksforGeeks", "h1": ["Python Dictionary Exercise"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Dictionary Programs", "Conversion of dictionary", "Advance Dictionary Programs", "What kind of Experience do you want to share?"], "strong": ["Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-dictionary-exercise/?ref=ghm"},
{"title": "Python List Exercise - GeeksforGeeks", "h1": ["Python List Exercise"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic List Programs", "Programs on List of Lists", "Advance List Programs", "Programs on List of Strings", "Programs on SubString and SubLists", "What kind of Experience do you want to share?"], "strong": ["Basic List Programs", "More >>", "More >>", "More >>", "More >>", "More >>", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-list-exercise/?ref=ghm"},
{"title": "Python Quizzes - Test Your Python Skills", "h1": ["Python Quiz"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Applications of Python", "FAQs on Python Quiz"], "strong": ["Python Quizzes", "Web Development", "Data Analysis and Visualization", "Machine Learning and Artificial Intelligence", "Scientific Computing", "Automation and Scripting", "Game Development", "Online websites", "Books", "Learn the basics of Python", "Practice coding in Python", "Take practice quizzes", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-quizzes/?ref=ghm"},
{"title": "Python Turtle Tutorial - GeeksforGeeks", "h1": ["Python Turtle Tutorial"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Introduction", "Programming with Turtle", "Turtle Exercises and projects", "What kind of Experience do you want to share?"], "strong": ["Turtle", " ", "Example:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-turtle-tutorial/?ref=ghm"},
{"title": "Python Database Tutorial - GeeksforGeeks", "h1": ["Python Database Tutorial"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python MySQL", "Python SQLite", "Python JSON", "Python MongoDB", "What kind of Experience do you want to share?"], "strong": ["Note: ", "Note: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-database-tutorial/?ref=ghm"},
{"title": "Python MongoDB Tutorial - GeeksforGeeks", "h1": ["Python MongoDB Tutorial"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Getting Started", "MongoDB Queries", "Working with Collections and documents in MongoDB", "Indexing in MongoDB", "Conversion between MongoDB data and Structured data", "Questions on MongoDB", "What kind of Experience do you want to share?"], "strong": ["MongoDB", "Table Of Content:", "Recent Articles on Python MongoDB !!", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-mongodb-tutorial/?ref=ghm"},
{"title": "Python SQLite - GeeksforGeeks", "h1": ["Python SQLite"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "SQLite in Python - Getting Started", "SQLite Queries", "SQLite Clause", "SQLite Working with Data", "Working with Images", "Python SQLite - Exercise", "Python SQLite Additional", "SQLite in Python - Getting Started", "SQLite Queries", "SQLite Clause", "SQLite Working with Data", "Working with Images", "Python SQLite - Exercise", "Python SQLite Additional", "Introduction", "SQLite Queries", "Working with Tables", "Working with Images", "Exercises", "What kind of Experience do you want to share?"], "strong": ["Python SQLite3", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sqlite/?ref=ghm"},
{"title": "Python JSON - GeeksforGeeks", "h1": ["Python JSON"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "JSON Example", "Python3", "Python3", "JSON in Python", "Introduction", "Reading and Writing JSON", "Parsing JSON", "Serializing and Deserializing JSON", "Conversion between JSON", "More operations JSON", "What kind of Experience do you want to share?"], "strong": ["Python JSON JavaScript Object Notation", "Convert from JSON to Python object", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-json/?ref=ghm"},
{"title": "Python API Tutorial: Getting Started with APIs - GeeksforGeeks", "h1": ["Python API Tutorial: Getting Started with APIs"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "What is an API?", "Making API Requests in Python", "Python3", "API Status Codes", "API Documentation", "Python3", "Working with JSON Data", "Python3", "Using API with Query", "Python3", "Python3", "Getting Started With API Key", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Reasons to use API", "Conclusion", "What kind of Experience do you want to share?"], "strong": ["Python API", "Application Programming Interface.", "Prerequisites", "requests’:", "‘requests’:", "Extracting stock price by the help of API", "“IBM”", "‘requests’ ", "Output:", "200 OK", "201 Created", "204 No Content", "300 Multiple Choices", "302 Found (Temporary Redirect)", "304 Not Modified", "400 Bad Request", "401 Unauthorized", "500 Internal Server Error", "502 Bad Gateway", "Output", "Using API with Query", "Output", "Output", "Required Module", "Explanation of Library Usage:", "json", "turtle", "urllib", "time", "webbrowser", "geocoder", "Output:", "Create.txt file for astronauts info", "screen.bgpic() ", "screen.register_shape() ", "iss.shape() ", "iss.setheading() ", "iss.penup() ", "Output:", "Crew Information:", "ISS Location", "ISS Moving look", " ", " ", "a ", "Change in Data", " ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-api-tutorial-getting-started-with-apis/?ref=ghm"},
{"title": "Python Tutorial Automation For Beginners", "h1": ["Python Automation Tutorial"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "What is Automation?", "Why is Automation Important?", "Where is Automation Required?", "Requirements for Python Automation", "Python Modules for Automation", "How to Automate a Task?", "Python Automation Examples", "Python3", "Automating Workflows with Python Scripts", "10 Projects on Automation for Beginners", "Conclusion", "FAQs – Python Automation", "What kind of Experience do you want to share?"], "strong": ["Google", "Amazon", "Facebook", "Instagram", "Uber", "simple example of automation", "Output", "Try more Python automation scripts:", "Manual testing", "Automated testing", "Python ", "QA automation", "Yes, ", "Google automation ", "The average salary of a Python automation test engineer is $120,000 per year,", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Guide to Software Testing and Automation: Master Java, Selenium and Cucumber "], "link": "https://www.geeksforgeeks.org/python-automation/?ref=ghm"},
{"title": "Python Bokeh tutorial - Interactive Data Visualization with Bokeh - GeeksforGeeks", "h1": ["Python Bokeh tutorial – Interactive Data Visualization with Bokeh"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Getting started With Bokeh", "Plotting Different Types of Plots", "Annotations and Legends", "Creating Diffrent Shapes", "Plotting Multiple Plots", "Functions in Bokeh", "Interactive Data Visualization", "Graph", "Building Advanced Visualizations with Glyphs", "Project", "Getting started With Bokeh", "Plotting Different Types of Plots", "Annotations and Legends", "Creating Diffrent Shapes", "Plotting Multiple Plots", "Functions in Bokeh", "Interactive Data Visualization", "Graph", "Building Advanced Visualizations with Glyphs", "Project", "Installation", "Bokeh Interfaces – Basic Concepts of Bokeh", "Getting Started", "Python3", "Annotations and Legends", "Python3", "Python3", "Plotting Different Types of Plots", "Python3", "Python3", "Python3", "Python3", "Python3", "Python", "Python3", "Python3", "Creating Different Shapes", "Python3", "Python3", "Python3", "Python3", "Python3", "Plotting Multiple Plots", "Python3", "Python3", "Python3", "Interactive Data Visualization", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Creating Different Types of Glyphs", "Visualizing Different Types of Data", "More Topics on Bokeh", "What kind of Experience do you want to share?"], "strong": ["Python Bokeh", "Features of Bokeh:", "Flexibility: ", "Productivity: ", "Interactivity:", "Powerful:", "Shareable:", "Open source:", "Table Of Content", "CPython 3.6 and older ", "1. Required Dependencies", "2. Optional Dependencies", "Matplotlib", "MATLAB", "Figure", "Example:", "Output:", "Bokeh Line Graph. ", "Annotations", "titles, legends, arrows", "Example:", "Output:", "Example:", "Output:", "Glyphs", "bokeh.plotting", "Line charts", "Syntax:", "Example:", "Output:", "Bar plot or Bar chart", "hbar()", "vbar()", "Syntax:", "Example 1: ", "Output:", "Example 2: ", "Output:", "scatter plot", "scatter()", "Syntax:", "Example:", "Output:", "Patch Plot", "patch()", "Syntax:", "Example:", "Output:", "Area plots", "varea(), harea()", "Syntax:", "Example 1: ", "Output:", "Example 2: ", "Output:", "wedge()", "Syntax:", "Example:", "Output:", "circle()", " ", "circle_cross()", " ", "circle_x()", " ", "Example:", "Output:", "oval()", "Syntax:", "Example:", "Output:", "triangle()", "Syntax:", "Example:", "Output:", "rect()", "Syntax:", "Example:", "Output:", "multi_polygons()", "Syntax:", "Example:", "Output:", "Vertical Layout", "Horizontal Layout", "Grid Layout", "Vertical Layouts", "column()", "Output:", "row() ", "Example:", "Output:", "gridplot() ", "Example:", "Output:", "Gestures: ", "Actions: ", "Inspectors: ", "Edit Tools: ", " toolbar_location ", "figure()", "“above”", "“below”", "“left”", "“right”", "Example:", "Output:", "click_policy ", "Hiding: ", "Muting: ", "Example 1: ", "Output:", "Example 2: ", "Output:", "Buttons: ", "CustomJS()", "Syntax:", "Example:", "Output:", "CheckboxGroup: ", "Example:", "Output:", "RadioGroup: ", "Syntax:", "Example:", "Output:", "Sliders: ", "Syntax:", "Example:", "Output:", "DropDown: ", "Example:", "Output:", "Tab Widget: ", "Example:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-bokeh-tutorial-interactive-data-visualization-with-bokeh/?ref=ghm"},
{"title": "Python Web Scraping Tutorial - GeeksforGeeks", "h1": ["Python Web Scraping Tutorial"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Web Scraping", "Basics of Web Scraping", "Setting Up the Environment", "Extracting Data from Web Pages", "Fetching Web Pages", "HTTP Request Methods", "Searching and Extract for specific tags Beautifulsoup", "Scrapy Basics", "Selenium Python Basics", "Introduction to Web Scraping", "Basics of Web Scraping", "Setting Up the Environment", "Extracting Data from Web Pages", "Fetching Web Pages", "HTTP Request Methods", "Searching and Extract for specific tags Beautifulsoup", "Scrapy Basics", "Selenium Python Basics", "Requests Module", "Python3", "Python3", "BeautifulSoup Library ", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Scraping multiple Pages", "Python3", "Python3", "Python3", "Saving Data to CSV", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output:", "Output:", "1.", "2.", "3.", "Note:", "Output:", "Output:", "Output:", "Output:", "Output:", "Output:", "Output:", "Output:", "Output:", "Output:", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-web-scraping-tutorial/?ref=footer"},
{"title": "Top 50+ Python Interview Questions and Answers (Latest 2024)", "h1": ["Top 50+ Python Interview Questions and Answers (Latest 2024)"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "What is Python?", "Basic Python Interview Questions for Freshers", "Intermediate Python Interview Questions", "Advanced Python Interview Questions & Answers ", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" Python Interview Questions ", "Top 50 Python Interview Questions", "1. What is Python? List some popular applications of Python in the world of technology.", "2. What are the benefits of using Python language as a tool in the present scenario?", "3. Is Python a compiled language or an interpreted language?", "4. What does the ‘#’ symbol do in Python?", "5. What is the difference between a Mutable datatype and an Immutable data type?", "6. How are arguments passed by value or by reference in Python?", "7. What is the difference between a Set and Dictionary?", "8. What is List Comprehension? Give an Example.", "9. What is a lambda function?", "10. What is a pass in Python?", "11. What is the difference between / and // in Python?", "12. How is Exceptional handling done in Python?", "13. What is swapcase function in Python?", "14. Difference between for loop and while loop in Python", "Python Local variable:", "Python Global variables:", "Module-level scope:", "Outermost scope: ", "Declaring Docstrings:", "Accessing Docstrings:", "Statically typed languages: ", "Dynamically typed languages: ", "Numeric: ", ", ", "Sequence Type: T", "Mapping Types: ", "Set Types: ", "24. What is the difference between xrange and range functions?", "25. What is Dictionary Comprehension? Give an Example", "26. Is Tuple Comprehension? If yes, how, and if not why?", "27. Differentiate between List and Tuple?", "List", "Tuple", "28. What is the difference between a shallow copy and a deep copy?", "29. Which sorting technique is used by sort() and sorted() functions of python?", "Tim Sort", "30. What are Decorators?", "31. How do you debug a Python program?", "32. What are Iterators in Python?", "33. What are Generators in Python?", "34. Does Python supports multiple Inheritance?", "35. What is Polymorphism in Python?", "36. Define encapsulation in Python?", "37. How do you do data abstraction in Python?", "38. How is memory management done in Python?", "39. How to delete a file using Python?", "41. What is a namespace in Python?", "42. What is PIP?", "43. What is a zip function?", "44. What are Pickling and Unpickling?", "45. What is monkey patching in Python?", "46. What is __init__() in Python?", "47. Write a code to display the current time?", "Public Access Modifier:", "Protected Access Modifier: ", "Private Access Modifier: ", "53. What is Python Switch Statement ", "Note", "Note: ", "Complete Test Series for Service-Based Companies ", "Data Structures and Algorithms - Self Paced ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-interview-questions/?ref=footer"},
{"title": "Python Tkinter Tutorial - GeeksforGeeks", "h1": ["Python Tkinter Tutorial"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "What kind of Experience do you want to share?"], "strong": ["Tkinter", "Table of Contents", "Recent Articles on Python TKinter !", "Basic Widgets", "Toplevel Widgets", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tkinter-tutorial/?ref=footer"},
{"title": "Python Tutorial | Learn Python Programming", "h1": ["Python Tutorial"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", " What is Python?", "Python Online Compiler/Interpreter", "Python3", " Why Learn Python?", "Getting Started with Free Python Tutorial", "Python Environment Setup", "Python Basics", " Python Input/Output", "\r\n      ", "Python Data Types", "\r\n    ", "\r\n      ", "Python Variables", "\r\n    ", "\r\n      ", "Python Operators", "\r\n    ", "Python Control Flow", "Python Functions", "Python OOPs Concepts", "Python Exception Handling", "Python Collections", "Django Framework", "Data Science", "Data Analysis", "Python Numpy", "Python Pandas", "Machine Learning with Python", "Python GUI", "Modules in Python", "Working With Database", "Python Projects", "Recommended Python Tutorials", "Python Online Quiz", "Python Jobs", "Careers with Python", "Python Examples", "Applications of Python", "Trending Python Applications in 2024", "Python Tutorial – Prerequisites", "Frequent Asked Questions about Python"], "strong": ["Python Tutorial", "beginners", "experienced", "Python programming language", "latest Python 3", "Machine Learning applications", "Google, Amazon, Facebook, Instagram, Dropbox, Uber", "first", "Second", "RUN", "Output", "“Give this Python 3 code a try, and here’s a fun challenge: print ‘Hello World’ along with your name!”", "Python Setup", "Also, check", "Python", "Python Programming Examples", "Web development:", "Machine learning and artificial intelligence:", "Data science and data visualization:", "Desktop GUI:", "Web scraping:", "Game development:", "Business applications: ", "Audio and video applications:", "Embedded applications:", "NExT-GPT:", "ControlNet:", "ProPainter:", "ivy:", "openpilot:", "Langchain-Chatchat:", "Note: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-programming-language/?ref=shm"},
{"title": "Python - Data visualization tutorial - GeeksforGeeks", "h1": ["Python – Data visualization tutorial"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Data visualization Library", "Basic Plot", "Advanced Plot", "Data visualization Tools", "Interactive Dashboard", "Data visualization Library", "Basic Plot", "Advanced Plot", "Data visualization Tools", "Interactive Dashboard", "Matplotlib", "Seaborn", "Plotly", "What kind of Experience do you want to share?"], "strong": ["Data Visualization", "Recent Articles on Matplotlib !!!", "Recent Articles on Seaborn !!!​​​​​​​", "Bar Chart", "Histograms", "Box Plot", "3D Plots", "Recent Articles on Plotly !!!​​​​​​​", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-data-visualization-tutorial/?ref=footer"},
{"title": "Python Tutorial | Learn Python Programming", "h1": ["Python Tutorial"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", " What is Python?", "Python Online Compiler/Interpreter", "Python3", " Why Learn Python?", "Getting Started with Free Python Tutorial", "Python Environment Setup", "Python Basics", " Python Input/Output", "\r\n      ", "Python Data Types", "\r\n    ", "\r\n      ", "Python Variables", "\r\n    ", "\r\n      ", "Python Operators", "\r\n    ", "Python Control Flow", "Python Functions", "Python OOPs Concepts", "Python Exception Handling", "Python Collections", "Django Framework", "Data Science", "Data Analysis", "Python Numpy", "Python Pandas", "Machine Learning with Python", "Python GUI", "Modules in Python", "Working With Database", "Python Projects", "Recommended Python Tutorials", "Python Online Quiz", "Python Jobs", "Careers with Python", "Python Examples", "Applications of Python", "Trending Python Applications in 2024", "Python Tutorial – Prerequisites", "Frequent Asked Questions about Python"], "strong": ["Python Tutorial", "beginners", "experienced", "Python programming language", "latest Python 3", "Machine Learning applications", "Google, Amazon, Facebook, Instagram, Dropbox, Uber", "first", "Second", "RUN", "Output", "“Give this Python 3 code a try, and here’s a fun challenge: print ‘Hello World’ along with your name!”", "Python Setup", "Also, check", "Python", "Python Programming Examples", "Web development:", "Machine learning and artificial intelligence:", "Data science and data visualization:", "Desktop GUI:", "Web scraping:", "Game development:", "Business applications: ", "Audio and video applications:", "Embedded applications:", "NExT-GPT:", "ControlNet:", "ProPainter:", "ivy:", "openpilot:", "Langchain-Chatchat:", "Note: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-programming-language/?ref=footer"},
{"title": "Python Programs - Python Programming Example", "h1": ["Python Programs"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Topics :", "2>\r\n", "\r\n", "\r\n", "\r\n", "Basic Programs", "\r\n", "Array Programs", "\r\n", "List Programs", "\r\n", "Matrix Programs", "\r\n", "String Programs", "\r\n", "Dictionary Programs", "\r\n", "Tuple Programs", "\r\n", "\r\n\r\n", "\r\n", "\r\n", "Searching and Sorting Programs", "\r\n", "Pattern Printing", "\r\n", "Date-Time Programs", "\r\n", "Regex Programs", "\r\n", "File Handling Programs", "\r\n", "More Python Programs", "\r\n", "\r\n\r\n\r\n \r\n \r\n\r\n\r\n\r\n\r\n", "Basic Programs: ", "\r\n", "Array Programs:", "List Programs:", "Matrix Programs:", "String Programs:", "Dictionary Programs:", "Tuple Programs:", "Searching and Sorting Programs:", "Pattern Printing Programs:", "Date-Time Programs:", "Python Regex Programs:", "Python File Handling Programs:", "More Python Programs:"], "strong": ["Python Examples", "List", "Strings", "Tuple", "Python Programming Tutorial", "Recent Articles on Python !", "Python Output & Multiple Choice Questions", "Topics :", "More >>", "More >>", "More >>", "More >>", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-programming-examples/?ref=footer"},
{"title": "Python Projects - Beginner to Advanced - GeeksforGeeks", "h1": ["Python Projects – Beginner to Advanced"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "What kind of Experience do you want to share?"], "strong": ["Recent Python Projects !!", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-projects-beginner-to-advanced/?ref=footer"},
{"title": "ToDo webapp using Django - GeeksforGeeks", "h1": ["ToDo webapp using Django"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Python3", "Python3", "Python3", "Python3", "HTML", "What kind of Experience do you want to share?"], "strong": ["Modules required: ", "Basic setup", "Step 1: ", "Step 2:", "Let’s create an app now", "Step 3:", "Step 4:", "settings.py", "Step 5: ", "Step 6: ", "Step 7:", "Step 8: ", "Step 9: ", "Step 10: ", "Step 11: ", "Step 12: ", "Output:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-todo-webapp-using-django/?ref=ghm"},
{"title": "GeeksforGeeks | Python Videos", "h1": [], "h2": [], "strong": [], "link": "https://www.geeksforgeeks.org/videos/category/python/?ref=ghm"},
{"title": "Python-Tkinter Scrollbar - GeeksforGeeks", "h1": ["Python-Tkinter Scrollbar"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Scrollbar Widget", "What kind of Experience do you want to share?"], "strong": ["Note:", "Syntax:", "Parameters:", "master", "options", "Options:", "activebackground", "bg", "bd", "command", "cursor", "elementborderwidth", "Highlightbackground", "highlighcolor", "highlightthickness", "jump", "orient", "repeatdelay", "repeatinterval", "takefocus", "troughcolor", "width", "Methods:", "get()", "set(first, last)", "Example:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tkinter-scrollbar/"},
{"title": "Python Program to Find the Factorial of a Number - GeeksforGeeks", "h1": ["Python Program to Find the Factorial of a Number"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "python3", "python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Find the Factorial of a Number Using Recursive approach", "Output:", "Time Complexity: ", "Auxiliary Space:", "Find the Factorial of a Number Using Iterative approach", "Example 1:", "Output:", "Time Complexity:", "Auxiliary Space:", "Example 2: ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Find the Factorial of a Number Using One line Solution (Using Ternary operator): ", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Find the Factorial of a Number Using using In-built function ", "math.factorial()", "Syntax:", "Parameter:", "Returns:", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-for-factorial-of-a-number/"},
{"title": "Python | Django News App - GeeksforGeeks", "h1": ["Python | Django News App"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Django Basics", "Django view", "Django Model", "Django Forms", "Django URLS", "More topics on Django", "Projects", "Django Interview Questions and Answers", "Django Basics", "Django view", "Django Model", "Django Forms", "Django URLS", "More topics on Django", "Projects", "Django Interview Questions and Answers", "html", "What kind of Experience do you want to share?"], "strong": ["Django", "News Api", "Settings .py", "In views.py –", "templates", "urls.py", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-django-news-app/"},
{"title": "Sort the values of first list using second list in Python - GeeksforGeeks", "h1": ["Sort the values of first list using second list in Python"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "Python3", "Python3", "Python3", "note: install numpy module using command “pip install numpy”", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples: ", "Input : ", "Output : ", "Input : ", "Output :", "Approach : ", "Concept : ", "Output", "Time Complexity:", "Auxiliary Space:", "Approach 2: By using Dictionary, list comprehension, lambda function", "Output", "Time Complexity", "Auxiliary Space", "Approach 3: Using sort(),list() and set() methods", "Output", "Output", "Approach : Using the numpy.argsort() function with fancy indexing", "note: install numpy module using command “pip install numpy”", "Algorithm:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "DSA for Interview Preparation "], "link": "https://www.geeksforgeeks.org/python-sort-values-first-list-using-second-list/"},
{"title": "How to Add Two Numbers in Python - Easy Programs - GeeksforGeeks", "h1": ["How to Add Two Numbers in Python – Easy Programs"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Add Two Numbers with “+” Operator", "Python3", "Add Two Numbers with User Input", "Python3", "Add Two Numbers in Python Using Function", "Python3", "Add Two Numbers Using operator.add() Method", "Python3", "Add Two Number Using Lambda Function", "Python3", "Add Two Numbers Using Recursive Function", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Output:", "Output:", "Output", "Output", "Read More: ", "Operator Functions", "Output:", "Output:", "You can also check other operations:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-to-add-two-numbers/"},
{"title": "Python | Sort tuple list by Nth element of tuple - GeeksforGeeks", "h1": ["Python | Sort tuple list by Nth element of tuple"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using sort() + lambda", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #2: Using sort() + itemgetter()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3:  using sorted and custom function", "Output", "Time complexity: ", "Auxiliary space: ", "Method #4:  using Bubble sort algorithm", "Output", "Time complexity : O(n^2)", "Auxiliary Space: O(1)", "Method 5: Using the heapq.nsmallest() function", "heapq.nsmallest() ", "nsmallest() ", "sorted_list", "Output", "Time complexity: ", "Auxiliary space:", "Method#6: Using Recursive method.", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-sort-tuple-list-by-nth-element-of-tuple/"},
{"title": "Python Tkinter - Menubutton Widget - GeeksforGeeks", "h1": ["Python Tkinter – Menubutton Widget"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Menubutton widget", "What kind of Experience do you want to share?"], "strong": ["Note:", "Syntax:", "Parameters:", "master", "options", "Options:", "activebackground: ", "activeforeground: ", "bg: ", "bitmap: ", "bd: ", "anchor: ", "cursor: ", "disabledforeground: ", "direction: ", "fg: ", "height: ", "highlightcolor: ", "image: ", "justify: ", "menu: ", "padx: ", "pady: ", "relief: ", "state: ", "text: ", "underline: ", "textvariable: ", "width: ", "wraplength: ", "Example:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tkinter-menubutton-widget/"},
{"title": "Python Tkinter - SpinBox - GeeksforGeeks", "h1": ["Python Tkinter – SpinBox"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Spinbox widget", "What kind of Experience do you want to share?"], "strong": ["Note:", "Syntax:", "Parameters:", "master", "options", "Options:", "activebackground: ", "bg: ", "bd: ", "command: ", "cursor: ", "disabledforeground: ", "disabledbackground: ", "font: ", "fg: ", "format: ", "from_: ", "justify: ", "relief: ", "repeatdelay: ", "repeatinterval: ", "state: ", "textvariable: ", "to: ", "validate: ", "validatecommand: ", "values: ", "vcmd: ", "width: ", "wrap: ", "xscrollcommand: ", "Methods:", "delete(startindex, endindex): ", "get(startindex, endindex): ", "identify(x, y): ", "index(index): ", "insert(index, string): ", "invoke(element): ", "Example:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tkinter-spinbox/"},
{"title": "Python - Raise elements of tuple as power to another tuple - GeeksforGeeks", "h1": ["Python – Raise elements of tuple as power to another tuple"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using zip() + generator expression", "Output : ", "Time complexity: ", "Auxiliary space: ", "Method #2: Using map() + pow", "Output : ", "Time Complexity: ", "Auxiliary Space: ", "Method #3 : Using numpy", "Note: ", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Method #4 : Using operator.pow() method", "Approach ", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method #5: Using list comprehension:", "range(len(test_tup1))", "** ", "uple() ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 6: Using list comprehension is using the built-in map() function along with lambda function:", "map()", "test_tup1", "test_tup2", "res", "Output", "Time complexity: ", "Auxiliary space: ", "Method 7: Using Recursive method.", "Output", "Method 8: using a for loop", "Output", "Time complexity: ", "Auxiliary space: ", "Method 9: Using itertools:", "Output", "Time complexity: O(n),", "Space complexity: O(n),", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-raise-elements-of-tuple-as-power-to-another-tuple/"},
{"title": "Python | Check if given string can be formed by concatenating string elements of list - GeeksforGeeks", "h1": ["Python | Check if given string can be formed by concatenating string elements of list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Approach #1 : ", "Output:", "Approach #2 : ", "Output:", "Approach#3: Using String.replace() and loop: ", "Output:", "Output", "Approach#5: Using the lambda function", "checkList(str, lst)", "Algorithm: ", " i ", "lst", " i ", "str", "lst", "checkList ", "str", "lst", "Output", "Time Complexity: ", "Auxiliary Space: ", "METHOD 6:Using recursion", "APPROACH:", "ALGORITHM:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-check-if-given-string-can-be-formed-by-concatenating-string-elements-of-list/"},
{"title": "Python Set Exercise - GeeksforGeeks", "h1": ["Python Set Exercise"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Set Programs", "Conversion of Set Programs ", "Advance Set Programs", "What kind of Experience do you want to share?"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-set-exercise/"},
{"title": "Web crawling with Python - GeeksforGeeks", "h1": ["Web crawling with Python"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Web Crawling Using Python", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pre-requisites", "Output:", "Output:", "Output:", "Output:", "Output:", "Output:", "Complete Machine Learning & Data Science Program ", "JAVA Backend Development - Live ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-crawl-web-page-get-frequent-words/"},
{"title": "Python program to check the validity of a Password - GeeksforGeeks", "h1": ["Python program to check the validity of a Password"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Way 1:", "re", "Output", "Time complexity:", "Auxiliary space:", "Way 2:", "Output", "Time complexity:", "Auxiliary space:", "Way 3: ", "Output", "Time complexity :", "Auxiliary space :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-check-validity-password/"},
{"title": "Python program to read file word by word - GeeksforGeeks", "h1": ["Python program to read file word by word"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Read file word by word", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example 1:", "Text File     ", "Code Explanation:", "Output:", "Time Complexity: ", "Auxiliary Space:", "Example 2:", "Text file.", "Code Explanation", "Output:", "Time complexity: ", "Auxiliary space: ", "Master C Programming with Data Structures ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-read-file-word-by-word/"},
{"title": "Python | Remove False row from matrix - GeeksforGeeks", "h1": ["Python | Remove False row from matrix"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension + count() + len()", "Output", "Time complexity: ", "Auxiliary Space: ", "Method #2 : Using list comprehension + set()", "Output", "Time Complexity:", "Auxiliary Space: ", "Method #3 : Using * and len() method", "Output", "Time complexity:", "Auxiliary space:", "Method #4 : Using filter(),append(),lambda functions", "Output", "Time Complexity: O(N*M)", "Auxiliary Space: O(N*M)", "Method #5 : Using any()", "Output", "Time Complexity: O(N*M)", "Auxiliary Space: O(N*M)", "Method #6 : Using operator.countOf() method", "Output", "Time Complexity: O(N*M)", "Auxiliary Space: O(N*M)", "Method #7: Using a for loop and a new list", " all()", "False", "False", "Output", "Time complexity: ", "Auxiliary space: ", "Method#8: Using Recursive method.", "Output", "Time complexity: O(n*m)", "Space complexity: O(n*m)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-remove-false-row-from-matrix/?ref=previous_article"},
{"title": "Python | Remove False row from matrix - GeeksforGeeks", "h1": ["Python | Remove False row from matrix"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension + count() + len()", "Output", "Time complexity: ", "Auxiliary Space: ", "Method #2 : Using list comprehension + set()", "Output", "Time Complexity:", "Auxiliary Space: ", "Method #3 : Using * and len() method", "Output", "Time complexity:", "Auxiliary space:", "Method #4 : Using filter(),append(),lambda functions", "Output", "Time Complexity: O(N*M)", "Auxiliary Space: O(N*M)", "Method #5 : Using any()", "Output", "Time Complexity: O(N*M)", "Auxiliary Space: O(N*M)", "Method #6 : Using operator.countOf() method", "Output", "Time Complexity: O(N*M)", "Auxiliary Space: O(N*M)", "Method #7: Using a for loop and a new list", " all()", "False", "False", "Output", "Time complexity: ", "Auxiliary space: ", "Method#8: Using Recursive method.", "Output", "Time complexity: O(n*m)", "Space complexity: O(n*m)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-remove-false-row-from-matrix/?ref=ml_lbp"},
{"title": "Python Raise Keyword - GeeksforGeeks", "h1": ["Python Raise Keyword"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Raise Keyword", "Python Raise", " Syntax ", "Python3", "Python3", "Raising an exception Without Specifying Exception Class", "Python3", "Advantages of the raise keyword", "What kind of Experience do you want to share?"], "strong": ["Python", " raise Keyword", " Syntax ", "Checking whether an integer is odd or even", "Output:", "‘ValueError’ ", "‘ZeroDivisionError’ ", "Syntax:", "Checking the error type", "Output", "Raising an exception Without Specifying Exception Class", "Example", "Output:", "Advantages of the raise keyword", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Master Java Programming - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-raise-keyword/"},
{"title": "Python | Maximum sum of elements of list in a list of lists - GeeksforGeeks", "h1": ["Python | Maximum sum of elements of list in a list of lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "Python", "Python", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method 1 : Traversal of list in lists", "max function", "Output", "Time Complexity:", "Auxiliary Space:", "Method 2 : Traversal of list", "Output", "Time Complexity:", "Auxiliary Space: ", "Method 3 : Sum and Max function", "sum(max(list1, key=sum))", "key=sum", "max(list1, key=sum)", "sum(max(list1, key=sum))", "Output", "Time Complexity:", "Auxiliary Space:", "Method 4 : Using sum() and sort() methods", "Output", "Time Complexity : O(NlogN)", "Auxiliary Space : O(N)", "Method 5 : Using reduce()", "Output", "Time complexity: O(n*m) where n is the number of lists and m is the maximum size of the list.", "Space complexity: O(1)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-maximum-sum-elements-list-list-lists/"},
{"title": "Python | Get unique tuples from list - GeeksforGeeks", "h1": ["Python | Get unique tuples from list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list() + set()", "Output : ", "Method #2 : Using dict.fromkeys() + list()", "Output : ", "Method #3 Use a loop ", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-get-unique-tuples-from-list/"},
{"title": "Python | Replace tuple according to Nth tuple element - GeeksforGeeks", "h1": ["Python | Replace tuple according to Nth tuple element"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using loop + enumerate()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #2: Using list comprehension", "Output", "Time complexity: ", "Auxiliary space: ", "Method #3 : Using the map() function", "Output", "Time complexity: ", "Auxiliary space: ", "Method #4:  Use the filter() function along with a lambda function ", "filter() ", "test_list", "repl_rec", "list() ", "repl_rec", "+.", "Output", "Time complexity:", "Auxiliary space: ", "Method #5: Using a simple loop.", "test_list", "repl_rec", "res", "test_list", "x", "test_list", "x", "2", "x", "repl_rec", "x", "res", "Output", "Time complexity: ", "Auxiliary space: ", "Method #6: Using itertools.starmap().", "Output", "Time Complexity: ", "Auxiliary Space:", "Method #7: Using reduce() function from functools module", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-replace-tuple-according-to-nth-tuple-element/"},
{"title": "Python program to add two Octal numbers - GeeksforGeeks", "h1": ["Python program to add two Octal numbers"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input:", "Output:", "Input:", "Output:", "Approach:", "oct()", "int()", "Below are the implementations based on the above explanation:", "Example 1:", "Output", "Example 2:", "Output", "Example 3:", "Output", "Time Complexity : ", "Space Complexity :", "Output ", "Time Complexity : ", "Space Complexity :", "Data Science Training Program ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-add-two-octal-numbers/"},
{"title": "Python Program to add two hexadecimal numbers - GeeksforGeeks", "h1": ["Python Program to add two hexadecimal numbers"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input:", "Output:", "Explanation:", "Input:", "Output:", "Explanation:", "Approach:", "hex() ", "int() ", "Below are the implementations based on the above approach:", "Method 1:", "Output", "Method 2:", "Output", "Method 3:", "Output", "Time complexity:", "Space complexity: ", "Output", "Time complexity: ", "Space complexity: ", "Method 5: Using manual addition of hexadecimal digits:", "Steps:", "0", "Output", "Time Complexity:", "Space Complexity:", "Method 6: Using reduce():", " Algorithm:", "Output", "The time complexity : O(n), ", "The space complexity : O(n),", "Data Science Training Program ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-add-two-hexadecimal-numbers/"},
{"title": "Python Program To Add Two Numbers Represented By Linked Lists- Set 1 - GeeksforGeeks", "h1": ["Python Program To Add Two Numbers Represented By Linked Lists- Set 1"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "What kind of Experience do you want to share?"], "strong": ["Example", "Input:", "Output:", "Explanation:", "Input:", "Output:", "Explanation:", "PRACTICE", "Approach", "The steps are:", "Output:", "Complexity Analysis:", "Time Complexity:", "Space Complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-add-two-numbers-represented-by-linked-lists-set-1/"},
{"title": "Python - Extract Preceding Record from list values - GeeksforGeeks", "h1": ["Python – Extract Preceding Record from list values"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Input", "Output", "Method #1 : Using zip() + enumerate() + loop", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #2 : Using list comprehension + enumerate()", "Output", "Time complexity:", "Auxiliary space:", "Method #3 : Using for loop", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 3: Using enumerate() and a loop:", "test_list", " enumerate()", " zip() ", "res", "res", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #6: Using a dictionary to store the values and their indices", "enumerate() ", " 0", " 0", " index-1", "None", "Output", "Method #7: Using itertools.groupby()", "Output", "Method #8: Using numpy:", "Output:", "Time complexity:", "Space complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-extract-preceding-record-from-list-values/?ref=ml_lbp"},
{"title": "Python Program to Find the Gcd of Two Numbers - GeeksforGeeks", "h1": ["Python Program to Find the Gcd of Two Numbers"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python Program to Find the Gcd of Two Numbers Using STL", "Syntax:", "Parameter:", "x ", "y ", "Returns:", "Exceptions:", "Output", "Time complexity:", "Auxiliary Space", "Python Program to Find the Gcd of Two Numbers Using Recursion ", "Output", "Time complexity:", "Auxiliary Space", "Find the Gcd of Two Numbers Using Euclidean Algorithm", "Output", "Time complexity: ", "Auxiliary Space: ", "Output:", "Data Science Training Program ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-find-the-gcd-of-two-numbers/"},
{"title": "Python program to find files having a particular extension using RegEx - GeeksforGeeks", "h1": ["Python program to find files having a particular extension using RegEx"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisite:", "re", "Approach:", "“.xml”", "re.search()", "Output:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-find-files-having-a-particular-extension-using-regex/"},
{"title": "Python program to add two binary numbers - GeeksforGeeks", "h1": ["Python program to add two binary numbers"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input:", "Output:", "Input:", "Output:", "Approach:", "Naive Approach: ", "Using inbuilt function:", "bin()", "int()", "Method 1:", "Output", "Time complexity ", "Space Complexity : ", "Method 2:", "int() ", "bin() ", "Example 1:", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Example 2:", "Output", "Time complexity", "Space Complexity ", "Output ", "Time complexity : ", "Space Complexity :", "METHOD 3:Using loop", "APPROACH:", "ALGORITHM:", "Output", "Time Complexity:", "Space Complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-add-two-binary-numbers/"},
{"title": "Python Lambda Functions - GeeksforGeeks", "h1": ["Python Lambda Functions"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Lambda Function Syntax", "Python Lambda Function Example", "Python3", "Use of Lambda Function in Python", "Python3", "Python3", "Practical Uses of Python lambda function", "Python3", "Python3", "Python3", "Using lambda() Function with filter()", "Python3", "Python3", "Using lambda() Function with map()", "Python3", "Python3", "Using lambda() Function with reduce()", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python Lambda Functions", "Syntax: ", "Python Lambda Function Example", "upper", "upper", "upper()", "Output:", "‘format_numric’", "Output:", "‘", "def'", "‘", "def'", "Output:", "cube()", "lambda_cube()", "With lambda function", "Without lambda function", "item()", "is_even_list", "Output:", "Max", "Output:", "‘", "List'", "Output:", "Filter out all odd numbers using filter() and lambda function", "True", "False", "Output:", "Filter all people having age more than 18, using lambda and filter() function", "‘", "filter'", "Output:", "Using lambda() Function with map()", "Multiply all elements of a list by 2 using lambda and map() function", "‘", "map'", "Output:", "Transform all elements of a list to upper case using lambda and map() function", "‘", "map'", "Output:", "Using lambda() Function with reduce()", "functools ", "A sum of all elements in a list using lambda and reduce() function", "‘", "reduce'", "‘", "functools'", "‘", "reduce'", "Output:", "Find the maximum element in a list using lambda and reduce() function", "‘", "functools'", "‘", "lis'", "‘", "reduce'", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-lambda-anonymous-functions-filter-map-reduce/"},
{"title": "Python input() Function - GeeksforGeeks", "h1": ["Python input() Function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "input() Function ", "Python input() Function Example", "Python3", "Python", "Python", "Python", "What kind of Experience do you want to share?"], "strong": ["Python input() function", "input() Function ", "Syntax:", "prompt [optional]: ", "Returns:", "Output:", "Example 1: Taking ", "Name and Age of the user as input and printing it", "Output:", "Python input()", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-input-function/"},
{"title": "Python Operators - GeeksforGeeks", "h1": ["Python Operators"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Types of Operators in Python", "Arithmetic Operators in Python", "Example of Arithmetic Operators in Python", "Python", "Python", "Python", "Comparison", " Operators in Python", "Python", "Logical Operators in Python", "Python", "Bitwise Operators in Python", "Python", "Assignment Operators in Python", "Python", "Identity Operators in Python", "Python", "Membership Operators in Python", "Python", "Ternary Operator in Python", "Python", "Precedence and Associativity of Operators in Python", "Python", "Python", "Python Operator Exercise Questions", "Python", "Python", "What kind of Experience do you want to share?"], "strong": ["Python operators. ", "Arithmetic Operators in Python", " addition, subtraction, multiplication", "division", "In ", " Division Operators ", "Float division", "Example:", "’10/2′", "‘5.0’", "‘-10/2’", "‘-5.0’", "Output:", "Integer division( Floor division)", "Example:", "‘//’", "’10//3′", "‘3’", "‘-5//2’", "‘-3’", "5.0//2′", "‘2.0’", "‘-5.0//2’", "‘-3.0’", "Output:", "Arithmetic Operators With Addition, Subtraction, Multiplication, Modulo and Power", "Example:", "‘a’", "‘b’", "(‘+’)", "(‘-‘)", "(‘*’)", "(‘%’)", "‘b (**)’", "Output:", "Note:", " Operators in Python", "True", "False", "Example of Comparison Operators in Python", "Example:", "‘a’", "‘b’", "‘a’", "‘b’", "Output", "Logical Operators in Python", "Logical AND", "Logical OR", " Logical NOT", "Example of Logical Operators in Python", "Example:", "‘a’", "‘b’", "‘and’", "‘or’", "‘a’", "‘not’", "Output", "Bitwise Operators in Python", "Bitwise Operators in Python", "Example:", "‘a’", "‘b’", "AND (&)", " OR (|)", "NOT (~)", "XOR (^)", "right shift (>>)", "left shift (<<)", "Output", "Assignment Operators in Python", "Assignment Operators in Python", "Example:", "‘a’", "‘b’", "‘b’", "‘b’", "Output", "Identity Operators in Python", "is", "is not", "is", "is not", "Example Identity Operators in Python", "Example:", "‘a’", "‘b’", "‘a’", "‘c’", "‘c’", "‘a’", "Output", "Membership Operators in Python", "in", "not in", "in", "not in", "Examples of Membership Operators in Python", "Example:", "‘x’", "‘y’", "‘x’", "‘y’", "‘in’", "‘not in’", "Output", "Ternary Operator in Python", "single line", "Syntax :  ", "‘a’", "‘b’", "‘min’", "‘min’", "Output:", "Operator Precedence in Python", "Example:", "10 + 20 * 30", "‘name’", "‘age’", "Alex” ", "“Hello! Welcome.”", "Output", "Operator Associativity in Python", "Example:", "Output", "Q1. ", "Output", "Sum: 7", "Difference: 3", "Product: 10", "Quotient: 2.5", "Remainder: 1", "Q2. ", "Output", "The second number is greater.", "Explore more Exercises: ", "Python Operators practice exercise", "Master Java Programming - Complete Beginner to Advanced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-operators/"},
{"title": "Python | PanedWindow Widget in Tkinter - GeeksforGeeks", "h1": ["Python | PanedWindow Widget in Tkinter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "What kind of Experience do you want to share?"], "strong": ["PanedWindow", "panes", "sashes", "Syntax:", "Parameters: ", "master", "options:", "Code #1:", "Output:", "Code #2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-panedwindow-widget-in-tkinter/"},
{"title": "Python | Menu widget in Tkinter - GeeksforGeeks", "h1": ["Python | Menu widget in Tkinter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "What kind of Experience do you want to share?"], "strong": ["Menus", "Output:", "Note:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-menu-widget-in-tkinter/"},
{"title": "Python Bokeh – Plotting glyphs over a Google Map - GeeksforGeeks", "h1": ["Python Bokeh – Plotting glyphs over a Google Map"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "gmap()", "GMapOptions()", "Let us see how to plot glyphs over a Google Map :", "What kind of Experience do you want to share?"], "strong": ["Syntax : ", "Parameters : ", "google_api_key : ", "map_options : ", "active_drag  : ", "active_inspect  : ", "active_scroll  : ", "active_tap  : ", "title : ", "tools  : ", "x_axis_label  : ", "x_axis_location  : ", "x_minor_ticks  : ", "y_axis_label  : ", "y_axis_location  : ", "y_minor_ticks  : ", "Returns : ", "Syntax : ", "Parameters : ", "lat : ", "lng : ", "map_type : ", "name : ", "scale_control : ", "styles : ", "subscribed_events : ", "tags : ", "tilt : ", "zoom : ", "apply_theme : ", "Returns : ", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-bokeh-plotting-glyphs-over-a-google-map/"},
{"title": "Python Bokeh - Plotting Line Segments on a Graph - GeeksforGeeks", "h1": ["Python Bokeh – Plotting Line Segments on a Graph"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "plotting.figure.segment()", "What kind of Experience do you want to share?"], "strong": ["Syntax : ", "Parameters : ", "x0 : ", "y0 : ", "x1 : ", "y1 : ", "Returns : ", "Example 1 : ", "Output : ", "Example 2 : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-bokeh-plotting-line-segments-on-a-graph/"},
{"title": "Python Easy-Login Module - GeeksforGeeks", "h1": ["Python Easy-Login Module"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "python3", "What kind of Experience do you want to share?"], "strong": ["Easy-Login", "Installation", "Web Drivers", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-easy-login-module/"},
{"title": "Python Bokeh – Plot for all Types of Google Maps ( roadmap, satellite, hybrid, terrain) - GeeksforGeeks", "h1": ["Python Bokeh – Plot for all Types of Google Maps ( roadmap, satellite, hybrid, terrain)"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", " Roadmap : ", "Satellite : ", " Hybrid : ", "Terrain : ", "What kind of Experience do you want to share?"], "strong": ["roadmap, satellite, hybrid, terrain", "In order to use these maps we have to :", "Output :", "Output :", "Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-bokeh-plot-for-all-types-of-google-maps-roadmap-satellite-hybrid-terrain/"},
{"title": "Python Program to print hollow half diamond hash pattern - GeeksforGeeks", "h1": ["Python Program to print hollow half diamond hash pattern"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["N", "Examples:", "Input :", "Output :", "Input :", "Output :", "Approach:", "Upper part:", "Lower part:", "Below is the implementation:", "Output:", "Time Complexity:", "Space Complexity", "METHOD 2:Using string formatting and list comprehension", "APPROACH:", "ALGORITHM:", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-print-hollow-half-diamond-hash-pattern/?ref=lbp"},
{"title": "Python Program to print a number diamond of any given size N in Rangoli Style - GeeksforGeeks", "h1": ["Python Program to print a number diamond of any given size N in Rangoli Style"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Input :", "Output :", "Approach:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-print-a-number-diamond-of-any-given-size-n-in-rangoli-style/?ref=lbp"},
{"title": "Python program to print Pascal's Triangle - GeeksforGeeks", "h1": ["Python  program to print Pascal’s Triangle"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input", "Output:", "Method 1: ", "Algorithm:", "Implementation:", "Output:", "Time complexity:", "Auxiliary space", "Method 2: ", "Implementations:", "Output:", "Time complexity:", "Auxiliary Space", "Method 3:", "Implementation:", "Output:", "Time Complexity: ", "Auxiliary Space", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-program-to-print-pascals-triangle/?ref=lbp"},
{"title": "Python program to print the Inverted heart pattern - GeeksforGeeks", "h1": ["Python program to print the Inverted heart pattern"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input:", "Output:", "Input:", "Output:", "Approach:", "Output:", " Time complexity: ", "Auxiliary Space: ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-print-the-inverted-heart-pattern/?ref=lbp"},
{"title": "Python Bokeh - Plotting Hexagon Tiles on a Graph - GeeksforGeeks", "h1": ["Python Bokeh – Plotting Hexagon Tiles on a Graph"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "plotting.figure.hex_tile()", "What kind of Experience do you want to share?"], "strong": ["Syntax : ", "Parameters : ", "q : ", "r : ", "aspect_scale : ", "fill_alpha : ", "fill_color : ", "line_alpha : ", "line_cap : ", "line_color : ", "line_dash : ", "line_dash_offset : ", "line_join : ", "line_width : ", "name : ", "orientation : ", "scale : ", "size : ", "tags : ", "Other Parameters : ", "alpha : ", "color : ", "legend_field : ", "legend_group : ", "legend_label : ", "muted : ", "name : ", "source  : ", "view : ", "visible : ", "x_range_name : ", "y_range_name : ", "level : ", "Returns : ", "Example 1 : ", "Output : ", "Example 2 : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-bokeh-plotting-hexagon-tiles-on-a-graph/"},
{"title": "Python program to count Even and Odd numbers in a List - GeeksforGeeks", "h1": ["Python program to count Even and Odd numbers in a List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python", "note: install numpy module using command “pip install numpy”", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input: ", "Output: ", "Input: ", "Output: ", "Example 1:", "Output:", "Time Complexity: ", "Auxiliary Space:", "Example 2:", "Output:", "Time Complexity: ", "Auxiliary Space:", "Example 3:", "Output:", "Time Complexity: O(n)", "Space Complexity: O(1)", "Example 4:", "Output:", "Time Complexity: ", "Auxiliary Space:", "Example 5: ", "Output", "Time Complexity: ", "Auxiliary Space:", "Example 6: ", "Output", "Time Complexity: ", "Auxiliary Space:", "Example 7: ", "Output", "Time Complexity: ", "Auxiliary Space:", "Example 8", "Output", "Time Complexity: ", "Auxiliary Space:", "Output", "Time Complexity: ", "Auxiliary Space:", "Output:", "Time Complexity: ", "Auxiliary Space:", "Method: Using Numpy.where() function : ", "Algorithm:", "Output:", "Method: Using ", "Sum", " and ", "len ", "function  ", "Approach: ", "Output:", "Time Complexity: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Master Java Programming - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-program-to-count-even-and-odd-numbers-in-a-list/?ref=lbp"},
{"title": "Python - Print Heart Pattern - GeeksforGeeks", "h1": ["Python – Print Heart Pattern"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "What kind of Experience do you want to share?"], "strong": ["Note:", "Output:", "Time complexity:", "Auxiliary Space: ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-print-heart-pattern/?ref=lbp"},
{"title": "Python program to display half diamond pattern of numbers with star border - GeeksforGeeks", "h1": ["Python program to display half diamond pattern of numbers with star border"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input: n = 5", "Output:", "Input: n = 3", "Output:", "Approach:", "Below is the implementation of the above pattern:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-display-half-diamond-pattern-of-numbers-with-star-border/?ref=lbp"},
{"title": "Python | Find fibonacci series upto n using lambda - GeeksforGeeks", "h1": ["Python | Find fibonacci series upto n using lambda"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Find the series of fibonacci numbers using lambda function.", "Code #1 : By using lambda and reduce method", "Output:", "Explanation : ", "x[-1]", "x[-2]", "reduce()", "Code #2 : By using lambda and map function", "Output:", "Explanation :", "fib_list", "Time complexity: ", "Auxiliary Space:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-find-fibonacci-series-upto-n-using-lambda/?ref=lbp"},
{"title": "Python | Program that matches a word containing 'g' followed by one or more e's using regex - GeeksforGeeks", "h1": ["Python | Program that matches a word containing ‘g’ followed by one or more e’s using regex"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisites :", "Examples :", "Input :", "Output :", "Input :", "Output :", "Approach :", "\\w – ", "* ", "+ ", "Output :", "Time complexity:  O(n)", "Auxiliary Space: O(1),", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-that-matches-a-word-containing-g-followed-by-one-or-more-es-using-regex/"},
{"title": "Python | Sorting string using order defined by another string - GeeksforGeeks", "h1": ["Python | Sorting string using order defined by another string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input : pat = \"asbcklfdmegnot\", str = \"eksge\"", "Output : str = \"geeks\"", "Input : pat = \"mgewqnasibkldjxruohypzcftv\", str = \"niocgd\"", "Output : str = \"coding\"", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master Java Programming - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-sorting-string-using-order-defined-by-another-string/?ref=lbp"},
{"title": "Python - List files in directory with extension - GeeksforGeeks", "h1": ["Python – List files in directory with extension"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Modules Used", "Directory Structure in use:", "Method 1: Using `os` module", "Python", "Python3", "Python", "Method 2: Using `glob` module", "Python", "Python", "What kind of Experience do you want to share?"], "strong": ["files/pathnames", "os.listdir()", "os.walk()", "Syntax:", " ", "Syntax:", "Example 1:", "root/home/project", "Example 1.5: ", "Output :", "Example 2: ", "root/home/project", "Output:", "glob.glob()", "Syntax:", " ", "*", "os.listdir()", "Example 1:", "root/home/project/code", "Output:", "Example 2:", "root/home/project/code/database_models", "Output:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-list-files-in-directory-with-extension/"},
{"title": "Python program to find the type of IP Address using Regex - GeeksforGeeks", "h1": ["Python program to find the type of IP Address using Regex"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisite:", "IPv4", "IPv6", "What is an IP (Internet Protocol) Address?", "IPv4", "IPv6", "IPv4", "IPv6", "Examples:", "Input:", "Output:", "Input:", "Output:", "Input:", "Output:", "Approach:", "Below is the implementation of the above approach:", "Output:", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-program-to-find-the-type-of-ip-address-using-regex/"},
{"title": "Python | Sort and store files with same extension - GeeksforGeeks", "h1": ["Python | Sort and store files with same extension"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Output: ", "Master C Programming with Data Structures ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-sort-and-store-files-with-same-extension/"},
{"title": "Python Tkinter - Validating Entry Widget - GeeksforGeeks", "h1": ["Python Tkinter – Validating Entry Widget"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "What kind of Experience do you want to share?"], "strong": ["Import tkinter module", "Import tkinter submodules", "Define the “callback” function", "Explanation", "Creating the parent window", "Syntax: ", "Parameter: ", "Explanation", "Creating Entry widget", "Syntax: ", "Parameter: ", "master: ", "options: ", "Return Value: ", "Explanation", "Specify the position of Entry widget within the parent window", "Syntax: ", "Parameter: ", "x: ", "y: ", "Explanation:", "Register the callback function", "Syntax: ", "Parameter: ", "function: ", "Return Value: ", "Explanation", "Call the callback function to validate the input in Entry widget ", "Syntax: ", "Parameter: ", "validate: ", "validatecommand: ", "Explanation", "Run the application", "Syntax: mainloop()", "Explanation", "Complete code for validation of Entry widget", "Output:", "Explanation", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tkinter-validating-entry-widget/"},
{"title": "Python Selenium - Find element by text - GeeksforGeeks", "h1": ["Python Selenium – Find element by text"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "HTML", "Python", "Python3", "Python3", "Python3", "Python3", "Python", "More locators for locating single elements:", "What kind of Experience do you want to share?"], "strong": ["Software Testing", "Automation Testing.", "Syntax: ", "Parameters:", "tag:", "word:", "Example: ", "Step 1: ", "Step 3: ", "Step 4: ", "Step 5: ", "Step 6: ", "Below is the full implementation:", "Output:", "More locators for locating single elements:", "Locators", "Description", "find_element_by_id ", "find_element_by_name", " ", "find_element_by_xpath", " ", "find_element_by_link_text ", "find_element_by_partial_link_text ", "find_element_by_tag_name", "find_element_by_class_name", " ", "find_element_by_css_selector ", "Data Structures & Algorithms in Python - Self Paced ", "GATE Data Science and Artificial Intelligence 2025 ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-selenium-find-element-by-text/?ref=lbp"},
{"title": "Python Selenium - Find Button by text - GeeksforGeeks", "h1": ["Python Selenium – Find Button by text"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Module Needed:", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "URL:", "Module Needed:", "Selenium:", "Setup Web Drivers:", "Firefox", "Safari", "Chrome", "Find xpath of the button:", "Method 1: Using Inspect Element", "Method 2: Using Chrome Extension to find xpath easily: ", "Approach:", "Finding button by text-", "(i) Using normalize-space() method:", "(ii) Using text() method:", "Note:", "normalize-space()", "Implementation:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Guide to Software Testing and Automation: Master Java, Selenium and Cucumber "], "link": "https://www.geeksforgeeks.org/python-selenium-find-button-by-text/?ref=lbp"},
{"title": "Python NumPy - Practice Exercises, Questions, and Solutions - GeeksforGeeks", "h1": ["Python NumPy – Practice Exercises, Questions, and Solutions"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Questions on NumPy Array", "Questions on NumPy Matrix", "Questions on NumPy Indexing", "Questions on NumPy Linear Algebra", "Questions on NumPy Random", "Questions on NumPy Sorting and Searching", "Questions on NumPy Mathematics", "Questions on NumPy Statistics", "Questions on Polynomial", "Questions on NumPy Strings", "More Questions on NumPy", "What kind of Experience do you want to share?"], "strong": ["Python NumPy", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-numpy-practice-exercises-questions-and-solutions/?ref=lbp"},
{"title": "Python - Get number of characters, words, spaces and lines in a file - GeeksforGeeks", "h1": ["Python – Get number of characters, words, spaces and lines in a file"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Get the number of characters, words, spaces, and lines in a file", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Count the Number of Lines, Words, and Characters using the Native Method", "Output:", "Time complexity: ", "Space complexity:", "Find the number of characters in a file using Python", "Output:", "Time complexity:", "Space complexity:", "Master C Programming with Data Structures ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-get-number-of-characters-words-spaces-and-lines-in-a-file/?ref=lbp"},
{"title": "Python Bokeh-plotting-figure-class Archives - GeeksforGeeks", "h1": ["Python Bokeh-plotting-figure-class"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/tag/python-bokeh-plotting-figure-class/"},
{"title": "Python Bokeh - Plotting Dots on a Graph - GeeksforGeeks", "h1": ["Python Bokeh – Plotting Dots on a Graph"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "plotting.figure.dot()", "What kind of Experience do you want to share?"], "strong": ["Syntax : ", "Parameters : ", "x : ", "y : ", "size : ", "angle : ", "angle_units : ", "fill_alpha : ", "fill_color : ", "line_alpha : ", "line_cap : ", "line_color : ", "line_dash : ", "line_dash_offset : ", "line_join : ", "line_width : ", "name : ", "tags : ", "Other Parameters : ", "alpha : ", "color : ", "legend_field : ", "legend_group : ", "legend_label : ", "muted : ", "name : ", "source  : ", "view : ", "visible : ", "x_range_name : ", "y_range_name : ", "level : ", "Returns : ", "Example 1 :", "Output : ", "Example 2 :", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-bokeh-plotting-dots-on-a-graph/"},
{"title": "Python | Numpy matrix.sum() - GeeksforGeeks", "h1": ["Python | Numpy matrix.sum()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["matrix.sum()", "Syntax : ", "Return : ", "Example #1 :", "Example #2 :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-numpy-matrix-sum/"},
{"title": "Python Program to Count Vowels, Lines, Characters in Text File - GeeksforGeeks", "h1": ["Python Program to Count Vowels, Lines, Characters in Text File"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Approach", "Below is the full Implementation:", "Python3", "What kind of Experience do you want to share?"], "strong": ["open() ", "Output:", "Text File:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-program-to-count-vowels-lines-characters-in-text-file/"},
{"title": "Python String split() - GeeksforGeeks", "h1": ["Python String split()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python String split() Method Syntax", "What is the list split() Method?", "How to use list split() method in Python?", "Python3", "How does split() work when maxsplit is specified?", "Python3", "How to Parse a String in Python using the split() Method?", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python String split() method", "Example:", "Output:", "Syntax:", "Parameters", "separator:", "maxsplit:", "Returns", "Example:", "‘text’", "‘geeks for geeks’", "text’ with no parameters", "whitespace.", "Output", "maxsplit", "Example:", "split()", "maxsplit", " maxsplit", " 0", " maxsplit 4", "Output", "Explanation:", "‘text’", "Output", "Check More: ", "String Methods ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-string-split/"},
{"title": "Python program to find IP Address - GeeksforGeeks", "h1": ["Python program to find IP Address"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Get IP address of your computer in Python", "Using the socket library to find IP Address", "Python3", "Python3", "Python", "Using the os module to find IP Address", "Python3", "Using the request module to find IP Address", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Step 1: ", "Step 2: ", "Below is the complete Implementation", "Output:", "Output:", "Output:", "Output:", "Related Post :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "GATE Computer Science & Information Technology 2025 "], "link": "https://www.geeksforgeeks.org/python-program-find-ip-address/"},
{"title": "Python | Reverse a numpy array - GeeksforGeeks", "h1": ["Python | Reverse a numpy array"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Using ", "flip() function", " to ", "Reverse a Numpy array", "Python3", "Using the ", "list slicing", " method to reverse a Numpy array", "Python3", "Using ", "flipud function", " to Reverse a Numpy array ", "Python3", "What kind of Experience do you want to share?"], "strong": ["Reverse a Numpy array", "Output:", "Using the ", "list slicing", " method to reverse a Numpy array", "Output:", "Using ", "flipud function", " to Reverse a Numpy array ", "Output:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-reverse-a-numpy-array/"},
{"title": "Python string | strip() - GeeksforGeeks", "h1": ["Python string | strip()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python strip() Method Syntax", "Purpose of the Python Strip() Function", "String strip() in Python Example", "Python3", "Python3", "Python3", "Python3", "Python3", "Practical Application", "Python", "What kind of Experience do you want to share?"], "strong": ["strip()", "Syntax: ", "Parameter: ", "chars", "Return Value:", "Example", "Output", "Output", "Output", "Input", "Output", "Output ", " ", "Input", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-string-strip/"},
{"title": "Python - Get file id of windows file - GeeksforGeeks", "h1": ["Python – Get file id of windows file"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["File ID", "Windows Command Processor", "Output:", "Output:", "Explanation:", "Error: The System cannot find the file specified.", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-get-file-id-of-windows-file/?ref=lbp"},
{"title": "Python | Numpy matrix.max() - GeeksforGeeks", "h1": ["Python | Numpy matrix.max()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Numpy matrix.max()", "maximum", "Syntax : ", "Return : ", "Example #1 :", "Example #2 :", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-numpy-matrix-max/"},
{"title": "Python | Numpy matrix.round() - GeeksforGeeks", "h1": ["Python | Numpy matrix.round()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Numpy matrix.round()", "round off", "Syntax :", "Return :", "Example #1 :", "Example #2 :", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-numpy-matrix-round/"},
{"title": "Python | Flatten a 2d numpy array into 1d array - GeeksforGeeks", "h1": ["Python | Flatten a 2d numpy array into 1d array"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using np.flatten()", "Output:", "Time complexity: ", "Auxiliary space:", "Method #2: Using np.ravel()", "Output:", "Method #3: Using np.reshape()", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-flatten-a-2d-numpy-array-into-1d-array/"},
{"title": "Python Bokeh - Plotting Dashes on a Graph - GeeksforGeeks", "h1": ["Python Bokeh – Plotting Dashes on a Graph"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "plotting.figure.dash()", "What kind of Experience do you want to share?"], "strong": ["Syntax : ", "Parameters : ", "x : ", "y : ", "size : ", "angle : ", "angle_units : ", "fill_alpha : ", "fill_color : ", "line_alpha : ", "line_cap : ", "line_color : ", "line_dash : ", "line_dash_offset : ", "line_join : ", "line_width : ", "name : ", "tags : ", "Other Parameters : ", "alpha : ", "color : ", "legend_field : ", "legend_group : ", "legend_label : ", "muted : ", "name : ", "source  : ", "view : ", "visible : ", "x_range_name : ", "y_range_name : ", "level : ", "Returns : ", "Example 1 :", "Output : ", "Example 2 :", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-bokeh-plotting-dashes-on-a-graph/"},
{"title": "Python Bokeh - Plotting Diamond Crosses on a Graph - GeeksforGeeks", "h1": ["Python Bokeh – Plotting Diamond Crosses on a Graph"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "plotting.figure.diamond_cross()", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax : ", "Parameters : ", "x : ", "y : ", "size : ", "angle : ", "angle_units : ", "fill_alpha : ", "fill_color : ", "line_alpha : ", "line_cap : ", "line_color : ", "line_dash : ", "line_dash_offset : ", "line_join : ", "line_width : ", "name : ", "tags : ", "Other Parameters : ", "alpha : ", "color : ", "legend_field : ", "legend_group : ", "legend_label : ", "muted : ", "name : ", "source : ", "view : ", "visible : ", "x_range_name : ", "y_range_name : ", "level : ", "Returns : ", "Example 1 :", "Output : ", "Example 2 :", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-bokeh-plotting-diamond-crosses-on-a-graph/"},
{"title": "Python | Find Mean of a List of Numpy Array - GeeksforGeeks", "h1": ["Python | Find Mean of a List of Numpy Array"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using np.mean()", "Method #2: Using np.average()", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-find-mean-of-a-list-of-numpy-array/"},
{"title": "Python | Numpy numpy.ndarray.__ge__() - GeeksforGeeks", "h1": ["Python | Numpy numpy.ndarray.__ge__()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["numpy.ndarray.__ge__()", "Numpy", "greater then or equal", "True", "False", "Syntax:", "Return:", "Example #1 :", "Example #2 :", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-numpy-numpy-ndarray-__ge__/"},
{"title": "Python | Numpy numpy.ndarray.__gt__() - GeeksforGeeks", "h1": ["Python | Numpy numpy.ndarray.__gt__()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["numpy.ndarray.__gt__()", "Numpy", "greater then", "True", "False", "Syntax:", "Return: ", "Example #1 :", "Example #2 :", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-numpy-numpy-ndarray-__gt__/"},
{"title": "Python | Numpy numpy.transpose() - GeeksforGeeks", "h1": ["Python | Numpy numpy.transpose()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Numpy numpy.transpose()", "numpy.transpose()", "Parameters:", "axes :", "(0, 1)", "(1, 0)", "Returns:", "Example #1 :", "Output:", "Example #2 :", "Output:", "Method 2: ", " ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-numpy-numpy-transpose/"},
{"title": "Python | Numpy matrix.take() - GeeksforGeeks", "h1": ["Python | Numpy matrix.take()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Numpy matrix.take()", "Syntax :", "Return :", "Return matrix of selected indexes", "Example #1 :", "Example #2 :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-numpy-matrix-take/"},
{"title": "Python Exercises, Practice Questions and Solutions - GeeksforGeeks", "h1": ["Python Exercises, Practice Questions and Solutions"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "List of Python Programming Exercises", "Python List Exercises", "Python String Exercises", "Python Tuple Exercises", "Python Dictionary Exercises", "Python Set Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "NumPy Exercises", "Pandas Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Projects", "Conclusion", "What kind of Experience do you want to share?"], "strong": ["Python Exercise: ", "Python", " ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-exercises-practice-questions-and-solutions/"},
{"title": "Python program to find GSoC organisations that use a Particular Programming Language - GeeksforGeeks", "h1": ["Python program to find GSoC organisations that use a Particular Programming Language"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": [" Python script", "You will learn the following through this article:", "Note:", "Step 1:", "Step 2:", "Step 3:", "Step 4:", "Step 5:", "Note:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-find-gsoc-organisations-that-use-a-particular-programming-language/"},
{"title": "Python | Numpy numpy.ndarray.__sub__() - GeeksforGeeks", "h1": ["Python | Numpy numpy.ndarray.__sub__()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Numpy numpy.ndarray.__sub__()", "numpy array", "Syntax:", "Return: ", "Example #1 :", "double", "Example #2 :", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-numpy-numpy-ndarray-__sub__/"},
{"title": "Python | Numpy numpy.ndarray.__truediv__() - GeeksforGeeks", "h1": ["Python | Numpy numpy.ndarray.__truediv__()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Numpy numpy.ndarray.__truediv__()", "numpy array", "Syntax: ", "Return: ", "Example #1 :", "Example #2 :", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-numpy-numpy-ndarray-__truediv__/"},
{"title": "Python | Numpy numpy.ndarray.__pos__() - GeeksforGeeks", "h1": ["Python | Numpy numpy.ndarray.__pos__()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["numpy.ndarray.__pos__()", "Numpy", "same", "Syntax: ", "Return: ", "Example #1 :", "Example #2 :", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-numpy-numpy-ndarray-__pos__/"},
{"title": "Python | Numpy numpy.ndarray.__le__() - GeeksforGeeks", "h1": ["Python | Numpy numpy.ndarray.__le__()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["numpy.ndarray.__le__()", "Numpy", "less than or equal", "True", "False", "Syntax:", "Return:", "Example #1 :", "Output:", "Example #2 :", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-numpy-numpy-ndarray-__le__/"},
{"title": "Python | Numpy matrix.min() - GeeksforGeeks", "h1": ["Python | Numpy matrix.min()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Numpy matrix.min()", "minimum", "Syntax : ", "Return : ", "Example #1 :", "Example #2 :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-numpy-matrix-min/"},
{"title": "Python | Pandas Series.str.strip(), lstrip() and rstrip() - GeeksforGeeks", "h1": ["Python | Pandas Series.str.strip(), lstrip() and rstrip()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas ", "Pandas ", ".str", "Syntax: ", "Return Type: ", "Output", "Example 1:", " str.lstrip()", "Output:", "Example 2: ", "Output:", "Example 3: ", "Output:", "Data Structures & Algorithms in JavaScript - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/python-pandas-series-str-strip-lstrip-and-rstrip/"},
{"title": "Python | Numpy numpy.ndarray.__neg__() - GeeksforGeeks", "h1": ["Python | Numpy numpy.ndarray.__neg__()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["numpy.ndarray.__neg__()", "Numpy", "positive values becomes negative", "negative values become positive", "Syntax:", "Return:", "Example #1 :", "Example #2 :", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-numpy-numpy-ndarray-__neg__/"},
{"title": "Python | Numpy MaskedArray.__gt__ - GeeksforGeeks", "h1": ["Python | Numpy MaskedArray.__gt__"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["numpy.ma.MaskedArray class", "Syntax:", "Return:", "Example #1 :", "Output:", "Example #2: ", "Output:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-numpy-maskedarray-__gt__/"},
{"title": "Python | Numpy numpy.ndarray.__lt__() - GeeksforGeeks", "h1": ["Python | Numpy numpy.ndarray.__lt__()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["numpy.ndarray.__lt__()", "Numpy", "less than", "True", "False", "Syntax: ", "Return: ", "Example #1 :", "Output:", "Example #2 :", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-numpy-numpy-ndarray-__lt__/"},
{"title": "Python program to count the number of blank spaces in a text file - GeeksforGeeks", "h1": ["Python program to count the number of blank spaces in a text file"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Approach :", "Here our text file.", "Implementation", "Methods #1:", "Output:", "Methods #2:", "Output:", "Methods #3: ", "Output:", "Master C Programming with Data Structures ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-count-the-number-of-blank-spaces-in-a-text-file/"},
{"title": "Python Bokeh - Plotting Diamonds on a Graph - GeeksforGeeks", "h1": ["Python Bokeh – Plotting Diamonds on a Graph"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "plotting.figure.diamond()", "What kind of Experience do you want to share?"], "strong": ["Syntax : ", "Parameters : ", "x : ", "y : ", "size : ", "angle : ", "angle_units : ", "fill_alpha : ", "fill_color : ", "line_alpha : ", "line_cap : ", "line_color : ", "line_dash : ", "line_dash_offset : ", "line_join : ", "line_width : ", "name : ", "tags : ", "Other Parameters : ", "alpha : ", "color : ", "legend_field : ", "legend_group : ", "legend_label : ", "muted : ", "name : ", "source  : ", "view : ", "visible : ", "x_range_name : ", "y_range_name : ", "level : ", "Returns : ", "Example 1 :", "Output : ", "Example 2 :", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-bokeh-plotting-diamonds-on-a-graph/?ref=next_article"},
{"title": "Python | setting and retrieving values of Tkinter variable - GeeksforGeeks", "h1": ["Python | setting and retrieving values of Tkinter variable"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Setting values of Tkinter variables –", "Python3", "Python3", "Python3", "Retrieving values of tkinter variables –", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["1. Using variable’s constructor", "Syntax:", "2. Using set() method", "Syntax:", "3. Using setvar() method", "Syntax:", "NOTE:", "name", "1. Using get() method", "Syntax:", "2. Using getvar() method", "Syntax:", "NOTE:", "name", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-setting-and-retrieving-values-of-tkinter-variable/"},
{"title": "Python | Numpy numpy.ndarray.__ne__() - GeeksforGeeks", "h1": ["Python | Numpy numpy.ndarray.__ne__()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["numpy.ndarray.__ne__()", "Numpy", "not equal", "True", "False", "Syntax:", "Return: ", "Example #1 :", "Example #2 :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-numpy-numpy-ndarray-__ne__/"},
{"title": "Python | Numpy MaskedArray.__truediv__ - GeeksforGeeks", "h1": ["Python | Numpy MaskedArray.__truediv__"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["numpy.ma.MaskedArray class", "Syntax:", "Return:", "Example #1 :", "Example #2: ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-numpy-maskedarray-__truediv__/"},
{"title": "Python | Numpy numpy.ndarray.__add__() - GeeksforGeeks", "h1": ["Python | Numpy numpy.ndarray.__add__()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Numpy numpy.ndarray.__add__()", "numpy array", "Syntax: ", "Return: ", "Example #1 :", "double", "Example #2 :", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-numpy-numpy-ndarray-__add__/"},
{"title": "Python | Numpy MaskedArray.__sub__ - GeeksforGeeks", "h1": ["Python | Numpy MaskedArray.__sub__"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["numpy.ma.MaskedArray class", "Syntax:", "Return:", "Example #1 :", "Example #2: ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-numpy-maskedarray-__sub__/"},
{"title": "Python numpy-ndarray Archives - GeeksforGeeks", "h1": ["Python numpy-ndarray"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/tag/python-numpy-ndarray/"},
{"title": "Python | Numpy numpy.ndarray.__add__() - GeeksforGeeks", "h1": ["Python | Numpy numpy.ndarray.__add__()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Numpy numpy.ndarray.__add__()", "numpy array", "Syntax: ", "Return: ", "Example #1 :", "double", "Example #2 :", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-numpy-numpy-ndarray-__add__/?ref=next_article"},
{"title": "Top 50+ Python Interview Questions and Answers (Latest 2024)", "h1": ["Top 50+ Python Interview Questions and Answers (Latest 2024)"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "What is Python?", "Basic Python Interview Questions for Freshers", "Intermediate Python Interview Questions", "Advanced Python Interview Questions & Answers ", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" Python Interview Questions ", "Top 50 Python Interview Questions", "1. What is Python? List some popular applications of Python in the world of technology.", "2. What are the benefits of using Python language as a tool in the present scenario?", "3. Is Python a compiled language or an interpreted language?", "4. What does the ‘#’ symbol do in Python?", "5. What is the difference between a Mutable datatype and an Immutable data type?", "6. How are arguments passed by value or by reference in Python?", "7. What is the difference between a Set and Dictionary?", "8. What is List Comprehension? Give an Example.", "9. What is a lambda function?", "10. What is a pass in Python?", "11. What is the difference between / and // in Python?", "12. How is Exceptional handling done in Python?", "13. What is swapcase function in Python?", "14. Difference between for loop and while loop in Python", "Python Local variable:", "Python Global variables:", "Module-level scope:", "Outermost scope: ", "Declaring Docstrings:", "Accessing Docstrings:", "Statically typed languages: ", "Dynamically typed languages: ", "Numeric: ", ", ", "Sequence Type: T", "Mapping Types: ", "Set Types: ", "24. What is the difference between xrange and range functions?", "25. What is Dictionary Comprehension? Give an Example", "26. Is Tuple Comprehension? If yes, how, and if not why?", "27. Differentiate between List and Tuple?", "List", "Tuple", "28. What is the difference between a shallow copy and a deep copy?", "29. Which sorting technique is used by sort() and sorted() functions of python?", "Tim Sort", "30. What are Decorators?", "31. How do you debug a Python program?", "32. What are Iterators in Python?", "33. What are Generators in Python?", "34. Does Python supports multiple Inheritance?", "35. What is Polymorphism in Python?", "36. Define encapsulation in Python?", "37. How do you do data abstraction in Python?", "38. How is memory management done in Python?", "39. How to delete a file using Python?", "41. What is a namespace in Python?", "42. What is PIP?", "43. What is a zip function?", "44. What are Pickling and Unpickling?", "45. What is monkey patching in Python?", "46. What is __init__() in Python?", "47. Write a code to display the current time?", "Public Access Modifier:", "Protected Access Modifier: ", "Private Access Modifier: ", "53. What is Python Switch Statement ", "Note", "Note: ", "Complete Test Series for Service-Based Companies ", "Data Structures and Algorithms - Self Paced ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-interview-questions/"},
{"title": "Python Projects - Beginner to Advanced - GeeksforGeeks", "h1": ["Python Projects – Beginner to Advanced"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "What kind of Experience do you want to share?"], "strong": ["Recent Python Projects !!", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-projects-beginner-to-advanced/"},
{"title": "Python | Numpy numpy.resize() - GeeksforGeeks", "h1": ["Python | Numpy numpy.resize()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Numpy numpy.resize()", "(2, 2)", "(2, 3)", "zeros", "Parameters:", "new_shape :", "refcheck :", "Returns:", "reshape", "resize", "Example #1:", ".resize()", "1×6", "2×3", "Example #2:", "zeros", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-numpy-numpy-resize/"},
{"title": "Python Seaborn - Strip plot illustration using Catplot - GeeksforGeeks", "h1": ["Python Seaborn – Strip plot illustration using Catplot"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Styling Plots", "Multiple Plots", "Scatter Plot", "Line Plot", "Bar Plot", "Count Plot", "Box Plot", "Violin Plot", "Strip Plot", "Swarm Plot", "Factor Plot", "Histogram", "Pairplot", "KDE Plot", "Heatmap", "Catplot", "Introduction", "Styling Plots", "Multiple Plots", "Scatter Plot", "Line Plot", "Bar Plot", "Count Plot", "Box Plot", "Violin Plot", "Strip Plot", "Swarm Plot", "Factor Plot", "Histogram", "Pairplot", "KDE Plot", "Heatmap", "Catplot", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Seaborn", " ", " Catplot ", "Stripplot ", ".", "Step-by-step Approach:", "Output:", "Output:", "Below is the complete program based on the above approach:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-seaborn-strip-plot-illustration-using-catplot/"},
{"title": "Python | pandas.date_range() method - GeeksforGeeks", "h1": ["Python | pandas.date_range() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Pandas.date_range() Syntax", "Date_range() in Pandas Examples", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas ", "pandas.date_range()", "Syntax: ", "Parameters:", "start :", "end :", "periods : ", "freq : ", "tz :", "normalize : ", "name : ", "closed : ", "Returns: ", "Specifying the Start and End", "Output:", "Specify Start, End and Frequency", "Output:", "Specifying Start and Periods", "Output:", "Specifying Start, Periods and tz", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-date_range-method/?ref=lbp"},
{"title": "Python | Pandas.to_datetime() - GeeksforGeeks", "h1": ["Python | Pandas.to_datetime()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Pandas.to_datetime() Syntax", "Pandas.to_datetime() in Pandas Example", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Parameters:", "arg: ", "dayfirst: ", "yearfirst: ", "utc: ", "format: ", "Return type: ", "Output:", "Output:", "For the link to the CSV file used, ", "click here", ".", "Example 1: ", "using Pandas", "Output:", "Example 2: ", "Today’s date", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-to_datetime/?ref=lbp"},
{"title": "Python | Pandas Working With Text Data - GeeksforGeeks", "h1": ["Python | Pandas Working With Text Data"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects"], "strong": ["Code #1:", "Output :", "Code #2:", "Output :", " ", ".replace()", "Code #1", "Output :", "Code #2:", "Output :", "Code #1:", "Output :", "Code #2:", "Code #1:", "Output :", "Code #2:", "Output :", "Code #1:", "Output :", "Code #2:", "Output :", "Pandas ", "str ", "methods:", "str.lower()", "str.upper()", "str.find()", "str.rfind()", "str.findall()", "str.isalpha()", "str.isdecimal()", "str.title()", "str.len()", "str.replace()", "str.contains()", "str.extract()", "str.startswith()", "str.endswith()", "str.isdigit()", "str.lstrip()", "str.rstrip()", "str.strip()", "str.split()", "str.join()", "str.cat()", "str.repeat()", "str.get()", "str.partition()", "str.rpartition()", "str.pad()", "str.swapcase()", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-working-with-text-data/?ref=lbp"},
{"title": "Python | Pandas Timestamp.isoformat - GeeksforGeeks", "h1": ["Python | Pandas Timestamp.isoformat"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Pandas Timestamp.isoformat Syntax", "Timestamp.isoformat in Pandas Example", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " Timestamp.isoformat()", "Syntax : ", "Parameters : ", "Return : ", "Output:", "Example 1", "Output : ", "Output: ", "Example 2", "Output: ", "Output: ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-timestamp-isoformat/?ref=lbp"},
{"title": "Python | Pandas Timestamp.replace - GeeksforGeeks", "h1": ["Python | Pandas Timestamp.replace"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Pandas Timestamp.replace Syntax", "Timestamp.replace in Pandas Examples", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " Timestamp.replace()", "Syntax : ", "Parameters :", "year :", "month : ", "day :", "hour :", "minute : ", "second : ", "microsecond :", "nanosecond :", "tzinfo :", "fold : ", "Return :", "Ouput:", "Output:", "Creating a Timestamp Object with US/Central Timezone", "Output:", "Output : ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-timestamp-replace/?ref=lbp"},
{"title": "Python | Working with date and time using Pandas - GeeksforGeeks", "h1": ["Python | Working with date and time using Pandas"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Working with Dates in Pandas", "Python3", "Python3", "Python3", "Working with Time in Pandas", "Python3", "Python3", "Python3", "Working with Date and Time in Pandas", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Exploring UFO Sightings Over Time", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Conclusion", "What kind of Experience do you want to share?"], "strong": ["Output:", "Year, month, and day extraction", "Output:", "Weekdays and quarters", "Output:", "Output:", "Time periods and date offsets", "Output:", "Handling Time Zones", "UTC and time zone conversion:", "Time zone-aware data manipulation:", "Custom time zone settings:", "Output:", "Working with Date and Time in Pandas", "Step-1: ", "Output:", "Step-2:", "Output:", "Datetime", "Step-3: Divide a given date into features – ", "pandas.Series.dt.year", "pandas.Series.dt.month", "pandas.Series.dt.day", "pandas.Series.dt.hour", "pandas.Series.dt.minute", "datetime ", "Output:", "Step-4:", "Output:", "Output:", "Step-5:", "Output:", "Output:", "Output:", "Output:", "Output:", "Output:", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-working-with-date-and-time-using-pandas/?ref=lbp"},
{"title": "Python | Pandas Timestamp.date - GeeksforGeeks", "h1": ["Python | Pandas Timestamp.date"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " Timestamp.date()", "Syntax :", "Parameters : ", "Return : ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-timestamp-date/?ref=lbp"},
{"title": "Python | Pandas Timestamp.timestamp - GeeksforGeeks", "h1": ["Python | Pandas Timestamp.timestamp"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Pandas Timestamp.timestamp Syntax", "Timestamp.timestamp in Pandas Examples", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " Timestamp.timestamp()", "Syntax : ", "Parameters : ", "Return : ", "Output:", "Output:", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-timestamp-timestamp/?ref=lbp"},
{"title": "Python | Pandas Timestamp.now - GeeksforGeeks", "h1": ["Python | Pandas Timestamp.now"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Pandas Timestamp.now Syntax", "Timestamp.now in Pandas Examples", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" ", " Timestamp.now()", "Syntax :", "Parameters : ", "Return ", "Output:", "s", "Output : ", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-timestamp-now/?ref=lbp"},
{"title": "Python | Numpy matrix.tostring() - GeeksforGeeks", "h1": ["Python | Numpy matrix.tostring()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Numpy matrix.tostring()", "Syntax :", "Return :", "Return byte code string for matrix", "Example #1 :", "matrix.tostring()", "Example #2 :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-numpy-matrix-tostring/?ref=next_article"},
{"title": "Python String lstrip() method - GeeksforGeeks", "h1": ["Python String lstrip() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python String lstrip() Method Syntax:", "Python String lstrip() Method Example:", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python String lstrip() method ", "Syntax:", "Parameters:", "characters", "Return:", "Output:", "Output:", "Example 2:", "Output:", "Output: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-string-lstrip-method/"},
{"title": "Python | Finding Solutions of a Polynomial Equation - GeeksforGeeks", "h1": ["Python | Finding Solutions of a Polynomial Equation"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Algorithm :", "Below is the Python implementation of the above mentioned task.", "Output :", "Explanation :", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-finding-solutions-of-a-polynomial-equation/"},
{"title": "Python String rstrip() Method - GeeksforGeeks", "h1": ["Python String rstrip() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python String rstrip() Method Syntax", "Python String rstrip() Method Example", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python String rstrip() method ", "Syntax:", "Parameters: ", "Return: ", "Output:", "Output:", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-string-rstrip/"},
{"title": "Python IMDbPY – Retrieving art department cast from the movie object - GeeksforGeeks", "h1": ["Python IMDbPY – Retrieving art department cast from the movie object"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-imdbpy-retrieving-art-department-cast-from-the-movie-object/"},
{"title": "Python - Strip front and rear Punctuations from given String - GeeksforGeeks", "h1": ["Python – Strip front and rear Punctuations from given String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using punctuation() + loop", "Output", "Method #2 : Using strip() + split() + join()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #4: Using Regular Expressions", "Approach:", "Output", "Method #4: Using translate() method", "Output", "Method 5 : using the filter() and lambda functions", "Output", "Time complexity: O(n)", "Auxiliary space: O(n)", "Method 6: using ", "reduce()", ":", "Output", "Time Complexity:", "Space Complexity:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-strip-front-and-rear-punctuations-from-given-string/"},
{"title": "Python | Numpy MaskedArray.__imod__ - GeeksforGeeks", "h1": ["Python | Numpy MaskedArray.__imod__"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["numpy.ma.MaskedArray class", "Syntax:", "Return:", "Example #1 :", "Example #2: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-numpy-maskedarray-__imod__/?ref=previous_article"},
{"title": "Python | Pandas Series.str.pad() - GeeksforGeeks", "h1": ["Python | Pandas Series.str.pad()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", "add padding (whitespaces or other characters) to every string element", ".str ", "str.pad() ", "str.pad()", "Data Structures & Algorithms in JavaScript - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/python-pandas-series-str-pad/"},
{"title": "Python pandas-series-methods Archives - GeeksforGeeks", "h1": ["Python pandas-series-methods"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Data Structures & Algorithms in JavaScript - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/tag/python-pandas-series-methods/"},
{"title": "Python pandas-series Archives - GeeksforGeeks", "h1": ["Python pandas-series"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Data Structures & Algorithms in JavaScript - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/tag/python-pandas-series/"},
{"title": "Python IMDbPY - Retrieving role played by actor from the movie details - GeeksforGeeks", "h1": ["Python IMDbPY – Retrieving role played by actor from the movie details"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-imdbpy-retrieving-role-played-by-actor-from-the-movie-details/"},
{"title": "Python IMDbPY - Retrieving movie using movie ID - GeeksforGeeks", "h1": ["Python IMDbPY – Retrieving movie using movie ID"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Syntax :", "Argument :", "Return :", "Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-imdbpy-retrieving-movie-using-movie-id/"},
{"title": "Python | Pandas Timestamp.dayofyear - GeeksforGeeks", "h1": ["Python | Pandas Timestamp.dayofyear"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " Timestamp.dayofyear", "Syntax :", "Parameters : ", "Return : ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-timestamp-dayofyear/"},
{"title": "Python | Numpy numpy.ndarray.__sub__() - GeeksforGeeks", "h1": ["Python | Numpy numpy.ndarray.__sub__()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Numpy numpy.ndarray.__sub__()", "numpy array", "Syntax:", "Return: ", "Example #1 :", "double", "Example #2 :", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-numpy-numpy-ndarray-__sub__/?type=article&id=281719"},
{"title": "Python | Pandas Timestamp.time - GeeksforGeeks", "h1": ["Python | Pandas Timestamp.time"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " Timestamp.time()", "Syntax :", "Parameters : ", "Return : ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-timestamp-time/"},
{"title": "Python | Pandas Timestamp.dayofweek - GeeksforGeeks", "h1": ["Python | Pandas Timestamp.dayofweek"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " Timestamp.dayofweek", "Syntax :", "Parameters : ", "Return : ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-timestamp-dayofweek/"},
{"title": "Python IMDbPY - Retrieving actor from the movie details - GeeksforGeeks", "h1": ["Python IMDbPY – Retrieving actor from the movie details"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-imdbpy-retrieving-actor-from-the-movie-details/"},
{"title": "Python pandas-series-methods Archives - Page 15 of 15 - GeeksforGeeks", "h1": ["Python pandas-series-methods"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Data Structures & Algorithms in JavaScript - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/tag/python-pandas-series-methods/page/15/?type=popular"},
{"title": "Python pandas-series-methods Archives - Page 8 of 15 - GeeksforGeeks", "h1": ["Python pandas-series-methods"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/tag/python-pandas-series-methods/page/8/?type=popular"},
{"title": "Python pandas-series Archives - Page 8 of 17 - GeeksforGeeks", "h1": ["Python pandas-series"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/tag/python-pandas-series/page/8/?type=popular"},
{"title": "Python pandas-series Archives - Page 17 of 17 - GeeksforGeeks", "h1": ["Python pandas-series"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Data Structures & Algorithms in JavaScript - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/tag/python-pandas-series/page/17/?type=popular"},
{"title": "Python IMDbPY – Getting role of person in the movie - GeeksforGeeks", "h1": ["Python IMDbPY – Getting role of person in the movie"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-imdbpy-getting-role-of-person-in-the-movie/"},
{"title": "Python pandas-series-methods Archives - Page 7 of 15 - GeeksforGeeks", "h1": ["Python pandas-series-methods"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/tag/python-pandas-series-methods/page/7/?type=popular"},
{"title": "Python IMDbPY - Getting list of movies performed by the actor - GeeksforGeeks", "h1": ["Python IMDbPY –  Getting list of movies performed by the actor"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax :", "Argument :", "Return :", "Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-imdbpy-getting-list-of-movies-performed-by-the-actor/"},
{"title": "Python pandas-series-methods Archives - Page 6 of 15 - GeeksforGeeks", "h1": ["Python pandas-series-methods"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/tag/python-pandas-series-methods/page/6/?type=popular"},
{"title": "Python | Pandas PeriodIndex.dayofweek - GeeksforGeeks", "h1": ["Python | Pandas PeriodIndex.dayofweek"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " PeriodIndex.dayofweek ", "Syntax :", "Parameters : ", "Return : ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-periodindex-dayofweek/"},
{"title": "Python IMDbPY - Retrieving role played by actor from the movie details - GeeksforGeeks", "h1": ["Python IMDbPY – Retrieving role played by actor from the movie details"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-imdbpy-retrieving-role-played-by-actor-from-the-movie-details/?ref=next_article"},
{"title": "Python | Pandas Period.dayofweek - GeeksforGeeks", "h1": ["Python | Pandas Period.dayofweek"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " Period.dayofweek ", "Syntax :", "Parameters : ", "Return : ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-period-dayofweek/"},
{"title": "Python IMDbPY - Retrieving movie using movie ID - GeeksforGeeks", "h1": ["Python IMDbPY – Retrieving movie using movie ID"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Syntax :", "Argument :", "Return :", "Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-imdbpy-retrieving-movie-using-movie-id/?type=article&id=394701"},
{"title": "Python Pandas-Timestamp Archives - GeeksforGeeks", "h1": ["Python Pandas-Timestamp"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/tag/python-pandas-timestamp/"},
{"title": "Python | Pandas DatetimeIndex.dayofweek - GeeksforGeeks", "h1": ["Python | Pandas DatetimeIndex.dayofweek"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " DatetimeIndex.dayofweek", "Syntax:", "Return: ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-datetimeindex-dayofweek/"},
{"title": "Python | Pandas PeriodIndex.dayofyear - GeeksforGeeks", "h1": ["Python | Pandas PeriodIndex.dayofyear"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " PeriodIndex.dayofyear", "Syntax :", "Parameters : ", "Return : ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-periodindex-dayofyear/"},
{"title": "Python | Numpy numpy.ndarray.__truediv__() - GeeksforGeeks", "h1": ["Python | Numpy numpy.ndarray.__truediv__()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Numpy numpy.ndarray.__truediv__()", "numpy array", "Syntax: ", "Return: ", "Example #1 :", "Example #2 :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-numpy-numpy-ndarray-__truediv__/?type=article&id=281715"},
{"title": "Python | Numpy numpy.ndarray.__pos__() - GeeksforGeeks", "h1": ["Python | Numpy numpy.ndarray.__pos__()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["numpy.ndarray.__pos__()", "Numpy", "same", "Syntax: ", "Return: ", "Example #1 :", "Example #2 :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-numpy-numpy-ndarray-__pos__/?type=article&id=281401"},
{"title": "Python IMDbPY – Getting birth date of person - GeeksforGeeks", "h1": ["Python IMDbPY – Getting birth date of person"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax :", "Return :", "Output :", "Time complexity", "O(1)", "Space complexity", "O(1)", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-imdbpy-getting-birth-date-of-person/"},
{"title": "Python | Pandas Series.str.get_dummies() - GeeksforGeeks", "h1": ["Python | Pandas Series.str.get_dummies()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas ", "str.get_dummies()", ".str", "Data Structures & Algorithms in JavaScript - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/python-pandas-series-str-get_dummies/"},
{"title": "Python | Pandas Timestamp.days_in_month - GeeksforGeeks", "h1": ["Python | Pandas Timestamp.days_in_month"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " Timestamp.days_in_month", "Syntax :", "Parameters : ", "Return : ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-timestamp-days_in_month/"},
{"title": "Python pandas-series Archives - Page 16 of 17 - GeeksforGeeks", "h1": ["Python pandas-series"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Data Structures & Algorithms in JavaScript - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/tag/python-pandas-series/page/16/?type=popular"},
{"title": "Python | Pandas Series.round() - GeeksforGeeks", "h1": ["Python | Pandas Series.round()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas ", "Series.round()", "Syntax: ", "Parameters: ", "decimals: ", "Return type: ", "Example: ", "Output:", "Data Structures & Algorithms in JavaScript - Self Paced ", "Complete Test Series for Service-Based Companies ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-series-round/"},
{"title": "Python | Pandas Series.diff() - GeeksforGeeks", "h1": ["Python | Pandas Series.diff()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", "Series.diff()", "Data Structures & Algorithms in JavaScript - Self Paced ", "Complete Test Series for Service-Based Companies ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-series-diff/"},
{"title": "Python | Pandas Series.tz_localize - GeeksforGeeks", "h1": ["Python | Pandas Series.tz_localize"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " Series.tz_localize()", "Syntax:", "Parameter : tz : ", "axis : ", "level : ", "copy : ", "ambiguous : ", "nonexistent : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-series-tz_localize/"},
{"title": "Python | Pandas Series.to_dense() - GeeksforGeeks", "h1": ["Python | Pandas Series.to_dense()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": [" Series.to_dense()", "Syntax:", "Parameter : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-series-to_dense/"},
{"title": "Python IMDbPY – Info set to keys of Movie object - GeeksforGeeks", "h1": ["Python IMDbPY – Info set to keys of Movie object"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Syntax :", "Action performed :", "Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-imdbpy-info-set-to-keys-of-movie-object/?ref=next_article"},
{"title": "Python | Pandas Timestamp.day - GeeksforGeeks", "h1": ["Python | Pandas Timestamp.day"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " Timestamp.day", "Syntax :", "Parameters : ", "Return : ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-timestamp-day/"},
{"title": "Python IMDbPY – Getting movie ID from searched movies - GeeksforGeeks", "h1": ["Python IMDbPY – Getting movie ID from searched movies"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Syntax :", "Argument :", "Return :", "Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-imdbpy-getting-movie-id-from-searched-movies/"},
{"title": "Python | Pandas Series.from_csv() - GeeksforGeeks", "h1": ["Python | Pandas Series.from_csv()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": [" Series.from_csv()", "Syntax:", "Parameter : ", "path : ", "sep : ", "parse_dates : ", "header : ", "index_col : ", "encoding : ", "infer_datetime_format : ", "Returns :", "Example #1: ", "Output : ", "Example #2 : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-series-from_csv/"},
{"title": "Python IMDbPY – Getting Person name from searched name - GeeksforGeeks", "h1": ["Python IMDbPY – Getting Person name from searched name"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax :", "Return :", "output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-imdbpy-getting-person-name-from-searched-name/"},
{"title": "Python | Pandas Series.ffill() - GeeksforGeeks", "h1": ["Python | Pandas Series.ffill()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": [" Series.ffill()", "Syntax:", "Parameter : ", "axis : ", "inplace : ", "limit : ", "downcast : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2 : ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-series-ffill/"},
{"title": "Python IMDbPY – Getting person ID from searched persons - GeeksforGeeks", "h1": ["Python IMDbPY – Getting person ID from searched persons"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Syntax :", "Argument :", "Return :", "Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-imdbpy-getting-person-id-from-searched-persons/"},
{"title": "Python | How to get the last element of list - GeeksforGeeks", "h1": ["Python | How to get the last element of list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "How to get the last element of a list", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input:", "Output: ", "Input: ", "Output:", "Explanation: ", "Output :", " Negative Indexing ", "list[ len – 1 ] :", "list[-1] : ", "Output :", "Output :", "Output :", "Output:", "Output:", "Output", "Time Complexity:", "Space Complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-how-to-get-the-last-element-of-list/"},
{"title": "Python Dictionary popitem() method - GeeksforGeeks", "h1": ["Python Dictionary popitem() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Dictionary popitem() Method Syntax:", "Python Dictionary popitem() Method Example:", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python dictionary popitem() method", "Syntax : ", "Parameters : ", "Returns : ", "Note: ", "Output:", "Example  1: ", " ", "Python", " dict popitem() method ", "Output :", "Practical Application: ", "Example 2: ", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-dictionary-popitem-method/"},
{"title": "Python | Pandas DatetimeIndex.tz_localize() - GeeksforGeeks", "h1": ["Python | Pandas DatetimeIndex.tz_localize()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " DatetimeIndex.tz_localize()", "Syntax:", "Parameters : ", "tz : ", "ambiguous : ", " errors : ", "Return : ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-datetimeindex-tz_localize/"},
{"title": "Python | sympy.diff() method - GeeksforGeeks", "h1": ["Python | sympy.diff() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["sympy.diff()", "Syntax :", "Return :", "Example #1:", "Output :", "Example #2 :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sympy-diff-method/"},
{"title": "Python | Pandas dataframe.diff() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.diff()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.diff()", "Syntax:", "Parameters: ", "periods :", "axis : ", "Returns: ", "Example #1: ", "Output :", "Example #2: ", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-diff/"},
{"title": "Python | Pandas Series.iteritems() - GeeksforGeeks", "h1": ["Python | Pandas Series.iteritems()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": [" Series.iteritems()", "Syntax:", "Parameter : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2 : ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-series-iteritems/?ref=ml_lbp"},
{"title": "Python | Pandas Series.cov() to find Covariance - GeeksforGeeks", "h1": ["Python | Pandas Series.cov() to find Covariance"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas ", "Series.cov()", "Syntax: ", "Parameters: ", "other: ", "min_periods: ", "Return type: ", "Example :", "Output:", "Data Structures & Algorithms in JavaScript - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/python-pandas-series-cov-to-find-covariance/"},
{"title": "Python | Pandas Series.set_axis() - GeeksforGeeks", "h1": ["Python | Pandas Series.set_axis()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" Series.set_axis()", "Syntax:", "Parameter : ", "labels : ", "axis : ", "inplace : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-series-set_axis/?ref=ml_lbp"},
{"title": "Python IMDbPY – Getting company ID from searched companies - GeeksforGeeks", "h1": ["Python IMDbPY – Getting company ID from searched companies"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax :", "Argument :", "Return :", "Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-imdbpy-getting-company-id-from-searched-companies/?ref=next_article"},
{"title": "Python | Pandas Series.cummin() to find cumulative minimum of a series - GeeksforGeeks", "h1": ["Python | Pandas Series.cummin() to find cumulative minimum of a series"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", "Series.cummin()", "Syntax: ", "Parameters: ", "axis:", "skipna:", "Data Structures & Algorithms in JavaScript - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/python-pandas-series-cummin-to-find-cumulative-minimum-of-a-series/?ref=ml_lbp"},
{"title": "Python IMDbPY – Info set to keys of Movie object - GeeksforGeeks", "h1": ["Python IMDbPY – Info set to keys of Movie object"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Syntax :", "Action performed :", "Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-imdbpy-info-set-to-keys-of-movie-object/?type=article&id=394717"},
{"title": "Python | Pandas Series.reindex_like() - GeeksforGeeks", "h1": ["Python | Pandas Series.reindex_like()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": [" Series.reindex_like()", "Syntax:", "Parameter : ", "other : ", "method : ", "copy : ", "limit : ", "tolerance : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2 : ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-series-reindex_like/?ref=ml_lbp"},
{"title": "Python | Pandas Series.items() - GeeksforGeeks", "h1": ["Python | Pandas Series.items()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": [" Series.items()", "Syntax:", "Parameter : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2 : ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-series-items/?ref=ml_lbp"},
{"title": "Python IMDbPY – Getting company ID from searched companies - GeeksforGeeks", "h1": ["Python IMDbPY – Getting company ID from searched companies"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax :", "Argument :", "Return :", "Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-imdbpy-getting-company-id-from-searched-companies/"},
{"title": "Python IMDbPY - Getting image(head-shot) of person - GeeksforGeeks", "h1": ["Python IMDbPY –  Getting image(head-shot) of person"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Note :", "Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-imdbpy-getting-imagehead-shot-of-person/?ref=previous_article"},
{"title": "Python | Pandas Series.item() - GeeksforGeeks", "h1": ["Python | Pandas Series.item()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": [" Series.item()", "Note : ", "Syntax:", "Parameter : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2 : ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-series-item/?ref=ml_lbp"},
{"title": "Python IMDbPY – Getting movie ID from searched movies - GeeksforGeeks", "h1": ["Python IMDbPY – Getting movie ID from searched movies"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Syntax :", "Argument :", "Return :", "Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-imdbpy-getting-movie-id-from-searched-movies/?ref=next_article"},
{"title": "Python | numpy.cov() function - GeeksforGeeks", "h1": ["Python | numpy.cov() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax: ", "Parameters:", "m :", "y :", "rowvar :", "bias :", "ddof :", "fweights :", "aweights :", "Returns:", "Example #1: ", "Output:", "Example #2: ", "Output:", "Example #3: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-numpy-cov-function/"},
{"title": "Python | Pandas Series.keys() - GeeksforGeeks", "h1": ["Python | Pandas Series.keys()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": [" Series.keys()", "Syntax:", "Parameter : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2 : ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-series-keys/?ref=ml_lbp"},
{"title": "Python | Shift last element to first position in list - GeeksforGeeks", "h1": ["Python | Shift last element to first position in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Shift Last Element to First Position using list slicing ", " ", "Output", "Time Complexity: ", "Auxiliary Space:", "Shift Last Element to First Position using Insert() + pop()", "Python ", "Output", "Time complexity:", "Auxiliary space: ", "Shift Last Element to First Position using islice()", "Output", "Time complexity: ", "Auxiliary space:", "Shift Last Element to First Position using slicing+extend() Method", "Output", "Time Complexity : O(N)", "Auxiliary Space : O(1)", "Shift Last Element to First Position using Deque rotate() Method", "Output", "Time Complexity: O(N) ", "Space Complexity: O(N)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-shift-last-element-to-first-position-in-list/"},
{"title": "Python Program For Moving Last Element To Front Of A Given Linked List - GeeksforGeeks", "h1": ["Python Program For Moving Last Element To Front Of A Given Linked List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Algorithm:", "Output:", "Time Complexity:", "Space Complexity", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-for-moving-last-element-to-front-of-a-given-linked-list/"},
{"title": "Python | Pandas series.cummax() to find Cumulative maximum of a series - GeeksforGeeks", "h1": ["Python | Pandas series.cummax() to find Cumulative maximum of a series"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", "Series.cummax()", "Syntax: ", "Parameters: ", "axis:", "skipna:", "Data Structures & Algorithms in JavaScript - Self Paced ", "Complete Test Series for Service-Based Companies ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-series-cummax-to-find-cumulative-maximum-of-a-series/"},
{"title": "Python IMDbPY – Getting other(partnered) companies of the series - GeeksforGeeks", "h1": ["Python IMDbPY – Getting other(partnered) companies of the series"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-imdbpy-getting-otherpartnered-companies-of-the-series/"},
{"title": "Python IMDbPY – Adding info set to the searched persons - GeeksforGeeks", "h1": ["Python IMDbPY – Adding info set to the searched persons"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Syntax :", "Argument :", "Action performed :", "Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-imdbpy-adding-info-set-to-the-searched-persons/"},
{"title": "Python Program to find the profit or loss when CP of N items is equal to SP of M items - GeeksforGeeks", "h1": ["Python Program to find the profit or loss when CP of N items is equal to SP of M items"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Cost Price of N articles", "Selling Price of M articles", "Examples:", "Input: ", "Output:", "Input: ", "Output:", "Formula:-", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-to-find-the-profit-or-loss-when-cp-of-n-items-is-equal-to-sp-of-m-items/"},
{"title": "Python | Pandas Series.iteritems() - GeeksforGeeks", "h1": ["Python | Pandas Series.iteritems()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": [" Series.iteritems()", "Syntax:", "Parameter : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2 : ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-series-iteritems/?ref=next_article"},
{"title": "Python | Pandas Series.rename() - GeeksforGeeks", "h1": ["Python | Pandas Series.rename()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": [" Series.rename()", "Syntax:", "Parameter : ", "index : ", "copy : ", "inplace : ", "level : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-series-rename/?ref=next_article"},
{"title": "Python | Pandas Series.reindex_like() - GeeksforGeeks", "h1": ["Python | Pandas Series.reindex_like()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": [" Series.reindex_like()", "Syntax:", "Parameter : ", "other : ", "method : ", "copy : ", "limit : ", "tolerance : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2 : ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-series-reindex_like/?ref=previous_article"},
{"title": "Python | Pandas Series.shift() - GeeksforGeeks", "h1": ["Python | Pandas Series.shift()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": [" Series.shift()", "Syntax:", "Parameter : ", "periods : ", "freq : ", "axis : ", "fill_value : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-series-shift/?ref=ml_lbp"},
{"title": "Python IMDbPY – Getting production companies of the series - GeeksforGeeks", "h1": ["Python IMDbPY – Getting production companies of the series"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-imdbpy-getting-production-companies-of-the-series/"},
{"title": "Python | Pandas dataframe.corrwith() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.corrwith()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas", " dataframe.corrwith()", "Syntax:", "Parameters: ", "other : ", "axis : ", "drop :", "Returns: ", " Note: ", "Example #1: ", "column axis", "Output :", "Example #2: ", "row axis", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-corrwith/?ref=next_article"},
{"title": "Python | Add element at alternate position in list - GeeksforGeeks", "h1": ["Python | Add element at alternate position in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method : Using join() + list()", "Output", "Time Complexity:", "Auxiliary Space", "Using the itertools.chain() function:", "Output", "Time Complexity:", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-add-element-at-alternate-position-in-list/"},
{"title": "Python IMDbPY – Adding info set to the searched movies - GeeksforGeeks", "h1": ["Python IMDbPY – Adding info set to the searched movies"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Syntax :", "Argument :", "Action performed :", "Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-imdbpy-adding-info-set-to-the-searched-movies/?ref=next_article"},
{"title": "Python program to convert URL Parameters to Dictionary items - GeeksforGeeks", "h1": ["Python program to convert URL Parameters to Dictionary items"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using urllib.parse.parse_qs()", "Output", "Method #2 : Using findall() + setdefault()", "Output", "Method #3 : Using split()", "Output", "Output", "METHOD 5:USING DEF AND FOR", "APPROACH:", "ALGORITHM:", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-convert-url-parameters-to-dictionary-items/"},
{"title": "Python | Pandas Series.items() - GeeksforGeeks", "h1": ["Python | Pandas Series.items()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": [" Series.items()", "Syntax:", "Parameter : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2 : ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-series-items/?type=article&id=275116"},
{"title": "Python IMDbPY – Company info set - GeeksforGeeks", "h1": ["Python IMDbPY – Company info set"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Syntax :", "Argument :", "Return :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-imdbpy-company-info-set/"},
{"title": "Python Program For Stock Buy Sell To Maximize Profit - GeeksforGeeks", "h1": ["Python Program For Stock Buy Sell To Maximize Profit"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["PRACTICE", "Naive approach:", "Output", "Time Complexity:", "Auxiliary Space", "Efficient approach:", "Output", "Time Complexity:", "Auxiliary Space ", "Valley Peak Approach:", "Output", "Time Complexity", "Auxiliary", "Space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Test Series for Product-Based Companies ", "Tech Interview 101 - From DSA to System Design for Working Professionals "], "link": "https://www.geeksforgeeks.org/python-program-for-stock-buy-sell-to-maximize-profit/"},
{"title": "Python | Pandas Series.cumsum() to find cumulative sum of a Series - GeeksforGeeks", "h1": ["Python | Pandas Series.cumsum() to find cumulative sum of a Series"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Series.cumsum()", "Syntax: ", "Parameters: ", "axis:", "skipna:", "Example #1:", "Data Structures & Algorithms in JavaScript - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/python-pandas-series-cumsum-to-find-cumulative-sum-of-a-series/"},
{"title": "Pandas DataFrame corr() Method - GeeksforGeeks", "h1": ["Pandas DataFrame corr() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Pandas DataFrame corr() Method Syntax", "Python3", "Python3", "Python Pandas DataFrame corr() Method Examples", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" dataframe.corr()", "Syntax:", "Parameters: ", "method : ", "min_periods : ", "Returns: ", "Output", "Note: ", "Output", "Output", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-corr/"},
{"title": "Python | Pandas Dataframe.rename() - GeeksforGeeks", "h1": ["Python | Pandas Dataframe.rename()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", "rename()", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-rename/"},
{"title": "Python | Pandas dataframe.count() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.count()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.count()", "Syntax:", "Parameters: ", "axis :", "level :", "numeric_only : ", "Returns: ", "Example #1: ", "Output :", "Example #2: ", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-count/?ref=ml_lbp"},
{"title": "Python | Pandas dataframe.clip_upper() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.clip_upper()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.clip_upper()", "Syntax:", "Parameters: ", "threshold : ", "axis :", "inplace :", "Returns: ", "Example #1: ", "Output :", "Example #2: ", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-clip_upper/?ref=ml_lbp"},
{"title": "Python IMDbPY – Adding info set to the searched persons - GeeksforGeeks", "h1": ["Python IMDbPY – Adding info set to the searched persons"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Syntax :", "Argument :", "Action performed :", "Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-imdbpy-adding-info-set-to-the-searched-persons/?type=article&id=396083"},
{"title": "Python | Alternate Cycling in list - GeeksforGeeks", "h1": ["Python | Alternate Cycling in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method 1: Using reversed() + islice() + iter() + cycle() + next() + list comprehension", "Code : ", "Output : ", "Method #2 : Using for loop", "Output", "Time complexity: O(n)", "Auxiliary Space: O(n)", "Method#3: Using the deque class and itertools module:", "Algorithm :", "Output", "The time complexity: O(n),", "The space complexity: O(n), ", "Method #4:  using list slicing and concatenation. ", "Step-by-step approach:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-alternate-cycling-in-list/"},
{"title": "Python | List Initialization with alternate 0s and 1s - GeeksforGeeks", "h1": ["Python | List Initialization with alternate 0s and 1s"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using list comprehension", "Output", "Time complexity: ", "Auxiliary space:", "Method #2 : Using itertools.cycle() + itertools.islice()", "itertools", " 1’s (count_1)", "0’s (count_0)", "count_1", "1’s", "count_0", "0’s", " itertools.cycle()", "itertools.islice()", " itertools.islice() ", "list() ", " print() ", "Output", "Time complexity:", "Auxiliary space:", "Method #3 : Using *,extend() and slicing", "Output", "Time complexity: ", "Auxiliary space: ", "Method #4 : Using itertools.repeat():", "Output", "Time complexity: ", "Auxiliary", "space: ", "Method #5: Using a while loop", "test_list", "test_list", "size", "count_1″", "test_list", "count_0", "test_list", "size", "size", "test_list", "Output", "Time complexity: ", "Auxiliary space: ", "Method #6: Using numpy.tile():", "Algorithm:", "count_1", "count_0", "count_1 + count_0", "size", "Output:", "Time Complexity:", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-list-initialization-with-alternate-0s-and-1s/"},
{"title": "Python | Alternate range slicing in list - GeeksforGeeks", "h1": ["Python | Alternate range slicing in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension", "Output : ", "Time complexity: ", "Auxiliary space: ", "Method #2 : Using enumerate() + list comprehension", "Output : ", "Time complexity", "Auxiliary space:", "Method #3 : Using itertools +for loop", "Output", "Method 4: Using filter() +  enumerate() +  method:", "test_list ", " print()", " N ", " enumerate() ", " filter()", " (N * 2) ", "N.", " list() ", "print() ", "Output", "Time complexity: ", " Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-alternate-range-slicing-in-list/"},
{"title": "Python Program For Sorting An Array Of 0s, 1s and 2s - GeeksforGeeks", "h1": ["Python Program For Sorting An Array Of 0s, 1s and 2s"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "Python", "What kind of Experience do you want to share?"], "strong": ["A[]", "Examples:", "Input", "Output", "Input", "Output", "PRACTICE", "Method 1: ", "Approach:", "Algorithm:", "Dry Run:", "Implementation:", "Output:", "Complexity Analysis:", "Time Complexity:", "Space Complexity:", "Method 2: ", "Approach:", "Algorithm:", "Implementation:", "Output:", "Complexity Analysis:", "Time Complexity:", "Space Complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Test Series for Product-Based Companies ", "Tech Interview 101 - From DSA to System Design for Working Professionals "], "link": "https://www.geeksforgeeks.org/python-program-for-sorting-an-array-of-0s-1s-and-2s/?ref=ml_lbp"},
{"title": "Python | List consisting of all the alternate elements - GeeksforGeeks", "h1": ["Python | List consisting of all the alternate elements"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using ", "list comprehension", " ", "Output", "Time complexity:", "Auxiliary space:", "Method #2 : Using enumerate()", "Output", "Method #3 : Using Slice notation", "Output", "Method #4 : Using for loop", "Output", "Method #5 : Using itertools", "Output", "Time complexity: ", "Auxiliary Space: ", "Method #6 : Using  map and lambda function:", "Output", "Time complexity: O(n)", "Auxiliary Space: O(n)", "Method#7: Using numpy", "Output", "Time complexity: O(n)", "Auxiliary Space: O(n)", "Method#8: Using heapq:", "Algorithm :", "Output", "Time Complexity: O(n log n), ", "Space Complexity:  O(n),", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-list-consisting-of-all-the-alternate-elements/"},
{"title": "Python | Pandas Panel.cummin() - GeeksforGeeks", "h1": ["Python | Pandas Panel.cummin()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Panel.cummin() ", "Syntax:", "Parameters:", "axis :", "skipna :", "Returns:", "Code #1:", "Code #2:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-panel-cummin/"},
{"title": "Python | Pandas Series.argmin() - GeeksforGeeks", "h1": ["Python | Pandas Series.argmin()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": [" Series.argmin()", "Syntax:", "Parameter : ", "skipna : ", "axis : ", "*args, **kwargs : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2 : ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-series-argmin/?ref=previous_article"},
{"title": "Python | Pandas dataframe.cumsum() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.cumsum()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.cumsum()", "find the cumulative sum value over any axis.", "Syntax:", "Parameters: ", "axis : ", "skipna :", "Returns: ", "Example #1: ", "Output : ", "Output :", "Example #2: ", "Output :", "Example #3: ", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-cumsum/"},
{"title": "Python | Pandas Series.rename() - GeeksforGeeks", "h1": ["Python | Pandas Series.rename()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": [" Series.rename()", "Syntax:", "Parameter : ", "index : ", "copy : ", "inplace : ", "level : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-series-rename/"},
{"title": "Pandas DataFrame corr() Method - GeeksforGeeks", "h1": ["Pandas DataFrame corr() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Pandas DataFrame corr() Method Syntax", "Python3", "Python3", "Python Pandas DataFrame corr() Method Examples", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" dataframe.corr()", "Syntax:", "Parameters: ", "method : ", "min_periods : ", "Returns: ", "Output", "Note: ", "Output", "Output", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-corr/?ref=lbp"},
{"title": "Python | Pandas TimedeltaIndex.rename - GeeksforGeeks", "h1": ["Python | Pandas TimedeltaIndex.rename"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " TimedeltaIndex.rename()", "Syntax :", "Parameters : ", "name : ", "inplace : ", "Return : ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-timedeltaindex-rename/"},
{"title": "Python | Pandas dataframe.cummin() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.cummin()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.cummin()", "find the cumulative minimum value over any axis.", "Syntax:", "Parameters: ", "axis : ", "skipna :", "Returns: ", "Example #1: ", "Output : ", "Output :", "Example #2: ", "Output :", "Example #3: ", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-cummin/"},
{"title": "Python | Pandas Series.reindex_like() - GeeksforGeeks", "h1": ["Python | Pandas Series.reindex_like()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": [" Series.reindex_like()", "Syntax:", "Parameter : ", "other : ", "method : ", "copy : ", "limit : ", "tolerance : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2 : ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-series-reindex_like/?type=article&id=274240"},
{"title": "Python | Pandas Series.rename_axis() - GeeksforGeeks", "h1": ["Python | Pandas Series.rename_axis()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": [" Series.rename_axis()", "Syntax:", "Parameter : ", "mapper : ", "index, columns : ", "axis : ", "copy : ", "inplace : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2 : ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-series-rename_axis/"},
{"title": "Python | Pandas dataframe.reindex_like() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.reindex_like()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.reindex_like()", "Syntax:", "Syntax : ", "Parameters : ", "other : ", "method : ", "copy : ", "limit : ", "tolerance : ", "Returns :", "Example #1: ", "Note : ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-reindex_like/"},
{"title": "Python - tensorflow.math.cumsum() - GeeksforGeeks", "h1": ["Python – tensorflow.math.cumsum()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["cumsum() ", "Syntax: ", "Parameters: ", "x: ", "axis(optional): ", "exclusive(optional): ", "reverse(optional): ", "name(optional): ", "Returns: ", "Example 1:", "Output:", "Example 2: ", "Output: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tensorflow-math-cumsum/"},
{"title": "Python pandas-panel Archives - GeeksforGeeks", "h1": ["Python pandas-panel"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/tag/python-pandas-panel/"},
{"title": "Python - Alternate elements Similarity - GeeksforGeeks", "h1": ["Python – Alternate elements Similarity"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using loop", "Output", "Method #2 : Using all() + generator expression", "Output", "Method 3 : using list slicing.", " steps for this approach:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-alternate-elements-similarity/"},
{"title": "Python | Numpy matrix.cumsum() - GeeksforGeeks", "h1": ["Python | Numpy matrix.cumsum()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Numpy matrix.cumsum()", "Syntax :", "Return :", "Example #1 :", "Example #2 :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-numpy-matrix-cumsum/"},
{"title": "Python | Pandas Panel.clip_upper() - GeeksforGeeks", "h1": ["Python | Pandas Panel.clip_upper()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Panel.clip_upper()", "Syntax:", "Parameters:", "threshold :", "axis :", "inplace :", "Returns:", "Creating a Panel :", "Code #1:", "Code #2:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-panel-clip_upper/"},
{"title": "Python | Pandas dataframe.clip_upper() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.clip_upper()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.clip_upper()", "Syntax:", "Parameters: ", "threshold : ", "axis :", "inplace :", "Returns: ", "Example #1: ", "Output :", "Example #2: ", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-clip_upper/?type=article&id=245647"},
{"title": "Python pandas-panel-methods Archives - GeeksforGeeks", "h1": ["Python pandas-panel-methods"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/tag/python-pandas-panel-methods/"},
{"title": "Python | Pandas Panel.cumsum() - GeeksforGeeks", "h1": ["Python | Pandas Panel.cumsum()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Panel.cumsum() ", "Syntax:", "Parameters:", "axis :", "skipna :", "Returns:", "Code #1:", "Output:", "Code #2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-panel-cumsum/"},
{"title": "Python | Pandas TimedeltaIndex.hasnans - GeeksforGeeks", "h1": ["Python | Pandas TimedeltaIndex.hasnans"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " TimedeltaIndex.hasnans", "Syntax:", "Return : ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-timedeltaindex-hasnans/"},
{"title": "Python | Pandas Series.clip_upper() - GeeksforGeeks", "h1": ["Python | Pandas Series.clip_upper()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas ", "Series.clip_upper()", "Data Structures & Algorithms in JavaScript - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/python-pandas-series-clip_upper/"},
{"title": "Python-Tensorflow Archives - GeeksforGeeks", "h1": ["Python-Tensorflow"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/tag/python-tensorflow/"},
{"title": "Python | Pandas Panel.clip() - GeeksforGeeks", "h1": ["Python | Pandas Panel.clip()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Panel.clip()", "Syntax:", "Parameters:", "lower :", "upper :", "axis :", "inplace :", "Returns:", "Code #1:", "Code #2:", "Code #3:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-panel-clip/"},
{"title": "Python | Percentage similarity of lists - GeeksforGeeks", "h1": ["Python | Percentage similarity of lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method 1: Using “|” operator + “&” operator + set()", "Output", "Method#2 : Using set() + intersection()+ union", "Output", "Method #3 : Using Counter() from collections module:", "Output", "Time Complexity:", "Auxiliary Space:", "Method #4: Using list comprehension and set()", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-percentage-similarity-of-lists/"},
{"title": "Python | Similarity metrics of strings - GeeksforGeeks", "h1": ["Python | Similarity metrics of strings"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using Naive Approach(sum() + zip())", "Output : ", "Time Complexity: O(n), ", "Auxiliary Space: O(1)", "Method #2 : Using SequenceMatcher.ratio()", "Output : ", "Method #3 : Using difflib.ndiff", "Output", "Method #4: Levenshtein distance algorithm. ", "Output", "Time complexity:", "Auxiliary space: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-similarity-metrics-of-strings/"},
{"title": "Python pandas-TimedeltaIndex Archives - GeeksforGeeks", "h1": ["Python pandas-TimedeltaIndex"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/tag/python-pandas-timedeltaindex/"},
{"title": "Python | Pandas Panel.abs() - GeeksforGeeks", "h1": ["Python | Pandas Panel.abs()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Panel.abs()", "Syntax:", "Parameters:", "Returns:", "Code #1:", "Code #2:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-panel-abs/"},
{"title": "Python | Pandas Panel.cumprod() - GeeksforGeeks", "h1": ["Python | Pandas Panel.cumprod()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Panel.cumprod()", "Syntax:", "Parameters:", "axis :", "skipna :", "Returns:", "Code #1:", "Code #2:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-panel-cumprod/"},
{"title": "Python | Word Similarity using spaCy - GeeksforGeeks", "h1": ["Python | Word Similarity using spaCy"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Word similarity", "spaCy’s Model – ", "Output:", "Using Custom Language Models – ", "Output:", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Master Java Programming - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-word-similarity-using-spacy/"},
{"title": "Python | Pandas Panel.cumprod() - GeeksforGeeks", "h1": ["Python | Pandas Panel.cumprod()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Panel.cumprod()", "Syntax:", "Parameters:", "axis :", "skipna :", "Returns:", "Code #1:", "Code #2:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-panel-cumprod/?ref=next_article"},
{"title": "Python | Pandas Panel.clip_lower() - GeeksforGeeks", "h1": ["Python | Pandas Panel.clip_lower()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Panel.clip_lower()", "Syntax:", "Parameters:", "threshold :", "float :", "array-like :", "axis : ", "inplace :", "Returns:", "Code #1:", "Code #2:", "Code #3:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-panel-clip_lower/"},
{"title": "Python | Pandas dataframe.rolling() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.rolling()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.rolling()", "Syntax :", "Parameters :", "window :", "min_periods :", "freq : ", "center :", "win_type : ", "on : ", "closed :", "axis :", "Note:", "Example #1: ", "Output :", "Example #2: ", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-rolling/?ref=next_article"},
{"title": "Python | Pandas Panel.count() - GeeksforGeeks", "h1": ["Python | Pandas Panel.count()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Panel.count()", "Syntax:", "Parameters:", "Returns:", "Code #1:", "Code #2:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-panel-count/"},
{"title": "Python | Pandas Index.hasnans - GeeksforGeeks", "h1": ["Python | Pandas Index.hasnans"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": [" Index.hasnans", "Syntax:", "Parameter : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2 : ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "GATE Data Science and Artificial Intelligence 2025 "], "link": "https://www.geeksforgeeks.org/python-pandas-index-hasnans/"},
{"title": "Python | Pandas Panel.count() - GeeksforGeeks", "h1": ["Python | Pandas Panel.count()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Panel.count()", "Syntax:", "Parameters:", "Returns:", "Code #1:", "Code #2:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-panel-count/?ref=previous_article"},
{"title": "Python Tensorflow-math-functions Archives - GeeksforGeeks", "h1": ["Python Tensorflow-math-functions"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/tag/python-tensorflow-math-functions/"},
{"title": "Python | Grouping similar substrings in list - GeeksforGeeks", "h1": ["Python | Grouping similar substrings in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using lambda + itertools.groupby() + split()", "groupby", "itertools", "test_list", "test_list", "sort() ", "test_list", "test_list", "_", "groupby() ", "test_list", "lambda a: a.split(‘_’)[0] ", "_ ", "res", "res", "Output", "Time complexity:", "Auxiliary space: ", "Method #2 : Using lambda + itertools.groupby() + partition()", "Output", "Time complexity:", "Auxiliary space: ", "Method #3 : Using index() and find() methods", "Output", "Time complexity:", "Auxiliary space:", "Method #4 : Using startswith()", "Output", "Time Complexity:", "Auxiliary Space:", "Method #5: Using a dictionary to group similar substrings", "Output", "Time complexity: ", "Auxiliary space:", "Method #6: Using a loop and a dictionary", "Step-by-step approach:", "Output", "Method #7: Using numpy method:", " Algorithm :", "Output:", "Time complexity:", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-grouping-similar-substrings-in-list/"},
{"title": "Python | Pandas Series.hasnans - GeeksforGeeks", "h1": ["Python | Pandas Series.hasnans"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " Series.hasnans", "Syntax:", "Parameter : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2 : ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-series-hasnans/"},
{"title": "Python pandas-panel-methods Archives - Page 2 of 2 - GeeksforGeeks", "h1": ["Python pandas-panel-methods"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/tag/python-pandas-panel-methods/page/2/?type=popular"},
{"title": "Python | Pandas dataframe.clip() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.clip()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.clip()", "Syntax:", "Parameters: ", "lower :", "upper :", "axis : ", "inplace :", "*args, **kwargs :", "Example #1: ", "Output :", "Example #2: ", "Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-clip/"},
{"title": "Python | Pandas dataframe.reindex_axis() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.reindex_axis()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.reindex_axis()", "Syntax:", "Syntax: ", "Parameters : ", "labels : ", "axis : ", "method : ", "copy : ", "level :", "limit : ", "tolerance : ", "Returns :", "Example #1: ", "Note : ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-reindex_axis/?ref=next_article"},
{"title": "Python | Test list element similarity - GeeksforGeeks", "h1": ["Python |  Test list element similarity"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 Using collections.Counter", "Output:", "Method #2: Using dictionary and its values", "Output:", "Method #3: Using List comprehension and set()", "Output", "Output", "Method #5: Using numpy.bincount()", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-test-list-element-similarity/"},
{"title": "Python - Convert List to key-value list by prefix grouping - GeeksforGeeks", "h1": ["Python – Convert List to key-value list by prefix grouping"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method 1: Using groupby() + startswith() + lambda", "groupby", "itertools", "test_list", "test_list", "print()", "temp", "res", "groupby()", "test_list", "groupby", "groupby", "k", "groupby", "k", "res", "res", "print() ", "Output", "Time Complexity: ", "Auxiliary Space:", "Method 2: Using defaultdict", "Output", "Time complexity: ", "Auxiliary space:", "Method 3: Using dictionary comprehension method to construct the dictionary", "test_list", "GFG", "res", "for", "temp", "temp", "res", "Output", "Time Complexity:", "Auxiliary Space:", "Method 4: Using loop + dictionary ", "Approach:", "Output", "Time complexity: O(N)", "Auxiliary space: O(N)", "Method 5: Using list comprehension and slicing", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-convert-list-to-key-value-list-by-prefix-grouping/"},
{"title": "Python | Column summation in uneven sized lists - GeeksforGeeks", "h1": ["Python | Column summation in uneven sized lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Note: Install numpy module using command “pip install numpy”", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using sum() + filter() + map() + list comprehension", "Output : ", "Method #2 : Using list comprehension + sum() + zip_longest()", "Output : ", "Output", "Method #4 : Using reduce() and zip_longest(): ", "Algorithm:", "Output", "Time complexity: O(n*m) ", "Space complexity: O(m) ", "METHOD 5:Using .items", "APPROACH:", "ALGORITHM:", "Output", "Approach using numpy:", "Note: Install numpy module using command “pip install numpy”", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-column-summation-in-uneven-sized-lists/"},
{"title": "Python-Tensorflow Archives - Page 18 of 18 - GeeksforGeeks", "h1": ["Python-Tensorflow"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/tag/python-tensorflow/page/18/?type=popular"},
{"title": "Python | Pandas dataframe.reindex() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.reindex()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.reindex()", "Syntax:", "Parameters : ", "labels : ", "index, columns : ", "axis : ", "method : ", "copy : ", "level :", "fill_value : ", "limit : ", "tolerance : ", "Returns :", "Example #1: ", "Note : ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-reindex/?ref=next_article"},
{"title": "Python-Tensorflow Archives - Page 8 of 18 - GeeksforGeeks", "h1": ["Python-Tensorflow"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/tag/python-tensorflow/page/8/?type=popular"},
{"title": "Python | Percentage similarity of lists - GeeksforGeeks", "h1": ["Python | Percentage similarity of lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method 1: Using “|” operator + “&” operator + set()", "Output", "Method#2 : Using set() + intersection()+ union", "Output", "Method #3 : Using Counter() from collections module:", "Output", "Time Complexity:", "Auxiliary Space:", "Method #4: Using list comprehension and set()", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-percentage-similarity-of-lists/?type=article&id=338975"},
{"title": "Python - List Elements Grouping in Matrix - GeeksforGeeks", "h1": ["Python – List Elements Grouping in Matrix"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method : Using loop + list comprehension + Try-Except", "Output", "Time complexity", "Auxiliary space: ", "Method 2: Looping over nested Loops in Python", "test_list", "check_list", "check_list", "Output", "Time complexity:", "O(n*m)", "Auxiliary space: O(n*m)", "Method 3: Using dictionary", "Output", "Time complexity:", "O(nm)", "Auxiliary space: O(m + k)", "Method 4: Using set intersection", "Approach:", "Output", "Time complexity: O(n*m)", "Auxiliary space: O(nm)", "Method 5: Using a nested loop and a flag variable to keep track of grouped elements", "Output", "Time complexity:", "Auxiliary space: ", "Method 6: Using the built-in function filter() along with lambda function.", "check_list", " filter() ", "check_list", "grouped_list", "Output", "Time complexity:", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-list-elements-grouping-in-matrix/"},
{"title": "Python - Summation Grouping in Dictionary List - GeeksforGeeks", "h1": ["Python – Summation Grouping in Dictionary List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input :", "Output :", "Input : ", "Output :", "Method #1 : Using loop", "Output : ", "Time complexity: ", "Auxiliary space: ", "Method #2: Using defaultdict", " defaultdict ", "lambda ", "sum_keys ", "0 ", "res ", " dict() ", "Output", "Time complexity:", "Auxiliary space:", "Method 3 :  Using list comprehension and the built-in function sum()", "Output", "Method 4: Using the pandas library", "pandas", "DataFrame", "test_list", "grp_key", "sum_keys", "DataFrame", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-summation-grouping-in-dictionary-list/"},
{"title": "Python | Similarity metrics of strings - GeeksforGeeks", "h1": ["Python | Similarity metrics of strings"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using Naive Approach(sum() + zip())", "Output : ", "Time Complexity: O(n), ", "Auxiliary Space: O(1)", "Method #2 : Using SequenceMatcher.ratio()", "Output : ", "Method #3 : Using difflib.ndiff", "Output", "Method #4: Levenshtein distance algorithm. ", "Output", "Time complexity:", "Auxiliary space: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-similarity-metrics-of-strings/?type=article&id=282964"},
{"title": "Python | Pandas Series.clip() - GeeksforGeeks", "h1": ["Python | Pandas Series.clip()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", "Series.clip()", "Data Structures & Algorithms in JavaScript - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/python-pandas-series-clip/?ref=next_article"},
{"title": "Python | Remove duplicates in Matrix - GeeksforGeeks", "h1": ["Python | Remove duplicates in Matrix"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method : Using loop", "Output : ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-remove-duplicates-in-matrix/?ref=next_article"},
{"title": "Python | Pandas Series.clip() - GeeksforGeeks", "h1": ["Python | Pandas Series.clip()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", "Series.clip()", "Data Structures & Algorithms in JavaScript - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/python-pandas-series-clip/"},
{"title": "Python | Pandas Panel.clip() - GeeksforGeeks", "h1": ["Python | Pandas Panel.clip()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Panel.clip()", "Syntax:", "Parameters:", "lower :", "upper :", "axis :", "inplace :", "Returns:", "Code #1:", "Code #2:", "Code #3:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-panel-clip/?type=article&id=260750"},
{"title": "Python | Pandas Series.clip_upper() - GeeksforGeeks", "h1": ["Python | Pandas Series.clip_upper()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas ", "Series.clip_upper()", "Data Structures & Algorithms in JavaScript - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/python-pandas-series-clip_upper/?type=article&id=233980"},
{"title": "Python - Filter Tuples with Strings of specific characters - GeeksforGeeks", "h1": ["Python – Filter Tuples with Strings of specific characters"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using ", "all()", " + ", "list comprehension", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #2 : Using ", "filter()", " + lambda + all()", "Output", "Time Complexity:", "Auxiliary Space: ", "Method #3 : Using replace(),join() and len() methods", "Output", "Time complexity: ", "Auxiliary space: ", "Method #4 : Using re", "Output", "Time complexity: ", "Auxiliary Space:", "Method #5: Using Set Operations", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-filter-tuples-with-strings-of-specific-characters/?ref=ml_lbp"},
{"title": "Python-Tensorflow Archives - Page 15 of 18 - GeeksforGeeks", "h1": ["Python-Tensorflow"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/tag/python-tensorflow/page/15/?type=popular"},
{"title": "Python | Pandas TimedeltaIndex.has_duplicates - GeeksforGeeks", "h1": ["Python | Pandas TimedeltaIndex.has_duplicates"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " TimedeltaIndex.has_duplicates", "Syntax:", "Return : ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-timedeltaindex-has_duplicates/?ref=next_article"},
{"title": "Python-Tensorflow Archives - Page 17 of 18 - GeeksforGeeks", "h1": ["Python-Tensorflow"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/tag/python-tensorflow/page/17/?type=popular"},
{"title": "Python-Tensorflow Archives - Page 16 of 18 - GeeksforGeeks", "h1": ["Python-Tensorflow"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/tag/python-tensorflow/page/16/?type=popular"},
{"title": "Python-Tensorflow Archives - Page 14 of 18 - GeeksforGeeks", "h1": ["Python-Tensorflow"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/tag/python-tensorflow/page/14/?type=popular"},
{"title": "Python | Pandas TimedeltaIndex.hasnans - GeeksforGeeks", "h1": ["Python | Pandas TimedeltaIndex.hasnans"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " TimedeltaIndex.hasnans", "Syntax:", "Return : ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-timedeltaindex-hasnans/?type=article&id=258947"},
{"title": "Python | Binary element list grouping - GeeksforGeeks", "h1": ["Python | Binary element list grouping"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using list comprehension: ", "Output:", "Time complexity:", "Auxiliary space:", "Method #2: Using itertools.groupby() + itemgetter():", "Output:", "Time complexity: ", "Auxiliary space: ", "Method #3: Using collections.defaultdict()", "Output:", "Time complexity: ", "Auxiliary space: ", "Method #4: Using for loops+sort()", "Output", "Time Complexity : O(n*n)", "Auxiliary Space : O(n)", "Method #5: Using numpy module", "Output:", "Time complexity: ", " ", "Auxiliary space:", "Method #6: Using dictionary and setdefault()", "step by step approach :", "Output", "Time complexity: ", "Auxiliary space:", "Method #7: Using pandas module:", "test_list", "pandas", "lambda", "pandas", "pandas", "lambda", "OUTPUT: ", "Time complexity: ", "Auxiliary space: ", "Method  8: Using a list of lists and index", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-binary-element-list-grouping/"},
{"title": "Python-Tensorflow Archives - Page 13 of 18 - GeeksforGeeks", "h1": ["Python-Tensorflow"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/tag/python-tensorflow/page/13/?type=popular"},
{"title": "Python - Filter rows with only Alphabets from List of Lists - GeeksforGeeks", "h1": ["Python – Filter rows with only Alphabets from List of Lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1: Using ", "isalpha()", " + ", "all()", " + ", "list comprehension", "Output", "Method #2 : Using ", "filter()", " + ", "lambda", " + ", "join()", " + ", "isalpha()", "Output", "Time Complexity: ", "Auxiliary Space : ", "Method #3 : Using itertools.filterfalse() method", "Output", "Time Complexity: O(n2)", "Auxiliary Space: O(n)", "Method #4 : Using re", "Output", "Method #5: Using a nested loop to iterate over each element and character of the list and check if it is an alphabet.", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-filter-rows-with-only-alphabets-from-list-of-lists/?ref=previous_article"},
{"title": "Python | Pandas dataframe.radd() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.radd()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.radd()", "Note :", "Syntax:", "Parameters : ", "other : ", "axis : ", "level : ", "fill_value : ", "Returns :", "Example #1: ", "Output : ", "Example #2: ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-radd/"},
{"title": "Python | Pandas dataframe.reindex_axis() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.reindex_axis()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.reindex_axis()", "Syntax:", "Syntax: ", "Parameters : ", "labels : ", "axis : ", "method : ", "copy : ", "level :", "limit : ", "tolerance : ", "Returns :", "Example #1: ", "Note : ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-reindex_axis/?type=article&id=247006"},
{"title": "Python-Tensorflow Archives - Page 11 of 18 - GeeksforGeeks", "h1": ["Python-Tensorflow"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/tag/python-tensorflow/page/11/?type=popular"},
{"title": "Python-Tensorflow Archives - Page 12 of 18 - GeeksforGeeks", "h1": ["Python-Tensorflow"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/tag/python-tensorflow/page/12/?type=popular"},
{"title": "Python - tensorflow.math.bessel_i1e() function - GeeksforGeeks", "h1": ["Python – tensorflow.math.bessel_i1e() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax: ", "Arguments:", "x:", "name:", "Returns: ", "Example 1:", "Output:", "Example 2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tensorflow-math-bessel_i1e-function/"},
{"title": "Python-Tensorflow Archives - GeeksforGeeks", "h1": ["Python-Tensorflow"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/tag/python-tensorflow/?type=popular"},
{"title": "Python | Pandas dataframe.reindex() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.reindex()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.reindex()", "Syntax:", "Parameters : ", "labels : ", "index, columns : ", "axis : ", "method : ", "copy : ", "level :", "fill_value : ", "limit : ", "tolerance : ", "Returns :", "Example #1: ", "Note : ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-reindex/?type=article&id=247153"},
{"title": "Python - tensorflow.math.divide() - GeeksforGeeks", "h1": ["Python – tensorflow.math.divide()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["divide() ", "Syntax: ", "Parameters:", "x: ", "y: ", "name(optional):", "Returns: ", "Example 1:", "Output:", "Example 2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tensorflow-math-divide/"},
{"title": "Python | tensorflow.math.bessel_i0() method - GeeksforGeeks", "h1": ["Python | tensorflow.math.bessel_i0() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Argument:", "1. input: ", "2. name:", "Return:", "Example 1:", "Output:", "Example 2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tensorflow-math-bessel_i0-method/"},
{"title": "Python Program to Filter Rows with a specific Pair Sum - GeeksforGeeks", "h1": ["Python Program to Filter Rows with a specific Pair Sum"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method 1: ", "Output", "Method 2 : ", "Output:", "Method #3:Using itertools.filterfalse() method", "Output", "Time Complexity: O(N*N)", "Auxiliary Space: O(N*N)", "Method #4: Using sets", "Approach:", "Output", "Time complexity: O(n^2)", "Auxiliary space: O(n) ", "Method 5: Using the two-pointer technique.", "Output", "Time complexity: ", "Auxiliary Space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-filter-rows-with-a-specific-pair-sum/"},
{"title": "Python | Pandas TimedeltaIndex.has_duplicates - GeeksforGeeks", "h1": ["Python | Pandas TimedeltaIndex.has_duplicates"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " TimedeltaIndex.has_duplicates", "Syntax:", "Return : ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-timedeltaindex-has_duplicates/?type=article&id=258949"},
{"title": "Python - tensorflow.raw_ops.Tan() - GeeksforGeeks", "h1": ["Python – tensorflow.raw_ops.Tan()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Tan()", "Syntax: ", "Parameters:", "x:", "name(optional): ", "Returns:", "Note: ", "Example 1:", "Output:", "Example 2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-raw_ops-tan/"},
{"title": "Python - Filter rows without Space Strings - GeeksforGeeks", "h1": ["Python – Filter rows without Space Strings"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1: Using ", "list comprehension", " + ", "any()", " + ", "regex", "Output", "Complexity Analysis:", "Time Complexity: ", "Auxiliary Space: ", "Method #2 : Using ", "filter()", " + ", "lambda", " + any() + regex", "Output", "Complexity Analysis:", "Time Complexity: ", "Auxiliary Space: ", "Method #3 : Using join() and find() methods", " join()", "find()", "Output", "Method #4:Using itertools.filterfalse() method", "Output", "Time Complexity:  O(N2)", "Auxiliary Space: O(N)", "Method #5: Here is a new approach using a list comprehension and the split and all() method:", "Output", "Time Complexity: O(N2), loop * split() method", "Auxiliary Space: O(N)", "Method #6: Using nested loops and flag variable", "Step by step approach:", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-filter-rows-without-space-strings/"},
{"title": "Python | Pandas TimedeltaIndex.empty - GeeksforGeeks", "h1": ["Python | Pandas TimedeltaIndex.empty"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " TimedeltaIndex.empty", "Syntax:", "Return : ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-timedeltaindex-empty/?ref=next_article"},
{"title": "Python - tensorflow.raw_ops.Asin() - GeeksforGeeks", "h1": ["Python – tensorflow.raw_ops.Asin()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Asin()", "Syntax: ", "Arguments:", "x:", "name(optional): ", "Returns:", "Note: ", "Example 1:", "Output:", "Example 2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-raw_ops-asin/"},
{"title": "Python - tensorflow.math.lbeta() - GeeksforGeeks", "h1": ["Python – tensorflow.math.lbeta()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["lbeta() ", "Syntax: ", "Parameters:", "x: ", "name(optional): ", "Returns:", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tensorflow-math-lbeta/"},
{"title": "Python - tensorflow.raw_ops.Atanh() - GeeksforGeeks", "h1": ["Python – tensorflow.raw_ops.Atanh()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Atanh()", "Syntax: ", "Parameters:", "x:", "name(optional): ", "Returns:", "Note: ", "Example 1:", "Output:", "Example 2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-raw_ops-atanh/"},
{"title": "Python - tensorflow.raw_ops.Atan() - GeeksforGeeks", "h1": ["Python – tensorflow.raw_ops.Atan()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Atan()", "Syntax: ", "Parameters:", "x:", "name(optional): ", "Returns:", "Note: ", "Example 1:", "Output:", "Example 2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-raw_ops-atan/"},
{"title": "Python - tensorflow.math.bessel_i1e() function - GeeksforGeeks", "h1": ["Python – tensorflow.math.bessel_i1e() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax: ", "Arguments:", "x:", "name:", "Returns: ", "Example 1:", "Output:", "Example 2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tensorflow-math-bessel_i1e-function/?type=article&id=423345"},
{"title": "Python - Tensorflow bitwise.right_shift() method - GeeksforGeeks", "h1": ["Python – Tensorflow bitwise.right_shift() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Syntax: ", "Arguments", "a: ", "b: ", "name: ", "Return: ", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-bitwise-right_shift-method/"},
{"title": "Python | Pandas dataframe.radd() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.radd()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.radd()", "Note :", "Syntax:", "Parameters : ", "other : ", "axis : ", "level : ", "fill_value : ", "Returns :", "Example #1: ", "Output : ", "Example #2: ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-radd/?ref=next_article"},
{"title": "Python - Filter rows with only Alphabets from List of Lists - GeeksforGeeks", "h1": ["Python – Filter rows with only Alphabets from List of Lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1: Using ", "isalpha()", " + ", "all()", " + ", "list comprehension", "Output", "Method #2 : Using ", "filter()", " + ", "lambda", " + ", "join()", " + ", "isalpha()", "Output", "Time Complexity: ", "Auxiliary Space : ", "Method #3 : Using itertools.filterfalse() method", "Output", "Time Complexity: O(n2)", "Auxiliary Space: O(n)", "Method #4 : Using re", "Output", "Method #5: Using a nested loop to iterate over each element and character of the list and check if it is an alphabet.", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-filter-rows-with-only-alphabets-from-list-of-lists/"},
{"title": "Python | tensorflow.math.bessel_i0() method - GeeksforGeeks", "h1": ["Python | tensorflow.math.bessel_i0() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Argument:", "1. input: ", "2. name:", "Return:", "Example 1:", "Output:", "Example 2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tensorflow-math-bessel_i0-method/?type=article&id=421163"},
{"title": "Python | Pandas dataframe.rdiv() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.rdiv()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.rdiv()", "Syntax:", "Parameters : ", "other :", "axis : ", "level : ", "numeric_only : ", "fill_value : ", "Returns :", "Example #1: ", "Output : ", "Example #2: ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-rdiv/?ref=next_article"},
{"title": "Python - Filter rows with required elements - GeeksforGeeks", "h1": ["Python – Filter rows with required elements"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using ", "list comprehension", " + ", "all()", "Output:", "Method #2 : Using ", "filter()", " + ", "lambda", " + all()", "Output:", "Method #3: Using itertools.filterfalse() method", "Output", "Time Complexity: O(N*N)", "Auxiliary Space: O(N*N)", "Method #4: Using set() and issubset() function:", "Algorithm:", "Output", "Time Complexity: O(n*m), ", "Auxiliary Space: O(m), ", "Method #5: Using nested for loops", "Steps:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-filter-rows-with-required-elements/"},
{"title": "Python - Filter Tuples with Strings of specific characters - GeeksforGeeks", "h1": ["Python – Filter Tuples with Strings of specific characters"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using ", "all()", " + ", "list comprehension", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #2 : Using ", "filter()", " + lambda + all()", "Output", "Time Complexity:", "Auxiliary Space: ", "Method #3 : Using replace(),join() and len() methods", "Output", "Time complexity: ", "Auxiliary space: ", "Method #4 : Using re", "Output", "Time complexity: ", "Auxiliary Space:", "Method #5: Using Set Operations", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-filter-tuples-with-strings-of-specific-characters/?ref=previous_article"},
{"title": "Python - tensorflow.math.bessel_i1() function - GeeksforGeeks", "h1": ["Python – tensorflow.math.bessel_i1() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["bessel_i1()", "Syntax: ", "Parameters:", "x:", "name:  ", "Returns: ", "Example 1:", "Output:", "Example 2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tensorflow-math-bessel_i1-function/"},
{"title": "Python - tensorflow.raw_ops.Exp() - GeeksforGeeks", "h1": ["Python – tensorflow.raw_ops.Exp()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Exp()", "Syntax: ", "Parameters:", "x:", "name(optional): ", "Returns:", "Note: ", "Example 1:", "Output:", "Example 2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-raw_ops-exp/?ref=next_article"},
{"title": "Python - tensorflow.math.betainc() method - GeeksforGeeks", "h1": ["Python – tensorflow.math.betainc() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["betainc()", "I", "x", "(a,b)", "Regularized", "incomplete beta integral Ix(a,b)  is defines as:", "where,", "Syntax: ", "Parameters:", "a:", "b:", "x: ", "name:", "Return: ", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tensorflow-math-betainc-method/"},
{"title": "Python - tensorflow.IndexedSlices.indices Attribute - GeeksforGeeks", "h1": ["Python – tensorflow.IndexedSlices.indices Attribute"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["indices ", "Syntax: ", "Returns: ", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tensorflow-indexedslices-indices-attribute/?ref=ml_lbp"},
{"title": "Python - tensorflow.raw_ops.Asin() - GeeksforGeeks", "h1": ["Python – tensorflow.raw_ops.Asin()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Asin()", "Syntax: ", "Arguments:", "x:", "name(optional): ", "Returns:", "Note: ", "Example 1:", "Output:", "Example 2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-raw_ops-asin/?ref=ml_lbp"},
{"title": "Python - Filter Sorted Rows - GeeksforGeeks", "h1": ["Python – Filter Sorted Rows"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using ", "list comprehension", " + ", "sorted()", " + reverse", "Output:", "Method #2 : Using ", "filter()", " + ", "lambda", " + sorted() + reverse", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-filter-sorted-rows/"},
{"title": "Python - Filter rows without Space Strings - GeeksforGeeks", "h1": ["Python – Filter rows without Space Strings"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1: Using ", "list comprehension", " + ", "any()", " + ", "regex", "Output", "Complexity Analysis:", "Time Complexity: ", "Auxiliary Space: ", "Method #2 : Using ", "filter()", " + ", "lambda", " + any() + regex", "Output", "Complexity Analysis:", "Time Complexity: ", "Auxiliary Space: ", "Method #3 : Using join() and find() methods", " join()", "find()", "Output", "Method #4:Using itertools.filterfalse() method", "Output", "Time Complexity:  O(N2)", "Auxiliary Space: O(N)", "Method #5: Here is a new approach using a list comprehension and the split and all() method:", "Output", "Time Complexity: O(N2), loop * split() method", "Auxiliary Space: O(N)", "Method #6: Using nested loops and flag variable", "Step by step approach:", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-filter-rows-without-space-strings/?type=article&id=508406"},
{"title": "Python - tensorflow.IndexedSlices.graph Attribute - GeeksforGeeks", "h1": ["Python – tensorflow.IndexedSlices.graph Attribute"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["graph ", "Syntax: ", "Return: ", "Example 1:", "Output:", "Example 2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-indexedslices-graph-attribute/?ref=ml_lbp"},
{"title": "Python - tensorflow.raw_ops.Acosh() - GeeksforGeeks", "h1": ["Python – tensorflow.raw_ops.Acosh()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Acosh()", "Syntax: ", "Arguments:", "x:", "name(optional): ", "Returns:", "Note: ", "Example 1:", "Output:", "Example 2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-raw_ops-acosh/?ref=next_article"},
{"title": "Python - tensorflow.executing_eagerly() - GeeksforGeeks", "h1": ["Python – tensorflow.executing_eagerly()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["executing_eagerly() ", "tensorflow.function", "tf.init_scope", " tf.config.experimental_run_functions_eagerly(True)", "Syntax: ", "Parameters: ", "Returns: ", "Example 1:", "Output:", "Example 2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-executing_eagerly/?ref=previous_article"},
{"title": "Python - tensorflow.executing_eagerly() - GeeksforGeeks", "h1": ["Python – tensorflow.executing_eagerly()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["executing_eagerly() ", "tensorflow.function", "tf.init_scope", " tf.config.experimental_run_functions_eagerly(True)", "Syntax: ", "Parameters: ", "Returns: ", "Example 1:", "Output:", "Example 2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-executing_eagerly/?ref=ml_lbp"},
{"title": "Python - tensorflow.raw_ops.Atanh() - GeeksforGeeks", "h1": ["Python – tensorflow.raw_ops.Atanh()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Atanh()", "Syntax: ", "Parameters:", "x:", "name(optional): ", "Returns:", "Note: ", "Example 1:", "Output:", "Example 2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-raw_ops-atanh/?ref=next_article"},
{"title": "Python | tensorflow.math.angle() method - GeeksforGeeks", "h1": ["Python | tensorflow.math.angle() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Argument:", "1. input:", "2. name:", "Return:", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tensorflow-math-angle-method/"},
{"title": "Python | Tensorflow sin() method - GeeksforGeeks", "h1": ["Python | Tensorflow sin() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["tensorflow.math", "Syntax", "Parameters", "x", "name", "Return type", "Code #1:", "Output:", "Code #2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-sin-method/"},
{"title": "Python - tensorflow.math.bessel_i1e() function - GeeksforGeeks", "h1": ["Python – tensorflow.math.bessel_i1e() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax: ", "Arguments:", "x:", "name:", "Returns: ", "Example 1:", "Output:", "Example 2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tensorflow-math-bessel_i1e-function/?ref=next_article"},
{"title": "Python - tensorflow.IndexedSlices.indices Attribute - GeeksforGeeks", "h1": ["Python – tensorflow.IndexedSlices.indices Attribute"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["indices ", "Syntax: ", "Returns: ", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tensorflow-indexedslices-indices-attribute/?ref=previous_article"},
{"title": "Python | Tensorflow nn.tanh() - GeeksforGeeks", "h1": ["Python | Tensorflow nn.tanh()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["tensorflow.nn", "Syntax", "Parameters:", "x", "name", "Return ", "Code #1:", "Output:", "Code #2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-nn-tanh/"},
{"title": "Python | Creating tensors using different functions in Tensorflow - GeeksforGeeks", "h1": ["Python | Creating tensors using different functions in Tensorflow"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Method #1: ", "Output:", "Method #2: ", "Output:", "Method #3: ", "Method #4: ", "Method #5: ", "Method #6: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-creating-tensors-using-different-functions-in-tensorflow/"},
{"title": "Python | Tensorflow cos() method - GeeksforGeeks", "h1": ["Python | Tensorflow cos() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["tensorflow.math", "Syntax", "Parameters", "x", "name", "Return type", "Code #1:", "Output:", "Code #2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-cos-method/"},
{"title": "Python - tensorflow.raw_ops.Cos() - GeeksforGeeks", "h1": ["Python – tensorflow.raw_ops.Cos()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Cos()", "Syntax: ", "Parameters:", "x:", "name(optional): ", "Returns:", "Note: ", "Example 1:", "Output:", "Example 2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-raw_ops-cos/?ref=next_article"},
{"title": "Python | Classify Handwritten Digits with Tensorflow - GeeksforGeeks", "h1": ["Python | Classify Handwritten Digits with Tensorflow"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Classification Projects", "Regression Projects", "Computer Vision Projects", "Natural Language Processing Projects", "Clustering Projects", "Recommender System Project", "Classification Projects", "Regression Projects", "Computer Vision Projects", "Natural Language Processing Projects", "Clustering Projects", "Recommender System Project", "Steps to follow", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Steps to follow", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "saving and testing model ", " ", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Using a Linear Classifier Algorithm with tf.contrib.learn ", "Modules required :", "Steps to follow", "Step 1 :", "Step 2 :", "output :", "Step 3 : ", "Step 4 : ", "display(0)", "output : ", "Step 5 : ", "Step 6 : ", "Output :", "Step 7 : ", "Output :", "Full Code for classifying handwritten ", "Using Deep learning with tf.keras", "Modules required :", "Steps to follow", "Step 1 :", "Step 2 :", "Step 3 :", "Step 4 :", "Step 5 :", "Step 6 :", "saving and testing model ", "saving the model ", "loading the saved model", "prediction using new model", "GATE Data Science and Artificial Intelligence 2025 ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-classifying-handwritten-digits-with-tensorflow/"},
{"title": "Python - tensorflow.expand_dims() - GeeksforGeeks", "h1": ["Python – tensorflow.expand_dims()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["expand_dims() ", "Syntax: ", "Parameters:", "input: ", "axis: ", "name(optional): ", "Returns:", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-expand_dims/?ref=next_article"},
{"title": "Python - Filter rows with required elements - GeeksforGeeks", "h1": ["Python – Filter rows with required elements"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using ", "list comprehension", " + ", "all()", "Output:", "Method #2 : Using ", "filter()", " + ", "lambda", " + all()", "Output:", "Method #3: Using itertools.filterfalse() method", "Output", "Time Complexity: O(N*N)", "Auxiliary Space: O(N*N)", "Method #4: Using set() and issubset() function:", "Algorithm:", "Output", "Time Complexity: O(n*m), ", "Auxiliary Space: O(m), ", "Method #5: Using nested for loops", "Steps:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-filter-rows-with-required-elements/?type=article&id=496501"},
{"title": "Python - Tensorflow bitwise.right_shift() method - GeeksforGeeks", "h1": ["Python – Tensorflow bitwise.right_shift() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Syntax: ", "Arguments", "a: ", "b: ", "name: ", "Return: ", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-bitwise-right_shift-method/?ref=previous_article"},
{"title": "Python - tensorflow.raw_ops.Asin() - GeeksforGeeks", "h1": ["Python – tensorflow.raw_ops.Asin()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Asin()", "Syntax: ", "Arguments:", "x:", "name(optional): ", "Returns:", "Note: ", "Example 1:", "Output:", "Example 2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-raw_ops-asin/?ref=next_article"},
{"title": "Python - Tensorflow bitwise.right_shift() method - GeeksforGeeks", "h1": ["Python – Tensorflow bitwise.right_shift() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Syntax: ", "Arguments", "a: ", "b: ", "name: ", "Return: ", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-bitwise-right_shift-method/?ref=ml_lbp"},
{"title": "Python - Filter Sorted Rows - GeeksforGeeks", "h1": ["Python – Filter Sorted Rows"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using ", "list comprehension", " + ", "sorted()", " + reverse", "Output:", "Method #2 : Using ", "filter()", " + ", "lambda", " + sorted() + reverse", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-filter-sorted-rows/?type=article&id=509125"},
{"title": "Python | Pandas dataframe.rdiv() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.rdiv()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.rdiv()", "Syntax:", "Parameters : ", "other :", "axis : ", "level : ", "numeric_only : ", "fill_value : ", "Returns :", "Example #1: ", "Output : ", "Example #2: ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-rdiv/?type=article&id=247135"},
{"title": "Python - tensorflow.DeviceSpec.device_index Attribute - GeeksforGeeks", "h1": ["Python – tensorflow.DeviceSpec.device_index Attribute"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["device_index ", "Syntax: ", "Returns: ", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tensorflow-devicespec-device_index-attribute/"},
{"title": "Python - tensorflow.IndexedSlices.indices Attribute - GeeksforGeeks", "h1": ["Python – tensorflow.IndexedSlices.indices Attribute"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["indices ", "Syntax: ", "Returns: ", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-indexedslices-indices-attribute/?type=article&id=453497"},
{"title": "Python - Sort by a particular digit count in elements - GeeksforGeeks", "h1": ["Python – Sort by a particular digit count in elements"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1: Using ", "list comprehension", " + ", "str()", " + ", "count()", "Output", "Method #2 : Using ", "sorted()", " + str() + count() + ", "lambda", "Output", "Method #3 : Using count(),sort(),extend() and index() methods", "Output", "Method 4:  using operator.countOf() method", "Output", "Time Complexity: O(NLogN)", "Auxiliary Space : O(N)", "Method 5:Using the itertools.groupby() function", "Output", "Time Complexity: O(NLogN)", "Auxiliary Space : O(N)", "Method 6:Using a dictionary : ", "Algorithm:", "Output", "Time Complexity: O(n * m * log m), ", "Auxiliary Space: O(n), ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-sort-by-a-particular-digit-count-in-elements/?ref=next_article"},
{"title": "Python - tensorflow.IndexedSlices() - GeeksforGeeks", "h1": ["Python – tensorflow.IndexedSlices()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["IndexedSlices() ", "Syntax: ", "Parameters:", "values: ", "indices: ", "Returns: ", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-indexedslices/"},
{"title": "Python | math.cos() function - GeeksforGeeks", "h1": ["Python | math.cos() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["math.cos()", "Syntax:", "Parameter:", "Returns:", "Code #1: ", "Code #2: ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-math-cos-function/"},
{"title": "Python - tensorflow.raw_ops.Log() - GeeksforGeeks", "h1": ["Python – tensorflow.raw_ops.Log()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Log()", "Syntax: ", "Parameters:", "x:", "name(optional): ", "Returns:", "Note: ", "Example 1:", "Output:", "Example 2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-raw_ops-log/?ref=next_article"},
{"title": "Python | sympy.cos() method - GeeksforGeeks", "h1": ["Python | sympy.cos() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Code #1: ", "Output: ", "Code #2: ", "Output: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sympy-cos-method/"},
{"title": "Python | PyTorch cos() method - GeeksforGeeks", "h1": ["Python | PyTorch cos() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax", "Parameters", "x", "name", "Return type", "Code #1:", "Output:", "Code #2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-pytorch-cos-method/"},
{"title": "Python - cmath.tanh() function - GeeksforGeeks", "h1": ["Python – cmath.tanh() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["cmath", "Syntax:", "Parameter: ", "Return: ", " ", "Example 1: ", "Output:", "Example 2: ", "Output:", "Example 3: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-cmath-tanh-function/"},
{"title": "Python - math.tanh() function - GeeksforGeeks", "h1": ["Python – math.tanh() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Math module", "math.tanh()", "Syntax:", "Parameter:", "x :", "Returns:", "Example 1:", "Output:", "Example 2:", "Output:", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-math-tanh-function/"},
{"title": "Python | Numpy.expand_dims() method - GeeksforGeeks", "h1": ["Python | Numpy.expand_dims() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Numpy.expand_dims()", "Syntax :", "Return :", "Example #1 :", "Output :", "Example #2 :", "Output :", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-numpy-expand_dims-method/"},
{"title": "Python - tensorflow.executing_eagerly() - GeeksforGeeks", "h1": ["Python – tensorflow.executing_eagerly()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["executing_eagerly() ", "tensorflow.function", "tf.init_scope", " tf.config.experimental_run_functions_eagerly(True)", "Syntax: ", "Parameters: ", "Returns: ", "Example 1:", "Output:", "Example 2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-executing_eagerly/?type=article&id=448254"},
{"title": "Python | Tensorflow nn.relu() and nn.leaky_relu() - GeeksforGeeks", "h1": ["Python | Tensorflow nn.relu() and nn.leaky_relu()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["tensorflow.nn", "Computationally faster", "Fewer vanishing gradients", "Syntax", "Parameters", "features", "name", "Return type", "Output:", "Leaky ReLU:", "nn.leaky_relu()", "Syntax", "Parameters", "features", "alpha", "name", "Return type", "Output:", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-tensorflow-nn-relu-and-nn-leaky_relu/"},
{"title": "Python | sympy.sin() method - GeeksforGeeks", "h1": ["Python | sympy.sin() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Code #1: ", "Output: ", "Code #2: ", "Output: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sympy-sin-method/"},
{"title": "Python | math.sin() function - GeeksforGeeks", "h1": ["Python | math.sin() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["math.sin()", "Syntax:", "Parameter:", "Returns:", "Code #1: ", "Code #2: ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-math-sin-function/"},
{"title": "Python | Tensorflow nn.softplus() - GeeksforGeeks", "h1": ["Python | Tensorflow nn.softplus()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["tensorflow.nn", "Syntax", "Parameters", "features", "name", "Return type", "Code #1:", "Output:", "Code #2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-nn-softplus/"},
{"title": "Python | tensorflow.math.bessel_i0() method - GeeksforGeeks", "h1": ["Python | tensorflow.math.bessel_i0() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Argument:", "1. input: ", "2. name:", "Return:", "Example 1:", "Output:", "Example 2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tensorflow-math-bessel_i0-method/?ref=next_article"},
{"title": "Python | Tensorflow tan() method - GeeksforGeeks", "h1": ["Python | Tensorflow tan() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["tensorflow.math", "Syntax", "Parameters", "x", "name", "Return type", "Code #1:", "Output:", "Code #2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-tan-method/?ref=ml_lbp"},
{"title": "Python | Tensorflow nn.sigmoid() - GeeksforGeeks", "h1": ["Python | Tensorflow nn.sigmoid()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["tensorflow.nn", "Syntax", "Parameters", "x", "name", "Return type", "Code #1:", "Output:", "Code #2: ", "Output:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-nn-sigmoid/"},
{"title": "Python - tensorflow.DeviceSpec.device_index Attribute - GeeksforGeeks", "h1": ["Python – tensorflow.DeviceSpec.device_index Attribute"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["device_index ", "Syntax: ", "Returns: ", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tensorflow-devicespec-device_index-attribute/?type=article&id=456015"},
{"title": "Python - cmath.cos() function - GeeksforGeeks", "h1": ["Python – cmath.cos() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["cMath module", "cmath.cos()", "int, float, ", "complex", "Syntax:", "Parameter:", "x :", "Returns:", "Example #1 : ", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-cmath-cos-function/"},
{"title": "Python PIL | ImageDraw.Draw.text() - GeeksforGeeks", "h1": ["Python PIL | ImageDraw.Draw.text()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["ImageDraw.Draw.text()", "Syntax:", "Parameters:", " xy", "text", "fill", "font", "spacing", "align", "Return Type:", "Image Used:", "Code : Using PIL | ImageDraw.Draw.text()", "Output:", "Another Example:", "Image Used:", "Code : Using PIL | ImageDraw.Draw.text()", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-pil-imagedraw-draw-text/?ref=ml_lbp"},
{"title": "Python | Matplotlib.pyplot ticks - GeeksforGeeks", "h1": ["Python | Matplotlib.pyplot ticks"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["Ticks ", "Parameters", "Example #1:", "Output :", "Example #2:", "Output:", "Example #3:", "Output:", "Reference: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-matplotlib-pyplot-ticks/?ref=ml_lbp"},
{"title": "Python - tensorflow.expand_dims() - GeeksforGeeks", "h1": ["Python – tensorflow.expand_dims()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["expand_dims() ", "Syntax: ", "Parameters:", "input: ", "axis: ", "name(optional): ", "Returns:", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-expand_dims/?type=article&id=448256"},
{"title": "Python | math.fabs() function - GeeksforGeeks", "h1": ["Python | math.fabs() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["math.fabs()", "Syntax:", "Parameter:", "x:", "Returns:", " Time Complexity:", " Auxiliary Space:", "Code #1: ", "Output:", "Code #2: ", "Output:", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Master JavaScript - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-math-fabs-function/"},
{"title": "Python | Check if element exists in list of lists - GeeksforGeeks", "h1": ["Python | Check if element exists in list of lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using any()", "Output:", "Time complexity: ", "Auxiliary space:", "Method #2: Using operator ", "in", "Output:", "Time complexity: ", "Auxiliary space: ", "Method #3: Using itertools.chain()", "Output:", "Time complexity: ", "Auxiliary space:", "Method #4: ", "Output", "Time complexity:", "Auxiliary space:", "Method #5:  Using functools.reduce():", "Output", "Time complexity: ", "Auxiliary Space:", "Method#6 : Using counter()", "Algorithm :", "Output", "Time Complexity : O(n)", "Auxiliary Space : O(1)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-check-if-element-exists-in-list-of-lists/?ref=next_article"},
{"title": "Python - tensorflow.raw_ops.Cosh() - GeeksforGeeks", "h1": ["Python – tensorflow.raw_ops.Cosh()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Cosh()", "Syntax: ", "Parameters:", "x:", "name(optional): ", "Returns:", "Note: ", "Example 1:", "Output:", "Example 2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-raw_ops-cosh/?ref=next_article"},
{"title": "Python - cmath.sin() function - GeeksforGeeks", "h1": ["Python – cmath.sin() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["cmath", "Syntax:", "Parameter: ", "Return: ", " ", "Example 1: ", "Output:", "Example 2: ", "Output:", "Example 3: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-cmath-sin-function/"},
{"title": "Python | math.cos() function - GeeksforGeeks", "h1": ["Python | math.cos() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["math.cos()", "Syntax:", "Parameter:", "Returns:", "Code #1: ", "Code #2: ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-math-cos-function/?ref=ml_lbp"},
{"title": "Python - tensorflow.DeviceSpec.device_type Attribute - GeeksforGeeks", "h1": ["Python – tensorflow.DeviceSpec.device_type Attribute"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["device_type ", "Syntax: ", "Returns: ", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tensorflow-devicespec-device_type-attribute/?ref=next_article"},
{"title": "Python | Reverse Geocoding to get location on a map using geographic coordinates - GeeksforGeeks", "h1": ["Python | Reverse Geocoding to get location on a map using geographic coordinates"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Modules needed:", "reverse_geocoder:", "pprint:", "Installation:", "pip", "Examples:", "Input :", "Output :", "Input :", "Output :", "Output:", "References:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-reverse-geocoding-to-get-location-on-a-map-using-geographic-coordinates/?ref=next_article"},
{"title": "Python - cmath.tan() function - GeeksforGeeks", "h1": ["Python – cmath.tan() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["cmath", "Syntax:", "Parameter: ", "Return: ", " ", "Example 1: ", "Output:", "Example 2: ", "Output:", "Example 3: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-cmath-tan-function/"},
{"title": "Python | PyTorch sin() method - GeeksforGeeks", "h1": ["Python | PyTorch sin() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax", "Parameters", "x", "name", "Return type", "Code #1:", "Output:", "Code #2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-pytorch-sin-method/"},
{"title": "Python | PyTorch tanh() method - GeeksforGeeks", "h1": ["Python | PyTorch tanh() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax", "Parameters", "x", "name", "Return type", "Code #1:", "Output:", "Code #2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-pytorch-tanh-method/"},
{"title": "Python | Creating tensors using different functions in Tensorflow - GeeksforGeeks", "h1": ["Python | Creating tensors using different functions in Tensorflow"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Method #1: ", "Output:", "Method #2: ", "Output:", "Method #3: ", "Method #4: ", "Method #5: ", "Method #6: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-creating-tensors-using-different-functions-in-tensorflow/?ref=ml_lbp"},
{"title": "Python math function | copysign() - GeeksforGeeks", "h1": ["Python math function | copysign()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax : ", "Parameters : ", "Returns : ", "Time Complexity: ", "Auxiliary Space:", "Code #1:", "Output : ", "Code #2:", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-math-function-copysign/"},
{"title": "Python - cmath.phase() function - GeeksforGeeks", "h1": ["Python – cmath.phase() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["cMath module", "cmath.phase()", "int, float, ", "complex", "Syntax:", "Parameter:", "x :", "Returns:", "Example #1 : ", "Output:", "Example 2:", "Output:", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Master JavaScript - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-cmath-phase-function/"},
{"title": "Python | math.floor() function - GeeksforGeeks", "h1": ["Python | math.floor() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["math.floor()", "Syntax:", "Parameter:", "x:", "Returns:", "Code #1: ", "Output:", "Code #2: ", "Output:", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-math-floor-function/"},
{"title": "Python - Test if any set element exists in List - GeeksforGeeks", "h1": ["Python – Test if any set element exists in List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Explanation :", "Input :", "Output :", "Explanation :", "Method #1 : Using ", "any()", "Output:", "Time complexity: ", "Auxiliary space: ", "Method #2 : Using ", "& operator", "Output:", "Time complexity:", "Auxiliary space: ", "Method #3:Using Counter()+lambda functions", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method#4: using set intersection", "Algorithm:", "Output", "Time Complexity:", "Auxiliary Space:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-test-if-any-set-element-exists-in-list/"},
{"title": "Python | math.factorial() function - GeeksforGeeks", "h1": ["Python | math.factorial() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["math.factorial()", "Syntax:", "Parameter:", "x:", "Returns:", "Time Complexity:", "Auxiliary space: ", "Code #1: ", "Output:", "Code #2: ", "Output:", "Code #3: ", "Output:", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Master JavaScript - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-math-factorial-function/"},
{"title": "Python | math.ceil() function - GeeksforGeeks", "h1": ["Python  | math.ceil() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["math.ceil()", "Syntax:", "Parameter:", "x:", "Returns:", "Time Complexity:", "Auxiliary Space: ", "Code #1: ", "Output:", "Code #2: ", "Output:", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Master JavaScript - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-math-ceil-function/"},
{"title": "Python | fabs() vs abs() - GeeksforGeeks", "h1": ["Python | fabs() vs abs()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax of abs():", "Syntax of fabs():", "Output: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-fabs-vs-abs/"},
{"title": "Python | Tensorflow reciprocal() method - GeeksforGeeks", "h1": ["Python | Tensorflow reciprocal() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["tensorflow.math", "Syntax", "Parameters", "x", "name", "Return type", "Code #1:", "Output:", "Code #2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-reciprocal-method/?ref=ml_lbp"},
{"title": "Python | Check if all values in numpy are zero - GeeksforGeeks", "h1": ["Python | Check if all values in numpy are zero"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1:", "Output:", "Method #2:", "Output:", " Method #3: Using numpy.count_nonzero", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-check-if-all-values-in-numpy-are-zero/"},
{"title": "Python | Tensorflow log1p() method - GeeksforGeeks", "h1": ["Python | Tensorflow log1p() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["tensorflow.math", "Syntax", "Parameters", "x", "name", "Return type", "Code #1:", "Output:", "Code #2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-log1p-method/?ref=ml_lbp"},
{"title": "Python - Check if any list element is present in Tuple - GeeksforGeeks", "h1": ["Python – Check if any list element is present in Tuple"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1: Using loop", "Output", "Method #2: Using any()", "Output", "Method #3:", "Output", "Time complexity: ", "Auxiliary space: ", "Method #4:", "Output", "Method #5:", "Output", "Method #6: Using operator.countOf() method", "Output", "Time Complexity: O(N)", "Auxiliary Space : O(1)", "Method #7: Using any() + map() function", "Output", "Time Complexity: O(N)", "Auxiliary Space : O(1)", "Method#8: Using Recursive method.", "Output", "Time Complexity: O(n)", "Space Complexity: O(n)", "Method 11: Using while loop and in operator:", "Approach:", "Output", "Time Complexity: ", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-check-if-any-list-element-is-present-in-tuple/"},
{"title": "Python | Check if any element in list satisfies a condition - GeeksforGeeks", "h1": ["Python | Check if any element in list satisfies a condition"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension", "Output", "Time complexity: ", "Auxiliary space: ", "Method #2 : Using any()", "Output", " Method #3 : Using the next() function", "Output", "time complexit", "Auxiliary space ", " Method #4 : Using filter()", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-check-if-any-element-in-list-satisfies-a-condition/"},
{"title": "Python | Check if any element occurs n times in given list - GeeksforGeeks", "h1": ["Python | Check if any element occurs n times in given list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples: ", "Input:", "Output : ", "Input:", "Output : ", "Method 1: Using Simple Iteration and Sort ", "Output", "Time complexity: ", "Auxiliary space: ", "Method 2: Using Count", "Output", "Time complexity: ", "Auxiliary space: ", "Method 3: Using defaultdict", "Output", "Method #4 : Using Counter() function", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method#5:Using regular expressions", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method#6: Using Recursive method.", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method #7 : Using ", "operator.countOf() method", "Approach", "Output", "Time Complexity:", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-check-if-any-element-occurs-n-times-in-given-list/"},
{"title": "Python - Check if string starts with any element in list - GeeksforGeeks", "h1": ["Python – Check if string starts with any element in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "String", "Input_lis", "Output:", "Explanation:", "String", "Input_lis", "Output:", "Explanation:", "Check if a string starts with any element in a list using string startswith()", "Output", "sing filter()", "Output", "Check if a string starts with any element in a list using in operator", "Output", "Time complexity: ", "Auxiliary space:", "Output", "Time complexity: ", "Auxiliary space: ", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(1)", "Using regular expressions", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(1)", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-check-if-string-starts-with-any-element-in-list/"},
{"title": "Python - PyTorch floor() method - GeeksforGeeks", "h1": ["Python – PyTorch floor() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Syntax: ", "Arguments", "input: ", "out: ", "Return: ", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-pytorch-floor-method/"},
{"title": "Python | Pandas Timedelta.floor() - GeeksforGeeks", "h1": ["Python | Pandas Timedelta.floor()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Timedelta.floor()", "Syntax:", "Parameters:", "freq : ", "Returns:", "Code #1:", "Output:", "Code #2:", "Output:", "Code #3:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-timedelta-floor/"},
{"title": "Python | Check if element exists in list of lists - GeeksforGeeks", "h1": ["Python | Check if element exists in list of lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using any()", "Output:", "Time complexity: ", "Auxiliary space:", "Method #2: Using operator ", "in", "Output:", "Time complexity: ", "Auxiliary space: ", "Method #3: Using itertools.chain()", "Output:", "Time complexity: ", "Auxiliary space:", "Method #4: ", "Output", "Time complexity:", "Auxiliary space:", "Method #5:  Using functools.reduce():", "Output", "Time complexity: ", "Auxiliary Space:", "Method#6 : Using counter()", "Algorithm :", "Output", "Time Complexity : O(n)", "Auxiliary Space : O(1)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-check-if-element-exists-in-list-of-lists/"},
{"title": "Python | Test if key exists in tuple keys dictionary - GeeksforGeeks", "h1": ["Python | Test if key exists in tuple keys dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using any() + generator expression", "Output", "Time complexity: ", "Auxiliary Space: ", "Method #2: Using from_iterable()", "Output", "Method #3 : Using set() + list comprehension", "Output", "Time complexity: O(n) ", "Auxiliary Space: O(n)", "Method#4: Using a for loop", "Output", "Time complexity: O(n*m)", "Auxiliary Space: O(N*M)", "Method 5:  Using “in” keyword with dictionary.keys() method", "Output", "Time Complexity: O(n), ", "Auxiliary Space: O(n), ", "Method 6:  Using numpy:", "Output:", "Time complexity:  O(N)", "Auxiliary Space: O(N)", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-test-if-key-exists-in-tuple-keys-dictionary/"},
{"title": "Python | Pandas Timestamp.floor - GeeksforGeeks", "h1": ["Python | Pandas Timestamp.floor"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " Timestamp.floor()", "Syntax :", "Parameters : ", "freq : ", "Return : ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-timestamp-floor/"},
{"title": "Python - Test if all rows contain any common element with other Matrix - GeeksforGeeks", "h1": ["Python – Test if all rows contain any common element with other Matrix"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using loop + in operator", "Output:", "Method #2 : Using any() + loop", "Output:", "Method 3: using set intersection operation between rows of two matrices. ", "Steps to implement this approach :", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-test-if-all-rows-contain-any-common-element-with-other-matrix/"},
{"title": "Python - PyTorch abs() method - GeeksforGeeks", "h1": ["Python – PyTorch abs() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Syntax: ", "Arguments", "inp: ", "out: ", "Return: ", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-pytorch-abs-method/"},
{"title": "Python | Test if any list element returns true for condition - GeeksforGeeks", "h1": ["Python | Test if any list element returns true for condition"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method : Using any() + list comprehension", "Output", "Time Complexity: O(N)", "Auxiliary Space: O(1)", "Method 2 : Using lambda functions", "Output", "Time Complexity:O(N)", "Auxiliary Space: O(N)", "Method 3 : Using a for loop:", "Output", "Time Complexity: O(N)", "Auxiliary Space: O(1)", "Method 4: Using recursion", "Output", "Time Complexity: O(n)", "Auxiliary space: O(n)", "Method 6: Using the set and intersection method", " approach using the set and intersection methods:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-test-if-any-list-element-returns-true-for-condition/"},
{"title": "Python - Concatenate all keys which have similar values - GeeksforGeeks", "h1": ["Python – Concatenate all keys which have similar values"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input :", "Output :", "Explanation :", "Input :", "Output :", "Explanation :", "Method #1 : Using ", "defaultdict()", " + ", "join() ", "Output:", "Method #2 : Using", " groupby()", " + ", "join()", " + ", "dictionary comprehension", "Output:", "Method #3: Using normal dictionary iteration and list comprehension", "Output", "Method #4: Using the heapq module:", "Algorithm:", "Output", "Time Complexity: ", "Auxiliary Space:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-concatenate-all-keys-which-have-similar-values/?ref=previous_article"},
{"title": "Python | math.gcd() function - GeeksforGeeks", "h1": ["Python | math.gcd() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["math.gcd()", "Syntax:", "Parameter:", "x :", "y :", "Returns:", "Exceptions :", "Time Complexity: ", "Auxiliary Space: ", "Code #1: ", "Output:", "Code #2: ", "Output:", "Code #3:", "Output: ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-math-gcd-function/"},
{"title": "Python | math.ceil() function - GeeksforGeeks", "h1": ["Python  | math.ceil() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["math.ceil()", "Syntax:", "Parameter:", "x:", "Returns:", "Time Complexity:", "Auxiliary Space: ", "Code #1: ", "Output:", "Code #2: ", "Output:", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Master JavaScript - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-math-ceil-function/?ref=next_article"},
{"title": "Python any() function - GeeksforGeeks", "h1": ["Python any() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python any() Function Syntax", "Python any() Function Example", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example", "Input: ", "Output:", "Input: ", "Output:", "Syntax: ", "Iterable:", "Returns: ", "Output:", "Python any()  Function Lists", "Output:", "Working of any() Function with Tuples", "Output:", "Working of any() Function with Sets", "Output:", "Working of any() function with Dictionaries", "Output:", "Output:", "Output:", "P", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-any-function/"},
{"title": "Python - Test if String contains any Uppercase character - GeeksforGeeks", "h1": ["Python – Test if String contains any Uppercase character"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loop + isupper()", "Output:", "Method #2 : Using any() + isupper()", "Output:", "Method #3 : Using regex()", "Output:", "Method #4 : Using any() + ASCII values", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Method #5: Without any built-in methods", "Output", "Method #6 : Using replace() and len() methods", "Output", "Method #7: Using operator.countOf() method", "Output", "Time Complexity: O(N)", "Auxiliary Space : O(1)", "Method#8: Using re.search() function from the re module", "Output", "Time Complexity: O(N)", "Auxiliary Space : O(1)", "Method#9: Using the str.translate() method with the str.maketrans() method:", "Output", "Method #10 :  Using reduce() function from the functools module:", "Algorithm:", "Output", "Time complexity:", "Auxiliary Space:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-test-if-string-contains-any-uppercase-character/"},
{"title": "Python program to concatenate two Integer values into one - GeeksforGeeks", "h1": ["Python program to concatenate two Integer values into one"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Method 1:", "Output:", "Method 2:", "Output", "Method 3: ", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Master Java Programming - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-program-to-concatenate-two-integer-values-into-one/"},
{"title": "Python - Maximum of Similar Keys in Tuples - GeeksforGeeks", "h1": ["Python – Maximum of Similar Keys in Tuples"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Input", "Output", "Method #1 : Using max() + groupby() + lambda + loop", "Output : ", "Time complexity: ", "Auxiliary space: ", "Method #2 : Using max() + groupby() + itemgetter() + list comprehension", "Output : ", "Time complexity:", "Auxiliary space:", "Method #3 : Using Counter and list comprehension: ", "Algorithm:", "Output", "Time complexity: O(nlogn)", "Auxiliary Space: O(n)", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-maximum-of-similar-keys-in-tuples/"},
{"title": "Python - Group Similar keys in dictionary - GeeksforGeeks", "h1": ["Python – Group Similar keys in dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using loop", "Output", "Method #2: Using dictionary comprehension", "Output", "Method #3: Using the defaultdict from the collections module:", "Approach:", "defaultdict ", "test_dict ", "dict ", "test_dict", "defaultdict ", "Output", "Time complexity:", "Auxiliary space:", "Method #4: Using using itertools.groupby():", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-group-similar-keys-in-dictionary/"},
{"title": "Python | Pandas Series/Dataframe.any() - GeeksforGeeks", "h1": ["Python | Pandas Series/Dataframe.any()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", "any()", "Data Structures & Algorithms in JavaScript - Self Paced ", "Complete Test Series for Service-Based Companies ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-series-dataframe-any/"},
{"title": "Python | Sort Tuples in Increasing Order by any key - GeeksforGeeks", "h1": ["Python | Sort Tuples in Increasing Order by any key"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "key=last", "Output", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-sort-tuples-increasing-order-key/"},
{"title": "Python | Get indices of True values in a binary list - GeeksforGeeks", "h1": ["Python | Get indices of True values in a binary list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using enumerate() and list comprehension", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #2 : Using lambda + filter() + range()", "Output", "Time complexity:", "Auxiliary space: ", "Method #3 : Using itertools.compress()", "Output", "Time complexity:", "Auxiliary space: ", "Method #4 : Using for loop", "Output", "Method #5: Using list.index()", "Output", "Time complexity: ", "Auxiliary space: ", "Method#6:Using Recursive method.", "Output", "Time Complexity:", "Space Complexity:", "Method #7: Using NumPy’s nonzero() function", "nonzero() ", "NumPy", "np.nonzero()", "Output: ", "Time Complexity:", "Auxiliary Space: ", "Method #8: Using heapq:", "Algorithm:", "Output", "Time complexity:", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-get-indices-of-true-values-in-a-binary-list/"},
{"title": "Python | Count true booleans in a list - GeeksforGeeks", "h1": ["Python | Count true booleans in a list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Method #1: ", "Output:", "Method #2 : ", "Output:", "Method #3 : ", "Output:", "Method #4 : ", "Output:", "Method #5 : Using for loop", "Output", "Method #6 : Using lambda function,len() methods", "Output", "Method 7:  using operator.countOf() method", "Output", "Time Complexity: O(N)", "Auxiliary Space : O(1)", "Method #8:Using itertools.filterfalse() method", "Output", "Time Complexity: O(N)", "Auxiliary Space : O(1)", "Method #9: Using numpy:", "Algorithm:", "Output:", "Time complexity:", "Auxiliary Space:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-count-true-booleans-in-a-list/"},
{"title": "Python - Concatenate Dictionary string values - GeeksforGeeks", "h1": ["Python – Concatenate Dictionary string values"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using dictionary comprehension + keys()", "Output : ", "Method #2 : Using Counter() + “+” operator", "Output : ", "Output", "Method 4: Using a loop and the .update() method", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-concatenate-dictionary-string-values/"},
{"title": "Python | Split tuple into groups of n - GeeksforGeeks", "h1": ["Python | Split tuple into groups of n"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using enumerate and range function", "Output:", "Method #2: Using enumerate and ", "mod ", "operator", "Output:", "Method #3: Using itertools recipes", "Output:", "Method #4: Using zip", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-split-tuple-into-groups-of-n/?ref=next_article"},
{"title": "Python For Loops - GeeksforGeeks", "h1": ["Python For Loops"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "For Loops in Python", "Flowchart of for loop", "Examples of Python For Loop", "Python", "Python", "Python", "Python", "Python", "Python", "Python", "Loop Control Statements", "Python", "Python", "Python", "Python", "Python", "Python for-loops Exercise Questions", "Python", "Python", "What kind of Experience do you want to share?"], "strong": ["“for” loop", "Note: ", "Output :", "Output:", "Output:", "Output :", "Output :", "Output :", "Output :", "Output:", "Output:", "Output:", "start:", "stop:", "step:", "Output:", "Output:", "Python for-loops Exercise Questions", "Q1. ", "Output", "Q2. ", "Output", "Master Java Programming - Complete Beginner to Advanced ", "Complete Machine Learning & Data Science Program ", "Master C++ Programming - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-for-loops/"},
{"title": "Python | Remove tuple from list of tuples if not containing any character - GeeksforGeeks", "h1": ["Python | Remove tuple from list of tuples if not containing any character"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example: ", "Input:", "Output:", "Method #1 : Using list comprehension ", "Output", "Time complexity:", "Auxiliary space: ", "Method #2: Using Regex ", "Output", "Method 3: Using Filter and lambda ", "Output", "Method 4: Using recursive function.", "Output", "Time Complexity: ", "Auxiliary Space:", "METHOD 5: Using for loop", "Approach/Intuition:", "Steps that were to follow the above approach:", "Below is the code to implement the above steps:", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-remove-tuple-from-list-of-tuples-if-not-containing-any-character/"},
{"title": "Python - Concatenate values with same keys in a list of dictionaries - GeeksforGeeks", "h1": ["Python – Concatenate values with same keys in a list of dictionaries"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method 1: Using loop", "Output", "Time complexity: ", "Auxiliary space: ", "Method 2: Using defaultdict", "defaultdict", "test_list", " print() ", "defaultdict", "test_list", " i ", "dict()", "defaultdict", " print() ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3: Using a dictionary comprehension.", "res", "test_list", " items()", "res", "res", "+", "res", "res", "Output", "Time complexity:", "Auxiliary space:", "Method 4: using the reduce() function from the functools module.", "Output", "Time complexity: ", "Auxiliary space: ", "Method 5: Using the itertools module.", "itertools", "chain.from_iterable()", "set()", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-concatenate-values-with-same-keys-in-a-list-of-dictionaries/"},
{"title": "Python Functions - GeeksforGeeks", "h1": ["Python Functions"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Python Function Declaration", "Creating a Function in Python", "Python3", "Python3", "Python3", "Python3", "Python Function Arguments", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python Function within Functions", "Python3", "Anonymous Functions in Python", "Python3", "Recursive Functions in Python", "Python3", "Return Statement in Python Function", "Python3", "Pass by Reference and Pass by Value", "Python3", "Python3", "Python3", "Python3", "FAQs- Python Functions", "What kind of Experience do you want to share?"], "strong": ["Python Functions", "Benefits of Using Functions", "Built-in library function:", "User-defined function:", "Creating a Function in Python", "def", "Output:", "Defining and calling a function with parameters", "Output:", "Note: ", "Output:", "Output:", "Default argument", "Keyword arguments (named arguments)", "Positional arguments", "Arbitrary arguments", "Default Arguments", "Output:", "Keyword Arguments", "Output:", "Output:", "Case-1:", "Case-2:", "Example 1:", "Output:", "Example 2: ", "Output:", "Syntax:", "Example: ", "Output:", "inner function", "nested function", "Output:", "Output:", "Recursion ", "Mathematical and Recursive Problems.", "Output", "The syntax for the return statement is:", "Example:", "Output:", "Pass by Reference and Pass by Value", "Output:", "Output:", "Output:", "Exercise:", "Output:", "Quick Links: ", "FAQs- Python Functions", "Q2. What are the 4 types of Functions in Python?", "Q3. How to define function in Python?", "‘:’. ", "def function_name():", "Function code", "Q4. What are the parameters of a function in Python?", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-functions/"},
{"title": "Python Program to Convert Tuple Value List to List of Tuples - GeeksforGeeks", "h1": ["Python Program to Convert Tuple Value List to List of Tuples"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Convert Tuple Value List to List of Tuples Using loop + * operator + items()", "Output", "Time Complexity:", "Auxiliary Space: ", "Convert Tuple Value List to List of Tuples Using list comprehension + * operator + items()", "Output", "Convert Tuple Value List to List of Tuples Using nested list comprehension", "test_dict", " key, val_list", "test_dict.items():", " val_tuple", "val_list:", "(key, *val_tuple):", "*", "res", "Output", "Time Complexity: ", "Auxiliary Space: ", "Convert Tuple Value List to List of Tuples Using the Recursive method", "Output", "Time complexity: O(n), ", "Auxiliary Space: O(n), ", "Convert Tuple Value List to List of Tuples Using map() and lambda function", "Output", "Time Complexity: ", "Auxiliary Space: ", "Convert Tuple Value List to List of Tuples Using a dictionary comprehension. ", "Step-by-step approach:", "Output", "Time complexity: ", "Auxiliary space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-convert-tuple-value-list-to-list-of-tuples/"},
{"title": "Python | Group and count similar records - GeeksforGeeks", "h1": ["Python | Group and count similar records"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loop + Counter() + set()", "Output", "Time complexity: ", "Auxiliary space: ", "Method #2: Using Counter() + list comprehension + items()", "Output", "Time complexity:", "Auxiliary space:", "Method #3 : Using count(),join(),list() and set() methods", "Output", "Time complexity:", "Auxiliary space: ", "Method 4:  using operator.countOf() method", "Output", "Time Complexity: O(N)", "Auxiliary Space : O(N)", "Method #5: Using defaultdict() and list comprehension", "Output", "Time complexity:", "Auxiliary space: ", "Method #7: Using itertools.groupby() and len()", "Approach:", "Output", "Time complexity: O(NlogN)", "Auxiliary space: O(N)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-group-and-count-similar-records/"},
{"title": "Python | Find indices with None values in given list - GeeksforGeeks", "h1": ["Python | Find indices with None values in given list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension + range()", "Output : ", "Method #2 : Using list comprehension + enumerate()", "Output : ", "Method #3 : Using filter() and lambda", "Output", "Method#4: Using Recursive method.", "Output", "Time complexity: ", "Auxiliary Space:", "Method #5: Using a for loop", "Step-by-step approach:", "Output", "Method #5: Using numpy.where() function", "Step-by-step approach:", "Time complexity: O(n)", "Auxiliary space: O(n) ", "Method #6: Using reduce():", "Algorithm:", "Output", "Time Complexity:", "Space Complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-find-indices-with-none-values-in-given-list/"},
{"title": "Python - Merge Dictionaries List with duplicate Keys - GeeksforGeeks", "h1": ["Python – Merge Dictionaries List with duplicate Keys"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input", "Output", "Explanation", "Input", "Output", "Explanation", "Approach : Using loop + ", "keys()", "Output:", "Approach: Using dict comprehension and set union", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-merge-dictionaries-list-with-duplicate-keys/"},
{"title": "Python - Uppercase Selective Substrings in String - GeeksforGeeks", "h1": ["Python – Uppercase Selective Substrings in String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using split() + join() + loop", "Output", "Method #2 : Using re.sub() + upper()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3: Using replace()  and upper() methods", "Output", "Method #4:Using NumPy", "Output", "Time Complexity: O(n^2)", "Auxiliary Space: O(n)", "Method#5: Using Recursive method", "Example:", "Output", "Time complexity: O(nm)", "Auxiliary space: O(nm)", "Method 6: Using loop", "Approach:", "Example:", "Output", "Time complexity: O(N*M)", "Auxiliary space: O(1)", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-uppercase-selective-substrings-in-string/"},
{"title": "Python Program to get all unique keys from a List of Dictionaries - GeeksforGeeks", "h1": ["Python Program to get all unique keys from a List of Dictionaries"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["arr[]", "N", "Examples:", "Input: ", "Output: ", "Explanation:", "Input: ", "Output: ", "Explanation:", "Approach using ", "Chain iterable tools", ": ", "chain iterable tools", "res", "res ", "Output", "Time Complexity:", "maxm", "Auxiliary Space: ", "Approach using ", "List Comprehension", " and ", "Dictionary Comprehension", ": ", "res", "res ", "Output", "Time Complexity:", "maxm", "Auxiliary Space: ", "Approach : Using keys(),extend(),list() and set() methods", "new_list", "new_list", "arr", "new_list", "keys()", "list() ", "new_list", " extend()", "new_list", "set()", "new_list", "new_list", "list() ", "new_list", "arr", "Output", "Time Complexity: ", "Auxiliary Space: ", "Approach : Using append(),Counter(),keys(), and list()  methods", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-get-all-unique-keys-from-a-list-of-dictionaries/"},
{"title": "Python program to update a dictionary with the values from a dictionary list - GeeksforGeeks", "h1": ["Python program to update a dictionary with the values from a dictionary list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using ", "update()", " + loop", "test_dict", "dict_list", "dict_list", "test_dict", "dicts", "test_dict", "Output", "Method #2 : Using ", "ChainMap", " + ", "**", " operator", "Output", "Time Complexity:", "Auxiliary Space: ", "Method 3: Using dictionary comprehension.", "Output", "Time complexity: ", "Auxiliary space: ", "Method 4: Using a list comprehension and the update() ", "Output", "Time complexity: ", "Auxiliary space:", "Method 5: Using a for loop to iterate over the dictionary list and its items and adding them to the original dictionary", "Output", "Time complexity: ", "Auxiliary space: ", "Method 6: Using the built-in function reduce() from the functools module and a lambda function", "functools", "lambda", "reduce()", "reduce()", "test_dict", "dict_list", "test_dict", "Output", "Time complexity: ", "Auxiliary space: ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-update-a-dictionary-with-the-values-from-a-dictionary-list/"},
{"title": "Python | Concatenate dictionary value lists - GeeksforGeeks", "h1": ["Python | Concatenate dictionary value lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using sum() + values()", "Output : ", "Method #2 : Using chain() + * operator", "Output : ", "Method #3 : Using extend(),list() and values() methods", "Output", "Output", "Method #5 : Using nested for loop and append() method", "Approach", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-concatenate-dictionary-value-lists/"},
{"title": "Python Do While Loops - GeeksforGeeks", "h1": ["Python Do While Loops"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Do while loop", "Example of do while loop in C++", "C++", "Examples of do while loop in Python : ", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax of do while loop:", "Output: ", "Example 1 :", "Output: ", "and", "len(list1[5])<10", "Example 2:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-do-while/"},
{"title": "Python - Convert Dictionaries List to Order Key Nested dictionaries - GeeksforGeeks", "h1": ["Python – Convert Dictionaries List to Order Key Nested dictionaries"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using loop + enumerate()", "test_list", "print() ", "res", "enumerate()", "test_list", "enumerate()", "idx", "val", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #2 : Using dictionary comprehension + enumerate() ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3: Using a list comprehension", "Output", "Time Complexity: ", "Auxiliary Space: ", " Method 4: Built-in function map() along with the enumerate() function.", "Output", "Time complexity: ", "Auxiliary Space: ", "Method #5: Using the built-in function zip() and a list comprehension", "Output", "Time complexity: ", "Auxiliary space:", "Method 6: Using a lambda function with map() and enumerate()", "Time complexity:", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-convert-dictionaries-list-to-order-key-nested-dictionaries/"},
{"title": "Python Nested Loops - GeeksforGeeks", "h1": ["Python Nested Loops"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Nested Loops Syntax:", "Python Nested Loops Examples", "Python3", "Python3", "Python3", "Python3", "Using break statement in nested loops", "Python3", "Using continue statement in nested loops", "Python3", "Single line Nested loops using list comprehension", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python Nested Loops Syntax:", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Code:", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Syntax of List Comprehension:", "=", "[", "for", "in", "if", "]", "Code:", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-nested-loops/"},
{"title": "Python Docstrings - GeeksforGeeks", "h1": ["Python Docstrings"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What are the docstrings in Python?", "Docstrings in Python ", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Difference between Python comments, String, and Docstrings", "Python3", "What kind of Experience do you want to share?"], "strong": ["What are the docstrings in Python?", "Declaring Docstrings", "Accessing Docstrings", "What should a docstring look like? ", "Docstrings in Python ", "Example 1:", "Output:", "Example 2:", "Output:", "Output", "Output", "Output:", "Output:", "Output:", "help’ ", "Output: ", "Example:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-docstrings/"},
{"title": "Python Program to extract Dictionaries with given Key from a list of dictionaries - GeeksforGeeks", "h1": ["Python Program to extract Dictionaries with given Key from a list of dictionaries"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method 1: ", "in", "Example:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 2 : ", "in", "Example:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 3 : Using for loop", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method 4: Using list comprehension and items()", "Output", "Time complexity: ", "Auxiliary space: ", "Method 5: Using dictionary comprehension and items()", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-extract-dictionaries-with-given-key-from-a-list-of-dictionaries/"},
{"title": "Python - Group Hierarchy Splits of keys in Dictionary - GeeksforGeeks", "h1": ["Python – Group Hierarchy Splits of keys in Dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples", "Input:", "Output: ", "Explanation :", "Input:", "Output:", "Explanation : ", "Method #1 : Using loop + ", "split()", "Output", "Method #2 : Using ", "defaultdict() ", "Output", "Output", "Time complexity: ", "Auxiliary Space:", "Method 4: Using itertools.groupby()", "Step-by-step approach:", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-group-hierarachy-splits-of-keys-in-dictionary/"},
{"title": "Python | Functions | Question 4 - GeeksforGeeks", "h1": ["Python | Functions | Question 4"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-functions-question-4/"},
{"title": "Python | Make pair from two list such that elements are not same in pairs - GeeksforGeeks", "h1": ["Python | Make pair from two list such that elements are not same in pairs"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples: ", "Input :", "Output:", "Input:", "Output:", "Method #1: Using list comprehension", "Output:", "Time complexity:", "Auxiliary space:", "Method #2: Using itertools and iteration", "Output:", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-make-pair-from-two-list-such-that-elements-are-not-same-in-pairs/?ref=next_article"},
{"title": "Python - Check if string contains any number - GeeksforGeeks", "h1": ["Python – Check if string contains any number"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Check if String is Integer", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" ", "check if a string contains a number in ", "Python", ",", " ", "Example", "Input", "Output", "Input", "Output", "Explanation: ", "Python Check if String is Integer", "Check if String Contains Any Number using isdigit()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Python Check if String is Integer", "Output", "Time Complexity: ", "Auxiliary Space: ", "map()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Python Check if String is Integer", "\\d ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Python Check if String is Integer using the ASCII code", "Output", "Time Complexity: ", "Auxiliary Space: ", "Python Check if String is Integer", "Output", "Time Complexity:", "Auxiliary Space:", "Python Check if String is Integer using operator.countOf() Method", "Output", "Time Complexity:", "Auxiliary Space: ", "Python Check if String is an Integer", "Output", "Time Complexity: ", "Auxiliary Space: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-check-if-string-contains-any-number/"},
{"title": "Python | Tuples with maximum key of similar values - GeeksforGeeks", "h1": ["Python | Tuples with maximum key of similar values"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using max() + groupby() + itemgetter() + list comprehension", "Output", "Time complexity:", "Auxiliary space: ", "Method #2: Using setdefault() + items() + loop + list comprehension", "Output : ", "Method #3: ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #4: ", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-tuples-with-maximum-key-of-similar-values/"},
{"title": "Python Built-in Functions - GeeksforGeeks", "h1": ["Python Built in Functions"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Built-in Functions List", "Python built-in Functions – FAQs", "What kind of Experience do you want to share?"], "strong": ["Python’s built-in functions", "Function Name", "Description", "Python built-in Functions – FAQs", "1. What are built-in functions in Python?", "2. How do I use built-in functions?", "function_name(argument1, argument2).", "3. Can I create my own built-in functions?", "4. Can we extend the functionality of built-in functions?", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-built-in-functions/"},
{"title": "Python | Finding relative order of elements in list - GeeksforGeeks", "h1": ["Python | Finding relative order of elements in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Install scipy first using “pip install scipy” command", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using sorted() + index() + list comprehension", "Output : ", "Method #2 : Using map() + enumerate() + dictionary comprehension + sorted()", "Output : ", "  Method #3 : Using scipy", "Install scipy first using “pip install scipy” command", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-finding-relative-order-of-elements-in-list/"},
{"title": "Python | Matrix True Summation - GeeksforGeeks", "h1": ["Python | Matrix True Summation"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Note: Install numpy module using command “pip install numpy”", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using sum() + generator expression", "Output", "Time Complexity:", "Auxiliary Space:", "Method #2 : Using sum() + map()", "Output", "Time complexity: ", "Auxiliary Space:", "Method #3 : Using extend()+count() methods", "Step by step approach :", "Output", "Time Complexity: O(N)", "Auxiliary Space: O(N)", "Method #4 : Using numpy module", "Note: Install numpy module using command “pip install numpy”", "Output:", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method 5: using nested loops", "Output", "Time Complexity: ", "Auxiliary Space:", "Method #6 : Using opearor.countOf()", "Approach", "extend() ", "operator.countOf()", "Output", "Time Complexity : O(N)", "Auxiliary Space : O(1)", "Method #7: Using the built-in reduce() function to count the number of True values", "Step-by-step approach:", "Output", "Time complexity:", "Space complexity: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-matrix-true-summation/"},
{"title": "Python | Check whether two lists follow same pattern or not - GeeksforGeeks", "h1": ["Python | Check whether two lists follow same pattern or not"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Example:", "Approach:", "Output : ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-check-whether-two-lists-follow-same-pattern-or-not/"},
{"title": "Python | Sum list of dictionaries with same key - GeeksforGeeks", "h1": ["Python | Sum list of dictionaries with same key"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using reduce() + operator", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Method #2: Using counter", "Output:", "Time complexity: ", "Auxiliary space: ", "Method #3: Naive Method", "Output:", "Time complexity: ", "Auxiliary space:", "Method 4: Using a dictionary comprehension", "Output", "Time complexity: ", "Auxiliary space: ", "Method #5 Using defaultdict", "Output", "Time Complexity:", "Auxiliary Space: ", "Method 6: Using defaultdict from the collections module.", "Approach:", "Output", "Time complexity: O(n*m)", "Auxiliary space: O(m)", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-sum-list-of-dictionaries-with-same-key/"},
{"title": "Python - Extract dictionaries with Empty String value in K key - GeeksforGeeks", "h1": ["Python – Extract dictionaries with Empty String value in K key"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1:  Using list comprehension", "Output", "Method #2 :  Using filter() + lambda", "Output", "Method #3 :", "Using len() and keys() methods", "Output", "Method 4: Using for loop and if statement", "test_list", "K", "res ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 5: Using map() + lambda", "Output", "Method 6: Using the pandas library", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-extract-dictionaries-with-empty-string-value-in-k-key/"},
{"title": "type() function in Python - GeeksforGeeks", "h1": ["type() function in Python"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python type() function Syntax", "Python3", "Examples of the type() function in Python", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax: ", "Parameters :", "object: ", "bases : ", "dict : ", "Return: ", " in Python?", "Output", "Output", "Output", "Output", "Output", "type(", "type()", "type()", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-type-function/"},
{"title": "Python super() - GeeksforGeeks", "h1": ["Python super()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Syntax of super() in Python", "super() function in Python Example", "Python3", "What is the super () method used for?", "How does Inheritance work without  Python super?", "Python3", "Python3", "Understanding Python super() with __init__() methods", "Python3", "Python3", "Python3", "Python Multiple Inheritance and MRO", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax: ", "Return : ", "Emp", "__init__", "id", "name", "Adds", "Freelance", "Emp", "Emails. It calls the parent class’s __init__ method super() to initialize the inherited attribute.", "Output :", "Output :", "Output :", "Note:", "Output :", "example of a super function", "can fly", "can swim", "Python", " super with arguments", "Output :", "example of a super function", "Python", " super with arguments", "Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures and Algorithms - Self Paced ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-super/"},
{"title": "Python repr() Function - GeeksforGeeks", "h1": ["Python repr() Function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python repr() Function Syntax ", "How repr() works in Python?", "Python3", "repr() in Python Examples ", "Python3", "Python3", "Python3", "Implement __repr__() for custom objects", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example", "repr(s)", "‘Hello, Geeks.’", "Output :", "Syntax:", "object: ", "Return:", "Output :", "Output :", "repr()", "Output :", "Output :", "__repr__()", "__repr__()", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-repr-function/"},
{"title": "Python setattr() method - GeeksforGeeks", "h1": ["Python setattr() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python setattr() Function Syntax", "Python setattr() Examples", "Python3", "Python3", "Python3", "Python setattr() exception", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python setattr() method ", "Example :", "Output :", "Syntax :", "Parameters :", "obj : ", "var : ", "val : ", "Returns :", "Output :", "Output : ", "Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Master C++ Programming - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-setattr-method/"},
{"title": "Python - Built-in array vs NumPy array - GeeksforGeeks", "h1": ["Python – Built-in array vs NumPy array"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["“array(typecode [, initializer])”", "initializer is optional", "iterable.", "Code: ", "Output:", "call of programmer", "provide initializer(initializer is optional)", "Code: ", "Output:", "Note: ", "Code:", "Output:", "Code:", "Output:", "Code:", "Output:", "Code:", "Output:", "Note : ", "Code:", "Output:", "Exception: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-built-in-array-vs-numpy-array/"},
{"title": "tuple() Function in Python - GeeksforGeeks", "h1": ["tuple() Function in Python"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python tuple() Syntax", "tuple() in Python Function Examples", "Python3", "Python3", "Python3", "Python3", "Python3", "Tuple() Built-In Functions", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python tuple() function", "Example:", "Output:", "Python tuple() Syntax", "Syntax:", "iterable (optional): ", "Return:", "TypeError", "Output :", "Output :", "Output ", "Output :", "Output :", "Output :", "Output :", "Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tuple-function/"},
{"title": "Python min() Function", "h1": ["Python min() Function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "Python min() Function Syntax", "What is min() Function in Python?", "How to use min() function in Python?", "Python", "More Python min() Examples", "Python", "Python", "Python", "What kind of Experience do you want to share?"], "strong": ["Python min() function ", "Example: ", "Output", "min(a, b, c, …, key=func)", "min() ", "a, b, c, .. :", "key (optional): ", "Return", "Example: ", "Output", "Python in a list.", "Output", "Output", "minimum element in a ", "dictionary", ".", "Output", "Read More ", "Python Built-in Functions", "Similar Reads:", "Find Min/Max in heterogeneous list", "max() and min() in Python", "Use of min() and max() in Python", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-min-function/"},
{"title": "Python - max() function - GeeksforGeeks", "h1": ["Python – max() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python max() function With Objects", "Example of Python max() function", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "max() Function With iterable In Python", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python max() function r", "It has two forms.", "Syntax : ", "Parameters : ", "arg1, arg2 :", "*args : ", "key : ", "Returns : ", "Example 1: ", "Output", "Example 2: ", "Output", "Example 3: ", "Output", "Example 4: Python max() Exception", "Output ", "Output", "Output", "Syntax : ", "Parameters : ", "iterable : ", "*iterables : ", "key : ", "default : ", "Returns : ", "Example 1: ", "Output", "Example 2: ", "Output", "Example 3: ", "Output", "Example 4: ", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-max-function/"},
{"title": "Python object() method - GeeksforGeeks", "h1": ["Python object() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Syntax of Python object()", "Example of Python", " object() ", "Python3", "Understanding the ", "properties of an object() function in Python", "Python3", "What kind of Experience do you want to share?"], "strong": [" object() function", "Syntax :", "Parameters : ", "Returns :", "Example of Python", "Output:", "Understanding the ", "Example:", "obj1.a ", "a.", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-object-method/"},
{"title": "Python Program to Sort Matrix by Sliced Row and Column Summation - GeeksforGeeks", "h1": ["Python Program to Sort Matrix by Sliced Row and Column Summation"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method 1 : ", "Example:", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Method 2 : ", " ", "Example:", "Output:", "Method 3:  Using the built-in map() and lambda functions ", "Output", "Time complexity: ", "Auxiliary space:", "Method 1 : ", "Example:", "Output:", "Method 2 : ", " ", "Example:", "Output:", "Method 3: using list comprehension and lambda function. Here are the steps for this approach:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-sort-matrix-by-sliced-row-and-column-summation/"},
{"title": "Python issubclass() - GeeksforGeeks", "h1": ["Python issubclass()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python issubclass() Function Syntax", "issubclass() Function in Python", "Python3", "Python3", "Python issubclass not working TypeError", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax", "Parameters:", "Object:", "classinfo: ", "Return Type:", "Output", "Output", "Output:", "Python issubclass arg 1 must be a class TypeError", "Output", "Note:", "Related Articles", "Data Structures & Algorithms in Python - Self Paced ", "Master Java Programming - Complete Beginner to Advanced ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-issubclass/"},
{"title": "Python hash() method - GeeksforGeeks", "h1": ["Python hash() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python hash() function Syntax", "Python hash() Function Examples", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python hash() function ", "Python hash() function Syntax", "Syntax :", "Parameters :  obj :", "Returns :", "Example 1: ", "Output", "Example 2: ", "Output:", "Exceptions : ", "Example 3: hash() for Immutable Tuple Object", "Output", "Example 4: hash() on ", "utable Object", "Output", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-hash-method/"},
{"title": "Python hasattr() method - GeeksforGeeks", "h1": ["Python hasattr() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Syntax of hasattr() function", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python hasattr() function", "how to check if an object has an attribute in ", "Python", ".", "Syntax of hasattr() function", "Syntax : ", "Parameters : ", "obj : ", "key : ", "Returns : ", "Example 1:  Python hasattr() function example", "check if an object has an attribute", "find attributes of the object in python", "Output: ", "Simple Ways to Check if an Object has Attribute in Python", "Output: ", "Result:", "Applications: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Master C++ Programming - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-hasattr-method/"},
{"title": "Python | Sliced Product in List - GeeksforGeeks", "h1": ["Python | Sliced Product in List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Note: Install numpy module using command “pip install numpy”", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list slicing + loop", "Output : ", "Method #2 : Using islice() + loop", "Output : ", "Method #3 : Using numpy()", "Note: Install numpy module using command “pip install numpy”", "Output:", "Method #4 : Using operator.getitem(),slice() methods", "Approach", "Output", "Method5: Using Recursive method:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-sliced-product-in-list/"},
{"title": "Python | Accessing nth element from tuples in list - GeeksforGeeks", "h1": ["Python | Accessing nth element from tuples in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension", "Output :", "Time complexity: ", "Auxiliary space: ", "Method #2 : Using map() + itemgetter()", "Output :", "Method #3 : Using zip()", "Output :", "Method #4 : Using map() + lambda", "Output", "Time complexity: ", "Auxiliary space: ", "Method #5: Using a for loop", "Output", "Time complexity: ", "Auxiliary space: ", "Method 6: Using reduce()", "Output", "Method #7 : Using numpy.array(), and then fancy indexing to get the nth column ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-accessing-nth-element-from-tuples-in-list/?ref=lbp"},
{"title": "Python | Type conversion in dictionary values - GeeksforGeeks", "h1": ["Python | Type conversion in dictionary values"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Naive Method ", "Output :", "Method #2 : Using items() + list comprehension", "Output :", "Method #3 : Using map() function and a lambda", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-type-conversion-in-dictionary-values/"},
{"title": "Python - Extract Similar Key Values - GeeksforGeeks", "h1": ["Python – Extract Similar Key Values"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using sorted() + loop", "Output", "Method #2 : Using list comprehension + sorted()", "Output", "Method 3:  using a dictionary comprehension.", "result_dict", "test_dict", "sorted() ", "tst_wrd", "result_dict", "result_dict", "Example:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #4: Using filter() and lambda function", "Algorithm:", "Output", "Time Complexity: O(N*log(N)) ", "Auxiliary Space: O(N) ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-extract-similar-key-values/"},
{"title": "Python - Consecutive Row summation in Matrix - GeeksforGeeks", "h1": ["Python – Consecutive Row summation in Matrix"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using sum() + abs() + zip() + list comprehension", "Output : ", "Method #2 : Using sum() + map() + abs + zip()", "Output : ", "Time Complexity: O(N^2)", "Auxiliary Space: O(N)", "Method #3 : Using for loop + sum(),extend() methods", "Output", "Time Complexity : ", "Auxiliary Space : ", "Method #4: Using numpy library", "Note: ", "Output:", "Method #7: Using itertools module", "itertools", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-consecutive-row-summation-in-matrix/"},
{"title": "Python - all() function - GeeksforGeeks", "h1": ["Python – all() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python all() Function in Python", "Python all() Function with Example", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python all() function", "Syntax: ", "Iterable:", "Returns: ", "Output:", "Example 1: Working of all() with Lists", "Output", "Example 2: Working of all() with Tuples", "Output", "Example 3: Working of all() with Sets", "Output", "Example 4: Working of all() with Dictionaries", "Output", "Note:", "Example 5: Working of all() with Strings", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-all-function/"},
{"title": "Python | Addition of tuples - GeeksforGeeks", "h1": ["Python | Addition of tuples"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using map() + lambda", "Output", "Time complexity: ", "Auxiliary space: ", "Method #2: Using map() + zip() + sum()", "Output", "Time complexity: ", "Auxiliary Space: ", "Method #3 : Using tuple() method and for loop", "Output", "Method #4 : Using numpy: ", "Note: ", "Output:", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method #5: Using list comprehension", "Step-by-step approach", "Output", "Method #6: Using recursive:", "Output", "Time Complexity: O(n), ", "Space Complexity: O(n), ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-addition-of-tuples/?ref=next_article"},
{"title": "Python-Quizzes | Functions | Question 8 - GeeksforGeeks", "h1": ["Python-Quizzes | Functions | Question 8"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-quizzes-functions-question-8/"},
{"title": "Python | Functions | Question 1 - GeeksforGeeks", "h1": ["Python | Functions | Question 1"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-functions-question-1/"},
{"title": "Python | Check if a nested list is a subset of another nested list - GeeksforGeeks", "h1": ["Python | Check if a nested list is a subset of another nested list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Approach #1 : Naive Approach", "Output:", "Time complexity:", "Auxiliary space: ", "Approach #2 : Using Python set", "Output:", "Approach #3 : Using ", "all", " and for loop", "Output:", "Time complexity: ", "Auxiliary space: ", "Approach #4: Using map() and __contains__", "Output:", "Time complexity: ", "Auxiliary space: ", "Approach #5: Using issubset() method:", "Output", "Approach #6:  Using the ‘itertools.product’ function", "Output", "Time Complexity:  O(n^2) ", "Auxiliary Space:  O(n^2) ", "Approach #7:Using enumerate", "Output", "Time Complexity:  O(n^2) ", "Auxiliary Space:  O(n^2) ", "Method#8: Using Recursive method.", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-check-if-a-nested-list-is-a-subset-of-another-nested-list/"},
{"title": "Python - Convert String to Nested Dictionaries - GeeksforGeeks", "h1": ["Python – Convert String to Nested Dictionaries"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method : Using loop + recursion", "Output : ", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-convert-string-to-nested-dictionaries/"},
{"title": "Python | Selective Records Value Summation - GeeksforGeeks", "h1": ["Python | Selective Records Value Summation"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using dict() + sum() + get() + list comprehension", "Output", "Time complexity: ", "Auxiliary space: ", "Method #2: Using next() + sum() + list comprehension", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3 : Using next() + sum() + list comprehension", "Output", "Time complexity: ", "Auxiliary space:", "Method #3B: Using for loop and sum() method", "Output", "Time complexity:", "Auxiliary space:", "Method#4: Using Recursive method.", "Output", "Time complexity: ", "Auxiliary space: ", "Method 5 : Using a loop to iterate over the list of tuples and check if the first element of each tuple is in the selection list. If it is, add the second element to a running total.", "Output", "Method 6: Using pandas library", "Method 7: ", "reduce method", " from functools module:", "Algorithm:", "Output", "Time Complexity:", "Space Complexity:", "Method 8: Using heapq:", "Algorithm:", "Output", "Time Complexity: ", "Space Complexity: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-selective-records-value-summation/"},
{"title": "Python | Functions | Question 3 - GeeksforGeeks", "h1": ["Python | Functions | Question 3"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-functions-question-3/?ref=ml_lbp"},
{"title": "Python - Test for Even values dictionary values lists - GeeksforGeeks", "h1": ["Python – Test for Even values dictionary values lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1: Using loop", "Output", "Time Complexity: ", "Auxiliary Space:", "Method #2:  Using all() + dictionary comprehension", "Output", "Time Complexity: ", "Auxiliary Space:", "Method #3:  Using items()+filter()+ lambda functions", "Output", "Time Complexity: ", "Auxiliary Space:", "Method #4: Using NumPy library", "Output:", "Time Complexity:", "Auxiliary Space:", "Method #5: Using reduce() and map() functions:", "Output", "Time Complexity:", "Auxiliary Space:", "Method #6: Using list comprehension and all() function", "Output", "Time complexity: ", "Auxiliary space: ", "Method #7: Using dictionary comprehension and any() function:", "any()", "any() ", "Output", "Time complexity: ", "Auxiliary space:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-test-for-even-values-dictionary-values-lists/"},
{"title": "Python | Functions | Question 7 - GeeksforGeeks", "h1": ["Python | Functions | Question 7"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-functions-question-7/?ref=ml_lbp"},
{"title": "Python - Count similar pair in Dual List - GeeksforGeeks", "h1": ["Python – Count similar pair in Dual List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using Counter() + map() + sorted() + items()", "Output : ", "Method #2 : Using sum() + list comprehension + groupby() + sorted()", "Output : ", "Method #3: Using dictionary to count occurrences", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-count-similar-pair-in-dual-list/"},
{"title": "Python | Remove duplicates in Matrix - GeeksforGeeks", "h1": ["Python | Remove duplicates in Matrix"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method : Using loop", "Output : ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-remove-duplicates-in-matrix/?ref=ml_lbp"},
{"title": "Python - Dual Tuple Alternate summation - GeeksforGeeks", "h1": ["Python – Dual Tuple Alternate summation"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using loop", "Output", "Time Complexity:", "Auxiliary Space: ", "Method #2 : Using list comprehension + sum()", "Output", "Time complexity: ", "Auxiliary Space:", "Method#3: Using Recursive method.", "Output", "Time complexity: ", "Auxiliary Space: ", "Method #4: Using itertools and zip()", "itertools ", "zero", "zip()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #5: Using heapq method:", "Algorithm:", "Output", "Time complexity:", "Space complexity:", "Method #6: Using numpy:", "Output:", "Time complexity:  O(NlogN), ", "Space complexity:  O(N),", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-dual-tuple-alternate-summation/"},
{"title": "Python | Test if dictionary contains unique keys and values - GeeksforGeeks", "h1": ["Python | Test if dictionary contains unique keys and values"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using loops", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #2 :Using len() + set() + values()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3 : Using values() and count() method", "Output", "Method #4 : Using Counter() function", "Output", "Time Complexity: O(n) ", "Auxiliary Space: O(n)", "Method 5:  using operator.countOf() method", "Output", "Time Complexity: O(N)", "Auxiliary Space : O(1)", "Method 6: Using set() function", "Output", "Method 7: Using the lambda function and map():", "Algorithm:", "Output", "Time complexity: O(n),", "Space complexity: O(n), ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-test-if-dictionary-contains-unique-keys-and-values/"},
{"title": "Python - Unique value keys in a dictionary with lists as values - GeeksforGeeks", "h1": ["Python – Unique value keys in a dictionary with lists as values"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["unique (there should be at least one item not present in other lists)", "Method #1 : Using loop + count()", "Output : ", "Method #2 : Using list comprehension + any() + count()", "Output : ", "Method #3 : Using Counter function", "Output", "Method #4: Using operator.countOf() method:", "Output", "Time Complexity: O(N)", "Auxiliary Space: O(N)", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-unique-value-keys-in-a-dictionary-with-lists-as-values/"},
{"title": "Python | Split dictionary keys and values into separate lists - GeeksforGeeks", "h1": ["Python | Split dictionary keys and values into separate lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["split a dictionary in python into keys and values", "Example", "Input: ", "Output: ", "Method 1: Split dictionary keys and values using inbuilt functions", "Output:", "Method 2: Split dictionary keys and values using zip()", "Output:", "Method 3: Split dictionary keys and values using items()", "Output:", "Output", "Method 5: Using List Comprehension", "Output", "Time complexity: ", "Auxiliary space:", "Method 6: use the built-in function ", "map()", " in combination with the dict.keys() and dict.values() methods", "Output", "Time Complexity:", "Auxiliary Space:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-split-dictionary-keys-and-values-into-separate-lists/"},
{"title": "Python | Check if a list is contained in another list - GeeksforGeeks", "h1": ["Python |  Check if a list is contained in another list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Approach #1: ", "Output:", "Approach #2: ", "Output:", "Time complexity: ", "Auxiliary space:", "Approach #3: ", "Output:", "Time complexity", "Auxiliary space", "Approach #4: ", "Output", "Time complexity", "Auxiliary space", "Approach #5: Using Recursive method", "Output", "Time complexity:", "Auxiliary space:", "Approach #6: Using Numpy", "Note:", "Steps:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-check-if-a-list-is-contained-in-another-list/"},
{"title": "Python - Absolute Tuple Summation - GeeksforGeeks", "h1": ["Python – Absolute Tuple Summation"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Input", "Output", "Method #1 : Using sum() + list comprehension + abs()", "Output : ", "Method #2 : Using list comprehension + sum() + map()", "Output : ", "Output", "Method #4 : Using nested for loops", "Approach", "Output", "Time Complexity :", "Auxiliary Space :", "Method #5 : Using numpy:", "Algorithm:", "Output:", "Time Complexity:", "Auxiliary Space:", "Method #6 : Using lambda function and map()", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-absolute-tuple-summation/"},
{"title": "Python | Concatenate two lists element-wise - GeeksforGeeks", "h1": ["Python | Concatenate two lists element-wise"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension + zip()", "Output:", "Method #2 : Using map() + lambda + zip()", "Output:", "Output", "Method #4: Using for loop:", "Output", "Time complexity: O(n) ", "Auxiliary Space: O(n) ", "Method#5:Using itertools", "Output", "Time complexity: O(n) ", "Auxiliary Space: O(n) ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-concatenate-two-lists-element-wise/?ref=previous_article"},
{"title": "Python | Tkinter ttk.Checkbutton and comparison with simple Checkbutton - GeeksforGeeks", "h1": ["Python | Tkinter ttk.Checkbutton and comparison with simple Checkbutton"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["tkinter.ttk", "Note", "Code #1: ", "Output:", "Code #2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tkinter-ttk-checkbutton-and-comparison-with-simple-checkbutton/?ref=next_article"},
{"title": "Python - Value Dictionary from Record List - GeeksforGeeks", "h1": ["Python – Value Dictionary from Record List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loop + values() + update()", "Output : ", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method #2 : Using zip() + iter()", "Output : ", "Method #3:Using List comprehension", "Algorithm", "Output", "Time Complexity: O(N*M)", "Auxiliary Space: O(N*M)", "Method #4: Using for loop+values() method", "Approach:", "Output", "Time Complexity:", "Auxiliary Space: ", "Method #5: Using dictionary comprehension", "Output", "Time complexity: ", "Auxiliary space:", "Method #6: Using map() and lambda", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-value-dictionary-from-record-list/"},
{"title": "Python - Removing Nested None Dictionaries - GeeksforGeeks", "h1": ["Python – Removing Nested None Dictionaries"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using dict() + filter()", "Output : ", "Method #2 : Using dictionary comprehension", "Output : ", "APPROACH 3: USING For ", "ALGORITHM:", "Output", "Time complexity:", "Space complexity:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-removing-nested-none-dictionaries/?ref=ml_lbp"},
{"title": "Python | Add keys to nested dictionary - GeeksforGeeks", "h1": ["Python | Add keys to nested dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using for loop", "Output", "Time complexity:", "Auxiliary space: ", "Method #2: Using dictionary brackets", "Output : ", "Method #3: Using update()", "Output : ", "Method #4: Using setdefault() ", "Output", "Method #5: Using Recursion", "Base Case: ", "Else :", "Output", "Time Complexity: ", " ", "Auxiliary Space: ", " ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-add-keys-to-nested-dictionary/?ref=ml_lbp"},
{"title": "Python - Maximum value assignment in Nested Dictionary - GeeksforGeeks", "h1": ["Python – Maximum value assignment in Nested Dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Input", "Output", "Method : Using Counter().most_common() + items() + loop", "Output", "Approach:", "Output", "Time Complexity", "Space Complexity", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-maximum-value-assignment-in-nested-dictionary/?ref=ml_lbp"},
{"title": "Python - Extract Similar pairs from List - GeeksforGeeks", "h1": ["Python – Extract Similar pairs from List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Input", "Output", "Method #1 : Using Counter() + list comprehension", "Output : ", "Time Complexity: ", "Auxiliary Space: ", "Method #2 : Using fromkeys() + list comprehension", "Output : ", "Method 3 :  Use a set ", "Output", "Method #4: Using dictionary", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-extract-similar-pairs-from-list/"},
{"title": "Python-Quizzes | Miscellaneous | Question 9 - GeeksforGeeks", "h1": ["Python-Quizzes | Miscellaneous | Question 9"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-quizzes-miscellaneous-question-9/?ref=ml_lbp"},
{"title": "Python - Minimum value key assignment - GeeksforGeeks", "h1": ["Python – Minimum value key assignment"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Explanation :", "Input :", "Output :", "Explanation :", "Method #1 : Using ", "dictionary comprehension", " + ", "min()", " + ", "items()", "Output", "Method #2 : Using ", "dict()", " + ", "min()", " + ", "zip()", "Output", "Output", "Time complexity: ", "Auxiliary Space: ", "Method 4 : using the built-in function setdefault().", " step-by-step approach:", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-minimum-value-key-assignment/"},
{"title": "Python | Split and Pass list as separate parameter - GeeksforGeeks", "h1": ["Python | Split and Pass list as separate parameter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using tuple()", "Output : ", "Time Complexity: ", "Auxiliary Space: ", "Method #2 : Using * operator", "Output : ", "Time complexity: ", "Auxiliary space: ", "Method #3: Using Indexing", "Output", "Time complexity: ", "Auxiliary space: ", "Method 4: using unpacking operator (**)", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-split-and-pass-list-as-separate-parameter/"},
{"title": "Python | Insert list in another list - GeeksforGeeks", "h1": ["Python | Insert list in another list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using insert() + loop", "insert_list", "insert()", "test_list", "insert_list", " i + pos", " i", "insert_list", "test_list", " print()", "Output", "Time Complexity:", "Auxiliary Space: ", "Method #2: Using list slicing", "Output", "Time complexity:", "Auxiliary space: ", "Method #3 : Use + and slicing for inserting", "Output", "Method #4 : Using insert(),replace(),split(),list(),map() methods", "Output", "Time Complexity : O(N)", "Auxiliary Space : O(N)", "Method#5: Using Recursive method.", "Output", "Time complexity", "Auxiliary space:", "Method#6: Using the chain() function from the itertools module:", "Output", "Time Complexity: O(n)", "Space Complexity: O(n)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-insert-list-in-another-list/"},
{"title": "Python | Simple FLAMES game using Tkinter - GeeksforGeeks", "h1": ["Python | Simple FLAMES game using Tkinter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisites:", " ", "To create a Tkinter : ", "FLAMES", "Below is the implementation :", "Output :", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-simple-flames-game-using-tkinter/"},
{"title": "Python program to separate alphabets and numbers in a string - GeeksforGeeks", "h1": ["Python program to separate alphabets and numbers in a string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Separate alphabets and numbers from a string using findall", "Python3", "Filter alphabets and numbers from a string using split", "Python3", "Separate alphabets and numbers using ", "isalpha()", " and ", "isnumeric()", "Python3", "Separate alphabets and numbers in a string Using List Comprehension", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples", "Input", "Output:", "Explanation", "findall", "(Pattern, String) ", " ", "Output:", "Time complexity: ", "Auxiliary space: ", "Output:", "Time complexity: ", "Auxiliary space: ", "Output", "Time complexity: ", "Auxiliary space: ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Data Science Training Program ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-separate-alphabets-and-numbers-in-a-string-using-regular-expressions/"},
{"title": "Python Dictionary Exercise - GeeksforGeeks", "h1": ["Python Dictionary Exercise"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Dictionary Programs", "Conversion of dictionary", "Advance Dictionary Programs", "What kind of Experience do you want to share?"], "strong": ["Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-dictionary-exercise/?ref=ml_lbp"},
{"title": "Python Regex: re.search() VS re.findall() - GeeksforGeeks", "h1": ["Python Regex: re.search() VS re.findall()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisite:", "Example:", "Output:", "Example:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-regex-re-search-vs-re-findall/"},
{"title": "Python-Quizzes | Miscellaneous | Question 7 - GeeksforGeeks", "h1": ["Python-Quizzes | Miscellaneous | Question 7"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "DevOps Engineering - Planning to Production "], "link": "https://www.geeksforgeeks.org/python-quizzes-miscellaneous-question-7/?ref=ml_lbp"},
{"title": "Python2 vs Python3 | Syntax and performance Comparison - GeeksforGeeks", "h1": ["Python2 vs Python3 | Syntax and performance Comparison"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Still in dilemma?", "Python 2.7", "Python 3.x", "Python 2.7", "Python 3.x", "Python 2.7", "Python 3.x", "Python 2.7", "Python 3.x", "Python 2.7", "Python 3.x", "Python 2.7", "Python 3.x", "Python 2.7", "Python 3.x", "Python 2.7", "Python 3.x", "Python 2.7", "Python 3.x", "Python 2.7", "Python 3.x", "Note: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python2-vs-python3-syntax-and-performance-comparison/?ref=ml_lbp"},
{"title": "Python - Group single item dictionaries into List values - GeeksforGeeks", "h1": ["Python – Group single item dictionaries into List values"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "E", "Explanation", " Method #1 : Using setdefault() + loop", "Output", "Time complexity: ", "Auxiliary Space:", "Method #2 : Using defaultdict() + * operator + loop", "Output", "Time complexity: ", "Auxiliary space: ", "Method #3 : Using extend(),keys(),list() and set() methods", "Output", "Time Complexity : O(N*N)", "Auxiliary Space : O(N)", "Method 4: Using itertools.groupby() + lambda function", "Output", "Method 5: Using list comprehension and dictionary comprehension", "Output", "Time complexity:", "Auxiliary space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-group-single-item-dictionaries-into-list-values/?ref=previous_article"},
{"title": "Python - Extract Key's value from Mixed Dictionaries List - GeeksforGeeks", "h1": ["Python – Extract Key’s value from Mixed Dictionaries List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using list comprehension", "Output", "Time Complexity:", "Auxiliary Space: ", "Method #2 : Using update() + loop", "Output", "Method #3: Using map() + lambda function", "map()", "K", "test_list", "filter() ", "test_list", "K", "map() ", "K", "map()", "K", "Output", "Time complexity: ", "Auxiliary Space: ", "Method 4: Use a for loop to iterate over each dictionary and check if the key exists in the dictionary", "Output", "Method #5: Using try-except block", "Output", "Method #6: Using dictionary comprehension", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-extract-keys-value-from-mixed-dictionaries-list/?ref=ml_lbp"},
{"title": "Python - Create Nested Dictionary using given List - GeeksforGeeks", "h1": ["Python –  Create Nested Dictionary using given List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using loop + zip() ", "Output", "Method #2 : Using dictionary comprehension + zip()", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-create-nested-dictionary-using-given-list/?ref=ml_lbp"},
{"title": "Python - Group single item dictionaries into List values - GeeksforGeeks", "h1": ["Python – Group single item dictionaries into List values"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "E", "Explanation", " Method #1 : Using setdefault() + loop", "Output", "Time complexity: ", "Auxiliary Space:", "Method #2 : Using defaultdict() + * operator + loop", "Output", "Time complexity: ", "Auxiliary space: ", "Method #3 : Using extend(),keys(),list() and set() methods", "Output", "Time Complexity : O(N*N)", "Auxiliary Space : O(N)", "Method 4: Using itertools.groupby() + lambda function", "Output", "Method 5: Using list comprehension and dictionary comprehension", "Output", "Time complexity:", "Auxiliary space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-group-single-item-dictionaries-into-list-values/?type=article&id=458162"},
{"title": "Python | Concatenate two lists element-wise - GeeksforGeeks", "h1": ["Python | Concatenate two lists element-wise"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension + zip()", "Output:", "Method #2 : Using map() + lambda + zip()", "Output:", "Output", "Method #4: Using for loop:", "Output", "Time complexity: O(n) ", "Auxiliary Space: O(n) ", "Method#5:Using itertools", "Output", "Time complexity: O(n) ", "Auxiliary Space: O(n) ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-concatenate-two-lists-element-wise/"},
{"title": "Python - Concatenate Ranged Values in String list - GeeksforGeeks", "h1": ["Python – Concatenate Ranged Values in String list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using loop + string slicing", "Output", "Time complexity: ", "Auxiliary Space: ", "Method #2  : Using list comprehension + string slicing", "Output", "Time complexity: ", "Auxiliary space: ", "Method 3: using the map() function and the join() method. Here is an example code:", "Output", "Method #4: Using the reduce() function from functools module", "Output", "Time complexity: ", "Auxiliary space:", "Method #5: Using str.join() and list slicing", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-concatenate-ranged-values-in-string-list/"},
{"title": "Python | Group tuples in list with same first value - GeeksforGeeks", "h1": ["Python | Group tuples in list with same first value"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example: ", "Input :", "Output:", "Method #1: Using extend", "Output:", "Time Complexity: ", "Auxiliary Space:", "Method #2: Using defaultdict", "Output:", "Time complexity:", "Auxiliary space: ", "Method #3: Using for loop", "Output", "Time complexity: ", "Auxiliary space:", "Method #4: Using groupby", "Output", "Time complexity: ", "Auxiliary Space: ", "Method #5: Using set intersection and list comprehension", " set()", "Output", "Time complexity:", "Auxiliary space: ", "Method #6: Using reduce():", "Algorithm:", "Output", "Time complexity: O(nlogn)", "Auxiliary Space: O(n)", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-group-tuples-in-list-with-same-first-value/?ref=ml_lbp"},
{"title": "Python | Pandas dataframe.notna() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.notna()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.notna()", "Note :", "Syntax:", "Returns :", "Example #1: ", "Output : ", "Example #2: ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-notna/?ref=ml_lbp"},
{"title": "Python | Pandas dataframe.shift() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.shift()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Pandas Dataframe.shift() Syntax ", "What dataframe.shift() Function in Pandas?", "Pandas Dataframe.shift() Examples", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.shift()", "period", "Syntax:", "Parameters : ", "periods : ", "freq : ", "axis : ", "Return : ", "Output:", "   A   B   C   D", "Output:", "A   B   C   D", "Output : ", "  A     B     C     D", "Output :", "    A   B   C   D", "Output:", "  A     B     C     D", "  A     B     C     D", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-shift/?ref=ml_lbp"},
{"title": "Python Pandas - get_dummies() method - GeeksforGeeks", "h1": ["Python Pandas – get_dummies() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python", "Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["pandas.get_dummies()", "syntax:  ", "Parameters:", "data: ", "prefix: ", "prefix_sep: ", "dummy_na: ", "columns: ", "sparse: ", "drop_first: ", "dtype: ", "Returns:", "Example 1:", "Output:", "Example 2:", "Output:", "Example 3: ", "Output:", "Example 4:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-get_dummies-method/?ref=ml_lbp"},
{"title": "Python program to Represent Negative Integers in binary format - GeeksforGeeks", "h1": ["Python program to Represent Negative Integers in binary format"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Method 1: Using format specifier ‘b’", "Python3", "Method 2: Using bin() function", "Python3", "Method 3: Using f-strings ", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input:", "Output:", "Input:", "Output:", "Input:", "Output:", "Output : ", "Time Complexity : ", "Space Complexity :", "Output : ", "Time Complexity :", "Space Complexity :", "Output : ", "Time Complexity : ", "Space Complexity :", "Note: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-to-represent-negative-integers-in-binary-format/?ref=ml_lbp"},
{"title": "Python Program to Check Whether a Number is Positive or Negative or zero - GeeksforGeeks", "h1": ["Python Program to Check Whether a Number is Positive or Negative or zero"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input: ", "Output: ", "Input: ", "Output: ", "Approach:", "Output:", " time complexity", "O(1).", "space complexity", " O(1).", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Master Java Programming - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-program-to-check-whether-a-number-is-positive-or-negative-or-zero/"},
{"title": "Python | Pandas dataframe.infer_objects() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.infer_objects()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.infer_objects()", "Syntax:", "Returns :", "Example #1: ", "Output : ", "Output :", "Output :", "Example #2: ", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-infer_objects/?ref=previous_article"},
{"title": "Python | Pandas dataframe.notnull() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.notnull()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.notnull()", "Note :", "Syntax:", "Returns :", "Example #1: ", "Output : ", "Example #2: ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-notnull/"},
{"title": "Python program to print number of bits to store an integer and also the number in Binary format - GeeksforGeeks", "h1": ["Python program to print number of bits to store an integer and also the number in Binary format"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input: ", "Output: ", "Input:", "Output:", "Method 1: Using loops", "Approach", "Example :", "Output:", "Method 2:Using Recursion", "Approach:", "Example:", "Output:", "Method 3: Using in-built function", "bit_length()", "Syntax: ", "Parameter:", "Returns: ", "bin()", "Syntax : ", "Parameters :", "Return Value :", "Exceptions :", "Example:", "Output", "Output:", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-print-number-of-bits-to-store-an-integer-and-also-the-number-in-binary-format/"},
{"title": "Python | Pandas dataframe.info() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.info()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", " Pandas dataframe.info() Syntax ", "What is dataframe.info() Function in Pandas ?", "Pandas dataframe.info() Examples  ", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["dataframe.info()", "Syntax:", "Parameters:", "verbose : ", "buf :", "max_cols :", "memory_usage : ", "null_counts :", "Output :", "Output : ", "Note :", "nba.csv", "Output : ", "Note :", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-info/?ref=ml_lbp"},
{"title": "Python | Pandas dataframe.mask() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.mask()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.mask()", "Syntax:", "Parameters : ", "cond : ", "other : ", "inplace :", "axis :", "level :", "errors :", "try_cast :", "Returns :", "Example #1: ", "Output : ", "Example #2: ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-mask/?ref=ml_lbp"},
{"title": "Python | Pandas Dataframe.plot.bar - GeeksforGeeks", "h1": ["Python | Pandas Dataframe.plot.bar"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", "DataFrame.plot.bar()", "Syntax :", "Parameters:", "x :", "y :", "**kwds :", "Returns:", "Example #1: ", "Output:", "Example #2: ", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-plot-bar/?ref=ml_lbp"},
{"title": "Python | Sort a list according to the second element in sublist - GeeksforGeeks", "h1": ["Python | Sort a list according to the second element in sublist"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Illustration:", "Method 1: Using the Bubble Sort Technique", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Method 2: Sorting by the use of sort() method", "Output", "Time complexity:", "Auxiliary space:", "O(nlogn) ", "Method 3: Sorting by the use of sorted() method", "Output", "Time complexity: O(n log n)", "Auxiliary space: O(n)", "Method 4: Use orderedDIct", "Output", "Time complexity:", "O(n log n)", "Auxiliary space: O(n)", "Method 4: Using itemgetter() function from the operator module:", "itemgetter() ", "sort_tuples()", "sorted() ", "itemgetter(1) ", "sorted()", "Output", "Time complexity:", "Auxiliary space: ", "Method 5: Using numpy’s argsort():", "Note:", "Algorithm:", "Output:", "Time complexity: O(N log N),", "Auxiliary Space: O(N)", "Method#6: Using the Recursive method.", "Output", "Time Complexity: O(N logN)", "Auxiliary Space: O(1)", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "DSA for Interview Preparation "], "link": "https://www.geeksforgeeks.org/python-sort-list-according-second-element-sublist/?ref=ml_lbp"},
{"title": "Python3 Program to Maximize sum of diagonal of a matrix by rotating all rows or all columns - GeeksforGeeks", "h1": ["Python3 Program to Maximize sum of diagonal of a matrix by rotating all rows or all columns"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["mat[][]", "N * N", "Examples:", "Input:", "Output:", "Explanation:", "Input:", "Output:", "Approach:", "maxDiagonalSum", "[0, N – 1]", "maxDiagonalSum", "[0, N – 1]", "maxDiagonalSum", "maxDiagonalSum", "Output:", "Time Complexity:", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python3-program-to-maximize-sum-of-diagonal-of-a-matrix-by-rotating-all-rows-or-all-columns/"},
{"title": "Python | Unpacking dictionary keys into tuple - GeeksforGeeks", "h1": ["Python | Unpacking dictionary keys into tuple"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Unpacking Dictionary keys into Tuple using Tuple()", " ", "Python3", "Unpacking Dictionary keys into Tuple using the “=” operator and multiple variables", " ", "Python3", "Unpacking Dictionary keys into Tuple use keys() Method + Tuple()", "Python3", "Unpacking Dictionary keys into Tuple use the items() Method", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example", "Input: ", "Output:", "Explanation:", "Unpacking Dictionary keys into Tuple using Tuple()", "Output", "Time complexity: ", "Auxiliary space: ", "Unpacking Dictionary keys into Tuple using the “=” operator and multiple variables", "Output", "Time Complexity: ", "Auxiliary Space: ", "Unpacking Dictionary keys into Tuple use keys() Method + Tuple()", "Output", "Time complexity:", "Auxiliary space: ", "Unpacking Dictionary keys into Tuple use the items() Method", ". ", "Output", "Time complexity: ", "Auxiliary space:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-unpacking-dictionary-keys-into-tuple/"},
{"title": "hex() function in Python - GeeksforGeeks", "h1": ["hex() function in Python"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Hex() Function Syntax ", "Python Hex() Function Example", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["The hex()", "Python Hex() Function Syntax ", "Syntax: ", "Parameter: x –", " ", "Returns: ", "Output", "Output ", "Output", "Output ", "Output ", "Errors and Exceptions ", "Typeerror : ", "Applications ", "standard conversions", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-hex-function/?ref=lbp"},
{"title": "Python program to check a string for specific characters - GeeksforGeeks", "h1": ["Python program to check a string for specific characters"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input:", "Output:", "Input:", "Output:", "Method  1:", "Output", "Method 2:", "Output", "Method 3: Check a string for a specific character using find()", "find()", " ", "Output", "Output", "Output", "Method 6 : Using Counter() function", "Output", "Time Complexity:O(N)", "Auxiliary Space: O(N)", "Method 7 : Here’s another approach using the map() and set() function.", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-check-a-string-for-specific-characters/?ref=ml_lbp"},
{"title": "Python | set() method - GeeksforGeeks", "h1": ["Python | set() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python set() Method Syntax", "What is Python set() Function?", "set() Function in Python Examples", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["set()", "Syntax", "Parameters : ", "Returns : ", " ", "Output", "Output", "Output", "Output", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-set-method/"},
{"title": "Python | Multiply each element in a sublist by its index - GeeksforGeeks", "h1": ["Python | Multiply each element in a sublist by its index"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using Naive Method", "Output:", "Time complexity: ", "Auxiliary space: ", "Method #2: Using List comprehension", "Output", "Time complexity:", "Auxiliary space:", "Method #3: Using numpy", "Output:", "Method #4: Using Zip and List Comprehension", "Output", "Time Complexity", "Auxiliary Space", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-multiply-each-element-in-a-sublist-by-its-index/"},
{"title": "Sort the values of first list using second list in Python - GeeksforGeeks", "h1": ["Sort the values of first list using second list in Python"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "Python3", "Python3", "Python3", "note: install numpy module using command “pip install numpy”", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples: ", "Input : ", "Output : ", "Input : ", "Output :", "Approach : ", "Concept : ", "Output", "Time Complexity:", "Auxiliary Space:", "Approach 2: By using Dictionary, list comprehension, lambda function", "Output", "Time Complexity", "Auxiliary Space", "Approach 3: Using sort(),list() and set() methods", "Output", "Output", "Approach : Using the numpy.argsort() function with fancy indexing", "note: install numpy module using command “pip install numpy”", "Algorithm:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "DSA for Interview Preparation "], "link": "https://www.geeksforgeeks.org/python-sort-values-first-list-using-second-list/?ref=ml_lbp"},
{"title": "Python | Check if element is present in tuple of tuples - GeeksforGeeks", "h1": ["Python | Check if element is present in tuple of tuples"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using any()", "Output", "Method #2: Using itertools.chain()", "Output", "Method #3:", "Output", "Method #4:", "Output", "Method #5:", "Output", "Output", "Method:", "countOf", "Output", "Method : Using map and lambda:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-check-if-element-is-present-in-tuple-of-tuples/"},
{"title": "Python - all() function - GeeksforGeeks", "h1": ["Python – all() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python all() Function in Python", "Python all() Function with Example", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python all() function", "Syntax: ", "Iterable:", "Returns: ", "Output:", "Example 1: Working of all() with Lists", "Output", "Example 2: Working of all() with Tuples", "Output", "Example 3: Working of all() with Sets", "Output", "Example 4: Working of all() with Dictionaries", "Output", "Note:", "Example 5: Working of all() with Strings", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-all-function/?ref=lbp"},
{"title": "Python - Extract Equal Pair Dictionary - GeeksforGeeks", "h1": ["Python – Extract Equal Pair Dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using loop", "Output", "Method #2 : Using dictionary comprehension:", "Output", "Output", "Output", "Method 4 : using a for loop with conditional statements. ", "The steps to implement this method are as follows:", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-extract-equal-pair-dictionary/?ref=ml_lbp"},
{"title": "Python program to find Tuples with positive elements in List of tuples - GeeksforGeeks", "h1": ["Python program to find Tuples with positive elements in List of tuples"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output", "Explanation", "Input", "Output ", "Explanation ", "Method #1 : Using list comprehension + all()", "test_list", "print() ", "+", "test_list", "zero", "print() ", "+", "Output", "Time complexity:", "O(n*m)", "Auxiliary space: O(n)", "Method #2 : Using filter() + lambda + all()", "Output", "Time complexity: O(n)", "Auxiliary space: O(1) ", "Method #3 : Using find(),map(),list() and join()", "Output", "Time complexity:", "O(n)", "Auxiliary space:", "O(n)", "Method #4 : Using list(),map(),join() and startswith() methods", "Output", "Time complexity: O(nlogn)", "Auxiliary space:", "O(n)", "Method #5: By defining a function and using len() method", "Output", "Time complexity: O(nm)", "Auxiliary space:", "O(k)", "Method #6: Using list comprehension + not any()", "Output", "Time Complexity", "O(n)", "Auxiliary Space ", "O(n)", "Method #7: Without using built-in function", "Output", "Time Complexity:O(n)", "Auxiliary Space :O(n)", "Method #8: Using for loop and if condition to filter tuples with positive elements:", "Approach :", "Output", "Time Complexity:", "Auxiliary Space: ", "Output", "time complexity", "space complexity", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-find-tuples-with-positive-elements-in-list-of-tuples/?ref=ml_lbp"},
{"title": "Python hash() method - GeeksforGeeks", "h1": ["Python hash() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python hash() function Syntax", "Python hash() Function Examples", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python hash() function ", "Python hash() function Syntax", "Syntax :", "Parameters :  obj :", "Returns :", "Example 1: ", "Output", "Example 2: ", "Output:", "Exceptions : ", "Example 3: hash() for Immutable Tuple Object", "Output", "Example 4: hash() on ", "utable Object", "Output", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-hash-method/?ref=previous_article"},
{"title": "Python program to convert a byte string to a list of integers - GeeksforGeeks", "h1": ["Python program to convert a byte string to a list of integers"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Method 1: ", "By using", " list()", " function", "Python3", "Method 2: ", "By using ", "for loop", " and ", "ord()", " function", "Python3", "Method 3:", " By using ", "from_bytes()", " function", "Python3", "Python3", "Method – 4 : using struct module", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method 1: ", " list()", " list() ", "Syntax:", "Parameters: ", "iterable: ", "Return values:", "Example: ", "Output:", "Method 2: ", "ord()", "Syntax:", "Parameters: ", "character:", "Return values: ", "Example: ", "Output:", "Method 3:", "from_bytes()", "Syntax:", "Parameters:", "bytes: ", "byteorder: ", "signed:", "Return values:", "Example: ", "Output:", "Example 2: ", "Output:", "Time Complexity: ", "Auxiliary Space: ", "unpack() ", "struct.unpack(‘<‘ or ‘>’ +’B’ or ‘b’ * len(byte_string) , variable_name/byte_string)", "‘<‘ or ‘>’ : ", "‘B’ or ‘b’ * len(byte_string) : ", "variable_name / byte_string ", "Code – ", "Output", "Time Complexity – O(n) # n denotes the length of byte string", "Auxiliary Space – O(n) # n denotes the length of the unpacked integers list", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-convert-a-byte-string-to-a-list-of-integers/?ref=ml_lbp"},
{"title": "Python | Convert number to list of integers - GeeksforGeeks", "h1": ["Python | Convert number to list of integers"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using list comprehension", " ", "Output", "Method #2: Using map()", "Output", "Method #3:", "Output", "Method: Using lambda function", "Output", "Method : Using divmod", "Output", "Method: Using reduce:", "Algorithm:", "Output", "Time complexity:", "Space complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-convert-number-to-list-of-integers/"},
{"title": "Python - Interconvert Tuple to Byte Integer - GeeksforGeeks", "h1": ["Python – Interconvert Tuple to Byte Integer"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Input", "Output", "Method #1 : Tuple -> Byte Integer : Using ", "int.from_bytes()", " ", "Method #2 : Byte Integer -> Tuple : Using ", "tuple.to_bytes()", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-interconvert-tuple-to-byte-integer/"},
{"title": "Python in Keyword - GeeksforGeeks", "h1": ["Python in Keyword"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python in Keyword", "Python ‘in’ keyword in Expression", "Python in Keyword Usage", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["reserved word", "Python ‘in’ keyword in Expression", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-in-keyword/"},
{"title": "Python | math.copysign() function - GeeksforGeeks", "h1": ["Python | math.copysign() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["math.copysign(a, b)", "Syntax:", "Parameter:", "a, b:", "Returns:", "Code #1: ", "Code #2: ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-math-copysign-function/"},
{"title": "uniform() method in Python Random module - GeeksforGeeks", "h1": ["uniform() method in Python Random module"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["uniform()", "random", "uniform(int x, int y)", "Parameters :", "x", "y", "Returns :", "Code #1 :", "Application :", "Code #2 :", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-number-uniform-method/?ref=ml_lbp"},
{"title": "Python - math.comb() method - GeeksforGeeks", "h1": ["Python – math.comb() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Parameters:", "n", "k", "Returns:", "Code #1:", "Code #2:", "Code #3:", "Reference:", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Master JavaScript - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-math-comb-method/?ref=ml_lbp"},
{"title": "Python - math.perm() method - GeeksforGeeks", "h1": ["Python – math.perm() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Parameters:", "n", "k", "Returns:", "Code #1:", "Code #2:", "Code #3:", "Reference:", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-math-perm-method/?ref=ml_lbp"},
{"title": "Python - PyTorch numel() method - GeeksforGeeks", "h1": ["Python – PyTorch numel() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Syntax: ", "Arguments", "input: ", "Return: ", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-pytorch-numel-method/?ref=ml_lbp"},
{"title": "Python - cmath.sin() function - GeeksforGeeks", "h1": ["Python – cmath.sin() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["cmath", "Syntax:", "Parameter: ", "Return: ", " ", "Example 1: ", "Output:", "Example 2: ", "Output:", "Example 3: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-cmath-sin-function/?ref=ml_lbp"},
{"title": "Python String casefold() Method - GeeksforGeeks", "h1": ["Python String casefold() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python String casefold() Method Syntax", "Python String casefold() Method Example", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python String casefold()", " r", "Syntax:", "Parameters: ", "Return value: ", "Output:", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-string-casefold-method/?ref=ml_lbp"},
{"title": "Python Do While Loops - GeeksforGeeks", "h1": ["Python Do While Loops"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Do while loop", "Example of do while loop in C++", "C++", "Examples of do while loop in Python : ", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax of do while loop:", "Output: ", "Example 1 :", "Output: ", "and", "len(list1[5])<10", "Example 2:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-do-while/?ref=ml_lbp"},
{"title": "Python math library | expm1() method - GeeksforGeeks", "h1": ["Python math library | expm1() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["expm1()", "Syntax :", "Parameters : x : ", "Returns : ", "Time Complexity:", "Auxiliary Space: ", "Code #1 : ", "Output :", "“exp() – 1” vs “expm1()”", "Code #2 :", "Output :", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-math-library-expm1-method/?ref=ml_lbp"},
{"title": "Python - PyTorch clamp() method - GeeksforGeeks", "h1": ["Python – PyTorch clamp() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Syntax: ", "Arguments", "inp: ", "min: ", "max: ", "out: ", "Return: ", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-pytorch-clamp-method/?ref=ml_lbp"},
{"title": "Python | math.isqrt() method - GeeksforGeeks", "h1": ["Python | math.isqrt() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Math module", "math.isqrt()", "Note:", "Syntax:", "Parameter:", "n", "Returns:", "Code #1:", "Output:", "Code #2:", "Output:", "Code #3:", "Output:", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Master JavaScript - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-math-isqrt-method/"},
{"title": "Python - math.dist() method - GeeksforGeeks", "h1": ["Python – math.dist() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Parameters:", "p", "q", "Returns:", "Code #1:", "Code #2:", "Code #3:", "Reference:", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Master JavaScript - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-math-dist-method/"},
{"title": "Python - math.perm() method - GeeksforGeeks", "h1": ["Python – math.perm() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Parameters:", "n", "k", "Returns:", "Code #1:", "Code #2:", "Code #3:", "Reference:", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-math-perm-method/"},
{"title": "Python | math.factorial() function - GeeksforGeeks", "h1": ["Python | math.factorial() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["math.factorial()", "Syntax:", "Parameter:", "x:", "Returns:", "Time Complexity:", "Auxiliary space: ", "Code #1: ", "Output:", "Code #2: ", "Output:", "Code #3: ", "Output:", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Master JavaScript - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-math-factorial-function/?ref=ml_lbp"},
{"title": "Python math library | expm1() method - GeeksforGeeks", "h1": ["Python math library | expm1() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["expm1()", "Syntax :", "Parameters : x : ", "Returns : ", "Time Complexity:", "Auxiliary Space: ", "Code #1 : ", "Output :", "“exp() – 1” vs “expm1()”", "Code #2 :", "Output :", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-math-library-expm1-method/"},
{"title": "Python - math.prod() method - GeeksforGeeks", "h1": ["Python – math.prod() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Parameters:", "iterable", "start", "Returns:", "Code #1:", "Code #2:", "Code #3:", "Reference:", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Master JavaScript - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-math-prod-method/"},
{"title": "Ways to remove particular List element in Python - GeeksforGeeks", "h1": ["Ways to remove particular List element in Python"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using ", "remove()", "remove()", "Method #2 : Using ", "set.disard()", "set.disard()", "Output :", "Method #3 : Using Lambda Function + filter()", "Output:", "Method #4: Using List Comprehension", "Output :", "Method #5: Using pop()", "Approach:", "Output :", "Method #6: Using Recursion ", "Output ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-ways-to-remove-particular-list-element/"},
{"title": "Python math library | isclose() method - GeeksforGeeks", "h1": ["Python math library | isclose() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["math.isclose()  the ", "math", "Syntax:", "Parameters: rel_tol: ", "abs_tol: ", "rel_tol", "abs_tol", "Return Value : ", "Without Using any Tolerance", "Output:", "Using Absolute Tolerance", "abs_tol", "False", "True", "Output:", "Using Relative Tolerance", "Output:", "Combining both tolerances", "abs_to", "abs_tol", "True", "abs_tol,", "rel_tol", "rel_tol", "True", "False", "Output:", "False", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-math-library-isclose-method/?ref=ml_lbp"},
{"title": "Python Math Module - GeeksforGeeks", "h1": ["Python Math Module"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What is a Math Module in Python?", "Python", "Constants in Math Module", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "List of Mathematical function in Math Module", "Numeric Functions in Math Module", "Python3", "Python3", "Python3", "Python3", "Logarithmic and Power Functions", "Python3", "Python3", "Python3", "Python3", "Trigonometric and Angular Functions", "Python3", "Python3", "Special Functions", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example: ", "pi", "tau", "1. Euler’s Number ", "math.e", "Syntax:", "Example:", "Output:", "math.pi", "Syntax of Python math PI", "Example 1:", "pi", "Output:", "Example 2: ", "‘ ", "A = pi * r * r'", "Output:", "Tau", "math.tau", "Syntax:", "Example:", "‘", "tau'", "Output:", "math.inf", "-math.inf", "Syntax:", "Example 1:", "Output:", "Example 2: ", "Output:", "math.nan", "Example:", "Output:", "ceil()", "floor()", "Example:", "Output:", "factorial()", " ", "Example:", "Output:", "gcd()", " ", "Example:", "Output:", "fabs()", "Example:", "Output:", "Example: ", "Output:", "pow()", "Example:", "“The value of 3**4 is : ” ", "pow()", " ", "Output:", "log()", "log2(a) ", "log10(a)", "Output:", "sqrt()", "Example:", "sqrt()", "Output:", "sin(), cos(), and tan()", "radians", "Example: ", "Output:", "degrees()", "radians()", "Example:", "Output:", "gamma()", "Example:", " ", "gamma()", " ", "Output:", "isinf()", "Example:", "float('inf'", "math.isinf()", " ", "math.isinf()", " ", "Output:", "isnan()", "Example:", "float('nan')", " ", "math.isnan()", " ", ".", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-math-module/"},
{"title": "Python | PyTorch asin() method - GeeksforGeeks", "h1": ["Python | PyTorch asin() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax", "Parameters", "x", "name", "Return type", "Code #1:", "Output:", "Code #2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-pytorch-asin-method/"},
{"title": "Python | PyTorch atan() method - GeeksforGeeks", "h1": ["Python | PyTorch atan() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax", "Parameters", "x", "name", "Return type", "Code #1:", "Output:", "Code #2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-pytorch-atan-method/"},
{"title": "Python | Get elements till particular element in list - GeeksforGeeks", "h1": ["Python | Get elements till particular element in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using index() + list slicing", "Output : ", "Method #2 : Using generator", "Output : ", "Method #3 : Using list.takewhile()", "Output", "Time complexity:", "Auxiliary Space: ", "Method#4: Using Recursive method.", "get_elements_till ", "n", "n", " N", "get_elements_till ", "N", "Output", "Time complexity: ", "Auxiliary Space: ", ".", "Method#5: Using enumeration", "N", "test_list ", " enumerate().", "N", "N", "index_N", "index_N ", "N", "N", "Output", "Time complexity: ", "Auxiliary Space: ", "Method#6: Using numpy.where(): ", "Algorithm:", "Output:", "Time complexity: O(n)", "Space complexity: O(n)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-get-elements-till-particular-element-in-list/"},
{"title": "Python String count() Method - GeeksforGeeks", "h1": ["Python String count() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What is the String count() Method?", "String count() Method Syntax", "Python3", "How to use String count() Method", "More Example on String count() Method", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" count()", "Output", " count()", "Note", "string. Count(substring, start= …., end= ….)", "Parameters: ", "Mandatory parameter: ", "Optional Parameters:", "Return Value: ", "number of times", "Example:", "Output", "Output", "Output", "Time Complexity: ", "Auxiliary Space:", "Output", "Time Complexity: ", "Auxiliary Space:", "Regular Expression", "Output", "Time Complexity: ", "Auxiliary Space:", "with Start and End Parameter", "Output", "Time Complexity: ", "Auxiliary Space:", "Read Other ", "Python String Methods", "Similar Articles:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-string-count-method/?ref=lbp"},
{"title": "Python | frexp() Function - GeeksforGeeks", "h1": ["Python | frexp() Function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["frexp()", "m ", "e ", " m", "e", " x == m * 2**e ", "Syntax:", "Parameters: ", "Returns:", "Exception:", "x", "Time Complexity:", "Auxiliary Space: ", "Code #1:", "Output:", "Code #2: ", "Code #3: ", "TypeError", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-frexp-function/"},
{"title": "Python | fmod() function - GeeksforGeeks", "h1": ["Python | fmod() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["fmod()", "Syntax:", "Parameters:", "Returns:", "Time Complexity:", "Auxiliary Space:", "Example #1:", "Output:", "Example #2:", "ValueError", "ValueError", "TypeError", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-fmod-function/"},
{"title": "Python | Customer Churn Analysis Prediction - GeeksforGeeks", "h1": ["Python | Customer Churn Analysis Prediction"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Classification Projects", "Regression Projects", "Computer Vision Projects", "Natural Language Processing Projects", "Clustering Projects", "Recommender System Project", "Classification Projects", "Regression Projects", "Computer Vision Projects", "Natural Language Processing Projects", "Clustering Projects", "Recommender System Project", "What kind of Experience do you want to share?"], "strong": ["Customer Churn", "Types of Customer Churn –", "Reasons for Voluntary Churn", "Code: Importing Telco Churn dataset", "Output:", "Exploratory Data Analysis on Telco Churn Dataset", "Code : ", "Output:", "Code: ", "Output:", "Code: ", "Output:", "Exploring Data Visualizations : ", "Output:", "Code: To visualize the difference in ", "Customer service calls", " between churners and non-churners", "Output:", "Data Preprocessing for Telco Churn Dataset", "Code: Encoding State feature using One hot encoding ", "Code : To Create Training and Test sets", "Code: To scale features of the training  and test sets", "Code: To train a ", "Random Forest classifier", " model on the training set.", "Code : Making Predictions", "Code: Evaluating Model Performance", "Output:", "Code : Confusion Matrix", "Output:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-customer-churn-analysis-prediction/?ref=lbp"},
{"title": "Python | Tensorflow logical_and() method - GeeksforGeeks", "h1": ["Python | Tensorflow logical_and() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["tensorflow.math", "Syntax", "Parameters", "x", "y", "name", "Return type", "Code:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-logical_and-method/?ref=ml_lbp"},
{"title": "Python - tensorflow.IndexedSlices() - GeeksforGeeks", "h1": ["Python – tensorflow.IndexedSlices()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["IndexedSlices() ", "Syntax: ", "Parameters:", "values: ", "indices: ", "Returns: ", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-indexedslices/?ref=ml_lbp"},
{"title": "Python - tensorflow.identity() - GeeksforGeeks", "h1": ["Python – tensorflow.identity()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["identity() ", "Syntax: ", "Parameters:", "input: ", "name(optional): ", "Returns: ", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-identity/?ref=ml_lbp"},
{"title": "Python - Filter Tuples with Strings of specific characters - GeeksforGeeks", "h1": ["Python – Filter Tuples with Strings of specific characters"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using ", "all()", " + ", "list comprehension", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #2 : Using ", "filter()", " + lambda + all()", "Output", "Time Complexity:", "Auxiliary Space: ", "Method #3 : Using replace(),join() and len() methods", "Output", "Time complexity: ", "Auxiliary space: ", "Method #4 : Using re", "Output", "Time complexity: ", "Auxiliary Space:", "Method #5: Using Set Operations", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-filter-tuples-with-strings-of-specific-characters/"},
{"title": "Python - tensorflow.raw_ops.Cos() - GeeksforGeeks", "h1": ["Python – tensorflow.raw_ops.Cos()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Cos()", "Syntax: ", "Parameters:", "x:", "name(optional): ", "Returns:", "Note: ", "Example 1:", "Output:", "Example 2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-raw_ops-cos/?ref=ml_lbp"},
{"title": "Python - tensorflow.raw_ops.Cos() - GeeksforGeeks", "h1": ["Python – tensorflow.raw_ops.Cos()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Cos()", "Syntax: ", "Parameters:", "x:", "name(optional): ", "Returns:", "Note: ", "Example 1:", "Output:", "Example 2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-raw_ops-cos/"},
{"title": "Python - tensorflow.raw_ops.Cosh() - GeeksforGeeks", "h1": ["Python – tensorflow.raw_ops.Cosh()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Cosh()", "Syntax: ", "Parameters:", "x:", "name(optional): ", "Returns:", "Note: ", "Example 1:", "Output:", "Example 2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-raw_ops-cosh/?ref=ml_lbp"},
{"title": "Python - tensorflow.math.sin() - GeeksforGeeks", "h1": ["Python – tensorflow.math.sin()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["sin()", "Syntax: ", "Parameters:", "x:", "name(optional): ", "Returns:", "Example 1:", "Output:", "Example 2: ", "Output:", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tensorflow-math-sin/"},
{"title": "Python - tensorflow.math.tanh() - GeeksforGeeks", "h1": ["Python – tensorflow.math.tanh()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["tanh()", "Syntax: ", "Parameters:", "x:", "name(optional): ", "Returns:", "Example 1:", "Output:", "Example 2: ", "Output:", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tensorflow-math-tanh/"},
{"title": "Python - Filter Rows with Range Elements - GeeksforGeeks", "h1": ["Python – Filter Rows with Range Elements"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using ", "all()", " + ", "list comprehension", "Output", "Method #2 : Using ", "filter()", " + ", "lambda", " + all()", "Output", "Method #3:Using itertools.filterfalse() method", "Output", "Time Complexity: O(N*N)", "Auxiliary Space: O(N*N)", "Method #4:Using List Comprehension and Set Intersection:", "Algorithm:", "Output", "Time complexity:", "Space complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-filter-rows-with-range-elements/"},
{"title": "Python Program to test if the String only Numbers and Alphabets - GeeksforGeeks", "h1": ["Python Program to test if the String only Numbers and Alphabets"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Explanation :", "Input : ", "Output :", "Explanation : ", "Method #1 : Using ", "isalpha()", " +", " isdigit()", " + ", "any()", " + ", "all()", " + ", "isalnum()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #2 : Using ", "regex", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3 : ", "in", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #4 : Using replace() and len() methods", "Output", "Method #5: Using operator.countOf() method", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(1)", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(N)", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-to-test-if-the-string-only-numbers-and-alphabets/"},
{"title": "Python - tensorflow.eye() - GeeksforGeeks", "h1": ["Python – tensorflow.eye()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["tensorflow.eye() ", "Syntax: ", "Parameters:", "num_rows: ", "num_columns(optional): ", "batch_shape(optional): ", "dtype(optional): ", "name(optional): ", "Return : ", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-eye/"},
{"title": "Python | List expansion by K - GeeksforGeeks", "h1": ["Python | List expansion by K"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method # : Using list comprehension", "Output", "Time Complexity: ", "Auxiliary Space:", "Method #2 : Using itertools.chain() + itertools.tee() + zip()", "Output", "Time complexity: ", "Auxiliary space:", "Method #3 : Using * and extend() method", "Output", "Time complexity: ", "Auxiliary space:", "Method #4 : Using repeat", "Output", "Time complexity:", "Auxiliary space: ", "Method #5: Using a loop", "res", " i ", "test_list", " i", "0", "K-1", "i ", "K", " append() ", "j.", "print()", "Output", "Time complexity: ", "Auxiliary space: ", "Method #6: Using numpy.repeat", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-list-expansion-by-k/?ref=ml_lbp"},
{"title": "Python - Remove Dictionaries with Matching Values with K Key - GeeksforGeeks", "h1": ["Python – Remove Dictionaries with Matching Values with K Key"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method 1: Using list comprehension + dictionary comprehension", "Output:", "Method 2 : Using filter() function and lambda function", "Output", "Method 3: Using a for loop and a new list to store the desired output.", " Here are the steps:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-remove-dictionaries-with-matching-values-with-k-key/?ref=ml_lbp"},
{"title": "Python - Sort by Rear Character in Strings List - GeeksforGeeks", "h1": ["Python – Sort by Rear Character in Strings List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using sort()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #2 : Using ", "sorted()", " + ", "lambda", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method#3: Using Recursive method.", "Output", "Time Complexity: O(n log n)", "Auxiliary Space: O(n)", "Method #4: Using map(), list(), and lambda", "Output", "Time Complexity: O(nlogn)", "Auxiliary Space: O(n)", "Method #5: Using a Dictionary and List Comprehension", "Output", "Time Complexity: O(n log n)", "Auxiliary Space: O(n)", "Method #6: Using a custom comparator function", "Output", "Time Complexity: O(n log n)", "Auxiliary Space: O(n)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-sort-by-rear-character-in-strings-list/?ref=ml_lbp"},
{"title": "Python | Convert list of numerical string to list of Integers - GeeksforGeeks", "h1": ["Python | Convert list of numerical string to list of Integers"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Convert list of numerical string to list of Integers using list comprehension", "Output", "Convert list of numerical string to list of Integers using map() + list comprehension", "Output", "Convert list of numerical string to list of Integers using lambda expression", "Output", "Convert list of numerical string to list of Integers using the reduce() function", "Output", "Convert list of numerical string to list of Integers using Heapq method", "Output", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-convert-list-of-numerical-string-to-list-of-integers/?ref=ml_lbp"},
{"title": "Python | Pandas Series.rolling() - GeeksforGeeks", "h1": ["Python | Pandas Series.rolling()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": [" Series.rolling()", "Syntax:", "Parameter : ", "window : ", "min_periods : ", "center : ", "win_type : ", "on : ", "axis : ", "closed : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-series-rolling/"},
{"title": "Python - Substring presence in Strings List - GeeksforGeeks", "h1": ["Python – Substring presence in Strings List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using loop", "Output", "Method #2 : Using list comprehension + any()", "Output", "Time Complexity: ", "Space Complexity: ", "Method 3:  using the built-in set and intersection functions. ", " steps to implement this approach:", "Output", "Method 4:  using numpy:", "Algorithm:", "Output:", "Time complexity:", "Space complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-substring-presence-in-strings-list/?ref=ml_lbp"},
{"title": "Python | Test if string contains element from list - GeeksforGeeks", "h1": ["Python | Test if string contains element from list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Naive Approach checking each word in the string", "Python3", "Using list comprehension", " to check if string contains element from list", "Python3", "Using any()", " to check if string contains element from list", "Python3", "Using find() method to check if string contains element from list", "Python3", "Using Counter() function", "Python3", "Python3", "Python3", "Using operator.contains() method", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input:", "Output:", "Output", "Using list comprehension", "Output", "Using any()", "Output", "Using find() method to check if string contains element from list", "Output", "Output", "Time Complexity: O(N)", "Auxiliary Space: O(N)", "Using Set Intersection to Check if String Contains Element from List", "Output", "Output", "Approach", "Output", "Output", "Time complexity", "Space complexity: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-test-if-string-contains-element-from-list/?ref=ml_lbp"},
{"title": "Python - Convert String Truth values to Boolean - GeeksforGeeks", "h1": ["Python – Convert String Truth values to Boolean"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Ways to Convert Python String to Boolean", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input :", "Output :", "Explanation :", "Output", "Time Complexity: ", "Auxiliary Space: ", "Output", "Time Complexity:", "Auxiliary Space: ", "Convert String to Bool in Python using List Comprehension", "Output", "Time Complexity:", "Auxiliary Space: ", "Convert String to Bool in Python using Map() ", "Output", "Time Complexity: ", "Space Complexity: ", "Convert String to Bool in Python using", "Output", "Time complexity:", "Space complexity:", "Convert String to Bool in Python ", "Output", "Time complexity:", "Space complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-convert-string-truth-values-to-boolean/?ref=ml_lbp"},
{"title": "Python math function | copysign() - GeeksforGeeks", "h1": ["Python math function | copysign()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax : ", "Parameters : ", "Returns : ", "Time Complexity: ", "Auxiliary Space:", "Code #1:", "Output : ", "Code #2:", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-math-function-copysign/?ref=next_article"},
{"title": "Python | Pandas Series.nonzero() to get Index of all non zero values in a series - GeeksforGeeks", "h1": ["Python | Pandas Series.nonzero() to get Index of all non zero values in a series"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", "Series.nonzero()", "Data Structures & Algorithms in JavaScript - Self Paced ", "Complete Test Series for Service-Based Companies ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-series-nonzero-to-get-index-of-all-non-zero-values-in-a-series/"},
{"title": "Python Program to check whether Characters of all string elements are in lexical order or not - GeeksforGeeks", "h1": ["Python Program to check whether Characters of all string elements are in lexical order or not"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Method 1: ", "Example:", "Output", "Method 2 : ", "Example:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 3: Using map() and lambda", "Output", "Method 4: Using any() and generator expression", "Output", "Time complexity: O(n * log n)", "Auxiliary space: O(1) ", "Method 5: Use the reduce() function from the functools module. ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-check-whether-characters-of-all-string-elements-are-in-lexical-order-or-not/?ref=ml_lbp"},
{"title": "Python | Pandas Index.dropna() - GeeksforGeeks", "h1": ["Python | Pandas Index.dropna()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " Index.dropna()", "Syntax:", "Parameters : ", "how : ", "Returns : ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-index-dropna/"},
{"title": "Python | Pandas Dataframe.sample() - GeeksforGeeks", "h1": ["Python | Pandas Dataframe.sample()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["sample()", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-sample/?ref=lbp"},
{"title": "Python - Sort by Uppercase Frequency - GeeksforGeeks", "h1": ["Python – Sort by Uppercase Frequency"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using sort() + isupper()", "Output", "Method #2 : Using sorted() + lambda function", "Output", "Method #3 : Using Counter", "This approach uses the Counter method from the collections module to get the frequency count of uppercase letters in each string and then uses the sorted method to sort the list based on these counts.", "Output", "Method#4: using re module", "Step-by-step algorithm:", "Output", "Time complexity:", "Auxiliary space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-sort-by-uppercase-frequency/?ref=ml_lbp"},
{"title": "Python | Pandas dataframe.info() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.info()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", " Pandas dataframe.info() Syntax ", "What is dataframe.info() Function in Pandas ?", "Pandas dataframe.info() Examples  ", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["dataframe.info()", "Syntax:", "Parameters:", "verbose : ", "buf :", "max_cols :", "memory_usage : ", "null_counts :", "Output :", "Output : ", "Note :", "nba.csv", "Output : ", "Note :", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-info/?ref=next_article"},
{"title": "Python - Find all the strings that are substrings to the given list of strings - GeeksforGeeks", "h1": ["Python – Find all the strings that are substrings to the given list of strings"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input : ", "Output :", "Explanation :", "Input :", "Output :", "Explanation :", "Method #1: Using list comprehension", "Output", "Method #2: Using any() + generator expression", "Output", "Time Complexity: ", "Space Complexity: ", "Method #3: Using find() method", "Output", "Method#4: Using Recursive method.", "Output", "Method 5 :  use is the set intersection method. ", " steps for this approach:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-find-all-the-strings-that-are-substrings-to-the-given-list-of-strings/"},
{"title": "Python | Tokenizing strings in list of strings - GeeksforGeeks", "h1": ["Python | Tokenizing strings in list of strings"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension + ", "split()", "Method #2 : Using ", "map() + split()", "Method #3 : Using re", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-tokenizing-strings-in-list-of-strings/"},
{"title": "Python - All occurrences of Substring from the list of strings - GeeksforGeeks", "h1": ["Python – All occurrences of Substring from the list of strings"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using loop + in operator", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Method #2 : Using all() + list comprehension", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Method #3: Using Counter() function", "Output", "Method #4: Using set() and intersection() function", "Step by step Algorithm:", "Output", "Time Complexity: ", "Space Complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-all-occurrences-of-substring-from-the-list-of-strings/"},
{"title": "Python | Pandas Index.argmax() - GeeksforGeeks", "h1": ["Python | Pandas Index.argmax()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " Index.argmax()", "Syntax:", "Parameter:", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-index-argmax/?ref=previous_article"},
{"title": "Python | Check if substring is part of List of Strings - GeeksforGeeks", "h1": ["Python | Check if substring is part of List of Strings"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using join()", "Output", "Time Complexity: O(n),", "Auxiliary Space: O(n)", "Method #2 : Using any()", "Output", "Method #3: Using find() method", "Output", "Method #4: Using filter() and lambda function", "Output", "Time complexity:", "Auxiliary space:  ", "Method 5: Using a simple loop to iterate over the list and check if the substring is present in each string.", "Output", "Time complexity: ", "Auxiliary space: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-check-if-substring-is-part-of-list-of-strings/"},
{"title": "Python | PoS Tagging and Lemmatization using spaCy - GeeksforGeeks", "h1": ["Python | PoS Tagging and Lemmatization using spaCy"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["spaCy", "How to Install ? ", "Top Features of spaCy:", "Import and Load Library:", "POS-Tagging for Reviews: ", "Output:", "Lemmatization:", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Master Java Programming - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-pos-tagging-and-lemmatization-using-spacy/"},
{"title": "Python | Pandas TimedeltaIndex.seconds - GeeksforGeeks", "h1": ["Python | Pandas TimedeltaIndex.seconds"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " TimedeltaIndex.seconds", "Syntax :", "Return : ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-timedeltaindex-seconds/"},
{"title": "Python - tensorflow.math.lbeta() - GeeksforGeeks", "h1": ["Python – tensorflow.math.lbeta()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["lbeta() ", "Syntax: ", "Parameters:", "x: ", "name(optional): ", "Returns:", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tensorflow-math-lbeta/?ref=ml_lbp"},
{"title": "Python | Pandas dataframe.bfill() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.bfill()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.bfill()", "Syntax:", "Parameters: ", "axis :", "inplace :", "limit :", "Example #1: ", "Output :", "Example #2: ", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-bfill/?ref=next_article"},
{"title": "Python | Pandas Panel.add() - GeeksforGeeks", "h1": ["Python | Pandas Panel.add()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": [" Panel.add() ", "Syntax:", "Parameters:", "other :", "axis :", "Returns:", "Code #1:", "Output:", "Code #2:", "Output:", "Code #3:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-panel-add/?ref=ml_lbp"},
{"title": "Python - Alternate List elements - GeeksforGeeks", "h1": ["Python – Alternate List elements"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using loop  ", "Output", "Method #2 : Using zip() + loop", "Output", "Method #3 : Using itertools module ", "step-by-step implementation of algorithm ", "Import the itertools module", "Initialize two lists test_list1 and test_list2", "Using zip function to combine the elements of the list’s element by element and create a list of tuples. And store them in combined_list ", "Use the itertools.chain function to concatenate the tuples in the combined_list into   a single list, we used “*” operator unpacks the list of tuples into separate arguments.", "Store the concatenated list in the variable result", "Print the result list.", "Output", "Time complexity: O(n)", "Auxiliary space: O(n)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-alternate-list-elements/"},
{"title": "Python Program to reverses alternate strings and then concatenates all elements - GeeksforGeeks", "h1": ["Python Program to reverses alternate strings and then concatenates all elements"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["N", "Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method 1: ", "Output", "Time Complexity: ", "Auxiliary Space:", "Method 2 : ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 3: Using list comprehension and enumerate", "Algorithm for reversing alternate strings and then concatenating all elements using list comprehension and enumerate approach:", "Input:", "Output:", "Steps:", "Output", "Method 4: Using map function and lambda function: ", "Algorithm:", "Output", "Time complexity:", "Auxiliary Space:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-to-reverses-alternate-strings-and-then-concatenates-all-elements/"},
{"title": "Python Program For Stock Buy Sell To Maximize Profit - GeeksforGeeks", "h1": ["Python Program For Stock Buy Sell To Maximize Profit"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["PRACTICE", "Naive approach:", "Output", "Time Complexity:", "Auxiliary Space", "Efficient approach:", "Output", "Time Complexity:", "Auxiliary Space ", "Valley Peak Approach:", "Output", "Time Complexity", "Auxiliary", "Space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Test Series for Product-Based Companies ", "Tech Interview 101 - From DSA to System Design for Working Professionals "], "link": "https://www.geeksforgeeks.org/python-program-for-stock-buy-sell-to-maximize-profit/?ref=ml_lbp"},
{"title": "Python | Custom slicing in List - GeeksforGeeks", "h1": ["Python | Custom slicing in List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method : Using compress() + cycle()", "Output : ", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-custom-slicing-in-list/"},
{"title": "Python - K Matrix Initialization - GeeksforGeeks", "h1": ["Python – K Matrix Initialization"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using List comprehension", "Output : ", "Method #2: Using list comprehension + “*” operator", "Output : ", "Method #3: Using Numpy", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Method 4: using a nested for loop. ", "N", "M", "K", "res", "K", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #5: Using list multiplication", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-k-matrix-initialization/"},
{"title": "Python | Variable list slicing - GeeksforGeeks", "h1": ["Python | Variable list slicing"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using itertools.islice() + list comprehension", "Output : ", "Time complexity: ", "Auxiliary space: ", "Method #2 : Using zip() + accumulate() + list slicing", "Output : ", " Method #3 : Using looping and slicing", "Output", "Method #4 : Using list comprehension and zip() function", "test_list ", " i", " j", " zip()", "[0]", "slice_list", "slice_list", "zip() ", "slice_list ", "result", "Output", "Time complexity:", "Auxiliary space:", "Method 5: Using numpy.split()", "[[1, 5], [3], [7, 8, 10], [11, 16, 9, 12]]", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-variable-list-slicing/"},
{"title": "Python | Boolean list initialization - GeeksforGeeks", "h1": ["Python | Boolean list initialization"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1:", " Using list comprehension ", "Output:", "Method #2:", " Using * operator", "*", "Output:", "Method #3 : ", "Using bytearray()", "Output:", "Method #4: Using itertools", "Output", "Method #5: Using map() with lambda function", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-boolean-list-initialization/"},
{"title": "Python | Pandas dataframe.rolling() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.rolling()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.rolling()", "Syntax :", "Parameters :", "window :", "min_periods :", "freq : ", "center :", "win_type : ", "on : ", "closed :", "axis :", "Note:", "Example #1: ", "Output :", "Example #2: ", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-rolling/"},
{"title": "Python | Pandas Dataframe.rename() - GeeksforGeeks", "h1": ["Python | Pandas Dataframe.rename()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", "rename()", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-rename/?ref=lbp"},
{"title": "Pandas DataFrame.loc[] Method - GeeksforGeeks", "h1": ["Pandas DataFrame.loc[] Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Pandas DataFrame loc[] Syntax", "Pandas DataFrame loc Property", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" DataFrame.loc", "Syntax:", "Parameter : ", "Returns :", "Example 1: ", " ", "Output", "Example 2: ", "Output", "Output", "Output", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-loc/?ref=lbp"},
{"title": "Python Pandas - DataFrame.copy() function - GeeksforGeeks", "h1": ["Python Pandas – DataFrame.copy() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax: ", "Step", "1) ", "Step", "2) ", "Step 3) ", "Output:", "Output:", "Let us see this, with examples when deep=True(default ):", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-copy-function/?ref=lbp"},
{"title": "Python | Pandas DataFrame.nsmallest() - GeeksforGeeks", "h1": ["Python | Pandas DataFrame.nsmallest()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "Python", "What kind of Experience do you want to share?"], "strong": ["Pandas ", "nsmallest()", "Syntax: ", "Parameters: ", "n: ", "columns: ", "keep: ", "Example #1: ", "Output:", "Example #2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-nsmallest/?ref=lbp"},
{"title": "Python - Alternate Strings Concatenation - GeeksforGeeks", "h1": ["Python – Alternate Strings Concatenation"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using list comprehension + list slicing + join()", "Output : ", "Method #2: Using loop", "Output : ", "Time Complexity: ", "Auxiliary Space: ", "Method 3: use the zip() function with tuple unpacking and string concatenation.", "Output", "Time complexity: O(n)", "Auxiliary space: O(n)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-alternate-strings-concatenation/"},
{"title": "Python | Truncate a list - GeeksforGeeks", "h1": ["Python | Truncate a list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using pop()", "Output:", "Method #2 : Using del + list slice", "Output:", "Method #3 : Using list slicing", "Output:", "  Method #4 : Using inbuilt slice() function", "Output", "Output", "Method #6: Using numpy:", "Algorithm :", "Output:", "Time complexity:", "Space complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-truncate-a-list/"},
{"title": "Python File truncate() Method - GeeksforGeeks", "h1": ["Python File truncate() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Prerequisites: ", "Syntax:", "Example:", "Output:", "Output:", "Note: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-file-truncate-method/"},
{"title": "Python - Horizontal Concatenation of Multiline Strings - GeeksforGeeks", "h1": ["Python – Horizontal Concatenation of Multiline Strings"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Ways of Horizontal Multiline String Concatenation in Python ", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input : ", "Output :", "Explanation :", "Output :", "Using zip() + split() + join() + List Comprehension", "Example :", "Output ", "Time Complexity: ", "Auxiliary Space: ", "Using map() + operator.add + join()", "Example ", " ", "Output ", "Time Complexity: ", "Auxiliary Space: ", "sing the itertools.zip_longest() Function, split() Function", "Example :", "Output :", "Time complexity: ", "Auxiliary space: ", "Example :", ".", "Output :", "Time complexity: ", "Auxiliary space: ", "Example : ", "Output :", "Time complexity: ", "Auxiliary space: ", "Example ", "e", "Output :", "Time complexity: ", "Auxiliary space: ", "Example : I", "Output :", "Time complexity: ", "Auxiliary space: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-horizontal-concatenation-of-multiline-strings/"},
{"title": "Python | Use of __slots__ - GeeksforGeeks", "h1": ["Python | Use of __slots__"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["slots", "Example of python object without slots :", "Example of python object with slots :", "Example of python if we use dict : ", "Result of using __slots__:", "Data Science Training Program ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-use-of-__slots__/?ref=ml_lbp"},
{"title": "Python - Construct dictionary Key-Value pairs separated by delimiter - GeeksforGeeks", "h1": ["Python – Construct dictionary Key-Value pairs separated by delimiter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using split() + loop", "delim", "delim", "“$”", "test_str", "split() ", ", ", "dicts", "res", "dicts", "split() ", "delim", "res", "res", "print() ", "Output", "Time complexity: ", "Auxiliary space: ", "Method #2 : Using dictionary comprehension + split()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 3: Using Regular Expressions", "Output", "Time complexity: ", "Auxiliary space: ", "Method #4: Using str.partition()", "str.partition() ", "Output", "Time complexity:", "Auxiliary space: ", "Method #5: Using zip() and list comprehension", "zip() ", "zip() ", "Output", "Time complexity: ", "Auxiliary space:", "Method #7: Using re.findall() and dict()", "step-by-step approach for the program:", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-construct-dictionary-key-value-pairs-separated-by-delimiter/?ref=ml_lbp"},
{"title": "Pandas DataFrame corr() Method - GeeksforGeeks", "h1": ["Pandas DataFrame corr() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Pandas DataFrame corr() Method Syntax", "Python3", "Python3", "Python Pandas DataFrame corr() Method Examples", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" dataframe.corr()", "Syntax:", "Parameters: ", "method : ", "min_periods : ", "Returns: ", "Output", "Note: ", "Output", "Output", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-corr/?ref=ml_lbp"},
{"title": "Pandas dataframe.groupby() Method - GeeksforGeeks", "h1": ["Pandas dataframe.groupby() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Pandas dataframe.groupby()", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas groupby", " dataframe.groupby()", "Syntax:", "Parameters :", "by :", "axis :", "level :", "as_index :", "sort :", "group_keys :", "squeeze :", "Returns :", "Dataset Used: ", "Example 1: ", "groupby()", "Output:", " groupby()", "Output :", "get_group() ", "Output :", "Example 2: ", "groupby()", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-groupby/?ref=ml_lbp"},
{"title": "Python IMDbPY – Getting series details from the series id - GeeksforGeeks", "h1": ["Python IMDbPY – Getting series details from the series id"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-imdbpy-getting-series-details-fro-the-series-id/"},
{"title": "Python - Triple quote String concatenation - GeeksforGeeks", "h1": ["Python – Triple quote String concatenation"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Input", "Output", "Method : Using splitlines() + strip() + join()", "Output : ", "Time Complexity: ", "Auxiliary Space: ", "Approach#2: Using formatting", "Output", "Method 3: Using the “+” operator", "Output", "Method 4: Using list comprehension and join()", "Output", "Time complexity: O(n)", "Auxiliary space: O(n)", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-triple-quote-string-concatenation/?ref=previous_article"},
{"title": "Python IMDbPY – Getting the country codes of the series - GeeksforGeeks", "h1": ["Python IMDbPY – Getting the country codes of the series"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-imdbpy-getting-the-country-codes-of-the-series/"},
{"title": "Python | Ways to sum list of lists and return sum list - GeeksforGeeks", "h1": ["Python | Ways to sum list of lists and return sum list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python", "What kind of Experience do you want to share?"], "strong": ["Method # 1:", "Output:", "Time complexity:", "Auxiliary Space:", "Method #2: ", "Output:", "Method #3: ", "Output:", "Time Complexity: ", "Auxiliary Space:", "Method #4:", "Output", "Method #5:", "Approach:", "Output", "Method #6: Using built-in function reduce() from the functools module", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-ways-to-sum-list-of-lists-and-return-sum-list/?ref=ml_lbp"},
{"title": "Python program to check if the list contains three consecutive common numbers in Python - GeeksforGeeks", "h1": ["Python program to check if the list contains three consecutive common numbers in Python"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example :", "Input : ", "Output : ", "Input : ", "Output ", "Approach :", "Example 1 :", "Output : ", "Example 2 :", "Output : ", "Example #3: Using set() function", "Output", "Time Complexity: O(N)", "Auxiliary Space : O(N)", "Example #4:Using the itertools library:", "Algorithm:", "Output", "Time Complexity:", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-check-if-the-list-contains-three-consecutive-common-numbers-in-python/?ref=ml_lbp"},
{"title": "Python | Pandas Series.items() - GeeksforGeeks", "h1": ["Python | Pandas Series.items()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": [" Series.items()", "Syntax:", "Parameter : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2 : ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-series-items/?ref=next_article"},
{"title": "Python Program For Finding Length Of A Linked List - GeeksforGeeks", "h1": ["Python Program For Finding Length Of A Linked List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "Python", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["PRACTICE", "Iterative Solution:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Recursive Solution:", "int getCount(head)", "Output", "Time Complexity:", "Auxiliary Space: ", "Output", "The time complexity of the approach used in the program is O(n),", "The auxiliary space used by the program is O(1).", "Steps:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-for-finding-length-of-a-linked-list-iterative-and-recursive-approach/?ref=ml_lbp"},
{"title": "Python | sympy.LessThan() method - GeeksforGeeks", "h1": ["Python | sympy.LessThan() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["sympy.LessThan()", "Syntax :", "Return :", "Example #1 :", "Output :", "Example #2 :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sympy-lessthan-method/"},
{"title": "Python | sympy.zeros() method - GeeksforGeeks", "h1": ["Python | sympy.zeros() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["sympy.zeros()", "Syntax :", "Return :", "Example #1 :", "Output :", "Example #2 :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sympy-zeros-method/"},
{"title": "Python Dictionary pop() Method", "h1": ["Python Dictionary pop() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Definition and Use of Python Dictionary pop() Method", "Syntax of Dictionary pop()", "How to Remove Value-Key Pair from Dictionary", "Python3", "More Example of Dictionary pop() method", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python dictionary pop() ", "removes and returns", "Output", "dict.pop(key, def)", "Parameters : ", "key : ", "def :", "Returns :", "Output", "Example 1: Pop an element ", " the dictionary", "Output", "Output", "Example 3: ", " different when the key is not present in dictionary.", "KeyError", "Output :", "Also Read:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-dictionary-pop-method/?ref=previous_article"},
{"title": "Python Dictionary update() method - GeeksforGeeks", "h1": ["Python Dictionary update() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Syntax of Python Dictionary Update Method", "Python Dictionary update() Example", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python Dictionary update() method", "Example:", "Original dictionary : ", "Updated dictionary :", "Original dictionary :", "Updated dictionary : ", "Syntax:", "Parameters:", "Returns:", "Output:", "Output", "Output:", "Python Dictionary Update Value if the Key doesn’t Exist", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-dictionary-update-method/?ref=lbp"},
{"title": "Python | Pandas Series.iteritems() - GeeksforGeeks", "h1": ["Python | Pandas Series.iteritems()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": [" Series.iteritems()", "Syntax:", "Parameter : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2 : ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-series-iteritems/?ref=lbp"},
{"title": "Python | Sympy Ellipse.equation() method - GeeksforGeeks", "h1": ["Python | Sympy Ellipse.equation() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Parameters:", "x :", "y : ", "_slope :", "Returns:", "Example #1:", "Output:", "Example #2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sympy-ellipse-equation-method/"},
{"title": "Python | sympy.StrictGreaterThan() method - GeeksforGeeks", "h1": ["Python | sympy.StrictGreaterThan() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["sympy.StrictGreaterThan()", "Syntax :", "Return :", "Example #1 :", "Output :", "Example #2 :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sympy-strictgreaterthan-method/?ref=next_article"},
{"title": "Python OpenCV | cv2.ellipse() method - GeeksforGeeks", "h1": ["Python OpenCV | cv2.ellipse() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "What kind of Experience do you want to share?"], "strong": ["OpenCV-Python", "Syntax:", "Parameters:", "image:", "centerCoordinates:", "axesLength:", "angle:", "startAngle:", "endAngle:", "color:", "thickness:", "lineType:", "shift:", "Return Value:", "Image used for all the below examples:", "Example #1:", "Output:", "Example #2:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-opencv-cv2-ellipse-method/"},
{"title": "Python OpenCV | cv2.rectangle() method - GeeksforGeeks", "h1": ["Python OpenCV | cv2.rectangle() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "What kind of Experience do you want to share?"], "strong": ["OpenCV-Python", "Syntax:", "Parameters:", "image:", "start_point:", "end_point:", "color:", "thickness:", "Return Value:", "Image used for all the below examples:", "Example #1:", "Output:", "Example #2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-opencv-cv2-rectangle-method/"},
{"title": "Python OpenCV | cv2.arrowedLine() method - GeeksforGeeks", "h1": ["Python OpenCV | cv2.arrowedLine() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["OpenCV-Python", "Syntax:", "Parameters:", "image:", "start_point:", "X", "Y", "end_point:", "X", "Y", "color:", "BGR", "thickness:", "px", "line_type:", "shift:", "tipLength:", "Return Value:", "Image used for all the below examples:", "Example #1:", "Output:", "Example #2:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-opencv-cv2-arrowedline-method/?ref=previous_article"},
{"title": "Python | Smile detection using OpenCV - GeeksforGeeks", "h1": ["Python | Smile detection using OpenCV"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Step # 1:", "Step #2:", "Step #3:", "Explanations –", "Step #4:", "Output: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-smile-detection-using-opencv/?ref=lbp"},
{"title": "Python | Morphological Operations in Image Processing (Closing) | Set-2 - GeeksforGeeks", "h1": ["Python | Morphological Operations in Image Processing (Closing) | Set-2"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Python3", "What kind of Experience do you want to share?"], "strong": ["Closing", " dilation followed by an erosion", "Syntax:", "Parameters: ", "image", "cv2.MORPH_CLOSE", "kernel", "Input Frame:", "Mask:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-morphological-operations-in-image-processing-closing-set-2/?ref=lbp"},
{"title": "Python OpenCV | cv2.imwrite() method - GeeksforGeeks", "h1": ["Python OpenCV | cv2.imwrite() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "What kind of Experience do you want to share?"], "strong": ["OpenCV-Python", "Syntax:", "Parameters:", "filename:", "image:", "Return Value:", "Example #1:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-opencv-cv2-imwrite-method/?ref=lbp"},
{"title": "Python IMDbPY - Searching keyword - GeeksforGeeks", "h1": ["Python IMDbPY – Searching keyword"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Keyword :", "Syntax :", "Argument :", "Return :", "Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-imdbpy-searching-keyword/?ref=next_article"},
{"title": "Python | PyTorch asin() method - GeeksforGeeks", "h1": ["Python | PyTorch asin() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax", "Parameters", "x", "name", "Return type", "Code #1:", "Output:", "Code #2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-pytorch-asin-method/?ref=next_article"},
{"title": "Python | Pandas DatetimeIndex.to_frame() - GeeksforGeeks", "h1": ["Python | Pandas DatetimeIndex.to_frame()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " DatetimeIndex.to_frame()", "Syntax:", "Parameters : ", "index : ", "Return : ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-datetimeindex-to_frame/?ref=ml_lbp"},
{"title": "Python | Pandas DatetimeIndex.is_year_end - GeeksforGeeks", "h1": ["Python | Pandas DatetimeIndex.is_year_end"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " DatetimeIndex.is_year_end", "Syntax:", "Returns: ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-datetimeindex-is_year_end/?ref=ml_lbp"},
{"title": "Python IMDbPY – Getting birth date of person - GeeksforGeeks", "h1": ["Python IMDbPY – Getting birth date of person"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax :", "Return :", "Output :", "Time complexity", "O(1)", "Space complexity", "O(1)", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-imdbpy-getting-birth-date-of-person/?type=article&id=395559"},
{"title": "Python | Pandas Timestamp.now - GeeksforGeeks", "h1": ["Python | Pandas Timestamp.now"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Pandas Timestamp.now Syntax", "Timestamp.now in Pandas Examples", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" ", " Timestamp.now()", "Syntax :", "Parameters : ", "Return ", "Output:", "s", "Output : ", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-timestamp-now/?ref=ml_lbp"},
{"title": "Python | Pandas Timestamp.floor - GeeksforGeeks", "h1": ["Python | Pandas Timestamp.floor"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " Timestamp.floor()", "Syntax :", "Parameters : ", "freq : ", "Return : ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-timestamp-floor/?ref=ml_lbp"},
{"title": "Python | Pandas Timestamp.isoformat - GeeksforGeeks", "h1": ["Python | Pandas Timestamp.isoformat"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Pandas Timestamp.isoformat Syntax", "Timestamp.isoformat in Pandas Example", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " Timestamp.isoformat()", "Syntax : ", "Parameters : ", "Return : ", "Output:", "Example 1", "Output : ", "Output: ", "Example 2", "Output: ", "Output: ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-timestamp-isoformat/?ref=next_article"},
{"title": "Python | Working with date and time using Pandas - GeeksforGeeks", "h1": ["Python | Working with date and time using Pandas"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Working with Dates in Pandas", "Python3", "Python3", "Python3", "Working with Time in Pandas", "Python3", "Python3", "Python3", "Working with Date and Time in Pandas", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Exploring UFO Sightings Over Time", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Conclusion", "What kind of Experience do you want to share?"], "strong": ["Output:", "Year, month, and day extraction", "Output:", "Weekdays and quarters", "Output:", "Output:", "Time periods and date offsets", "Output:", "Handling Time Zones", "UTC and time zone conversion:", "Time zone-aware data manipulation:", "Custom time zone settings:", "Output:", "Working with Date and Time in Pandas", "Step-1: ", "Output:", "Step-2:", "Output:", "Datetime", "Step-3: Divide a given date into features – ", "pandas.Series.dt.year", "pandas.Series.dt.month", "pandas.Series.dt.day", "pandas.Series.dt.hour", "pandas.Series.dt.minute", "datetime ", "Output:", "Step-4:", "Output:", "Output:", "Step-5:", "Output:", "Output:", "Output:", "Output:", "Output:", "Output:", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-working-with-date-and-time-using-pandas/?ref=previous_article"},
{"title": "Python | Pandas str.join() to join string/list elements with passed delimiter - GeeksforGeeks", "h1": ["Python | Pandas str.join() to join string/list elements with passed delimiter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "What kind of Experience do you want to share?"], "strong": ["Pandas ", "str.join()", ".str", "Data Structures & Algorithms in JavaScript - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/python-pandas-str-join-to-join-string-list-elements-with-passed-delimiter/"},
{"title": "Python | Pandas Series.str.rfind() - GeeksforGeeks", "h1": ["Python | Pandas Series.str.rfind()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " str.rfind()", "Syntax: ", "Parameters: ", "sub: ", "start: ", "end: ", "Return type:", "Example #1: ", "Output:", "Example #2: ", "Output:", "Data Structures & Algorithms in JavaScript - Self Paced ", "Complete Test Series for Service-Based Companies ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-series-str-rfind/"},
{"title": "Python | Pandas Series.to_frame() - GeeksforGeeks", "h1": ["Python | Pandas Series.to_frame()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": [" Series.to_frame()", "Syntax:", "Parameter : ", "name : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-series-to_frame/"},
{"title": "Python - Split String on all punctuations - GeeksforGeeks", "h1": ["Python – Split String on all punctuations"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method : Using regex + findall()", "Output", "Time Complexity:", "Auxiliary Space: ", "Method : Using replace() and split() methods", "Output", "Method #3: Using ", "re.sub() method", " with ", "lambda function", "Steps:", "re", "test_str", "test_str", "Output", "Time complexity: ", "Space complexity: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-split-string-on-all-punctuations/"},
{"title": "Python | Merge Tuple String List values to String - GeeksforGeeks", "h1": ["Python | Merge Tuple String List values to String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using list comprehension + join()", "Output : ", "Time complexity:", "Auxiliary Space:", "Method #2: Using map() + join() + lambda", "Output : ", "Method #3: Using a for loop", "Output", "Method 4: Using a generator expression", "test_list", "test_list", " join() ", "res", "test_list", "list()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 5: Using reduce() function", "Output", "Time complexity: O(n)", "Auxiliary space: O(n)", "Method 6: Using a nested for loop and join()", "res", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-merge-tuple-string-list-values-to-string/"},
{"title": "Python | Append at front and remove from rear - GeeksforGeeks", "h1": ["Python | Append at front and remove from rear"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using + operator and list slicing", "Output : ", "Method #2 : Using collections.deque()", "Output : ", "Method #3 : Using pop() and insert() methods", "Output", " Method #4 : Using islice", "Output", "Method#5: Using List Comprehension.", "Output", "Time Complexity: O(n)", "Space Complexity: O(n)", "Method#6 Using NumPy:", "Output:", " ", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method#7 Using list slicing:", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method #8: Use the built-in list.pop() and list.insert()", "Output", "Method #9: Using a custom function", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-append-at-front-and-remove-from-rear/"},
{"title": "Python pandas-dataFrame Archives - GeeksforGeeks", "h1": ["Python pandas-dataFrame"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/tag/python-pandas-dataframe/"},
{"title": "Python IMDbPY – Getting person ID from searched persons - GeeksforGeeks", "h1": ["Python IMDbPY – Getting person ID from searched persons"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Syntax :", "Argument :", "Return :", "Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-imdbpy-getting-person-id-from-searched-persons/?ref=ml_lbp"},
{"title": "Python | Pandas DatetimeIndex.to_frame() - GeeksforGeeks", "h1": ["Python | Pandas DatetimeIndex.to_frame()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " DatetimeIndex.to_frame()", "Syntax:", "Parameters : ", "index : ", "Return : ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-datetimeindex-to_frame/"},
{"title": "Python program to Compute a Polynomial Equation - GeeksforGeeks", "h1": ["Python program to Compute a Polynomial Equation"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input:", "Output:", "Input:", "Output:", "Input:", "Output:", "Naive Method: ", "Optimised Method: ", "Naive method:", "c", "n", "x", "n", "c", "n-1", "x", "n-1", "Example:", "Output:", "Time Complexity:", "Optimized method:", "Output:", "Time Complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-compute-a-polynomial-equation/"},
{"title": "Python - Split Strings on Prefix Occurrence - GeeksforGeeks", "h1": ["Python – Split Strings on Prefix Occurrence"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using loop + startswith()", "Output", "Method #2 : Using loop + zip_longest() + startswith()", "Output", "Method #3 : Using list + recursion", "Output", "Time complexity:", "Auxiliary space:", "Method #4 : Using loop + find() method", "Output", "Time Complexity:", "Auxiliary Space:", "Method #5: Using itertools.groupby() and zip():", "Output", "Time complexity: O(n),", "Auxiliary space: O(n), ", "Method #6: Using the reduce() function from the functools module", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-split-strings-on-prefix-occurrence/?ref=ml_lbp"},
{"title": "Python Program to print strings with repetitive occurrence of an element in a list - GeeksforGeeks", "h1": ["Python Program to print strings with repetitive occurrence of an element in a list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Method 1: ", "Output", "Method 2 : ", "Output", "Method 3: ", "Output", "Method 4: Using a regular expression.", "Output", "Time complexity: O(n)", "Auxiliary space: O(k)", "Method 5: Using the filter function.", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-print-strings-with-repetitive-occurrence-of-an-element-in-a-list/"},
{"title": "Python Pandas - Difference between INNER JOIN and LEFT SEMI JOIN - GeeksforGeeks", "h1": ["Python Pandas – Difference between INNER JOIN and LEFT SEMI JOIN"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Inner Join", "Python3", "Left Semi-Join", "Python3", "What kind of Experience do you want to share?"], "strong": ["intersection ", "two sets ", "Example:", "similar Id", " inner join ", "Output:", "Left Semi Join", "Example:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-difference-between-inner-join-and-left-semi-join/"},
{"title": "Python - seaborn.FacetGrid() method - GeeksforGeeks", "h1": ["Python – seaborn.FacetGrid() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Styling Plots", "Multiple Plots", "Scatter Plot", "Line Plot", "Bar Plot", "Count Plot", "Box Plot", "Violin Plot", "Strip Plot", "Swarm Plot", "Factor Plot", "Histogram", "Pairplot", "KDE Plot", "Heatmap", "Catplot", "Introduction", "Styling Plots", "Multiple Plots", "Scatter Plot", "Line Plot", "Bar Plot", "Count Plot", "Box Plot", "Violin Plot", "Strip Plot", "Swarm Plot", "Factor Plot", "Histogram", "Pairplot", "KDE Plot", "Heatmap", "Catplot", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["seaborn.FacetGrid( data, \\*\\*kwargs)", "Argument                              ", "Description", "Value                                                                                                  ", "Example 2:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-seaborn-facetgrid-method/?ref=lbp"},
{"title": "Python Bokeh tutorial - Interactive Data Visualization with Bokeh - GeeksforGeeks", "h1": ["Python Bokeh tutorial – Interactive Data Visualization with Bokeh"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Getting started With Bokeh", "Plotting Different Types of Plots", "Annotations and Legends", "Creating Diffrent Shapes", "Plotting Multiple Plots", "Functions in Bokeh", "Interactive Data Visualization", "Graph", "Building Advanced Visualizations with Glyphs", "Project", "Getting started With Bokeh", "Plotting Different Types of Plots", "Annotations and Legends", "Creating Diffrent Shapes", "Plotting Multiple Plots", "Functions in Bokeh", "Interactive Data Visualization", "Graph", "Building Advanced Visualizations with Glyphs", "Project", "Installation", "Bokeh Interfaces – Basic Concepts of Bokeh", "Getting Started", "Python3", "Annotations and Legends", "Python3", "Python3", "Plotting Different Types of Plots", "Python3", "Python3", "Python3", "Python3", "Python3", "Python", "Python3", "Python3", "Creating Different Shapes", "Python3", "Python3", "Python3", "Python3", "Python3", "Plotting Multiple Plots", "Python3", "Python3", "Python3", "Interactive Data Visualization", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Creating Different Types of Glyphs", "Visualizing Different Types of Data", "More Topics on Bokeh", "What kind of Experience do you want to share?"], "strong": ["Python Bokeh", "Features of Bokeh:", "Flexibility: ", "Productivity: ", "Interactivity:", "Powerful:", "Shareable:", "Open source:", "Table Of Content", "CPython 3.6 and older ", "1. Required Dependencies", "2. Optional Dependencies", "Matplotlib", "MATLAB", "Figure", "Example:", "Output:", "Bokeh Line Graph. ", "Annotations", "titles, legends, arrows", "Example:", "Output:", "Example:", "Output:", "Glyphs", "bokeh.plotting", "Line charts", "Syntax:", "Example:", "Output:", "Bar plot or Bar chart", "hbar()", "vbar()", "Syntax:", "Example 1: ", "Output:", "Example 2: ", "Output:", "scatter plot", "scatter()", "Syntax:", "Example:", "Output:", "Patch Plot", "patch()", "Syntax:", "Example:", "Output:", "Area plots", "varea(), harea()", "Syntax:", "Example 1: ", "Output:", "Example 2: ", "Output:", "wedge()", "Syntax:", "Example:", "Output:", "circle()", " ", "circle_cross()", " ", "circle_x()", " ", "Example:", "Output:", "oval()", "Syntax:", "Example:", "Output:", "triangle()", "Syntax:", "Example:", "Output:", "rect()", "Syntax:", "Example:", "Output:", "multi_polygons()", "Syntax:", "Example:", "Output:", "Vertical Layout", "Horizontal Layout", "Grid Layout", "Vertical Layouts", "column()", "Output:", "row() ", "Example:", "Output:", "gridplot() ", "Example:", "Output:", "Gestures: ", "Actions: ", "Inspectors: ", "Edit Tools: ", " toolbar_location ", "figure()", "“above”", "“below”", "“left”", "“right”", "Example:", "Output:", "click_policy ", "Hiding: ", "Muting: ", "Example 1: ", "Output:", "Example 2: ", "Output:", "Buttons: ", "CustomJS()", "Syntax:", "Example:", "Output:", "CheckboxGroup: ", "Example:", "Output:", "RadioGroup: ", "Syntax:", "Example:", "Output:", "Sliders: ", "Syntax:", "Example:", "Output:", "DropDown: ", "Example:", "Output:", "Tab Widget: ", "Example:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-bokeh-tutorial-interactive-data-visualization-with-bokeh/?ref=shm"},
{"title": "Python | Pandas Series.str.startswith() - GeeksforGeeks", "h1": ["Python | Pandas Series.str.startswith()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", "startswith()", ".str", " ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Complete Test Series for Service-Based Companies ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-series-str-startswith/"},
{"title": "Python IMDbPY – Retrieving company using company ID - GeeksforGeeks", "h1": ["Python IMDbPY – Retrieving company using company ID"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Syntax :", "Argument :", "Return :", "Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-imdbpy-retrieving-company-using-company-id/"},
{"title": "Python | Pandas Series.replace() - GeeksforGeeks", "h1": ["Python | Pandas Series.replace()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" Series.replace()", "Syntax:", "Parameters : ", "to_replace : ", "value : ", "inplace : ", "limit : ", "regex : ", "method : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2 : ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-series-replace/?ref=lbp"},
{"title": "Python - Resize Keys in dictionary - GeeksforGeeks", "h1": ["Python – Resize Keys in dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using slicing + loop", "Output:", "Method #2 : Using ", "dictionary comprehension", " + slicing ", "Output:", "Method #3: Using map() function with lambda function", "Output", "Time complexity: ", "Auxiliary space:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-resize-keys-in-dictionary/"},
{"title": "Python | Numpy MaskedArray.__lt__ - GeeksforGeeks", "h1": ["Python | Numpy MaskedArray.__lt__"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["numpy.ma.MaskedArray class", "Syntax:", "Return:", "Example #1 :", "Output:", "Example #2: ", "Output:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-numpy-maskedarray-__lt__/"},
{"title": "Python Program to Count Words in Text File - GeeksforGeeks", "h1": ["Python Program to Count Words in Text File"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["File for ", ":", "Below is the implementation:", "Output:", "Explanation:", "File for demonstration:", "Below is the implementation:", "Output:", "Explanation: ", "Master C Programming with Data Structures ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-count-words-in-text-file/"},
{"title": "Python program to count the number of spaces in string - GeeksforGeeks", "h1": ["Python program to count the number of spaces in string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input:", "Output:", "Input:", "Output:", "Approach:", "Example 1:", "Output:", "Example 2:", "Output:", "Example 3: Using the count() function.", "Output: ", "Time Complexity: ", "Auxiliary Space: ", "Example 4: Using isspace() function in python3", "Output", "Example 5: Using Counter() function", "Output", "Example #6: Using operator.countOf() method:", "Output", "Time complexity: O(n)", "Auxiliary Space: O(1)", "Example #7: Using Recursion", "Output", "Time complexity: O(n)", "Auxiliary Space: O(n)", "Example #8: Using  reduce(): ", "Output", "The time complexity : O(n)", "The space complexity : O(1),", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-program-to-count-the-number-of-spaces-in-string/"},
{"title": "Python | Pandas dataframe.aggregate() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.aggregate()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "What kind of Experience do you want to share?"], "strong": ["Pandas ", "sum:", "min:", "max:", "Syntax:", "Parameters:", "func :", "axis : (default 0)", "Returns:", "Example #1:", "Output:", "Example #2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-aggregate/?ref=lbp"},
{"title": "Python program to print sorted number formed by merging all elements in array - GeeksforGeeks", "h1": ["Python program to print sorted number formed by merging all elements in array"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["arr[]", "Note: ", "Examples:", "Input:", "Output:", "Explanation:", "Input:", "Output:", "Explanation: ", "Approach 1:", "Output", "Time complexity: O(nlogn) ", "Auxiliary space: O(n)", "Approach 2: ", "Output", "Time complexity:", "Auxiliary space:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-print-sorted-number-formed-by-merging-all-elements-in-array/?ref=ml_lbp"},
{"title": "Python | Numpy MaskedArray.__gt__ - GeeksforGeeks", "h1": ["Python | Numpy MaskedArray.__gt__"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["numpy.ma.MaskedArray class", "Syntax:", "Return:", "Example #1 :", "Output:", "Example #2: ", "Output:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-numpy-maskedarray-__gt__/?type=article&id=286794"},
{"title": "Python - Convert List of lists to list of Sets - GeeksforGeeks", "h1": ["Python – Convert List of lists to list of Sets"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Convert List of lists to list of Sets", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Using List Comprehension", "Output", "Time Complexity:", "Auxiliary Space:", "Python Convert List of lists to list of Sets Using map() and set", "Output", "Time complexity:", "Auxiliary Space:", "Convert List of lists to list of Sets Using a loop and a set constructor", "Output", "Time complexity:", "Auxiliary Space:", "Convert List of lists to list of Sets Using a list constructor", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-convert-list-of-lists-to-list-of-sets/?ref=ml_lbp"},
{"title": "Python NumPy - Practice Exercises, Questions, and Solutions - GeeksforGeeks", "h1": ["Python NumPy – Practice Exercises, Questions, and Solutions"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Questions on NumPy Array", "Questions on NumPy Matrix", "Questions on NumPy Indexing", "Questions on NumPy Linear Algebra", "Questions on NumPy Random", "Questions on NumPy Sorting and Searching", "Questions on NumPy Mathematics", "Questions on NumPy Statistics", "Questions on Polynomial", "Questions on NumPy Strings", "More Questions on NumPy", "What kind of Experience do you want to share?"], "strong": ["Python NumPy", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-numpy-practice-exercises-questions-and-solutions/"},
{"title": "Python program to convert int to exponential - GeeksforGeeks", "h1": ["Python program to convert int to exponential"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input:", "Output:", "Input:", "Output:", "Input:", "Output:", "Approach:", "Syntax:", "Errors and Exceptions:", "{field_name: conversion}", "str.format() method", "Example:", "Output:", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-program-to-convert-int-to-exponential/?ref=ml_lbp"},
{"title": "Python Tkinter-exercises Archives - GeeksforGeeks", "h1": ["Python Tkinter-exercises"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "DevOps Engineering - Planning to Production "], "link": "https://www.geeksforgeeks.org/tag/python-tkinter-exercises/"},
{"title": "Python program to reverse a stack - GeeksforGeeks", "h1": ["Python program to reverse a stack"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "What kind of Experience do you want to share?"], "strong": ["stack", "Algorithm:", "BottomInsertion() ", "Reverse()", "Output:", "Time complexity", "Auxiliary space", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-reverse-a-stack/"},
{"title": "Python program to find middle of a linked list using one traversal - GeeksforGeeks", "h1": ["Python program to find middle of a linked list using one traversal"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method 1:", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(1)", "Method 2:", "Implementation:", "Output", "Time Complexity: O(N)", "Auxiliary Space: O(1)", "Method 3:", "Implementation:", "Output", "Complexity Analysis:", "Time complexity: O(N)", "Auxiliary Space: O(1)", "METHOD 4:Using a list to store elements", "APPROACH:", "ALGORITHM:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-find-middle-of-a-linked-list-using-one-traversal/"},
{"title": "Python | Queue using Doubly Linked List - GeeksforGeeks", "h1": ["Python | Queue using Doubly Linked List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Queue Operations:", "Python3", "What kind of Experience do you want to share?"], "strong": ["1. enqueue()     :", "2. dequeue()     :", "3. first()       :", "4. size()        :", "5. isEmpty()     :", "6. printqueue()  :", "Output:", "Time Complexity for operations:", "Auxiliary Space required for operations:", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-queue-using-doubly-linked-list/"},
{"title": "Python | Find fibonacci series upto n using lambda - GeeksforGeeks", "h1": ["Python | Find fibonacci series upto n using lambda"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Find the series of fibonacci numbers using lambda function.", "Code #1 : By using lambda and reduce method", "Output:", "Explanation : ", "x[-1]", "x[-2]", "reduce()", "Code #2 : By using lambda and map function", "Output:", "Explanation :", "fib_list", "Time complexity: ", "Auxiliary Space:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-find-fibonacci-series-upto-n-using-lambda/"},
{"title": "Python - Find occurrences for each value of a particular key - GeeksforGeeks", "h1": ["Python – Find occurrences for each value of a particular key"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using ", "groupby()", " + dictionary comprehension", "Output:", "Method #2 : Using ", "Counter()", "Output:", "Method #3:", "Using keys(),list(),set() and count() methods", "Output", "Method#4:Using defaultdict() and loop", "Output", "Time Complexity: O(n),", "Space Complexity: O(k)", "Method #5: Using pandas", "Step-by-step approach:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-find-occurrences-for-each-value-of-a-particular-key/"},
{"title": "Python String rsplit() Method - GeeksforGeeks", "h1": ["Python String rsplit() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python String ", "rsplit()", " method", "Syntax:", "Parameters:", "separator:", "maxsplit:", "Return: ", "Error:", "Output:", "Note:", "Output: ", "Output: ", "Output: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-string-rsplit-method/?ref=lbp"},
{"title": "Python | Reverse a numpy array - GeeksforGeeks", "h1": ["Python | Reverse a numpy array"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Using ", "flip() function", " to ", "Reverse a Numpy array", "Python3", "Using the ", "list slicing", " method to reverse a Numpy array", "Python3", "Using ", "flipud function", " to Reverse a Numpy array ", "Python3", "What kind of Experience do you want to share?"], "strong": ["Reverse a Numpy array", "Output:", "Using the ", "list slicing", " method to reverse a Numpy array", "Output:", "Using ", "flipud function", " to Reverse a Numpy array ", "Output:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-reverse-a-numpy-array/?ref=ml_lbp"},
{"title": "Python String splitlines() Method - GeeksforGeeks", "h1": ["Python String splitlines() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["splitlines()", "Syntax:", "Parameters:", "keepends ", ": ", "True", "can be a number", "Unicode characters", "Return Value:", "splitlines() splits on the following line boundaries:", "Output: ", "Output: ", "Practical Application", "Output: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-string-splitlines-method/?ref=lbp"},
{"title": "Python String rpartition() Method - GeeksforGeeks", "h1": ["Python String rpartition() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python String rpartition() Method Syntax", "Python3", "Python3", "Exceptions While Working With Python String rpartition()", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python String rpartition() Method", "Syntax :", "Parameters :", "separator – ", "Return Value :", "Output :", "Output :", "Exceptions While Working With Python String rpartition()", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-string-rpartition-method/?ref=lbp"},
{"title": "Python program to convert exponential to float - GeeksforGeeks", "h1": ["Python program to convert exponential to float"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input:", "Output:", "Input:", "Output:", "Input:", "Output:", "Approach:", "float() function", "Syntax:", "float() method", "Example:", "Output:", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-program-to-convert-exponential-to-float/"},
{"title": "Python Convert Dict of Lists to Dict of Sets - GeeksforGeeks", "h1": ["Python Convert Dict of Lists to Dict of Sets"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Convert Dict of Lists to Dict of Sets", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example :", "Input", "Output", "Output", "Output", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Master Java Programming - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-convert-dict-of-lists-to-dict-of-sets/"},
{"title": "Python program to Sort Tuples by their Maximum element - GeeksforGeeks", "h1": ["Python program to Sort Tuples by their Maximum element"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using ", "max()", " + ", "sort()", "Output:", "Method #2 : Using sort() +", " lambda", " + reverse", "Output:", "Method #3: Using a loop to find the maximum element and sort based on it", "Output", "Method #6: Using Heapq module", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-sort-tuples-by-their-maximum-element/?ref=next_article"},
{"title": "Python String rstrip() Method - GeeksforGeeks", "h1": ["Python String rstrip() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python String rstrip() Method Syntax", "Python String rstrip() Method Example", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python String rstrip() method ", "Syntax:", "Parameters: ", "Return: ", "Output:", "Output:", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-string-rstrip/?ref=previous_article"},
{"title": "Python Program For Finding The Middle Element Of A Given Linked List - GeeksforGeeks", "h1": ["Python Program For Finding The Middle Element Of A Given Linked List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["PRACTICE", "Method 1:", "Method 2:", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Method 3:", "Output:", "Time Complexity:", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-for-finding-the-middle-element-of-a-given-linked-list/"},
{"title": "Python | String startswith() - GeeksforGeeks", "h1": ["Python | String startswith()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python String startswith() Method Syntax", "String startswith() in Python Example", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python String startswith() method", "True", "False ", "Syntax:", "Parameters:", "prefix:", "start:", "end:", "Return:", "True", "False", "Output:", "Output: ", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-string-startswith/?ref=next_article"},
{"title": "Python Tkinter-projects Archives - GeeksforGeeks", "h1": ["Python Tkinter-projects"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Complete Machine Learning & Data Science Program ", "Complete Guide to Software Testing and Automation: Master Java, Selenium and Cucumber ", "GATE Computer Science & Information Technology 2025 "], "link": "https://www.geeksforgeeks.org/tag/python-tkinter-projects/"},
{"title": "Python program to determine if the given IP Address is Public or Private using ipaddress module - GeeksforGeeks", "h1": ["Python program to determine if the given IP Address is Public or Private using ipaddress module"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Private IP address", "Public IP address", "Examples:", "Input :", "Output :", "Input :", "Output :", "Output :", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-determine-if-the-given-ip-address-is-public-or-private-using-ipaddress-module/"},
{"title": "Python | Numpy matrix.swapaxes() - GeeksforGeeks", "h1": ["Python | Numpy matrix.swapaxes()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating NumPy Array", "NumPy Array Manipulation", "Matrix in NumPy", "Operations on NumPy Array", "Reshaping NumPy Array", "Indexing NumPy Array", "Arithmetic operations on NumPyArray", "Linear Algebra in NumPy Array", "NumPy and Random Data", "Sorting and Searching in NumPy Array", "Universal Functions", "Working With Images", "Projects and Applications with NumPy", "Introduction", "Creating NumPy Array", "NumPy Array Manipulation", "Matrix in NumPy", "Operations on NumPy Array", "Reshaping NumPy Array", "Indexing NumPy Array", "Arithmetic operations on NumPyArray", "Linear Algebra in NumPy Array", "NumPy and Random Data", "Sorting and Searching in NumPy Array", "Universal Functions", "Working With Images", "Projects and Applications with NumPy", "What kind of Experience do you want to share?"], "strong": ["matrix.swapaxes()", "Syntax : ", "Return : ", "Example #1 :", "Example #2 :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-numpy-matrix-swapaxes/?ref=ml_lbp"},
{"title": "Python String replace() Method - GeeksforGeeks", "h1": ["Python String replace() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What is String replace() Method?", "String replace() Method Syntax", "How to Use String replace() Function", "Python3", "More Examples of String replace() Method ", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["The string replace()", "Example:", "Output", "string.replace(old, new, count)", "Parameters: ", "old –", "new –", "count –", "Optional ", "Return Value : ", "Output", "Example:", "Output", "Example:", "Output", "Time Complexity: ", "Space Complexity: ", "Example:", "Output", "Time Complexity: ", "Space Complexity: ", "count=3", "Output", "Time Complexity: ", "Space Complexity: ", "old_substring", "new_substring.", "Output", "Time Complexity: ", "Space Complexity: ", "Read Other ", "String Methods", "Similar Reads:", "Replace all occurrences of a substring in a string", "Replace substring in list of strings", "Replace multiple characters at once", " Case insensitive string replacement", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-string-replace/?ref=lbp"},
{"title": "Python Program For Pairwise Swapping Elements Of A Given Linked List - GeeksforGeeks", "h1": ["Python Program For Pairwise Swapping Elements Of A Given Linked List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "What kind of Experience do you want to share?"], "strong": ["Input:", "Output:", "Input:", "Output:", "Input:", "Output:", "PRACTICE", "METHOD (Iterative): ", "Output:", "Time complexity: O(n) ", "Auxiliary Space: O(1)", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-for-pairwise-swapping-elements-of-a-given-linked-list/?ref=ml_lbp"},
{"title": "Python program to design a biased dice throw function - GeeksforGeeks", "h1": ["Python program to design a biased dice throw function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Approaches:", "Method 1: Using ", "random.choice()", "Syntax:", "Parameters:", "Returns:", "Output:", "Syntax :", "Parameters :", "start(opt) : ", "stop :", "step(opt) : ", "Return Value : ", "Output:", "Syntax :", "Parameters :", "(start, end) :", "Returns :", "Output:", "Syntax :", "Parameters : ", "Returns :", "Output:", "Syntax : ", "Parameters :", "sequence:", "weights:", "cum_weights:", "k:", "Output:", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-program-to-design-a-biased-dice-throw-function/?ref=ml_lbp"},
{"title": "Python | Creating DataFrame from dict of narray/lists - GeeksforGeeks", "h1": ["Python | Creating DataFrame from dict of narray/lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Pandas DataFrame Practice Exercises", "Pandas Dataframe Rows Practice Exercise", "Pandas Dataframe Columns Practice Exercise", "Pandas Series Practice Exercise", "Pandas Date and Time Practice Exercise", "DataFrame String Manipulation", "Accessing and Manipulating Data in DataFrame", "DataFrame Visualization and Exporting", "Data Aggregation and Grouping", "Merging and Joining", "Filtering and Selecting Data", "Select Rows With Multiple Filters in Pandas", "Selection and Slicing", "Miscellaneous DataFrame Operations", "Data Cleaning and Manipulation", "Concatenation and Manipulation", "DataFrame Sorting and Reordering", "DataFrame Transformation and Conversion", "DataFrame Filtering and Selection", "DataFrame Conversion and Reshaping", "Pandas DataFrame Practice Exercises", "Pandas Dataframe Rows Practice Exercise", "Pandas Dataframe Columns Practice Exercise", "Pandas Series Practice Exercise", "Pandas Date and Time Practice Exercise", "DataFrame String Manipulation", "Accessing and Manipulating Data in DataFrame", "DataFrame Visualization and Exporting", "Data Aggregation and Grouping", "Merging and Joining", "Filtering and Selecting Data", "Select Rows With Multiple Filters in Pandas", "Selection and Slicing", "Miscellaneous DataFrame Operations", "Data Cleaning and Manipulation", "Concatenation and Manipulation", "DataFrame Sorting and Reordering", "DataFrame Transformation and Conversion", "DataFrame Filtering and Selection", "DataFrame Conversion and Reshaping", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["DataFrame to create Dataframe from List", "Example #1:", "pd.DataFrame() ", "Output", "Note: ", "Example #2:", "Output", "Example #1:", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-creating-dataframe-from-dict-of-narray-lists/"},
{"title": "Python - Convert Float String List to Float Values - GeeksforGeeks", "h1": ["Python – Convert Float String List to Float Values"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Input", "Output", "Method #1: Using list comprehension + float()", "Output : ", "Time complexity: ", "Auxiliary space: ", "Method #2: Using map() + float()", "Output : ", "Time complexity: ", "Auxiliary space: ", "Method 3: Using a for loop and the float() function.", "Output", "Time complexity:", "Auxiliary space: ", "Method 4: Using the NumPy library", " step-by-step approach :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-convert-float-string-list-to-float-values/"},
{"title": "Python String lower() Method - GeeksforGeeks", "h1": ["Python String lower() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Syntax of String lower()", "What is the Python String lower() Method?", "How to use the Python string lower() Method?", "Python3", "How to Convert a String to Lowercase in Python", "Python3", "Python3", "Other Methods to Convert String to Lower Case", "Python3", "Python3", "Python3", "Python3", "Python3", "Applications of String lower() method", "Python3", "What kind of Experience do you want to share?"], "strong": ["lower()", "Example:", "Output", "string_name.lower()", "Parameters", "Returns", "Output", " Lowercase a string in Python ", "Output:", "Original String", "Converted String:", "String with alphanumeric characters", "Output:", "Original String:", "Converted String:", "Output:", "Output :", "Output :", "() Function", "swapcase()", " ", "Output:", "() Function", "casefold", "Output:", "Comparison of Strings using lower() Method", "Output:", "Strings are same", "You can also check other ", "string methods", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-string-lower/?ref=lbp"},
{"title": "Python Program For Removing Duplicates From An Unsorted Linked List - GeeksforGeeks", "h1": ["Python Program For Removing Duplicates From An Unsorted Linked List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["PRACTICE", "METHOD 1 (Using two loops):", "Output:", "Time Complexity:", "Auxiliary Space:", "METHOD 2 (Use Sorting):", "Time Complexity:", "METHOD 3 (Use Hashing):", "Output: ", "Time Complexity:", "Auxiliary Space: O(n), ", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-for-removing-duplicates-from-an-unsorted-linked-list/?ref=ml_lbp"},
{"title": "Python | Numpy matrix.var() - GeeksforGeeks", "h1": ["Python | Numpy matrix.var()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating NumPy Array", "NumPy Array Manipulation", "Matrix in NumPy", "Operations on NumPy Array", "Reshaping NumPy Array", "Indexing NumPy Array", "Arithmetic operations on NumPyArray", "Linear Algebra in NumPy Array", "NumPy and Random Data", "Sorting and Searching in NumPy Array", "Universal Functions", "Working With Images", "Projects and Applications with NumPy", "Introduction", "Creating NumPy Array", "NumPy Array Manipulation", "Matrix in NumPy", "Operations on NumPy Array", "Reshaping NumPy Array", "Indexing NumPy Array", "Arithmetic operations on NumPyArray", "Linear Algebra in NumPy Array", "NumPy and Random Data", "Sorting and Searching in NumPy Array", "Universal Functions", "Working With Images", "Projects and Applications with NumPy", "What kind of Experience do you want to share?"], "strong": ["Numpy matrix.var()", "Syntax :", "Return :", "Return variance of a matrix", "Example #1 :", "matrix.var()", "Example #2 :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-numpy-matrix-var/?ref=lbp"},
{"title": "Python String Methods | Set 1 (find, rfind, startwith, endwith, islower, isupper, lower, upper, swapcase & title) - GeeksforGeeks", "h1": ["Python String Methods | Set 1 (find, rfind, startwith, endwith, islower, isupper, lower, upper, swapcase & title)"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["1. find(“string”, beg, end) ", "substring , starting index( by default 0) and ending index( by default string length)", "2. rfind(“string”, beg, end) ", "last occurrence", "Time complexity ", "Auxiliary Space", "3. startswith(“string”, beg, end)", "begins with mentioned string(prefix)", "4. endswith(“string”, beg, end)", "function ends with mentioned string(suffix)", "Time complexity ", "Auxiliary Space", "5. islower(“string”)", "lower cased,", "6. isupper(“string”)", "upper cased", "Time complexity ", "Auxiliary Space", "7. lower()", "converted into its lower case", "8. upper()", " converted into its upper case", "9. swapcase()", "10. title()", "title case", "Time complexity ", "Auxiliary Space", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Master Java Programming - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-string-methods-set-1-find-rfind-startwith-endwith-islower-isupper-lower-upper-swapcase-title/"},
{"title": "Python program to print Pascal's Triangle - GeeksforGeeks", "h1": ["Python  program to print Pascal’s Triangle"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input", "Output:", "Method 1: ", "Algorithm:", "Implementation:", "Output:", "Time complexity:", "Auxiliary space", "Method 2: ", "Implementations:", "Output:", "Time complexity:", "Auxiliary Space", "Method 3:", "Implementation:", "Output:", "Time Complexity: ", "Auxiliary Space", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-program-to-print-pascals-triangle/?ref=next_article"},
{"title": "Python program to capitalize the first letter of every word in the file - GeeksforGeeks", "h1": ["Python program to capitalize the first letter of every word in the file"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input:", "Output:", "Input text:", "temp.txt", "Output:", "Output:", "Output:", "Output:", "Master C Programming with Data Structures ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-capitalize-the-first-letter-of-every-word-in-the-file/?ref=previous_article"},
{"title": "Python - List Files in a Directory - GeeksforGeeks", "h1": ["Python – List Files in a Directory"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What is a Directory in Python?", "How to List Files in a Directory in Python", "List Files in a Directory Using Os Module in Python", "Python3", "Python3", "Python3", "Python3", "Python3", "List Files in a Directory Using the glob module in Python ", "Python3", "Python3", "Similar reads:", "What kind of Experience do you want to share?"], "strong": ["how to list all file names in a directory", "Directory in use:", "OS Module", "glob Module ", "List Files in a Directory Using Os Module in Python", "os.listdir()", "os.walk()", "os.scandir()", "os.listdir()", "Syntax", "Parameters", "Path", "Return Type", "Example 1: Get a list of all files in a directory", "Output:", "Example 2: Get all the files and no folders", "Example 3: Get only ‘.txt’ files from the directory", "Output:", "Using os.walk() method to access files in a Directory tree", "OS.walk()", "Syntax: ", ")", "Parameters:", "top:", "topdown:", "onerror:", "followlinks", "Return:", "Example: Get only ‘.txt’ files in a directory", "Output:", "Using os.scandir() method to list files in a Directory", "os.scandir()", " ", "Syntax: ", "Parameter:", "Path-  ", "Return Type:", "Example: List all files and directories in a directory.", "Output:", "glob", "glob()", "iglob() ", "Using the glob() method to get all files in a directory", " ", "Syntax: ", "Parameters:", "pathname", "recursive", "False", "Returns:", "Example: Python file matching and printing using glob() method", "Output:", "Using iglob() method to list files in a directory ", "iglob() ", "Syntax: ", "Parameter: ", "pathname = ", "recursive (Optional)= ", "False", "Returns: ", "Output:", "Similar reads:", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-list-files-in-a-directory/"},
{"title": "Python - Reading last N lines of a file - GeeksforGeeks", "h1": ["Python – Reading last N lines of a file"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisite:", "File:", "Method 1: Naive approach", "Output:", "Method 2: Using OS module and buffering policy", "st_size", "Output:", "Method 3: Through Exponential search", "AssertionError exception", "Output:", "Master C Programming with Data Structures ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-reading-last-n-lines-of-a-file/?ref=ml_lbp"},
{"title": "Python program to Reverse a single line of a text file - GeeksforGeeks", "h1": ["Python program to Reverse a single line of a text file"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input:", "Output:", "Input:", "Output:", "Implementation:", "Output:", "Master C Programming with Data Structures ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-reverse-a-single-line-of-a-text-file/?ref=ml_lbp"},
{"title": "Python Regex - Program to accept string starting with vowel - GeeksforGeeks", "h1": ["Python Regex – Program to accept string starting with vowel"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisite: ", "Examples:", "Input:", "Output:", "Input:", "Output:", "re.search()", "Output:", "Output", "Time complexity: ", "Auxiliary Space: ", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-regex-program-to-accept-string-starting-with-vowel/?ref=ml_lbp"},
{"title": "Python - Copy Files From Subfolders to the Main folder - GeeksforGeeks", "h1": ["Python – Copy Files From Subfolders to the Main  folder"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "Python", "Python", "Python", "What kind of Experience do you want to share?"], "strong": ["Using shutil.copyfile()", "Using shutil.copy()", "Using shutil.copy2()", "Using shutil.copyfileobj()", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-copy-files-from-subfolders-to-the-main-folder/?ref=ml_lbp"},
{"title": "Python Regex | Program to accept string ending with alphanumeric character - GeeksforGeeks", "h1": ["Python Regex | Program to accept string ending with alphanumeric character"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisite: ", "Examples:", "Input:", "Output:", "Input:", "Output:", "re.search() :", "Output :", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-regex-program-to-accept-string-ending-with-alphanumeric-character/?ref=ml_lbp"},
{"title": "Python program to Count Uppercase, Lowercase, special character and numeric values using Regex - GeeksforGeeks", "h1": ["Python program to Count Uppercase, Lowercase, special character and numeric values using Regex"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisites:", "Examples:", "Input : ", "Output :", "Example 1:", "Output:", "Time complexity :", "Space Complexity : ", "Example 2:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-count-uppercase-lowercase-special-character-and-numeric-values-using-regex/?ref=ml_lbp"},
{"title": "Python | Add only numeric values present in a list - GeeksforGeeks", "h1": ["Python | Add only numeric values present in a list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using filter() and lambda", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3: Using isinstance and conditional statements", "Output", "Method #4: Using type() and find() methods", "Output", "Method #5 : Using list(),map(),isnumeric() and int() methods", "Output", "Method #6: Using regex", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-add-only-numeric-values-present-in-a-list/"},
{"title": "Python | Sort list containing alphanumeric values - GeeksforGeeks", "h1": ["Python | Sort list containing alphanumeric values"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Approach 1 : ", "Method #1 : ", "Output:", "Method #2 : ", "Output:", "Approach 2 : ", "Method #1 : ", "Output:", "Method #2 : ", "Output:", "Output", "Approach#4: Using numpy", "Approach#4: Using Regular Expression", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-sort-list-containing-alphanumeric-values/"},
{"title": "Python Capitalize First Letter of Every Word in String - GeeksforGeeks", "h1": ["Python Capitalize First Letter of Every Word in String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Capitalize First Letter of Each Word in String using Python", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output", " ", "Output", "Output", " ", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-capitalize-first-letter-of-every-word-in-string/"},
{"title": "Python | os.scandir() method - GeeksforGeeks", "h1": ["Python | os.scandir() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Python3", "What kind of Experience do you want to share?"], "strong": ["OS module", " os.scandir()", "Syntax:", "Parameter:", "path:", "Return Type:", "Code: Use of ", "os.scandir()", " method", "Output:", "Reference:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-scandir-method/"},
{"title": "Python - Move all files from subfolders to main folder - GeeksforGeeks", "h1": ["Python – Move all files from subfolders to main folder"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["OS Module: ", "Shutil Module: ", "os.path.join()", "Syntax:", "Parameter:", "path", "*path", "Note:", "Return Type:", "os.listdir()", "Syntax:", "Parameters:", "Return Type: ", "shutil.move()", "Syntax:", "Parameters:", "source:", "destination:", "copy_function ", "Return Value:", "Source folder(subfolder):", "Destination folder(main folder):", "Program :", "Output:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-move-all-files-from-subfolders-to-main-folder/"},
{"title": "Python | os.dup() method - GeeksforGeeks", "h1": ["Python | os.dup() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Python3", "What kind of Experience do you want to share?"], "strong": ["OS module", "For Example:", "os.dup()", "Syntax:", "Parameter:", "fd", "Return Type:", "Code:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-dup-method/?ref=lbp"},
{"title": "Python | os.rename() method - GeeksforGeeks", "h1": ["Python | os.rename() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Using os.rename() function and Error Handling:", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["OS module", "os.rename()", "source", "destination", "Syntax", "os.rename(source, destination, *, src_dir_fd = None, dst_dir_fd = None)", "Parameters:", "source: ", "destination:", "src_dir_fd (optional): ", "dst_dir_fd (optional):", "Return Type: ", "Code 1:", "os.rename()", "Code 2: ", "Reference Material: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-rename-method/?ref=lbp"},
{"title": "Python | os.chown() method - GeeksforGeeks", "h1": ["Python | os.chown() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "What kind of Experience do you want to share?"], "strong": ["Note:", "Code #1:", "Output:", "Code #2:", "Output:", "Code #3:", "Output:", "Reference:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-chown-method/?ref=lbp"},
{"title": "Python | os.ctermid() method - GeeksforGeeks", "h1": ["Python | os.ctermid() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "What kind of Experience do you want to share?"], "strong": ["Code :", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-ctermid-method/?ref=lbp"},
{"title": "Python program to find the type of IP Address using Regex - GeeksforGeeks", "h1": ["Python program to find the type of IP Address using Regex"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisite:", "IPv4", "IPv6", "What is an IP (Internet Protocol) Address?", "IPv4", "IPv6", "IPv4", "IPv6", "Examples:", "Input:", "Output:", "Input:", "Output:", "Input:", "Output:", "Approach:", "Below is the implementation of the above approach:", "Output:", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-program-to-find-the-type-of-ip-address-using-regex/?ref=lbp"},
{"title": "Python - Filter all uppercase characters Tuples from given list of tuples - GeeksforGeeks", "h1": ["Python – Filter all uppercase characters Tuples from given list of tuples"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1: Using loop", "Output", "Time complexity: ", "Auxiliary space: ", "Method #2 : Using list comprehension + all() + isupper()", "Output", "Time Complexity", "Auxiliary Space:", "Method #3 : Using ord() function", "Output", "Time complexity:", "Auxiliary space: ", "Method #4 : Using join() and replace() methods", "Output", "Time complexity: ", "Auxiliary space: ", "Method #5 : Using join()+isupper() methods", "Output", "Time Complexity: ", "Auxiliary Space:", "Method #6: Using filter()+lambda() methods", "Output", "Time complexity: ", "Auxiliary space: ", "Method #7: Using itertools.filterfalse() method", "Output", "Time Complexity:O(N*N)", "Auxiliary Space:O(N*N)", "Method #8: Using map() and all() methods", "map()", "isupper()", "all() ", "Output", "Time complexity: ", "Auxiliary space: ", "Method #9: Using a list comprehension and the regex module: ", "Algorithm:", "Output", "Time Complexity:", "Space Complexity:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-filter-all-uppercase-characters-tuples-from-given-list-of-tuples/"},
{"title": "Python | Convert column to separate elements in list of lists - GeeksforGeeks", "h1": ["Python | Convert column to separate elements in list of lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Note: Install numpy module using command “pip install numpy”", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list slicing and list comprehension", "Output", "Method #2 : Using itertools.chain() + list comprehension + list slicing", "Output", "Approach using numpy:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-convert-column-to-separate-elements-in-list-of-lists/"},
{"title": "Python | Get a google map image of specified location using Google Static Maps API - GeeksforGeeks", "h1": ["Python | Get a google map image of specified location using Google Static Maps API"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Google Static Maps API", "Note: ", "Modules needed :", "Output :", "Note : ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-get-google-map-image-specified-location-using-google-static-maps-api/"},
{"title": "Python Program to print digit pattern - GeeksforGeeks", "h1": ["Python Program to print digit pattern"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["N", "Examples:", "Input :", "Output :", "Explanation:", "Input :", "Output :", "Approach", "Output:", "Time complexity: ", "Auxiliary Space: ", "Alternate solution that takes integer as input :", "Output:", "Time complexity: ", "Auxiliary Space: ", "Using List comprehension and join():", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-program-to-print-digit-pattern/?ref=lbp"},
{"title": "Python | Combining tuples in list of tuples - GeeksforGeeks", "h1": ["Python | Combining tuples in list of tuples"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using list comprehension", "test_list", "print() ", "The original list : ", "test_list", "str() ", "res", "test_list", "tup1", "tup2", "tup1", "tup2", " print() ", "The list tuple combination : ", "str() ", "Output", "Time Complexity: ", "Auxiliary Space:", "Method #2: Using product() + list comprehension", "Output", "Time complexity:", "Auxiliary space: ", "Method #3:", "Output", "Time complexity: ", "Auxiliary space:", "Method #4: Using for loop", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #5 : Using chain.from_iterable() from the itertools module:", "Output", "Time complexity:", "Auxiliary space:", "Method #6: Using reduce() function from functools module  +  list comprehension.", "Output", "Time complexity: ", "Auxiliary space: ", "Method #7: Using nested loops", "Output", "Time complexity:", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-combining-tuples-in-list-of-tuples/"},
{"title": "Python program to replace every Nth character in String - GeeksforGeeks", "h1": ["Python program to replace every Nth character in String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input : ", "Output :", "Explanation :", "Input ", "Output ", "Explanation : ", "Method 1 : ", "Example", "Output:", "The time complexity of the given code is O(N), where N is the length of the input string “test_str”. ", "The auxiliary space used by the code is also O(N), where N is the length of the input string “test_str”.", "Method 2 : ", "Example", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Method 3 : Using lists", "Output", "Method 4:Using string concatenation", "Output", "The time complexity of the algorithm is O(N),", "The space complexity of the algorithm is also O(N),", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-to-replace-every-nth-character-in-string/"},
{"title": "Python | Sorting list of lists with similar list elements - GeeksforGeeks", "h1": ["Python | Sorting list of lists with similar list elements"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using sorted() + list comprehension", "Output : ", "Method #2: Using map() + sorted()", "Output : ", "Method 3:  Using the lambda function with the sort() method.", "Output", "Time complexity:", "Auxiliary space: ", "Method #4: Using functools.cmp_to_key()", "Output", "Time complexity: O(N * M * log(M)),", "Auxiliary space: O(M)", "Master C Programming with Data Structures ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sorting-list-of-lists-with-similar-list-elements/"},
{"title": "Python program to convert any base to decimal by using int() method - GeeksforGeeks", "h1": ["Python program to convert any base to decimal by using int() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "base", "Output :", "Input :", "base", "Output :", "Input :", "base =", "Output :", "Approach –", "Output:", "Master C Programming with Data Structures ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-convert-any-base-to-decimal-by-using-int-method/?ref=lbp"},
{"title": "Python - Convert Lists into Similar key value lists - GeeksforGeeks", "h1": ["Python – Convert Lists into Similar key value lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Method #1 : Using zip() + loop", "Python3", "Method #2 : Using defaultdict() + list comprehension + zip()", "Python3", "Method#3: Using Recursive method.", "Python3", "Method #4: Using defaultdict() + enumerate() + list comprehension", "Python3", "Method #5: Using dictionary comprehension and zip()", "Python3", "Method #6: Using itertools.groupby() and dictionary comprehension", "Python3", "Python3", "Method #8 : Using nested for loops + list(),set() methods", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using zip() + loop", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #2 : Using defaultdict() + list comprehension + zip()", "Output", "Method#3: Using Recursive method.", "Output", "Method #4: Using defaultdict() + enumerate() + list comprehension", "Output", "Time complexity: ", "Auxiliary Space:", "Method #5: Using dictionary comprehension and zip()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #6: Using itertools.groupby() and dictionary comprehension", "itertools", "groupby", "test_list1", "test_list2", "itertools.groupby()", "Output", "Time complexity: ", "Auxiliary space: ", "Method #7: Using numpy:", "Algorithm:", "Output:", "Time Complexity:", "Space Complexity:", "Method #8 : Using nested for loops + list(),set() methods", "Approach", "Output", "Time Complexity : O(M * N)", "Auxiliary Space : O(N)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-convert-lists-into-similar-key-value-lists/"},
{"title": "Python | Remove tuples having duplicate first value from given list of tuples - GeeksforGeeks", "h1": ["Python | Remove tuples having duplicate first value from given list of tuples"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples: ", "Input: ", "Output: ", "Input: ", "Output: ", "Method #1: Using Iteration", "visited", "Output", "a and b,", " add() ", "tuple (a, b) ", "append() ", "print()", "print()", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Method #2: Using list comprehension", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Method #3: Using itertools", "Output:", "Time complexity: O(nlogn)", "Auxiliary space: O(n)", "Method #4: Using OrderedDict", "Output:", "Time complexity: ", "Auxiliary space: ", "Method#5: Using Recursive method", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method #6: Using dictionary", "key-value ", "Output", "Time complexity: O(n)", "Auxiliary space: O(k)", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-remove-tuples-having-duplicate-first-value-from-given-list-of-tuples/"},
{"title": "Python program to remove the nth index character from a non-empty string - GeeksforGeeks", "h1": ["Python program to remove the nth index character from a non-empty string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input:", "Output:", "Input:", "Output:", "first approach ", "Output:", "Time Complexity = ", "Auxiliary Space: ", "second approach ", "string_name[start_index : end_index]", "Output:", "Time Complexity = ", "Auxiliary Space =", "Third Approach :", "Output", "Fourth Approach: Type casting into list and del to remove character", "Output", "Time Complexity = O(n)", "Auxiliary Space = O(n)", "Approach using islice", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-to-remove-the-nth-index-character-from-a-non-empty-string/"},
{"title": "Python | Find the tuples containing the given element from a list of tuples - GeeksforGeeks", "h1": ["Python | Find the tuples containing the given element from a list of tuples"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples: ", "Input:", "Output:", "Input:", "Output:", "Method #1: Using for loop", "Approach:", "Output", "Time complexity:", "O(n)", "Auxiliary space:", "O(m)", "Method #2:", "Output", "Time complexity: ", "Auxiliary space: ", "Method #3:", "Output", "Time complexity:", "Auxiliary space: ", "Method #4: ", "Output", "Time complexity: O(n)", "Auxiliary space: (n),", "Method#5:Using reduce() + filter() +lambda() function.", "Output", "Time complexity: ", "Auxiliary Space:", "Method #6 : Using count() method", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(k),", "Method #7: Using itertools", "Approach:", "itertools", "Input", "x", "in", "Output", "Input", "x", "if", "itertools.chain() ", "Output", "Time Complexity:O(N)", "Auxiliary Space :O(N)", "Method #8: Using list comprehension with conditional expression", "Output", "Time Complexity: ", "Auxiliary Space: ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-find-the-tuples-containing-the-given-element-from-a-list-of-tuples/"},
{"title": "Python | First Non-Empty String in list - GeeksforGeeks", "h1": ["Python | First Non-Empty String in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using next() + list comprehension", "Output : ", "Time Complexity: O(n)", "Auxiliary Space:", "Method #2 : Using filter()", "Output : ", "Method #3: ", "len() ", "Output", "Method #4:  Using the reduce function: ", "Output", " Time complexity", " Auxiliary Space", "Method #5 : Using isspace() method", "Output", "Time Complexity : O(N)", "Auxiliary Space : O(N)", "Method #6: Using numpy:", " Algorithm:", "Output:", "Time complexity:  O(n),", "Space complexity:  O(n),", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-first-non-empty-string-in-list/"},
{"title": "Python program to represent floating number as hexadecimal by IEEE 754 standard - GeeksforGeeks", "h1": ["Python program to represent floating number as hexadecimal by IEEE 754 standard"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples : ", "Input : ", "Output : ", "Input : ", "Output : ", "Approach :", "Output:", "Time complexity:", "Space complexity: ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-program-to-represent-floating-number-as-hexadecimal-by-ieee-754-standard/"},
{"title": "Python | Count occurrences of an element in a Tuple - GeeksforGeeks", "h1": ["Python | Count occurrences of an element in a Tuple"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Method 1(Simple Approach):", "Output", "Method 2(Using count()):", "Output", "Method 3:", "Output", "Method #4: ", "Output", "Method #5:", "Output", "Method #6:", "Output", "Method#7: ", "Countof", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-count-occurrences-element-tuple/?ref=ml_lbp"},
{"title": "Python | Initialize tuples with parameters - GeeksforGeeks", "h1": ["Python | Initialize tuples with parameters"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using tuple() + * operator", "Output : ", "Time Complexity: O(N),", "Auxiliary Space: O(N)", "Method #2: Using generator expression + tuple()", "Output : ", "Approach#2: Using the list:", "val", "idx", "Output", "Time Complexity:", "Space Complexity:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-initialize-tuples-with-parameters/?ref=next_article"},
{"title": "Python - False indices in a boolean list - GeeksforGeeks", "h1": ["Python – False indices in a boolean list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using enumerate() and list comprehension", "Output : ", "Time Complexity: ", "Auxiliary Space: ", "Method #2 : Using lambda + filter() + range()", "Output : ", "Method#3: Using Recursive method.", "Output", "METHOD#4:Using a for loop", "APPROACH:", "ALGORITHM", "Output", "METHOD#5: Using reduce():", " Algorithm:", "Output", "Time complexity: O(n), ", "Space complexity: O(n), ", "METHOD 6:Using counter method", "APPROACH:", "ALGORITHM:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-false-indices-in-a-boolean-list/"},
{"title": "Python: Iterating With Python Lambda - GeeksforGeeks", "h1": ["Python: Iterating With Python Lambda"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax", "Example 1:", "Output:", "Example 2:", "Output", "Example 3:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-iterating-with-python-lambda/"},
{"title": "Python - Convert Matrix to dictionary - GeeksforGeeks", "h1": ["Python – Convert Matrix to dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using dictionary comprehension + range()", "Output", "Method #2 : Using dictionary comprehension + enumerate()", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-convert-matrix-to-dictionary/?ref=lbp"},
{"title": "Python String upper() Function - GeeksforGeeks", "h1": ["Python String upper() Function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What is the String upper() Method?", "Python String upper() Syntax", "How to Use String upper() Function?", "Python3", "Methods to Convert String to Uppercase", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["upper()", "Example:", "Output", "string.upper()", "Parameters", "Returns", "Output", "Output", "Example", ": ", "Output ", "Example", "1:", "Output :", "Example 1:", "Output", "Example", "2: ", "Output", "Read Other ", "String Methods", "Also Read:", "Python – Uppercase Half String", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-string-upper/"},
{"title": "Python - Retrieve latest Covid-19 World Data using COVID19Py library - GeeksforGeeks", "h1": ["Python – Retrieve latest Covid-19 World Data using COVID19Py library"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["COVID19Py ", "getAll(): ", "getLatest(): ", "getLocations(): ", "getLatestChanges(): ", "Example:", "Output:", "Data: ", "Latest Data: ", "Location Data: ", "Changes since Last Visit: ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-retrieve-latest-covid-19-world-data-using-covid19py-library/?ref=ml_lbp"},
{"title": "Python | Convert Bytearray to Hexadecimal String - GeeksforGeeks", "h1": ["Python | Convert Bytearray to Hexadecimal String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Using ", "format()", " +", " join()", "  to Convert ", "Byte Array to Hex String", "Python3", "Using binascii.hexlify() to convert Byte Array to Hex String", "Python3", "Using the bytes.hex() method to directly convert the bytearray to a hexadecimal string:", "Python3", "Using the struct module and the h format specifier:", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Using ", "format()", " +", " join()", "Byte Array to Hex String", "Output:", "Using binascii.hexlify() to convert Byte Array to Hex String", "Output:", "Complexity Analysis:", "Time Complexity:", "Space Complexity: ", "Output", "Using codecs.encode()", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-convert-bytearray-to-hexadecimal-string/"},
{"title": "Python staticmethod() Function - GeeksforGeeks", "h1": ["Python staticmethod() Function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Staticmethod() Syntax", "What are Static Methods in a Python", "Python Staticmethod() Example", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python staticmethod() function", "Syntax: ", "Parameter: ", "Returns:", "Output", "Output", "Output", "Output", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-staticmethod-function/?ref=ml_lbp"},
{"title": "Python Program to Convert Celsius To Fahrenheit - GeeksforGeeks", "h1": ["Python Program to Convert Celsius To Fahrenheit"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Convert Celsius to Fahrenheit using Python", "Python3", "Python3", "Python Program to Convert Fahrenheit to Celsius", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input1", "Output1", "Input2", "Output2", "F = (C * 9/5) + 32″. ", "“%.2f”", "Output", "Taking input from the user to convert Fahrenheit to Celsius in Python:", "Output:", "C = (F – 32)/1.8", "Output", "Taking input from the user to Convert Fahrenheit to Celsius in Python", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-convert-celsius-to-fahrenheit/?ref=ml_lbp"},
{"title": "Python Program to generate one-time password (OTP) - GeeksforGeeks", "h1": ["Python Program to generate one-time password (OTP)"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Used Function:", "random.random():", "math.floor(): ", "Example #1 : ", "Output:", "Example #2:", "Output:", "Example #3:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-to-generate-one-time-password-otp/?ref=ml_lbp"},
{"title": "Python | Program to convert String to a List - GeeksforGeeks", "h1": ["Python | Program to convert String to a List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "String to List Conversion in Python", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["string", "Examples:", "Input", "Output", "Explaination", "Output:", "Output", "Python Convert String to List using split() method", "Example 1", "Output", "Example 2", "Output", "Output", "Python Convert String to List using re.findall() method ", "Output", "Output", "Output", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-convert-string-list/"},
{"title": "Python Program for Find sum of even factors of a number - GeeksforGeeks", "h1": ["Python Program for Find sum of even factors of a number"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "n = (p1", "a1", ")*(p2", "a2", ")* … (pk", "ak", ")", "Output", "Method:", "Output", "Output", "Output", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-for-find-sum-of-even-factors-of-a-number/"},
{"title": "Python Program for Number of stopping station problem - GeeksforGeeks", "h1": ["Python Program for Number of stopping station problem"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Examples –", "Input", "Output", "Input", "Output", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-for-number-of-stopping-station-problem/"},
{"title": "Python Program for Basic Euclidean algorithms - GeeksforGeeks", "h1": ["Python Program for Basic Euclidean algorithms"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output: ", "Time Complexity:", "Auxiliary Space: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-for-basic-and-extended-euclidean-algorithms/"},
{"title": "Python program to find the most occurring character and its count - GeeksforGeeks", "h1": ["Python program to find the most occurring character and its count"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Time Complexity: ", "Auxiliary Space: ", "Output", "Time Complexity: ", "Auxiliary Space:", "Approach : ", "Output", "Time Complexity:", "Auxiliary Space: ", "Approach: Using lambda function ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-find-the-most-occurring-character-and-its-count/?ref=ml_lbp"},
{"title": "Python Program for Smallest K digit number divisible by X - GeeksforGeeks", "h1": ["Python Program for Smallest K digit number divisible by X"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output : ", "Input :", "Output :", "efficient solution", "Output :", "Time Complexity", "Auxiliary Space", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Structures and Algorithms - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-for-smallest-k-digit-number-divisible-by-x/?ref=ml_lbp"},
{"title": "Python Program for Legendre's Conjecture - GeeksforGeeks", "h1": ["Python Program for Legendre’s Conjecture"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Conjecture:", "Examples:", "Input :", "output: ", "Explanation", "Input :", "Output: ", "Output :", "Time Complexity", "Auxiliary Space", "sympy ", "primesieve function,", " start ", "end ", " returns a generator object", "get all the prime numbers ", "LegendreConjecture function", "sympy ", "pip install sympy", "Output :", "Time complexity:", "modified version of the sieve of Eratosthenes.", "Auxiliary Space:", "size n+1", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-for-legendres-conjecture/?ref=ml_lbp"},
{"title": "Python Program for Finding the vertex, focus and directrix of a parabola - GeeksforGeeks", "h1": ["Python Program for Finding the vertex, focus and directrix of a parabola"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["parabola.", "Vertex", "Input :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-for-finding-the-vertex-focus-and-directrix-of-a-parabola/?ref=ml_lbp"},
{"title": "Python Program for Find sum of odd factors of a number - GeeksforGeeks", "h1": ["Python Program for Find sum of odd factors of a number"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "python3", "What kind of Experience do you want to share?"], "strong": ["n = (p", "1", "a", "1", ")*(p", "2", "a", "2", ")* … (p", "k", "a", "k", ")", "Time complexity", "Auxiliary Space", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-for-find-sum-of-odd-factors-of-a-number/?ref=ml_lbp"},
{"title": "Python Program for Efficient program to print all prime factors of a given number - GeeksforGeeks", "h1": ["Python Program for Efficient program to print all prime factors of a given number"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["n", "1)", "2)", "3)", "Output:", "How does this work?", "square root of n", "counter statement", "a)", "b)", "c)", "Output", "Time Complexity: O(n*log(log(n)))", "Space Complexity: O(n)", "Approach#3: Using anonymous function", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-for-efficient-program-to-print-all-prime-factors-of-a-given-number/"},
{"title": "Python program to Reverse a single line of a text file - GeeksforGeeks", "h1": ["Python program to Reverse a single line of a text file"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input:", "Output:", "Input:", "Output:", "Implementation:", "Output:", "Master C Programming with Data Structures ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-reverse-a-single-line-of-a-text-file/"},
{"title": "Python Program to Check Prime Number - GeeksforGeeks", "h1": ["Python Program to Check Prime Number"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input: ", "Output: ", "Input:", "Output: ", "Input:", "Output: ", "School Method :", "Output: ", " Optimized School Method :", "Output:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-to-check-prime-number/"},
{"title": "Python - Check if elements index are equal for list elements - GeeksforGeeks", "h1": ["Python – Check if elements index are equal for list elements"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using loop ", "Output", "Method #2 : Using zip() + all() + generator expression", "Output", "Method#3:Using list comprehension", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-check-if-elements-index-are-equal-for-list-elements/"},
{"title": "Python program to Count the Number of occurrences of a key-value pair in a text file - GeeksforGeeks", "h1": ["Python program to Count the Number of occurrences of a key-value pair in a text file"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Program to Count the occurrences of a key-value pair", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Text file:", "Output :", "Time complexity:", "Auxiliary space: ", "Output:", "Time complexity:", "Space complexity: ", "Output:", "Time complexity:", "Space complexity:", "Master C Programming with Data Structures ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-count-the-number-of-occurrences-of-a-key-value-pair-in-a-text-file/"},
{"title": "Python Regex - Program to accept string starting with vowel - GeeksforGeeks", "h1": ["Python Regex – Program to accept string starting with vowel"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisite: ", "Examples:", "Input:", "Output:", "Input:", "Output:", "re.search()", "Output:", "Output", "Time complexity: ", "Auxiliary Space: ", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-regex-program-to-accept-string-starting-with-vowel/"},
{"title": "Python | Split flatten String List - GeeksforGeeks", "h1": ["Python | Split flatten String List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension + split() + extend()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #2 : Using split() + join()", "Output", "Time Complexity: ", "Auxiliary Space:", "Method #3:", "Output", "Time Complexity:", "Auxiliary Space: ", "Method #4: Using the reduce function from the functools library", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #5: Using the str.replace() method: ", "Output", "Time Complexity: O(n)", "Auxiliary  Space: O(n)", "Method 6: Using nested for loops:", "Output", "Time complexity: O(n*m)", "Auxiliary space: O(n*m), ", "Method 7: Using reduce(), split(), and operator.concat", " ", "Output", "Time Complexity: ", "Auxiliary  Space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-split-flatten-string-list/?ref=ml_lbp"},
{"title": "Python | Sorting list of lists with similar list elements - GeeksforGeeks", "h1": ["Python | Sorting list of lists with similar list elements"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using sorted() + list comprehension", "Output : ", "Method #2: Using map() + sorted()", "Output : ", "Method 3:  Using the lambda function with the sort() method.", "Output", "Time complexity:", "Auxiliary space: ", "Method #4: Using functools.cmp_to_key()", "Output", "Time complexity: O(N * M * log(M)),", "Auxiliary space: O(M)", "Master C Programming with Data Structures ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sorting-list-of-lists-with-similar-list-elements/?ref=ml_lbp"},
{"title": "Python - Cross tuple summation grouping - GeeksforGeeks", "h1": ["Python – Cross tuple summation grouping"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Input", "Output", "Method #1: Using loop", "Output : ", "Time complexity:", "Auxiliary space: ", "Method #2: Using groupby() + sum() + zip() + list comprehension", "Output : ", "Method 3: Using defaultdict", "defaultdict ", "0", "Output", "Time complexity: ", "Auxiliary space: ", "Method #3: Using defaultdict and list comprehension", "Output", "time complexity ", "auxiliary space ", "Method 5:  using the Pandas library.", " Time complexity: ", "Auxiliary space", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-cross-tuple-summation-grouping/?ref=ml_lbp"},
{"title": "Python | Custom sorting in list of tuples - GeeksforGeeks", "h1": ["Python | Custom sorting in list of tuples"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using sorted() + lambda", "Output : ", "Method #2 : Using sorted() + lambda() + sum() ( With sum of tuple condition)", "Output : ", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-custom-sorting-in-list-of-tuples/?ref=ml_lbp"},
{"title": "Python - Convert Tuple String to Integer Tuple - GeeksforGeeks", "h1": ["Python – Convert Tuple String to Integer Tuple"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Method: Using ast", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using tuple() + int() + replace() + split()", "Output : ", "Method #2: Using eval()", "Output : ", "Method #3:", "Output", "Output", "Output", "Output", "Output", "Method: Using for loop and append", "Output", "Method : Using a for loop", "Output", "Time complexity:", "Method: Using Recursive method.", "Auxiliary Space: ", "Output", "Method: Using numpy package", "Note: first install numpy package by using : pip install numpy", "Output", "Time Complexity: O(N) ", "Auxiliary Space: O(N) ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-convert-tuple-string-to-integer-tuple/?ref=ml_lbp"},
{"title": "Python Regex to extract maximum numeric value from a string - GeeksforGeeks", "h1": ["Python Regex to extract maximum numeric value from a string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Implementation:", "Output", "Time complexity :", "Space complexity :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-regex-extract-maximum-numeric-value-string/"},
{"title": "Python program to Count Uppercase, Lowercase, special character and numeric values using Regex - GeeksforGeeks", "h1": ["Python program to Count Uppercase, Lowercase, special character and numeric values using Regex"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisites:", "Examples:", "Input : ", "Output :", "Example 1:", "Output:", "Time complexity :", "Space Complexity : ", "Example 2:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-count-uppercase-lowercase-special-character-and-numeric-values-using-regex/"},
{"title": "Python - Flatten tuple of List to tuple - GeeksforGeeks", "h1": ["Python – Flatten tuple of List to tuple"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Input", "Output", "Method #1: Using sum() + tuple()", "Output", "Time complexity:", "Auxiliary space:", "Method #2 : Using tuple() + chain.from_iterable()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3: Using extend() and tuple() methods", "Output", "Time complexity:", "Auxiliary space: ", "Method #4: Using Nested loops", "test_tuple", "test_tuple", "res", "test_tuple", "res", "res", "res", "res", "Output", "Time Complexity: ", "Auxiliary Space:", "Method 5: Using list comprehension and extend()", "test_tuple", "res_list", "extend() ", "res_list", "tuple() ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 6: using the itertools.chain()", "itertools.chain() ", " tuple()", "*", "itertools.chain() ", "Output", "Time complexity: ", "Auxiliary space: ", "Method 7: Using Recursive method.", "Output", "Time complexity: ", "Space complexity: ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-flatten-tuple-of-list-to-tuple/?ref=ml_lbp"},
{"title": "Python - Pair with Maximum product - GeeksforGeeks", "h1": ["Python – Pair with Maximum product"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension + max() + combination() + lambda", "Output : ", "Method #2 : Using list comprehension + nlargest() + combination() + lambda", "Output : ", "Method #3 : Using max() and zip()", "Output", "Method #4 : Using numpy:", "Output:", "The time complexity : O(n^2)", "The space complexity : O(n^2) ", "Method #5: Using itertools.product() and max()", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-pair-with-maximum-product/?ref=ml_lbp"},
{"title": "Python | Find elements of a list by indices - GeeksforGeeks", "h1": ["Python | Find elements of a list by indices"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Explanation: ", "Input :", "Output :", "Approach #1 : ", "Output:", "Time complexity", "Auxiliary space", "Approach #2 : ", "Output:", "Time complexity: ", "Auxiliary space: ", "Approach #3 : ", "Output:", "Time complexity: ", "Auxiliary space:", "Approach #4: ", "Output:", "Approach #6: ", "Output", "Time complexity: ", "Auxiliary space:", "Method#7: Using Recursive method.", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-find-elements-of-a-list-by-indices/?ref=ml_lbp"},
{"title": "Python | Exponentiation by K in list - GeeksforGeeks", "h1": ["Python | Exponentiation by K in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using List Comprehension", "Output : ", "Time Complexity:", "Auxiliary Space: ", "Method #2 : Using map() + operator.pow", "Output : ", "Time complexity: ", "Auxiliary Space:", "Method #3 : Using numpy", "Note:", "Output:", "Time complexity: ", "Auxiliary Space: ", "Method #4 : Using math.pow() method", "Output", "Time complexity: O(n)", "Auxiliary Space: O(n)", "Method 5: Using map() + lambda function", "map() ", "list() ", "x ", "K", "Below is the implementation:", "Output", "Time Complexity:", "Auxiliary Space:", "Method 6: Using a loop:", "res", "test_list", "x", " K", "**", "append() ", "str()", "print() ", "Output", "Time Complexity:", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-exponentiation-by-k-in-list/?ref=ml_lbp"},
{"title": "ToDo webapp using Django - GeeksforGeeks", "h1": ["ToDo webapp using Django"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Python3", "Python3", "Python3", "Python3", "HTML", "What kind of Experience do you want to share?"], "strong": ["Modules required: ", "Basic setup", "Step 1: ", "Step 2:", "Let’s create an app now", "Step 3:", "Step 4:", "settings.py", "Step 5: ", "Step 6: ", "Step 7:", "Step 8: ", "Step 9: ", "Step 10: ", "Step 11: ", "Step 12: ", "Output:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-todo-webapp-using-django/?ref=previous_article"},
{"title": "Python | Indices list of matching element from other list - GeeksforGeeks", "h1": ["Python | Indices list of matching element from other list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using loop + count()", "Step by step approach ;", "Output : ", "Time complexity: ", "Auxiliary space:", "Method #2: Using list comprehension + set() + enumerate()", "Output : ", "Method #3: Using a dictionary", "Output", "Time complexity: ", "Auxiliary Space: ", "Method #4: Using the Numpy library", "OUTPUT:", "Time complexity:", "Auxiliary space: ", "Method #5: Using the built-in function map() and lambda function", " map()", "lambda ", " index() ", "Output", "Time complexity:", "Auxiliary space: ", "Method 6: Using Set Intersection.", "Output", "Time Complexity: ", "Space Complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-indices-list-of-matching-element-from-other-list/"},
{"title": "Python - Maximum Quotient Pair in List - GeeksforGeeks", "h1": ["Python – Maximum Quotient Pair in List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension + max() + combination() + lambda", "Output", "Method #2 : Using list comprehension + nlargest() + combination() + lambda", "Output", "Method #3 : Using sorted() + loop + lambda", "Output", "Time Complexity:", "Auxiliary Space", "Method #4 : Using  a for loop:", "Output", "Time Complexity: O(n^2)", "Auxiliary Space: O(1) ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-maximum-quotient-pair-in-list/"},
{"title": "Python Program for Pigeonhole Sort - GeeksforGeeks", "h1": ["Python Program for Pigeonhole Sort"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Program for Pigeonhole Sort  ", "Python3", "What kind of Experience do you want to share?"], "strong": ["Working of Algorithm : ", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-for-pigeonhole-sort/"},
{"title": "Python Program for Counting Sort - GeeksforGeeks", "h1": ["Python Program for Counting Sort"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Problem based on Counting Sort", "Problem based on Counting Sort", "Python Program for Counting Sort", "Python3", "Python Program for Counting Sort Using counter method.", "Python3", "Python Program for Counting Sort Using sorted() and reduce():", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output:", "Time Complexity: ", "Space Complexity: ", "Python Program for Counting Sort Using counter method.", "Algorithm:", "Output", "Python Program for Counting Sort Using sorted() and reduce():", "Output", "Time Complexity:", "Space Complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-for-counting-sort/"},
{"title": "Python Program for Heap Sort - GeeksforGeeks", "h1": ["Python Program for Heap Sort"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Program for Heap Sort", "Python", "Heap Sort using Python STL", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pre-requisite", "Output", "Time Complexity", "O(log(n))", "O(n)", "O(n*log(n))", "Auxiliary Space: ", "Steps:", "heapify", "result", "result", "Output", "Time Complexity", "Auxiliary Space", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-for-heap-sort/"},
{"title": "Python Program for Counting Sort - GeeksforGeeks", "h1": ["Python Program for Counting Sort"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Problem based on Counting Sort", "Problem based on Counting Sort", "Python Program for Counting Sort", "Python3", "Python Program for Counting Sort Using counter method.", "Python3", "Python Program for Counting Sort Using sorted() and reduce():", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output:", "Time Complexity: ", "Space Complexity: ", "Python Program for Counting Sort Using counter method.", "Algorithm:", "Output", "Python Program for Counting Sort Using sorted() and reduce():", "Output", "Time Complexity:", "Space Complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-for-counting-sort/?ref=lbp"},
{"title": "Python - Concatenate two list of lists Row-wise - GeeksforGeeks", "h1": ["Python – Concatenate two list of lists Row-wise"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using ", "enumerate()", " +", " loop", "Output:", "Method #2: Using ", "zip()", " + ", "list comprehension", "Output:", "Time Complexity: ", "Space Complexity: ", "Method #3: Using extend()+loop", "Output", "Method #4: Using numpy", "Note: ", "Output:", "Method #5: Using itertools.chain() and map()", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-concatenate-two-list-of-lists-row-wise/?ref=lbp"},
{"title": "Python Program for Linear Search - GeeksforGeeks", "h1": ["Python Program for Linear Search"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python", "Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["Problem:", "Examples :", "Input :", "Output :", "Input :", "Output :", "linear search", "Example:", " Python Program for Linear Search Iterative Approach:", "Python Program for Linear Search Recursive Approach: ", "Auxiliary Space: ", "Python Program for Linear Search Using re method", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-for-linear-search/"},
{"title": "Python | Concatenate two lists element-wise - GeeksforGeeks", "h1": ["Python | Concatenate two lists element-wise"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension + zip()", "Output:", "Method #2 : Using map() + lambda + zip()", "Output:", "Output", "Method #4: Using for loop:", "Output", "Time complexity: O(n) ", "Auxiliary Space: O(n) ", "Method#5:Using itertools", "Output", "Time complexity: O(n) ", "Auxiliary Space: O(n) ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-concatenate-two-lists-element-wise/?ref=lbp"},
{"title": "Python - Replace all occurrences of a substring in a string - GeeksforGeeks", "h1": ["Python – Replace all occurrences of a substring in a string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input : ", "Output :", "Input :", "Output : ", "Approach 1", "Output", "Time Complexity:", "Auxiliary Space: ", "Approach 2:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 3:", "re.sub()", "Output", "Time Complexity:", "Auxiliary Space:New", "Method 4: Using simple iteration", "Output", "Time complexity:", "Auxiliary space:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-replace-all-occurrences-of-a-substring-in-a-string/"},
{"title": "Python - Replace multiple words with K - GeeksforGeeks", "h1": ["Python – Replace multiple words with K"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using join() + split() + list comprehension", "Output : ", "Time complexity: ", "Auxiliary space:", "Method #2: Using regex + join()", "Output : ", "Time Complexity: ", "Auxiliary Space: ", "Method #3 : Using for loop+replace() methods", "Output", "Time Complexity: ", "Auxiliary Space:", "Approach 4: Using dictionary and re.sub()", "Output", "Approach #5: Using a lambda function with reduce() method.", "Step-by-step approach:", "Output", "Approach 6: Using heapq:", "Algorithm:", "Output", "Time complexity: O(n log n)", "Auxiliary Space: O(n) ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-replace-multiple-words-with-k/"},
{"title": "Python - Vertical Concatenation in Matrix - GeeksforGeeks", "h1": ["Python – Vertical Concatenation in Matrix"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1: Using loop", "Output", "Time Complexity: ", "Space Complexity: ", "Method #2 : Using join() + list comprehension + zip_longest()", "Output", "Time Complexity: ", "Space Complexity: ", "Method #3: Using numpy.transpose() and numpy.ravel()", "numpy", "max() ", "numpy", " np.array() ", "OUTPUT:", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-vertical-concatenation-in-matrix/"},
{"title": "Python client library - News API", "h1": ["Python client library"], "h2": [], "strong": [], "link": "https://newsapi.org/docs/client-libraries/python"},
{"title": "Python Program to Find Sum of Array - GeeksforGeeks", "h1": ["Python Program to Find Sum of Array"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python3", "Python3", "Python", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Explanation:", "Output", "Time complexity", "Auxiliary Space", "sum().", " ", "Output", "Time complexity", "Auxiliary Space", "Output", "Time complexity :", "Auxiliary Space :", "Python Program to Find Sum of Array Using enumerate function ", "Output", "Time complexity", "Auxiliary Space", "Output", "Python Program to Find Sum of Array Using counter method.", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-to-find-sum-of-array/"},
{"title": "Python Program for Find remainder of array multiplication divided by n - GeeksforGeeks", "h1": ["Python Program for Find remainder of array multiplication divided by n"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python Program to Find remainder of array multiplication divided by n using Naive approach:", "Python3", "Python3", "Approach by using the functools.reduce method ", "Python3", "What kind of Experience do you want to share?"], "strong": ["n", " n.  ", "Examples:", "Input", "Output:", "Explanation: ", "Input : ", "Output :", "Explanation: ", "Python Program to Find remainder of array multiplication divided by n using Naive approach:", "Output", "Time Complexity: ", "Auxiliary Space:", "Approach that avoids overflow : ", "Output", "Time Complexity:", ", ", "Auxiliary Space:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-for-find-reminder-of-array-multiplication-divided-by-n/"},
{"title": "Python | Convert String to N chunks tuple - GeeksforGeeks", "h1": ["Python | Convert String to N chunks tuple"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension + tuple", "Output : ", "Time Complexity:", "Auxiliary Space:", "Method #2 : Using zip() + iter() + join() + list comprehension", "Output : ", "Time Complexity:", "Auxiliary Space:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-convert-string-to-n-chunks-tuple/?ref=ml_lbp"},
{"title": "Python - Tkinter askquestion Dialog - GeeksforGeeks", "h1": ["Python – Tkinter askquestion Dialog"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Askquestion()", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["messagebox", "showinfo() –", "showwarning() –", "showerror() –", "askquestion() –", "askokcancel() –", "askretrycancel() –", "askyesnocancel() –", "Syntax of the Message-Box Functions:", "name_of_function –", "Title –", "Message –", "Options –", "Syntax:", "Example:", "Output:", "1. Importing the Libraries ", "2. Main window instance ", "3. Set dimension", "4. Applying other widget and function ", "5. mainloop()", "ICONS that We can use in Options ", "Error", "Example-", "Output:", "info", "Output:", "Question", "Output:", "Warning", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tkinter-askquestion-dialog/"},
{"title": "Python | Linear Programming in Pulp - GeeksforGeeks", "h1": ["Python | Linear Programming in Pulp"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["linear optimization", "Basic terminologies of Linear Programming", "Objective Function:", "Decision Variables:", "Constraints:", "Non – negativity restrictions:", "Note:", "Example 1:", "Minimize : ", "Subject to the constraints", "Solving the above linear programming problem in Python:", "Review the Output", "Output", "Output", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-linear-programming-in-pulp/"},
{"title": "Python | Linear Regression using sklearn - GeeksforGeeks", "h1": ["Python | Linear Regression using sklearn"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisite: ", "Step 1: ", "Step 2:", "Output:", "Step 3: ", "Output:", "Step 4: ", "Step 5: ", "Output:", "Step 6: ", "Output:", "Step 7: ", "Output:", "Output:", "Output:", "Step 8: ", "Output:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-linear-regression-using-sklearn/"},
{"title": "Python Program to Find maximum value of Sum( i*arr[i]) with only rotations on given array allowed - GeeksforGeeks", "h1": ["Python Program to Find maximum value of Sum( i*arr[i]) with only rotations on given array allowed"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "What kind of Experience do you want to share?"], "strong": ["Examples :", "We strongly recommend you to minimize your browser and try this yourself first.", "Simple Solution", "Efficient Solution", "How to efficiently calculate R", "j", " from R", "j-1", "?", "Output :", "Time Complexity :", "Auxiliary Space :", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-program-for-find-maximum-value-of-sum-iarri-with-only-rotations-on-given-array-allowed/"},
{"title": "Python Program to Find Largest Element in an Array - GeeksforGeeks", "h1": ["Python Program to Find Largest Element in an Array"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input :", "Output :", "Input :", "Output :", "Find largest element in an array Using Native Approach", "Output", "Time Complexity:", "Auxiliary Space:", "Find largest element in an array Using built-in function max()", "max()", "Output", "Time Complexity:", "Auxiliary Space:", "Find largest element in an array Using sort() function", "sort()", "Output", "Find largest element in an array Using reduce() function", "Output", "Time complexity", "Auxiliary space", "Find largest element in an array Using operator.gt()", "Output", "Time Complexity", "Auxiliary Space", "Output:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-to-find-largest-element-in-an-array/?ref=next_article"},
{"title": "Python Program for Third largest element in an array of distinct elements - GeeksforGeeks", "h1": ["Python Program for Third largest element in an array of distinct elements"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input:", "Output:", "Explanation:", "Input:", "Output:", "Explanation:", "PRACTICE", "Naive Approach:", "Algorithm:", "Output", "Time Complexity:", "Auxiliary Space:", "Efficient Approach:", "Algorithm:", "Output", "Time complexity:", "Auxiliary", "space:", "Output", "Time Complexity:", "Auxiliary space:", "Output", "Time Complexity: O(n)", "Auxiliary space: O(1)", "Method: Set Approach:", "Output", "Time complexity:", "Auxiliary space:", "Data Structures & Algorithms in Python - Self Paced ", "DSA for Interview Preparation ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-for-third-largest-element-in-an-array-of-distinct-elements/"},
{"title": "Python Program to Find the Maximum sum of i*arr[i] among all rotations of a given array - GeeksforGeeks", "h1": ["Python Program to Find the Maximum sum of i*arr[i] among all rotations of a given array"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input:", "Output: ", "Explanation:", "Input: ", "Output: ", "Explanation:", "PRACTICE", "Method 1", ":", "Naive Solution", "Approach:", "Algorithm:", "Implementation:", "Output :", "Complexity Analysis:", "Time Complexity :", "Auxiliary Space :", "Method 2", ": ", "efficient solution", "Approach:", "Algorithm:", "Implementation", ":", "Output:", "Complexity analysis:", "Time Complexity:", "Auxiliary Space:", "Approach:", "Algorithm:", "Find the pivot of the array", "Implementations:", "Complexity analysis:", "Time Complexity :", "O(n)", "Auxiliary Space :", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Data Structures and Algorithms - Self Paced "], "link": "https://www.geeksforgeeks.org/python3-program-for-maximum-sum-of-iarri-among-all-rotations-of-a-given-array/?ref=ml_lbp"},
{"title": "Python - Extract string between two substrings - GeeksforGeeks", "h1": ["Python – Extract string between two substrings"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Get String Between Two Characters in Python ", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input:", "Output:", "Explanation: ", "Extract the String using the index", " ", "function and a for loop  ", "Output:", "Time Complexity:", "Auxiliary Space:", "Output:", "Time Complexity:", "Auxiliary Space:", " ", "Output:", "Time Complexity:", "Auxiliary Space:", "Output:", "Time Complexity:", "Auxiliary Space:", "Output:", "Time Complexity:", "Auxiliary Space:", "test_str", "sub1", "sub2", "split()", "sub1", "sub1", "sub2", "sub2", " ", "join()", "Output", "Time complexity: ", "Auxiliary space: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-extract-string-between-two-substrings/?ref=ml_lbp"},
{"title": "Python | Test if string is subset of another - GeeksforGeeks", "h1": ["Python | Test if string is subset of another"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using all()", "Output : ", "Time complexity: ", "Auxiliary space: ", "Method #2: Using issubset()", "Output : ", "Time Complexity: ", "Auxiliary Space: ", "Method#3: Using Recursive method.", "Output", "Time Complexity: O(m*n), ", "Auxiliary Space: O(m*n), ", "Method#4:  Using the ‘filter’ function and the ‘len’ function: ", "test_str1 ", "test_str2", "test_str1", "filter()", "test_str2 ", "test_str1", "test_str2", "Output", "Time complexity : O(n)", "Auxiliary space : O(n),", "Method#5: Using Counter function", "Step-by-step approach:", "test_str1 ", "test_str2", "all()", "test_str2 ", "test_str1", "res", "Output", "Time Complexity: O(n*m)", "Auxiliary Space: O(1),", "Method#6: Using reduce() function with lambda function:", "Algorithm:", "Output", "Time complexity:", "Space complexity:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-test-if-string-is-subset-of-another/"},
{"title": "Python - JSON to XML - GeeksforGeeks", "h1": ["Python – JSON to XML"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Comparison between JSON and XML", "Handling JSON in Python 3", "What kind of Experience do you want to share?"], "strong": ["JSON", "Note:", "Note:", "root-", "subelement_name:", "Note :", "Example:", "JSON File:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-json-to-xml/"},
{"title": "Python Tuples - GeeksforGeeks", "h1": ["Python Tuples"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Creating a Tuple", "Python3", "Python3", "Accessing of Tuples", "Python3", "Concatenation of Tuples", "Python3", "Slicing of Tuple", "Python3", "Deleting a Tuple", "Python", "What kind of Experience do you want to share?"], "strong": ["Tuple ", "Note: ", "Output:", "Tuples ", "Output:", "Time complexity:", "Auxiliary Space :", "Tuples", "Note: ", "Output:", "Time complexity: ", "Space complexity: ", "Note-", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Note-", "Output:", "Time complexity:", "Space complexity:", "Note-", "Built-in-Method", "Description", "index( )", "count( )", "tuple()", "Similarities", "Differences", "Tuples Programs", "Useful Links:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tuples/"},
{"title": "Python - Sort Dictionary by Values Summation - GeeksforGeeks", "h1": ["Python – Sort Dictionary by Values Summation"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using sorted() + dictionary comprehension + sum()", "Output", "Time complexity: ", "Auxiliary Space: ", "Method #2 : Using map() + dictionary comprehension + sorted() + sum()", "Output", "Method #3: Using defaultdict() from the collections module", "Output", "Time complexity: ", "Auxiliary space:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-sort-dictionary-by-values-summation/"},
{"title": "Python Program for Find sum of odd factors of a number - GeeksforGeeks", "h1": ["Python Program for Find sum of odd factors of a number"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "python3", "What kind of Experience do you want to share?"], "strong": ["n = (p", "1", "a", "1", ")*(p", "2", "a", "2", ")* … (p", "k", "a", "k", ")", "Time complexity", "Auxiliary Space", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-for-find-sum-of-odd-factors-of-a-number/?ref=lbp"},
{"title": "Python | Reverse All Strings in String List - GeeksforGeeks", "h1": ["Python | Reverse All Strings in String List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension", "Output : ", "Time Complexity: ", "Auxiliary Space: ", "Method #2 : Using map()", "Output : ", "Time complexity: ", "Auxiliary space: ", "Method #3 : Using join() and reversed()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 4: Using a for loop and slicing:", "res ", "test_list", "res ", "Output", "Time Complexity: ", "Auxiliary Space", "Method 5: Using reduce", "Output", "Time Complexity", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-reverse-all-strings-in-string-list/?ref=leftbar-rightbar"},
{"title": "Python Program for Find largest prime factor of a number - GeeksforGeeks", "h1": ["Python Program for Find largest prime factor of a number"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input: ", "Output: ", "Explanation", "Input: ", "Output: ", "Output", "Time complexity: ", "Auxiliary space: ", "Method 2:", "Output", "Time complexity:  ", "Auxiliary space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-for-find-largest-prime-factor-of-a-number/?ref=lbp"},
{"title": "Python Counter to find the size of largest subset of anagram words - GeeksforGeeks", "h1": ["Python Counter to find the size of largest subset of anagram words"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Counter", "Output", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-counter-find-size-largest-subset-anagram-words/"},
{"title": "Python | Database management in PostgreSQL - GeeksforGeeks", "h1": ["Python | Database management in PostgreSQL"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", " Creating the database ", " Connecting to the database ", " Executing queries ", " Fetching the data ", " Putting it all together ", "What kind of Experience do you want to share?"], "strong": ["PostgreSQL", "Psycopg2", "Installation:", " Note:", "connect()", "database:", "user:", "password", "host", "port", "Cursor", "execute() ", "fetchall()", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-database-management-in-postgresql/"},
{"title": "Python program to convert tuple into list by adding the given string after every element - GeeksforGeeks", "h1": ["Python program to convert tuple into list by adding the given string after every element"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1: Using list comprehension", "Output:", "Method #2 : Using chain.from_iterable() + list() + generator expression", "Output:", "Method #3 : Using list(),map(),join(),split() methods", "Output :", "Method #4 : Using map() function", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method#5: Using Recursive method.", "Output", "Time complexity:", "Space complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-covert-tuple-into-list-by-adding-the-given-string-after-every-element/"},
{"title": "Python Program to Convert Tuple Matrix to Tuple List - GeeksforGeeks", "h1": ["Python Program to Convert Tuple Matrix to Tuple List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input", "Output", "Explanation", "Input", "Output", "Explanation", "Convert Tuple Matrix to Tuple List Using list comprehension + zip()", "Output", "Convert Tuple Matrix to Tuple List Using chain.from_iterable() + zip()", "Output", "Time complexity:", "Auxiliary space:", "Convert Tuple Matrix to Tuple List Using extend(),list() and tuple() methods", "Output", "Convert Tuple Matrix to Tuple List Using lambda function ", "Output", "Time complexity:", "Auxiliary space:", "Convert Tuple Matrix to Tuple List Using NumPy module", "output:", "Time complexity: ", "Auxiliary space: ", "Convert Tuple Matrix to Tuple List Using Recursive method.", " flatten(lst)", "lst", "lst", "flatten() ", "zip() ", "*", "zip()", "Output", "Time complexity:", "Auxiliary", "space: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-convert-tuple-matrix-to-tuple-list/"},
{"title": "Python - Replace index elements with elements in Other List - GeeksforGeeks", "h1": ["Python – Replace index elements with elements in Other List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension", "Output : ", "Method #2 : Using map() + lambda", "Output : ", "# Method #3 : Using numpy.take()", "Output :", "Method #4: using a for loop and a dictionary", "Output", "Time complexity: O(n)", "Auxiliary Space: O(n)", "Method #5: Using pandas library", "step-by-step algorithm for implementing the approach", "output", "Time complexity: O(n) ", "Space complexity: O(n) ", "Method #5 : Using zip() function", "Use the zip() function to combine test_list1 and test_list2 element-wise.", "Loop through the resulting tuples obtained in step 1.", "Append the corresponding element from test_list1 to a new list res.", "Print the final result list res.", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-replace-index-elements-with-elements-in-other-list/?ref=leftbar-rightbar"},
{"title": "Python - Keys associated with Values in Dictionary - GeeksforGeeks", "h1": ["Python – Keys associated with Values in Dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input : ", "Output : ", "Input : ", "Output : ", "Method : Using defaultdict() + loop", "Output : ", " Method 2: Using dict comprehension + loop", "Output", "Method 3 : Using the setdefault() method of dictionary. ", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-keys-associated-with-values-in-dictionary/?ref=leftbar-rightbar"},
{"title": "Python | Remove punctuation from string - GeeksforGeeks", "h1": ["Python | Remove punctuation from string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Ways to Remove Punctuation from a String", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example", "Input:", "Output:", "Explanation:", "best ways to strip punctuation from a string", "Output:", "Remove Punctuation from a String with a Python loop", "Output: ", "Time complexity: ", "Auxiliary space: ", "Remove comma from a String with a Python loop", "Output:", "Remove Punctuation from a String with regex", "Output : ", "Output", "Time complexity: ", "Auxiliary space: ", "Removing Punctuation from a String with filter()", "Output", "Time complexity: ", "Auxiliary space: ", "Removing Punctuation from a String using the replace() method", "Output", "Time Complexity Analysis: O(len(string.punctuation) * len(test_str)) ", "Auxiliary Space Analysis: O(1)", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-remove-punctuation-from-string/?ref=leftbar-rightbar"},
{"title": "Python String translate() Method - GeeksforGeeks", "h1": ["Python String translate() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What is translate() in Python?", "Python String translate() Syntax", "Python3", "Python String translate() Examples ", "Python3", "Python3", "Python maketrans()", "Python maketrans() Syntax", "Python3", "Use case of translate() and maketrans() Method", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["translate()", "translate() ", "translate()", "maketrans()", "str.translate(translation_table)", "Example:", "str.translate()", "Output:", "translate()", "maketrans().", "Output :", "maketrans()", "translate()", "Output :", "maketrans()", "Syntax", "Parameters: ", "Returns", "Example:", "str.translate()", "string.maketrans()", "Output :", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-string-translate/"},
{"title": "Python Nested Loops - GeeksforGeeks", "h1": ["Python Nested Loops"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Nested Loops Syntax:", "Python Nested Loops Examples", "Python3", "Python3", "Python3", "Python3", "Using break statement in nested loops", "Python3", "Using continue statement in nested loops", "Python3", "Single line Nested loops using list comprehension", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python Nested Loops Syntax:", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Code:", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Syntax of List Comprehension:", "=", "[", "for", "in", "if", "]", "Code:", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-nested-loops/?ref=ml_lbp"},
{"title": "Python - Remove String from String List - GeeksforGeeks", "h1": ["Python – Remove String from String List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using remove()", "Output : ", "Method #2: Using List Comprehension", "Output : ", "Time Complexity: ", "Auxiliary Space:", "Method #3 : Using join(),replace(),split() and remove() methods", "Output", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-remove-string-from-string-list/"},
{"title": "Python program to Sort Strings by Punctuation count - GeeksforGeeks", "h1": ["Python program to Sort Strings by Punctuation count"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using ", "string.punctuation", " + ", "sort()", "Output:", "Method #2 : Using ", "sorted()", " + punctuation + ", "lambda", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Method #3: Using re", "This approach uses a regular expression pattern r'[^\\w\\s]’ to match any character that is not a word character (letters, digits, and underscores) or whitespace. The re.findall() function returns a list of all non-overlapping matches as strings.", "Output", "Time complexity: ", "Auxiliary space: ", "Method 4: Use the Counter module from collections. ", "Step-by-step approach:", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-sort-strings-by-punctuation-count/"},
{"title": "Python program to count the pairs of reverse strings - GeeksforGeeks", "h1": ["Python program to count the pairs of reverse strings"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using", " reversed()", " + loop", "Output", "Output:", "Method #2 : Using list comprehension + ", "sum()", "Output", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Approach 3: Using hashmap (dictionary)", "Output", "Time complexity: O(n)", "Approach 5: Using sets", "Stepwise Approach:", "Output", "Time complexity: O(n),", "Auxiliary space: O(n)", "Method 5: using a two-pointer approach", "Output", "Time complexity: O(n^2), ", "Auxiliary space: O(1) ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/"},
{"title": "Python - Combine list with other list elements - GeeksforGeeks", "h1": ["Python – Combine list with other list elements"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using ", "zip()", " + ", "len()", " + list()", "Output", "Method #2 : Using ", "product()", "Output", "Method #3:  ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #4: Using map() function and lambda function", "Step-by-step algorithm:", "Output", "Time complexity:", "Auxiliary space:", "Method #5: Using reduce():", "Output", "The time complexity: O(n * m^2),", "The space complexity : O(n * m^2),", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-combine-list-with-other-list-elements/"},
{"title": "Python - Keys associated with value list in dictionary - GeeksforGeeks", "h1": ["Python – Keys associated with value list in dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Get", "Keys associated with Values in the Dictionary in ", "Python", ".", "Example", "Input", "list", "Output:", "Explanation: ", "Get Keys Associated with Value List in Python", "Keys associated with Value list using loop + items()", "Output", "Keys associated with Value list using list comprehension + any()", "Output", "Keys associated with Value list using filter() function", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-keys-associated-with-value-list-in-dictionary/"},
{"title": "Python - Product and Inter Summation dictionary values - GeeksforGeeks", "h1": ["Python – Product and Inter Summation dictionary values"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Input", "Output", "Method #1: Using zip() + map() + sum() + loop ", "Output", "Time complexity: ", "Auxiliary Space:", "Method #2 : Using map() + reduce() + lambda + zip() + sum() + generator expression", "Output", "Method 3: Using list comprehension + sum()", "um()", "Output", "Time complexity:", "Auxiliary space: ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-product-and-inter-summation-dictionary-values/"},
{"title": "Python - Itertools Combinations() function - GeeksforGeeks", "h1": ["Python – Itertools Combinations() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Itertools.combinations()", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Note:", "Syntax:", "Example 1:-", "Output:-", "Example 2:-", "Output :-", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-itertools-combinations-function/"},
{"title": "Python | Count occurrences of an element in a Tuple - GeeksforGeeks", "h1": ["Python | Count occurrences of an element in a Tuple"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Method 1(Simple Approach):", "Output", "Method 2(Using count()):", "Output", "Method 3:", "Output", "Method #4: ", "Output", "Method #5:", "Output", "Method #6:", "Output", "Method#7: ", "Countof", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-count-occurrences-element-tuple/"},
{"title": "Python | Reversing a Tuple - GeeksforGeeks", "h1": ["Python | Reversing a Tuple"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method 1: Using the slicing technique.", "Method 2: Using the reversed() built-in function.", "Method3: Iteration", "Output", "Method4", "Output", "Time complexity :", "Auxiliary space :", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-reversing-tuple/"},
{"title": "Python List count() method - GeeksforGeeks", "h1": ["Python List count() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What is the list count() Method?", "List count() Method Syntax", "How to Use List count() Function", "Python3", "More Examples on List count() Method", "Python3", "Python3", "Exceptions While Using Python list count() method", "Python3", "Practical Application", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python List count() method ", "Example:", "Output", "TypeError.", "list_name.count(object) ", "Parameters: ", "object:", "Returns:", "Output", "Example:", "Output", "Output", "Exceptions While Using Python list count() method", "Output:", "Practical Application", " ", "Output", "Read More: ", "Python List Methods", "Also Read:", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-list-count-method/"},
{"title": "Python - Itertools.dropwhile() - GeeksforGeeks", "h1": ["Python – Itertools.dropwhile()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Dropwhile()", "What kind of Experience do you want to share?"], "strong": ["Note:", "Syntax:", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-itertools-dropwhile/"},
{"title": "Python - Remove Initial character in String List - GeeksforGeeks", "h1": ["Python – Remove Initial character in String List", "Remove First Character from String in Python"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input: ", "Output: ", "Explanation:", "sing Replace() method", "Output", "Time Complexity:", "Auxiliary Space:", "sing Reduce() method", "Output", "Time complexity: ", "Auxiliary space: ", "sing List Comprehension", "slicing ", "Output", "Time Complexity: ", "Auxiliary Space: ", " ", " using Regular expressions", "the ", " ", "Output", "Time Complexity: ", "Space Complexity: ", "sing map() and lambda", "Output", "Time complexity: ", "Auxiliary space: ", "sing pop() and join() methods", "Output", "Time complexity:", "Auxiliary space:", "sing filter() ", " ", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-remove-initial-character-in-string-list/"},
{"title": "Python - Itertools.takewhile() - GeeksforGeeks", "h1": ["Python – Itertools.takewhile()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "takewhile()", "What kind of Experience do you want to share?"], "strong": ["Note:", "“take”", "“true”", "“terminating iterators”", "Syntax: ", "Example 1: Lists and takewhile()", "Example 2: Strings and takewhile()", "Example 3: lambda functions in takewhile()", "Example 4:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-itertools-takewhile/?ref=ml_lbp"},
{"title": "Python - Itertools.compress() - GeeksforGeeks", "h1": ["Python – Itertools.compress()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Compress()", "What kind of Experience do you want to share?"], "strong": ["Note:", "Compress():", "Syntax:", "Example 1 :", "Output:", "Example 2 : ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-itertools-compress/?ref=ml_lbp"},
{"title": "Python - Itertools.dropwhile() - GeeksforGeeks", "h1": ["Python – Itertools.dropwhile()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Dropwhile()", "What kind of Experience do you want to share?"], "strong": ["Note:", "Syntax:", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-itertools-dropwhile/?ref=lbp"},
{"title": "Python - Itertools.filterfalse() - GeeksforGeeks", "h1": ["Python – Itertools.filterfalse()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "filterfalse() function", "What kind of Experience do you want to share?"], "strong": ["filterfalse().", "Note:", "Syntax:", "Parameter:", "Return Value:", "Example 1:", "Output:", "Example 2:", "Output:", "Example 3:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-itertools-filterfalse/?ref=lbp"},
{"title": "Python - Itertools.count() - GeeksforGeeks", "h1": ["Python – Itertools.count()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Itertools.count()", "What kind of Experience do you want to share?"], "strong": ["Note:", "Parameters:", "Example #1: Creating evenly spaced list of numbers", "Output :", "Example #2: Emulating ", "enumerate()", " using ", "itertools.count()", "Output :", "Note: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-itertools-count/?ref=lbp"},
{"title": "Python String Exercise - GeeksforGeeks", "h1": ["Python String Exercise"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic String Programs", "Advance String Programs", "Programs on SubString", "What kind of Experience do you want to share?"], "strong": ["Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-string-exercise/"},
{"title": "Python | OpenCV BGR color palette with trackbars - GeeksforGeeks", "h1": ["Python | OpenCV BGR color palette with trackbars"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "What kind of Experience do you want to share?"], "strong": ["OpenCV ", "Libraries needed:", "Approach: ", "Output:", "Note: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-opencv-bgr-color-palette-with-trackbars/?ref=lbp"},
{"title": "Python - Tkinter Choose color Dialog - GeeksforGeeks", "h1": ["Python – Tkinter Choose color Dialog"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Creating choose color dialog box using Tkinter", "Python3", "What kind of Experience do you want to share?"], "strong": ["colorchooser", "askcolor()", "Syntax:", "Example:", "Output:", "Note:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tkinter-choose-color-dialog/?ref=lbp"},
{"title": "Python dictionary with keys having multiple inputs - GeeksforGeeks", "h1": ["Python dictionary with keys having multiple inputs"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["How to create a dictionary where a key is formed using inputs?", "Example 1:", "Output", "Time complexity: ", "Auxiliary space:", "Python dictionary with keys having multiple inputs", "keys", "value", "Output", "Time complexity: ", "Auxiliary space: ", "Step-by-step approach to implementing this code:", "Output", "Time complexity:", "Auxiliary space:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-dictionary-with-keys-having-multiple-inputs/?ref=lbp"},
{"title": "Python JSON - GeeksforGeeks", "h1": ["Python JSON"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "JSON Example", "Python3", "Python3", "JSON in Python", "Introduction", "Reading and Writing JSON", "Parsing JSON", "Serializing and Deserializing JSON", "Conversion between JSON", "More operations JSON", "What kind of Experience do you want to share?"], "strong": ["Python JSON JavaScript Object Notation", "Convert from JSON to Python object", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-json/?ref=lbp"},
{"title": "Python SQLite - DROP Table - GeeksforGeeks", "h1": ["Python SQLite – DROP Table"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "SQLite in Python - Getting Started", "SQLite Queries", "SQLite Clause", "SQLite Working with Data", "Working with Images", "Python SQLite - Exercise", "Python SQLite Additional", "SQLite in Python - Getting Started", "SQLite Queries", "SQLite Clause", "SQLite Working with Data", "Working with Images", "Python SQLite - Exercise", "Python SQLite Additional", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["DROP", "Syntax: ", "Output:", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sqlite-drop-table/"},
{"title": "Python program to print positive numbers in a list - GeeksforGeeks", "h1": ["Python program to print positive numbers in a list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input:", "Output:", "Input:", "Output:", "Example #1:", "Output:", "Example #2:", "Output:", "Time complexity : O(n)", "Space complexity : O(1)", "Example #3:", "Output:", "Time complexity :", "Auxiliary Space :", "Example #4:", "Output:", "Time complexity", "Space complexity", "Output", "Output", "Method: Using Numpy Array: ", "Output:", " time complexity", "O(n)", " space complexity", "O(n)", "Output", "Time complexity:", "Space complexity:", "Method : Using operator.ge()", "Output", "Time Complexity : O(N)", "Auxiliary Space : O(N)", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-print-positive-numbers-in-a-list/"},
{"title": "Python - Spell Corrector GUI using Tkinter - GeeksforGeeks", "h1": ["Python – Spell Corrector GUI using Tkinter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisites:", "Output:", "Code Explanation:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-spell-corrector-gui-using-tkinter/?ref=lbp"},
{"title": "Python - Tkinter askquestion Dialog - GeeksforGeeks", "h1": ["Python – Tkinter askquestion Dialog"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Askquestion()", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["messagebox", "showinfo() –", "showwarning() –", "showerror() –", "askquestion() –", "askokcancel() –", "askretrycancel() –", "askyesnocancel() –", "Syntax of the Message-Box Functions:", "name_of_function –", "Title –", "Message –", "Options –", "Syntax:", "Example:", "Output:", "1. Importing the Libraries ", "2. Main window instance ", "3. Set dimension", "4. Applying other widget and function ", "5. mainloop()", "ICONS that We can use in Options ", "Error", "Example-", "Output:", "info", "Output:", "Question", "Output:", "Warning", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tkinter-askquestion-dialog/?ref=lbp"},
{"title": "Python - Data visualization using covid19 India API - GeeksforGeeks", "h1": ["Python – Data visualization using covid19 India API"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["API (Application Programming Interface)", "JSON (JavaScript Object Notation)", "Required modules: ", "Commands to install modules:", "Steps:", "Importing all required modules", "Function for getting JSON data from API and Visualization of Data", "Getting State Names available in JSON Data", "Getting the state-wise Data", "Creating DataFrame Using pandas", "Data Visualization Using Matplotlib", "Final casesData() function code", "Final Implementation:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-data-visualization-using-covid19-india-api/"},
{"title": "Python - Data visualization using Bokeh - GeeksforGeeks", "h1": ["Python – Data visualization using Bokeh"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Bokeh ", "Code #2:", "Code #3:", "Code #4:", "Code #5:", "Code #6:", "References: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Guide to Software Testing and Automation: Master Java, Selenium and Cucumber "], "link": "https://www.geeksforgeeks.org/python-data-visualization-using-bokeh/"},
{"title": "Python | asksaveasfile() function in Tkinter - GeeksforGeeks", "h1": ["Python | asksaveasfile() function in Tkinter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "What kind of Experience do you want to share?"], "strong": ["class filedialog", "Output #1:", "Output #2:", "Output #3:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-asksaveasfile-function-in-tkinter/?ref=lbp"},
{"title": "Python | Convert set into a list - GeeksforGeeks", "h1": ["Python | Convert set into a list", "Convert the set into a List in Python "], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Set to List.", "Input : ", "Output : ", "Explanation: ", "Output:", "Time complexity:", "Auxiliary Space:", "Output:", "Time complexity:", "Auxiliary Space:", "Output:", "Time complexity: ", "Auxiliary Space: ", "Output:", "Time complexity:", "Auxiliary Space:", "Output:", "Time complexity:", "Auxiliary Space:", "using list() constructor", "Output :", "Time complexity:", "Auxiliary Space:", "sing copy and clear", ". ", "Output :", "Time complexity:", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-convert-set-into-a-list/"},
{"title": "Simple registration form using Python Tkinter - GeeksforGeeks", "h1": ["Simple registration form using Python Tkinter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output :", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-simple-registration-form-using-tkinter/?ref=lbp"},
{"title": "Python program for removing i-th character from a string - GeeksforGeeks", "h1": ["Python program for removing i-th character from a string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "Python", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples :", "Approach 1 :", "Output", "Time Complexity: ", "Auxiliary Space: ", "Approach 2 :", "Output", "Time Complexity: ", "Auxiliary Space: ", "Approach 3 : Using list(),pop() and join() methods", "Output", "Approach 4: Using enumerate, join", "Output", "Time complexity:", "Auxiliary Space:", "Approach 5: Using the re module and f-string ", "Output", "Time Complexity: O(N)", "Space Complexity: O(N) ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "DSA for Interview Preparation "], "link": "https://www.geeksforgeeks.org/python-program-for-removing-i-th-character-from-a-string/"},
{"title": "Python | Simple FLAMES game using Tkinter - GeeksforGeeks", "h1": ["Python | Simple FLAMES game using Tkinter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisites:", " ", "To create a Tkinter : ", "FLAMES", "Below is the implementation :", "Output :", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-simple-flames-game-using-tkinter/?ref=lbp"},
{"title": "Python sorted() Function - GeeksforGeeks", "h1": ["Python sorted() Function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python sorted() Function Syntax", "How to Use sorted() Function in Python?", "Python3", "More Sorted() Function Examples", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python sorted() function", "Example", "Output", "sorted(iterable, key, reverse)", "Parameters:", "Iterable:", "Key", "(optional):", "Reverse", "(optional):", "Return:", "Example:", "Output", "Output", "Output", "Output", "Output", "Output", "Example:", "Output", "Output", "Output", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sorted-function/"},
{"title": "Python | Writing to an excel file using openpyxl module - GeeksforGeeks", "h1": ["Python | Writing to an excel file using openpyxl module"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Openpyxl ", "Code #1 :", "Output :", "Code #2 :", "Output :", "Code #3 :", "Output :", "code #4 :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-writing-excel-file-using-openpyxl-module/"},
{"title": "Python program to find sum of elements in list - GeeksforGeeks", "h1": ["Python program to find sum of elements in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python program to find sum of elements in list", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input:", "Output:", "Input:", "Output:", "Example #1:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Example #2 :", "Output", "Time Complexity: ", "Auxiliary Space: ", "Example #3:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Example #4:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Example 5: ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 6:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 7:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 8:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method: Using add operator ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Algorithm :", "Output", "Time Complexity :", "Auxiliary Space :", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-find-sum-of-elements-in-list/?ref=ml_lbp"},
{"title": "Python Tkinter - Toplevel Widget - GeeksforGeeks", "h1": ["Python Tkinter – Toplevel Widget"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Toplevel widget", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Note:", "Syntax:", "Optional parameters", "root", "bg", "fg", "bd", "height", "width", "font", "cursor", "Common methods", "iconify", "deiconify", "state", "withdraw", "title", "frame", "Example 1:", "Output", "Example 2: ", "Output ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tkinter-toplevel-widget/?ref=lbp"},
{"title": "Python | Get items in sorted order from given dictionary - GeeksforGeeks", "h1": ["Python | Get items in sorted order from given dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using sorted()", "Output:", "Method #2: Using d.items()", "Output:", "Method #3: Using operator", "Output:", " Method #4:  Using sorted function along with a lambda function", "Output", "Time complexity: O(nlogn)", "Auxiliary Space: O(1)", "Method 5: Using the itemgetter function from the operator module", "Output", "Time complexity: O(n log n) ", "Auxiliary space: O(n)", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-get-items-in-sorted-order-from-given-dictionary/"},
{"title": "Python program to print elements which are multiples of elements given in a list - GeeksforGeeks", "h1": ["Python program to print elements which are multiples of elements given in a list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method 1: ", "Output:", "Method 2: ", "Output:", "Method 3: Uses a loop", "Step-by-step approach:", "Output", "Method 4: Use the set intersection operation. ", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-print-elements-which-are-multiples-of-elements-given-in-a-list/"},
{"title": "Python program to find second largest number in a list - GeeksforGeeks", "h1": ["Python program to find second largest number in a list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "note: install numpy module using command “pip install numpy”", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input:", "Output:", "Input:", "Output:", "Method 1:", "Output", " time complexity", " space complexity", "Method 2:", "Output", "Method 3:", "Output", "Time Complexity: ", "Auxiliary Space:", "Method 4:", "Output", "Time Complexity: O(NlogN) ", "Auxiliary Space: O(1)", "Method 5:", "Output", "Time Complexity: O(N)", "Auxiliary Space: O(1)", "Method 6", "Output", "Method:", "Output", "Output", "Method : Using heap", "Output", "Method : Using numpy.argsort() function.", "note: install numpy module using command “pip install numpy”", "Algorithm:", "Output:", "Method : Using sorted()", "Algorithm :", "Output", "Time Complexity", ":", "Auxiliary Space : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-find-second-largest-number-in-a-list/"},
{"title": "Python MongoDB - find_one Query - GeeksforGeeks", "h1": ["Python MongoDB – find_one Query"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python MongoDB - Introduction", "Python MongoDB - Getting Started", "Python MongoDB - Basic", "Python MongoDB - Method", "Python MongoDB Queries", "Working with Collections and documents in MongoDB", "Indexing in MongoDB", "Conversion between MongoDB data and Structured data", "Python MongoDB - Exercise", "Python MongoDB - Introduction", "Python MongoDB - Getting Started", "Python MongoDB - Basic", "Python MongoDB - Method", "Python MongoDB Queries", "Working with Collections and documents in MongoDB", "Indexing in MongoDB", "Conversion between MongoDB data and Structured data", "Python MongoDB - Exercise", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["find_one()", "Prerequisites: ", "Importing PyMongo Module: ", "Creating a Connection: ", "Accessing the Database: ", "Accessing the Collection:", "Finding in the collection: ", "Syntax:", "Example 1:", "Sample Database:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-mongodb-find_one-query/"},
{"title": "Python Tkinter - Scale Widget - GeeksforGeeks", "h1": ["Python Tkinter – Scale Widget"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Scale widget", "What kind of Experience do you want to share?"], "strong": ["Note:", "Syntax:", " Optional parameters", " root", " bg", " fg", " bd", " orient", " from_", " to", " troughcolor", " state", " sliderlength", " label", " highlightbackground", " cursor", " Methods", " set(value)", " get()", "Example 1:", "Output:", "Example 2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tkinter-scale-widget/?ref=lbp"},
{"title": "Python SQLite - Select Data from Table - GeeksforGeeks", "h1": ["Python SQLite – Select Data from Table"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "SQLite in Python - Getting Started", "SQLite Queries", "SQLite Clause", "SQLite Working with Data", "Working with Images", "Python SQLite - Exercise", "Python SQLite Additional", "SQLite in Python - Getting Started", "SQLite Queries", "SQLite Clause", "SQLite Working with Data", "Working with Images", "Python SQLite - Exercise", "Python SQLite Additional", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Demonstration of our GEEK table:", "Creating the above table:", "Syntax:", "Code:", "Output:", "Syntax:", "Parameters: ", "Code:", "Output:", "Syntax:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sqlite-select-data-from-table/"},
{"title": "Python | Ways to remove a key from dictionary - GeeksforGeeks", "h1": ["Python | Ways to remove a key from dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python3", "Python3", "Python3", "Python3", "Python3", "How to Delete all Keys from a Dictionary?", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Before remove key:", "'Mani': 21", "Operation Perform:   ", "After removing key:", "Method 1: Remove a Key from a Dictionary using the del", "Output :", "Exception : ", "Method 2: Remove a Key from a Dictionary using pop() ", "pop()", "Output:", "Method 3: Using items() + dict comprehension to Remove a Key from a Dictionary", "Output:", "Output:", "Output:", "Output:", "Output:", "Time complexity: ", "Auxiliary Space: ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-ways-to-remove-a-key-from-dictionary/"},
{"title": "Python - Specific Characters Frequency in String List - GeeksforGeeks", "h1": ["Python – Specific Characters Frequency in String List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using join() + Counter()", "Output", "Time complexity:", "Auxiliary space: ", "Method #2 : Using chain.from_iterable() + Counter() + dictionary comprehension", "Output", "Time complexity: ", "Auxiliary space:", "Method #3: Using count() method.count()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #4: Using operator.countOf() method", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #5: Using loop and conditional statement", "Output", "Time complexity: ", "Auxiliary space: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-specific-characters-frequency-in-string-list/"},
{"title": "Python - Replace String by Kth Dictionary value - GeeksforGeeks", "h1": ["Python – Replace String by Kth Dictionary value"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1: Using list comprehension", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #2 : Using get() + list comprehension", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3: Using a loop", "subs_dict", "Kth", "Output", "Time Complexity:", "Auxiliary Space:", "Method #4: Using map() function", "Here’s how you can use map() to solve this problem:", "Output", "Time complexity: O(n), ", "Auxiliary space: O(n),", "Method #7: Using a dictionary comprehension", "test_list", "Kth", "subs_dict", "res", "res", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-replace-string-by-kth-dictionary-value/?ref=leftbar-rightbar"},
{"title": "Python | Get Kth Column of Matrix - GeeksforGeeks", "h1": ["Python | Get Kth Column of Matrix"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python3", "Python", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension", "Output : ", "Time complexity: ", "Auxiliary space: ", "Method #2 : Using zip()", "Output : ", "Method #3: Using numpy", "Note:", "Output:", "Method 4: Using a for loop.", "Output", "Time complexity:", "Auxiliary space:  ", "Method #6: Using the built-in function map()", "Output", "Method 6: Using list slicing", "Step-by-step approach:", "k", "Output", "Time complexity: ", "Auxiliary space: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-get-kth-column-of-matrix/?ref=lbp"},
{"title": "Python program to find smallest number in a list - GeeksforGeeks", "h1": ["Python program to find smallest number in a list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Sorting the list to find smallest number in a list", "Python3", "Python3", "Using min() Method to find smallest number in a list", "Python3", "Find minimum list element for a user defined list", "Python3", "Find the smallest element in list comparing every element", "Python3", "Using the lambda function to find smallest number in a list", "Python3", "Using the enumerate function to find smallest number in a list", "Python3", "Using reduce function to find the smallest number in a list", "Python", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example: ", "Output: ", "Output:", "Output: ", "Time Complexity: ", "Auxiliary Space: ", "Output: ", "Input: ", "Output:", "Output:", "Output:", "Using reduce function to find the smallest number in a list", "Output", "Output", "Output", "Time complexity: ", "Auxiliary Space:", "Using numpy module:", "Output", "Time complexity: ", "Auxiliary Space: ", "Output", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-find-smallest-number-in-a-list/"},
{"title": "Python program to extract only the numbers from a list which have some specific digits - GeeksforGeeks", "h1": ["Python program to extract only the numbers from a list which have some specific digits"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using ", "list comprehension", " + ", "all()", "Output", "Method #2 : Using", " filter()", " + ", "lambda", " + all()", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method #3 : Using Counter() + keys()+ all()", "Output", "Time Complexity:", "Method #4:", "Output", "Time Complexity:O(N)", "Auxiliary Space:O(N)", "Method #5:Using recursion", "Algorithm:", "Output", "Time complexity: O(n * m), ", "Auxiliary space: O(n), ", "Method 6: Use a for a loop", "Approach:", "Output", "Time complexity: O(n * k)", "Auxiliary space: O(n)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-extract-only-the-numbers-from-a-list-which-have-some-specific-digits/"},
{"title": "Python Dictionary clear() - GeeksforGeeks", "h1": ["Python Dictionary clear()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Parameters:", "Returns:", "Parameters:", "Examples:", "Error:", "Output:", "How is it different from assigning {} to a dictionary?", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-dictionary-clear/"},
{"title": "Python | Extract only characters from given string - GeeksforGeeks", "h1": ["Python | Extract only characters from given string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using re.split", "Output", "Time complexity:", "Auxiliary space:", "Method #2: Using re.findall", "Output", "Time complexity: ", "Auxiliary space:", "Method #3: Using isalpha()", "Output", "Time complexity: ", "Auxiliary space:", "Method #4 : Without any builtin methods", "Output", "Method 5: Using list comprehension method ", "Output", "Method 6: Using enumerate function", "Output", "Method #7: Using filter and lambda:", "Output", "Time complexity: O(n)", "Auxiliary Space: O(n)", "Method #8:Using itertools.filterfalse() method", "Output", "Time Complexity: O(N)", "Auxiliary Space: O(N)", "Method #9:Using str.translate() with str.maketrans()", "Algorithm:", "Output", "Time Complexity: O(N)", "Auxiliary Space: O(N)", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-extract-only-characters-from-given-string/"},
{"title": "Python MongoDB- rename() - GeeksforGeeks", "h1": ["Python MongoDB- rename()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python MongoDB - Introduction", "Python MongoDB - Getting Started", "Python MongoDB - Basic", "Python MongoDB - Method", "Python MongoDB Queries", "Working with Collections and documents in MongoDB", "Indexing in MongoDB", "Conversion between MongoDB data and Structured data", "Python MongoDB - Exercise", "Python MongoDB - Introduction", "Python MongoDB - Getting Started", "Python MongoDB - Basic", "Python MongoDB - Method", "Python MongoDB Queries", "Working with Collections and documents in MongoDB", "Indexing in MongoDB", "Conversion between MongoDB data and Structured data", "Python MongoDB - Exercise", "rename()", "What kind of Experience do you want to share?"], "strong": ["rename()", "rename()", "Syntax : ", "Parameters : ", "new_name :", "session :", "**kwargs : ", "Example 1 : ", "Output-", "Example 2 : ", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-mongodb-rename/?ref=lbp"},
{"title": "Python | Maximum frequency character in String - GeeksforGeeks", "h1": ["Python | Maximum frequency character in String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method 1 : Naive method + max()", "Output : ", "Time Complexity:", "Auxiliary Space: ", "Method 2 : Using collections.Counter() + max()", "Output : ", "Time Complexity: ", "Auxiliary Space: ", "Method 3 : Using a dictionary", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 4: Using a generator expression:", "max", "lambda", "max", "Output", "Time Complexity: ", "Auxiliary Space: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-maximum-frequency-character-in-string/?ref=leftbar-rightbar"},
{"title": "Python Classes and Objects - GeeksforGeeks", "h1": ["Python Classes and Objects"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Creating a Python Class", "Python3", "Object of Python Class", "Example of Python Class and object", "Python3", "Python3", "Python3", "Python3", "__init__() method", "Python3", "__str__() method", "Python3", "Class and Instance Variables", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax: ", "Syntax: ", "Some points on Python class:", "State:", "Behavior:", "Identity:", "Example:", "Output:", "Explanation :", "attr1 and attr2", "fun()", "attr1 ", "fun()", "Output: ", "Explanation:", "name, and company", "say_hi()", "John and Company ", "show()", " ", "pass", "Output:", "Explanation:", "name", " __str__()", "class", "__str__() ", "class", " __str__()", "Output:", "Explanation:", "name and company", "name", "company", "Defining instance variables using a constructor. ", "Output", "Explanation:", "breed and color. ", "Dog", "Defining instance variables using the normal method:", "Output:", "Explanation:", "Dog ", " ", "constructor", "setColor", "getColo", "Dog", "Data Structures & Algorithms in Python - Self Paced ", "Complete Test Series for Service-Based Companies ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-classes-and-objects/?ref=lbp"},
{"title": "Python | Sum of number digits in List - GeeksforGeeks", "h1": ["Python | Sum of number digits in List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Note: Install numpy module using command “pip install numpy”", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loop + str()", "Output : ", "Method #2 : Using sum() + list comprehension", "Output : ", "Time Complexity: ", "Auxiliary Space: ", "Method #3 : Using sum() + reduce()", "Output:", "Method #4 : Using numpy", "Note: Install numpy module using command “pip install numpy”", "Output:", "Method #5 : Using itertools library:", "Output", "Method #6 : Using map() function and modulo operator :", "Step-by-step algorithm for implementing the approach", "Code :", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #7: Creating a expression without changing to a string", "Output", "Time Complexity: O(N*M) ", "Auxiliary Space: O(N)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-sum-of-number-digits-in-list/?ref=leftbar-rightbar"},
{"title": "Python | Matrix Product - GeeksforGeeks", "h1": ["Python | Matrix Product"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using list comprehension + loop", "Output", "Time Complexity:", "Auxiliary Space:", "Method #2: Using chain() + loop", "Output", "Time Complexity:", "Auxiliary Space:", "Method #3 : Using extend() method", "Output", "Time Complexity:", "Auxiliary Space:", "Method #4 : Using extend(), functools.reduce() and operator.mul", "Output", "Time Complexity: ", "Auxiliary Space:", "Method #5:Using Nested Loops", "Output", "Time Complexity: O(N*M)", "Auxiliary Space: O(1), ", "Method 6 :  use recursion to traverse the nested list and multiply all the elements. ", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-matrix-product/?ref=lbp"},
{"title": "Python SQLite - CRUD Operations - GeeksforGeeks", "h1": ["Python SQLite – CRUD Operations"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "SQLite in Python - Getting Started", "SQLite Queries", "SQLite Clause", "SQLite Working with Data", "Working with Images", "Python SQLite - Exercise", "Python SQLite Additional", "SQLite in Python - Getting Started", "SQLite Queries", "SQLite Clause", "SQLite Working with Data", "Working with Images", "Python SQLite - Exercise", "Python SQLite Additional", "CRUD Operations", "Python", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["CRUD Operations", "Syntax: ", "Output:", "Syntax: INSERT", "INTO", "VALUES ", ".", "INSERT", "INTO", "VALUES ", "Output:", "SELECT: ", "* ", "FROM: ", "WHERE: ", "Example: SELECT ", "FROM", "WHERE", "Output:", "Syntax: UPDATE ", "SET ", "WHERE ", "EXAMPLE: UPDATE ", "SET ", "WHERE ", "Output:", "SYNTAX: DELETE FROM ", "WHERE ", "EXAMPLE: DELETE FROM ", "WHERE ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sqlite-crud-operations/?ref=lbp"},
{"title": "Python | Count the Number of matching characters in a pair of string - GeeksforGeeks", "h1": ["Python | Count the Number of matching characters in a pair of string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Recommended: Please try your approach on ", "{IDE}", " first, before moving on to the solution.", "Python", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input : ", "Output : ", "Input :", "Output :", "{IDE}", "Approach 1:", "Note:", "string.find(character)", "4.", "Output :", "Approach 2: ", "Output :", "Approach 3:", "Output", "Time complexity:", "Auxiliary space:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-count-the-number-of-matching-characters-in-a-pair-of-string/"},
{"title": "Python | Find missing and additional values in two lists - GeeksforGeeks", "h1": ["Python | Find missing and additional values in two lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Approach using numpy:", "note: install numpy module using command “pip install numpy”", "Python3", "What kind of Experience do you want to share?"], "strong": ["Algorithm:", "Output:", "Time complexity:", "Auxiliary Space:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-find-missing-additional-values-two-lists/"},
{"title": "Python SQLite - Update Specific Column - GeeksforGeeks", "h1": ["Python SQLite – Update Specific Column"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "SQLite in Python - Getting Started", "SQLite Queries", "SQLite Clause", "SQLite Working with Data", "Working with Images", "Python SQLite - Exercise", "Python SQLite Additional", "SQLite in Python - Getting Started", "SQLite Queries", "SQLite Clause", "SQLite Working with Data", "Working with Images", "Python SQLite - Exercise", "Python SQLite Additional", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["UPDATE query. ", "Syntax:", "Example 1: ", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sqlite-update-specific-column/?ref=lbp"},
{"title": "Reversing a List in Python - GeeksforGeeks", "h1": ["Reversing a List in Python"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Reversing a List in Python", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example: ", "Input:", "Output: ", "Explanation:", "1. Reverse", "Output", "Time complexity: ", "Auxiliary space:", "2. Reverse List by Swapping Present and Last Numbers at a Time", "Output", "Time Complexity: ", "n ", "Auxiliary Space: ", "3. Reverse  List Using the Reversed() and Reverse() Built-In Function", "Output", "Time complexity: ", "Auxiliary space: ", "4. Reverse a List Using a Two-Pointer Approach", "Output", "Time Complexity", "Auxiliary Space:", "5. Reverse a List Using the insert() Function", "Output", "Time complexity: ", "Auxiliary Space: ", "6. Reverse a List Using List Comprehension", "Output", "Time complexity: ", "Auxiliary space:", "7. Reverse a List Using Numpy", "Output:", "Time complexity: ", "Auxiliary space:", "how to reverse a python list?", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-reversing-list/?ref=lbp"},
{"title": "Python set operations (union, intersection, difference and symmetric difference) - GeeksforGeeks", "h1": ["Python set operations (union, intersection, difference and symmetric difference)"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-set-operations-union-intersection-difference-symmetric-difference/"},
{"title": "Python | Split multiple characters from string - GeeksforGeeks", "h1": ["Python | Split multiple characters from string", "How to Split String on Multiple Delimiters in Python"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["split()", "Input: ", "Output: ", "Explanation: ", "Output", "split()", ".", "Output", "Output", ", ", "_", "–", "!", "|", "\\", "Example: ", "Output", "Note:", ".split()", ".", "findall()", "Output", "Note:", "_", "Example:", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-split-multiple-characters-from-string/?ref=ml_lbp"},
{"title": "Python | Check if two lists have at-least one element common - GeeksforGeeks", "h1": ["Python | Check if two lists have at-least one element common"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "Python", "Python", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Method 1: Traversal of List", "Output:", "Time complexity: ", "Auxiliary space:", "Method 2 : Using Set and Property", "Output:", "Time complexity: ", "Auxiliary space: ", "Method 3 : Using Set Intersection", "Output:", "Time complexity: ", "Auxiliary space: ", "Output", "Time complexity: ", "Auxiliary space: ", "Method #5 : Using operator.countOf() method", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 4: Using the any() function and the list comprehension method.", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-check-two-lists-least-one-element-common/?ref=ml_lbp"},
{"title": "Python - Split strings ignoring the space formatting characters - GeeksforGeeks", "h1": ["Python – Split strings ignoring the space formatting characters"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method 1: Using re.split()", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Method 2: Using split()", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Approach#3:", "Output", "Method 4 : use the itertools module to group contiguous non-space characters together and then join them into separate substrings.", "Steps : ", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-split-strings-ignoring-the-space-formatting-characters/"},
{"title": "Python | Basic Gantt chart using Matplotlib - GeeksforGeeks", "h1": ["Python | Basic Gantt chart using Matplotlib"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Data visualization Library", "Basic Plot", "Advanced Plot", "Data visualization Tools", "Interactive Dashboard", "Data visualization Library", "Basic Plot", "Advanced Plot", "Data visualization Tools", "Interactive Dashboard", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisites : ", "Gantt Chart", "Some Uses of Gantt Charts : ", "The basic arguments : ", "Reference :", "Data Science Training Program ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-basic-gantt-chart-using-matplotlib/"},
{"title": "Python Archives - GeeksforGeeks", "h1": ["Python"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/category/programming-language/python/"},
{"title": "Python | Whatsapp birthday bot - GeeksforGeeks", "h1": ["Python | Whatsapp birthday bot"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python Bindings for Selenium ( Browser Automation software )", "Chrome webdriver", "How the JSON file looks", "Code Explanation: ", "Master Java Programming - Complete Beginner to Advanced ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-whatsapp-birthday-bot/?ref=lbp"},
{"title": "Python Set Exercise - GeeksforGeeks", "h1": ["Python Set Exercise"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Set Programs", "Conversion of Set Programs ", "Advance Set Programs", "What kind of Experience do you want to share?"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-set-exercise/?ref=lbp"},
{"title": "Python - Cows and Bulls game - GeeksforGeeks", "h1": ["Python – Cows and Bulls game"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Python", "What kind of Experience do you want to share?"], "strong": ["Explanation:", "Approach:", "Program:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-cows-and-bulls-game/?ref=lbp"},
{"title": "Python - turtle.bye() - GeeksforGeeks", "h1": ["Python – turtle.bye()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "turtle.bye()", "What kind of Experience do you want to share?"], "strong": ["Syntax : ", "Parameters : ", "Returns : ", "Example 1:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-turtle-bye/"},
{"title": "Python Bokeh - Plotting Triangles on a Graph - GeeksforGeeks", "h1": ["Python Bokeh – Plotting Triangles on a Graph"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Getting started With Bokeh", "Plotting Different Types of Plots", "Annotations and Legends", "Creating Diffrent Shapes", "Plotting Multiple Plots", "Functions in Bokeh", "Interactive Data Visualization", "Graph", "Building Advanced Visualizations with Glyphs", "Project", "Getting started With Bokeh", "Plotting Different Types of Plots", "Annotations and Legends", "Creating Diffrent Shapes", "Plotting Multiple Plots", "Functions in Bokeh", "Interactive Data Visualization", "Graph", "Building Advanced Visualizations with Glyphs", "Project", "plotting.figure.triangle()", "What kind of Experience do you want to share?"], "strong": ["Syntax : ", "Parameters : ", "x : ", "y : ", "Returns : ", "Example 1 : ", "Output : ", "Example 2 : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-bokeh-plotting-triangles-on-a-graph/?ref=lbp"},
{"title": "Python SQLite - ORDER BY Clause - GeeksforGeeks", "h1": ["Python SQLite – ORDER BY Clause"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "SQLite in Python - Getting Started", "SQLite Queries", "SQLite Clause", "SQLite Working with Data", "Working with Images", "Python SQLite - Exercise", "Python SQLite Additional", "SQLite in Python - Getting Started", "SQLite Queries", "SQLite Clause", "SQLite Working with Data", "Working with Images", "Python SQLite - Exercise", "Python SQLite Additional", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["ORDER BY", "DESC", "ASC", "Syntax: ", "Output:", "Output:", "Example 1: ", "Output:", "Example 2: ", "Output:", "Example 3: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sqlite-order-by-clause/?ref=lbp"},
{"title": "Python | Repeating tuples N times - GeeksforGeeks", "h1": ["Python | Repeating tuples N times"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using * operator", "Output", "Method #2 : Using repeat()", "Output", "Method #3 : Using tuple() method and for loop", "Output", "4. Using list comprehension:", "Output", "Time complexity: O(n) ", "Auxiliary space: O(n)", "Method #5: Using map() and lambda", "Output", "Method #6 : Using operator.mul()", "Approach", "Output", "Time Complexity : O(N), where N is the input variable", "Auxiliary Space : O(N), where N is the input variable", "Method 7 :  Use recursion", "Here are the steps for this method:", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-repeating-tuples-n-times/?ref=lbp"},
{"title": "Python MySQL - Select Query - GeeksforGeeks", "h1": ["Python MySQL – Select Query"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "MySQL Queries", "MySQL Clause", "MySQL Working with Data", "MySQL Working with Images", "MySQL Queries", "MySQL Clause", "MySQL Working with Data", "MySQL Working with Images", "Python", "Select Query", "Python", "Python", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-mysql-select-query/"},
{"title": "Python Dictionary Methods - GeeksforGeeks", "h1": ["Python Dictionary Methods"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "List of Python Dictionary Methods", "Built-in Dictionary Methods", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "FAQs on Python Dictionary Methods", "What kind of Experience do you want to share?"], "strong": ["Python dictionary methods ", "Python Dictionary", "Note: ", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "pop()’ ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-dictionary-methods/?ref=lbp"},
{"title": "Python Program to Split the array and add the first part to the end - GeeksforGeeks", "h1": ["Python Program to Split the array and add  the first part to the end"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Method 1:", "Output", "Time complexity: O(nk)", "Auxiliary space: O(1)", "Method 2:", "Output", "Time Complexity:", "O(n)", "Auxiliary Space: O(k)", "Method  3: Using slicing and extend() methods", "Output", "Time complexity:", "Auxiliary space: ", "Method  4: Using list comprehension and modulo: ", "Output", "Time complexity:", "Auxiliary space:", "Method  5: Using deque module from the collections:", "Algorithm:", "Output", "Time complexity: O(n", "Auxiliary Space: O(n),", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-for-split-the-array-and-add-the-first-part-to-the-end/?ref=lbp"},
{"title": "Python | Pokémon Training Game - GeeksforGeeks", "h1": ["Python | Pokémon Training Game"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "What kind of Experience do you want to share?"], "strong": ["Problem : ", "\r\nExamples: ", "Input : ", "Output : ", "Code : Python code to implement Pokemon training game", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-pokemon-training-game/?ref=lbp"},
{"title": "Python If Else Statements - Conditional Statements - GeeksforGeeks", "h1": ["Python If Else Statements – Conditional Statements"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Types of Control Flow in Python", "Python if statement", "Python", "Python If-Else Statement", "Python", "Python", "Nested-If Statement in Python", "Python", "Python if-elif-else Ladder", "Python", "Short Hand if statement", "Python", "Short Hand if-else statement", "Python", "Python if-else Statements Exercise Questions", "Python", "Python", "What kind of Experience do you want to share?"], "strong": ["Python if statement", "Syntax", "Flowchart of Python if statement", "Output:", "Python If-Else Statement", "Syntax of Python If-Else", "Flowchart of Python if-else statement", "Output:", "Output :", "Nested-If Statement in Python", "Syntax", "Output:", "Python if-elif-else Ladder", "Syntax", "Flowchart of Python if-elif-else ladder", "Example of Python if-elif-else ladder", "Output:", "Short Hand if statement", "Syntax:", "Example of Python if shorthand", "Output:", "Short Hand if-else statement", "Syntax:", "Example of Python if else shorthand", "Output:", "Q1.", "Output", "Q2. ", "Output", "Similar Reads:", "Python3 – if , if..else, Nested if, if-elif statements", "Using Else Conditional Statement With For loop in Python", "How to use if, else & elif in Python Lambda Functions", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-if-else/?ref=lbp"},
{"title": "Python | Iterate over multiple lists simultaneously - GeeksforGeeks", "h1": ["Python | Iterate over multiple lists simultaneously"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["for loops", "for loops", "Iterate over multiple lists at a time", "zip()", "Output:", "itertools.zip_longest()", "Output:", "Output:", "Output:", "Note : ", "Output", "Time complexity:", "Auxiliary space: ", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-iterate-multiple-lists-simultaneously/?ref=lbp"},
{"title": "Python Membership and Identity Operators - GeeksforGeeks", "h1": ["Python Membership and Identity Operators"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Membership Operators", "in operator: ", "Output", "Output", " time complexity", "time complexity ", "‘not in’ operator-", "Output", "Identity operators", "‘is’ operator –", "Output", "‘is not’ operator:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-membership-identity-operators-not-not/?ref=next_article"},
{"title": "Python Dictionary fromkeys() Method - GeeksforGeeks", "h1": ["Python Dictionary fromkeys() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Dictionary fromkeys() Method Syntax:", "Python Dictionary fromkeys() Method Example:", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python dictionary fromkeys() function", "Syntax : ", "Parameters :", "seq :", "val : ", "Returns : ", "Output:", "Example 1: ", "Output : ", " of Python Dictionary fromkeys() Method with Mutable objects as values, ", "Prevention: ", "Example 2: ", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-dictionary-fromkeys-method/"},
{"title": "Python - Iterate over Tuples in Dictionary - GeeksforGeeks", "h1": ["Python – Iterate over Tuples in Dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Method 1: Using index", "Python", "Method 2 : Using values() method", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax:", " Example:", "Output:", "Time complexity: ", "Auxiliary space: ", "Syntax:", "Example:", "Output:", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-iterate-over-tuples-in-dictionary/"},
{"title": "Python Tkinter - Canvas Widget - GeeksforGeeks", "h1": ["Python Tkinter – Canvas Widget"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Canvas widget", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Note:", "Syntax:", "Optional parameters: ", "root", "height", "width", "bg", "bd", "scrollregion", "highlightcolor", "cursor", "confine", "relief", "Some common drawing methods", "Creating an Oval", "Creating an arc", "Creating a Line", "Creating a polygon", "Example 1:", "Output:", "Example 2: ", "Output: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tkinter-canvas-widget/?ref=lbp"},
{"title": "Python Tkinter | Create LabelFrame and add widgets to it - GeeksforGeeks", "h1": ["Python Tkinter | Create LabelFrame and add widgets to it"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["-> ", "-> ", "-> ", "Code #1:", "Output:", "Code #2:", "Output:", "Note:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tkinter-create-labelframe-and-add-widgets-to-it/?ref=lbp"},
{"title": "Python - Test if all Values are Same in Dictionary - GeeksforGeeks", "h1": ["Python – Test if all Values are Same in Dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using loop", "Output", "Time complexity: ", "Auxiliary space:", "Method #2: Using set() + values() + len()", "Output", "Time complexity:", "Auxiliary space:", "Method #3: Using values()+len()+count() methods", "Output", "Time complexity: ", "Auxiliary space: ", "Method #4: Using values() and len() methods", "Output", "Method #5: Using Counter() function", "Output", "Time Complexity:O(n)", "Auxiliary Space:O(n)", "Method #6: Using all() function", "all() ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #7 : Using values()+len()+operator.countOf() methods", "Approach", "Output", "Method #8 : Using numpy:", "Algorithm:", "Time complexity: O(nlogn), ", "Space complexity: O(n), ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-test-if-all-values-are-same-in-dictionary/?ref=lbp"},
{"title": "Python BeautifulSoup - find all class - GeeksforGeeks", "h1": ["Python BeautifulSoup – find all class"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Installing and Loading BeautifulSoup", "Navigating the HTML structure With Beautiful Soup", "Searching and Extract for specific tags With Beautiful Soup", "Creating new HTML elements With Beautiful Soup", "Modifying HTML with BeautifulSoup", "Working with CSS selectors With Beautiful Soup", "Handling cookies and sessions with BeautifulSoup ", "Installing and Loading BeautifulSoup", "Navigating the HTML structure With Beautiful Soup", "Searching and Extract for specific tags With Beautiful Soup", "Creating new HTML elements With Beautiful Soup", "Modifying HTML with BeautifulSoup", "Working with CSS selectors With Beautiful Soup", "Handling cookies and sessions with BeautifulSoup ", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisite:-", "Module needed:", "bs4", ":", "requests", ":", "Methods #1: ", "Approach:", "Code:", "Output:", "Methods #2: ", "Approach:", "Code:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-beautifulsoup-find-all-class/?ref=lbp"},
{"title": "Python Set | update() - GeeksforGeeks", "h1": ["Python Set | update()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Python Set update() Method Syntax", "Set update() Method Example", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python update() function", "Syntax :  ", "Parameters : ", "Return value : ", "‘", "set2'", "‘", "set1'", "list3'", "‘", "set1'", "‘", "set2'", "list3' ", "‘", "set1'", "Output : ", "‘", "list1'", "‘", "list2'", "‘", "set1'", "‘", "set2'", "‘", "set2'", "‘", "set1'", "‘", "alphabet_set'", "‘a’", "‘b’", "‘c’", "‘", "set1'", "‘", "set2'", "‘", "alphabet_set'", "Output : ", "‘", "num_Dict'", "‘", "num_Dict'", "‘", "num_Dict'", "‘", "number' ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-set-update/?ref=lbp"},
{"title": "Python Program to Check Armstrong Number - GeeksforGeeks", "h1": ["Python Program to Check Armstrong Number"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["n digits", "order n", "abcd... = pow(a,n) + pow(b,n) + pow(c,n) + pow(d,n) + .... ", "Example:", "Output", "Time complexity: ", "Auxiliary Space:", "Output", "Time complexity: ", "Auxiliary Space:", "Output", "Output", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-to-check-armstrong-number/?ref=lbp"},
{"title": "Python | Add style to tkinter button - GeeksforGeeks", "h1": ["Python | Add style to tkinter button"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["tkinter.ttk", "ttk.Button options –", "command:", "text:", "image:", "style:", "Code #1: ", "Output:", "Code #2", "Output:", "Code #3", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-add-style-to-tkinter-button/?ref=lbp"},
{"title": "Python SQLite - GeeksforGeeks", "h1": ["Python SQLite"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "SQLite in Python - Getting Started", "SQLite Queries", "SQLite Clause", "SQLite Working with Data", "Working with Images", "Python SQLite - Exercise", "Python SQLite Additional", "SQLite in Python - Getting Started", "SQLite Queries", "SQLite Clause", "SQLite Working with Data", "Working with Images", "Python SQLite - Exercise", "Python SQLite Additional", "Introduction", "SQLite Queries", "Working with Tables", "Working with Images", "Exercises", "What kind of Experience do you want to share?"], "strong": ["Python SQLite3", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sqlite/?ref=lbp"},
{"title": "Python String Concatenation - GeeksforGeeks", "h1": ["Python String Concatenation"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "How to Concatenate Strings in Python", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" + operator", "str.join() ", ".", "“1”", " [ ]", "how to concatenate strings in Python ", "Example", "Input", "Output", "Explanation:", "combining two ", "strings", ",", "Note:", "Example: ", "+", "var1", "var2 ", "var3", "Output", "list size", "Example: ", "var1 ", "var2", "var3.", "Output", "%", "Example: ", "Output", "Explanation: ", "Example:", "Output", "Explanation", ",", "Output", "Example:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-string-concatenation/?ref=lbp"},
{"title": "Python Membership and Identity Operators - GeeksforGeeks", "h1": ["Python Membership and Identity Operators"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Membership Operators", "in operator: ", "Output", "Output", " time complexity", "time complexity ", "‘not in’ operator-", "Output", "Identity operators", "‘is’ operator –", "Output", "‘is not’ operator:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-membership-identity-operators-not-not/?ref=lbp"},
{"title": "Python Design Patterns - GeeksforGeeks", "h1": ["Python Design Patterns"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Creational Software Design Patterns in Python", "Structural Software Design Patterns in Python", "Behavioural Software Design Patterns in Python", "Software Design Pattern in other Programming Languages", "Creational Software Design Patterns in Python", "Structural Software Design Patterns in Python", "Behavioural Software Design Patterns in Python", "Software Design Pattern in other Programming Languages", "Creational Design Pattern: ", "Structural Design Patterns: ", "Behavioral Design Pattern: ", "What kind of Experience do you want to share?"], "strong": ["Design Patterns", "Design Patterns", "Classification of Creational Design Patterns –", "Factory Method", "Abstract Factory Method", "Builder Method", "Prototype Method", "Singleton Method", "Classification of Structural Design Patterns –", "Adapter Method", "Bridge Method", "Composite Method", "Decorator Method", "Facade Method", "Proxy Method", "FlyWeight Method", "Classification of Behavioral Design Patterns –", "Chain of Responsibility Method", "Command Method", "Iterator Method", "Mediator Method", "Memento Method", "Observer Method", "State Method", "Strategy Method", "Template Method", "Visitor Method", "Reusability: ", "Inheritance", "Transparent: ", "Established Solution: ", "Design Patterns", "Established Communication: ", "Efficient Development: ", "More useful Links – ", "Mastering System Design: From Low-Level to High-Level Solutions ", "Tech Interview 101 - From DSA to System Design for Working Professionals ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-design-patterns/?ref=dhm"},
{"title": "Python | Pandas Working With Text Data - GeeksforGeeks", "h1": ["Python | Pandas Working With Text Data"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects"], "strong": ["Code #1:", "Output :", "Code #2:", "Output :", " ", ".replace()", "Code #1", "Output :", "Code #2:", "Output :", "Code #1:", "Output :", "Code #2:", "Code #1:", "Output :", "Code #2:", "Output :", "Code #1:", "Output :", "Code #2:", "Output :", "Pandas ", "str ", "methods:", "str.lower()", "str.upper()", "str.find()", "str.rfind()", "str.findall()", "str.isalpha()", "str.isdecimal()", "str.title()", "str.len()", "str.replace()", "str.contains()", "str.extract()", "str.startswith()", "str.endswith()", "str.isdigit()", "str.lstrip()", "str.rstrip()", "str.strip()", "str.split()", "str.join()", "str.cat()", "str.repeat()", "str.get()", "str.partition()", "str.rpartition()", "str.pad()", "str.swapcase()", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-working-with-text-data/"},
{"title": "Python3 - if , if..else, Nested if, if-elif statements - GeeksforGeeks", "h1": ["Python3 – if , if..else, Nested if, if-elif statements"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "if Statement in Python", "Python3", "if else Statement in Python", "Python3", "Python3", "Nested if Statement", "Python3", "if-elif Statement in Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax", "Flowchart of if Statement in Python", "Example:", "Output", "Syntax", "Flow Chart of if-else Statement in Python", "Example 1:", "Output", "Example 2:", "Output", "Python Nested If Statement Syntax", "Syntax", "Flow chart of Nested If Statement In Python", "Example:", "Output", "Python if-elif Statement Syntax", "Syntax", "Flow Chart of Python if-elif Statement", "Example: ", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Master Java Programming - Complete Beginner to Advanced ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python3-if-if-else-nested-if-if-elif-statements/?ref=dhm"},
{"title": "Python Continue Statement - GeeksforGeeks", "h1": ["Python Continue Statement"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Python Continue Statement", "Python continue Statement Syntax", "Flowchart of Continue Statement", "Continue statement in Python Examples", "Python3", "Python3", "Python3", "Python3", "Usage of Continue Statement", "What kind of Experience do you want to share?"], "strong": ["Python Continue Statement ", "Python", " Continue statement", "Output:", "Explanation:", "Output:", "Note:", "Output ", "Output ", "pass", "break", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/python-continue-statement/?ref=dhm"},
{"title": "Plotly tutorial - GeeksforGeeks", "h1": ["Plotly tutorial"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Creating a plot", "Advanced Plot Customization", "Plotly Dash Basics", "Creating a plot", "Advanced Plot Customization", "Plotly Dash Basics", "How to install Plotly?", "Package Structure of Plotly", "Python3", "Getting Started", "Python3", "Creating Different Types of Charts", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Heatmaps", "Python3", "Error Bars", "Python3", "3D Line Plots", "Python3", "3D Scatter Plot Plotly", "Python3", "3D Surface Plots", "Python3", "Interacting with the Plots", "Python3", "Adding Buttons to the Plot", "Python3", "Creating Sliders and Selectors to the Plot", "Python3", "More Plots using Plotly", "What kind of Experience do you want to share?"], "strong": ["Plotly ", " Plotly ", "Plotly ", "Plotly ", "plotly.plotly", "plotly.graph_objects", "plotly.graph_objects.Figure ", "Note: ", "Example:", "Output:", "data, layout, and frames ", "layout.legend ", "plotly.tools ", "Example:", "Output:", "Line plot ", "px.line", "Example:", "Output:", "bar chart", "Example:", "Output:", "histogram", "Example:", "Output:", "scatter plot", "bubble plot", "Example 1: ", "Output:", "Example 2: ", "Output:", "pie chart", "Example:", "Output:", "Box Plot", "Example:", "Output:", "A Violin Plot", "Example:", "Output:", "Generalized Activity Normalization Time Table (GANTT) chart", "Example:", "Output:", " Contour plots", "Example:", "Output:", "Heatmap", "Example:", "Output:", "error bars", "Example:", "Output:", "3D Line Plots", "px.line_3d ", "Example:", "Output:", "3D Scatter Plot", "Example:", "Output:", "Surface plot", "Example:", "Output:", "drop-down menu", "restyle: ", "relayout:", "update:", "animate:", "Example:", "Output:", "actions custom Buttons", "restyle:", "relayout:", "update:", "animate:", "Example:", "Output:", "range slider", "Example:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-plotly-tutorial/?ref=dhm"},
{"title": "Python Dictionary Exercise - GeeksforGeeks", "h1": ["Python Dictionary Exercise"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Dictionary Programs", "Conversion of dictionary", "Advance Dictionary Programs", "What kind of Experience do you want to share?"], "strong": ["Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-dictionary-exercise/?ref=dhm"},
{"title": "Python Programs - Python Programming Example", "h1": ["Python Programs"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Topics :", "2>\r\n", "\r\n", "\r\n", "\r\n", "Basic Programs", "\r\n", "Array Programs", "\r\n", "List Programs", "\r\n", "Matrix Programs", "\r\n", "String Programs", "\r\n", "Dictionary Programs", "\r\n", "Tuple Programs", "\r\n", "\r\n\r\n", "\r\n", "\r\n", "Searching and Sorting Programs", "\r\n", "Pattern Printing", "\r\n", "Date-Time Programs", "\r\n", "Regex Programs", "\r\n", "File Handling Programs", "\r\n", "More Python Programs", "\r\n", "\r\n\r\n\r\n \r\n \r\n\r\n\r\n\r\n\r\n", "Basic Programs: ", "\r\n", "Array Programs:", "List Programs:", "Matrix Programs:", "String Programs:", "Dictionary Programs:", "Tuple Programs:", "Searching and Sorting Programs:", "Pattern Printing Programs:", "Date-Time Programs:", "Python Regex Programs:", "Python File Handling Programs:", "More Python Programs:"], "strong": ["Python Examples", "List", "Strings", "Tuple", "Python Programming Tutorial", "Recent Articles on Python !", "Python Output & Multiple Choice Questions", "Topics :", "More >>", "More >>", "More >>", "More >>", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-programming-examples/?ref=shm"},
{"title": "Python - Data visualization tutorial - GeeksforGeeks", "h1": ["Python – Data visualization tutorial"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Data visualization Library", "Basic Plot", "Advanced Plot", "Data visualization Tools", "Interactive Dashboard", "Data visualization Library", "Basic Plot", "Advanced Plot", "Data visualization Tools", "Interactive Dashboard", "Matplotlib", "Seaborn", "Plotly", "What kind of Experience do you want to share?"], "strong": ["Data Visualization", "Recent Articles on Matplotlib !!!", "Recent Articles on Seaborn !!!​​​​​​​", "Bar Chart", "Histograms", "Box Plot", "3D Plots", "Recent Articles on Plotly !!!​​​​​​​", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-data-visualization-tutorial/?ref=shm"},
{"title": "Python BeautifulSoup - find all class - GeeksforGeeks", "h1": ["Python BeautifulSoup – find all class"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Installing and Loading BeautifulSoup", "Navigating the HTML structure With Beautiful Soup", "Searching and Extract for specific tags With Beautiful Soup", "Creating new HTML elements With Beautiful Soup", "Modifying HTML with BeautifulSoup", "Working with CSS selectors With Beautiful Soup", "Handling cookies and sessions with BeautifulSoup ", "Installing and Loading BeautifulSoup", "Navigating the HTML structure With Beautiful Soup", "Searching and Extract for specific tags With Beautiful Soup", "Creating new HTML elements With Beautiful Soup", "Modifying HTML with BeautifulSoup", "Working with CSS selectors With Beautiful Soup", "Handling cookies and sessions with BeautifulSoup ", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisite:-", "Module needed:", "bs4", ":", "requests", ":", "Methods #1: ", "Approach:", "Code:", "Output:", "Methods #2: ", "Approach:", "Code:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-beautifulsoup-find-all-class/?ref=dhm"},
{"title": "Python Language advantages and applications - GeeksforGeeks", "h1": ["Python Language advantages and applications"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "What kind of Experience do you want to share?"], "strong": ["Advantages of Python Programming Language:", "Presence of third-party modules:", "Extensive support libraries:", "Open source and large active community base:", "Versatile, easy to read, learn, and write:", "User-friendly data structures:", "High-level language:", "Dynamically typed language:", "Object-Oriented and Procedural programming language:", "Portable and interactive:", "Ideal for prototypes:", "Highly efficient:", "Internet of Things (IoT) opportunities:", "Interpreted language:", "of Python Programming Language", "Performance: ", "Global Interpreter Lock: ", "Memory consumption:", "Dynamically typed: ", "Packaging and versioning: ", "Lack of strictness:", "Steep learning curve: ", "Applications:", "GUI-based desktop applications:", "Graphic design, image processing, games, and scientific/computational applications:", "Web frameworks and applications:", "Enterprise and business applications:", "Operating systems:", "Education:", "Database access:", "Language development:", "Prototyping:", "Software development:", "Data science and machine learning:", "Scripting:", "Organizations using Python :", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-language-advantages-applications/?ref=lbp"},
{"title": "Python Data Types - GeeksforGeeks", "h1": ["Python Data Types"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "What is Python type()  Function?", "Python", "Numeric Data Types in Python", "Python", "Sequence Data Type in Python", "Python", "Python", "Python", "Python", "Python", "Python", "Boolean Data Type in Python", "Python", "Set Data Type in Python", "Python", "Python", "Dictionary Data Type in Python", "Python", "Python", "Python Data Type Exercise Questions", "Python", "Python", "What kind of Experience do you want to share?"], "strong": ["Numeric", "Sequence Type", "Boolean", "Set", "Dictionary", "Binary Types( ", "memoryview", ", ", "bytearray", ", ", "bytes", ")", "use the ", "type() function", ".", "‘x’", "string", " integer", "float", "complex", "list", " tuple", "range", "dictionary", "set", "frozenset", "boolean", "bytes", "bytearray", "memoryview", "‘None’", "‘x’", "Integers ", "Float ", "Complex Numbers", "Note", "Example:", "type() function", ": a (integer)", " b (float)", "c (complex)", "Output:", "Creating String", "Example:", "Output:", "Accessing elements of String", "Example:", "String1′", "“GeeksForGeeks” ", "“G”", "“s”", "Output:", "Note ", "Creating a List in Python", "Example:", "Output:", "Python Access List Items", "Output:", "Note ", "Creating a Tuple in Python", "Note:", "‘comma’ ", "Example:", "tuple() ", "Output:", "Note ", "tuple1′", " 1, 2, 3, 4, and 5", "Output:", "Note ", "Note ", "Example:", "<class ‘bool’>. ", "Output:", " ‘comma’.", "Example:", "strings", "lists", "Output:", "Access Set Items", "Example:", "set1 ", "“Geeks”", "“For”", " “Geeks”", "“Geeks”", "in’", "Output:", "Note – ", "dict().", "Note ", "Example:", "dict()", "[(key, value)] ", "Output:", "Accessing Key-value in Dictionary", " get()", "Example:", "1: ‘Geeks’, ‘name’: ‘For’, 3: ‘Geeks’}", "‘name’", "‘For’", "‘Geeks’", "Output:", "Q1. Code to implement basic list operations", "Output", "Q2.", "Code to implement basic tuple operation", "Output", "Explore more Exercises: ", "Python Data Type Exercise", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-data-types/?ref=shm"},
{"title": "Python String - GeeksforGeeks", "h1": ["Python String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "What is a String in Python?", "Python3", "Creating a String in Python", "Python3", "Accessing characters in Python String", "Python3", "String Slicing", "Python3", "Reversing a Python String", "Python3", "Python3", "Deleting/Updating from a String", "Python3", "Python3", "Python3", "Python3", "Python3", "Escape Sequencing in Python", "Python3", "Python3", "Formatting of Strings", "Python3", "Python3", "Python3", "Python3", "Useful Python String Operations", "  ", "Python String constants ", "Deprecated string functions", "What kind of Experience do you want to share?"], "strong": ["What is a String in Python?", "Example:", "Output:", "Strings in Python", "Example:", "Output:", "IndexError", "TypeError", "Example:", "Output:", "Example:", "Output:", "Example:", "Output:", "Example:", "Output:", "Example:", "Output:", "Example:", "Output:", "del", "Output:", "Example:", "Output:", "Error:", "SyntaxError", "Example:", "Output:", "Example:", "r", "R", "Output:", "Example 1:", "Output:", "Example 2:", "Output:", "Example 3:", "Output:", "Example 4:", " ", " % ", "Output:", "Useful Python String Operations", "Advantages of String in Python:", "Drawbacks of String in Python:", "1. what is a Python string?", "2. How can I create a string in Python?", "3. How can I access characters in a string?", "4. Can I concatenate strings in Python?", "5. How can I get the length of a string?", "More Videos on Python Strings", "Programs of Python Strings", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-string/?ref=lbp"},
{"title": "Python string length | len() function to find string length - GeeksforGeeks", "h1": ["Python string length | len() function to find string length"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Python3", "String len() Syntax", "What is the String len() Function?", "More Examples of String len() Function", "Python", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["The string len() function", "Example:", "Output", "String len() Syntax", "len(string) ", "String: ", "Return:", "Output", "Output", "Output", "Output", "Output", "Read More ", "String Methods", "Also Read:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-string-length-len/?ref=lbp"},
{"title": "Python - Concatenate Strings in the Given Order - GeeksforGeeks", "h1": ["Python – Concatenate Strings in the Given Order"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1: Using loop", "Output", "Method #2: Using join() + list comprehension", "Output", "Time Complexity: ", "Space Complexity: ", "Method #3: Using map()", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method 4: Using the zip() function and a generator expression", "Output", "Method 5: Use the sorted() function with a custom key function. ", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-concatenate-strings-in-the-given-order/"},
{"title": "Python infinity(inf) - GeeksforGeeks", "h1": ["Python infinity(inf)"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Representing infinity as an Integer in Python", "Python3", "Python3", "Python3", "Python3", "Checking If a Number Is Infinite in Python", "Python3", "Comparing Infinite Values to Finite Values in Python", " ", "Python3", "What kind of Experience do you want to share?"], "strong": ["undefined number", "Representing infinity as an Integer in Python", "float values can be used to represent an infinite integer", " float(‘inf’) ", "1. Using float(‘inf’) and float(‘-inf’)", "Output:", "2. Using Python’s Math Module", "Output:", "Also read", "3. Using Python’s Decimal Module", "Decimal(‘Infinity’)", "Decimal(‘-Infinity’)", "Output:", "4. Using Python’s Numpy library", "np.inf", "-np.inf", "Output:", "Checking If a Number Is Infinite in Python", "isinf()", "Output:", "Also read:", "Comparing Infinite Values to Finite Values in Python", "Output:", "Master C++ Programming - Complete Beginner to Advanced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-infinity/?ref=ml_lbp"},
{"title": "Python Set | update() - GeeksforGeeks", "h1": ["Python Set | update()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Python Set update() Method Syntax", "Set update() Method Example", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python update() function", "Syntax :  ", "Parameters : ", "Return value : ", "‘", "set2'", "‘", "set1'", "list3'", "‘", "set1'", "‘", "set2'", "list3' ", "‘", "set1'", "Output : ", "‘", "list1'", "‘", "list2'", "‘", "set1'", "‘", "set2'", "‘", "set2'", "‘", "set1'", "‘", "alphabet_set'", "‘a’", "‘b’", "‘c’", "‘", "set1'", "‘", "set2'", "‘", "alphabet_set'", "Output : ", "‘", "num_Dict'", "‘", "num_Dict'", "‘", "num_Dict'", "‘", "number' ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-set-update/"},
{"title": "Plotting graphs using Python's plotly and cufflinks module - GeeksforGeeks", "h1": ["Plotting graphs using Python’s plotly and cufflinks module"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["plotly ", "plotly ", "cufflink", "choropleth ", "Command to install plotly:", "Command to install cufflink:", "Code #1:", "Output:", "Code #2:", "Output:", "Code #3:", "Output:", "Code #4:", "Output:", "Code #5:", "Output:", "Code #6:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-plot-different-graphs-using-plotly-and-cufflinks/"},
{"title": "Python return statement - GeeksforGeeks", "h1": ["Python return statement"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Returning Multiple Values", "Python3", "Python3", "Python3", "Python3", "Function returning another function", "Python3", "What kind of Experience do you want to share?"], "strong": [" return statement", "return", "statement", "Note:", "Syntax:", "Example:", "Output:", "Using Object:", "Example", "Output", "Using Tuple:", "Output:", "Using a list:", "Output:", "Using a Dictionary:", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-return-statement/"},
{"title": "Python | Decimal quantize() method - GeeksforGeeks", "h1": ["Python | Decimal quantize() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-decimal-quantize-method/?ref=ml_lbp"},
{"title": "Python | Check if there are K consecutive 1's in a binary number - GeeksforGeeks", "h1": ["Python | Check if there are K consecutive 1’s in a binary number"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input: ", "Output:", "Explanation:", "Input:", "Output: ", "Explanation: ", "Approach: ", "new string with k 1’s", "if new in s: ", "Output", "Time Complexity : ", "Auxiliary Space : ", "Approach : ", "find() ", "Output", "Time complexity:", "Auxiliary space:", "Output", "The time complexity", "Auxiliary Space ", "Approach : Using replace() and len() methods", "Output", "Time Complexity : O(N)", "Auxiliary Space : O(N)", "Approach : Using operator.contains() method", "Output", "Time Complexity : ", "Auxiliary Space : ", "Approach: Using  a regular expression", "Output", "Time Complexity: O(N) where N is the length of s.", "Auxiliary Space: O(N) because the regular expression pattern is created based on the input value of k,.", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-check-k-consecutive-1s-binary-number/"},
{"title": "Python program to extract rows from Matrix that has distinct data types - GeeksforGeeks", "h1": ["Python program to extract rows from Matrix that has distinct data types"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Explanation :", "Input :", "Output :", "Explanation :", "Method 1 : Using ", "type()", " + ", "list comprehension", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 2: Using type()", "Output", "Time Complexity:", "Auxiliary Space: ", "Method 4: Using reduce() ", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method 4: Using collections.defaultdict class from the collections module.", "Approach: ", "Example:", "Output", "Time complexity: O(n * m)", "Auxiliary Space: O(m)", "Method 5: Using set and isinstance()", "Step-by-step approach:", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-extract-rows-from-matrix-that-has-distinct-data-types/"},
{"title": "Python | Decimal number_class() method - GeeksforGeeks", "h1": ["Python | Decimal number_class() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-decimal-number_class-method/?ref=ml_lbp"},
{"title": "Python String find() method - GeeksforGeeks", "h1": ["Python String find() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python String find() Method Syntax", "What is the String find() Method?", "How to use the string find() method?", "Python3", "More Examples on String find() Method", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python String find() method", "Example", "Output", "str_obj.find(sub, start, end)", "Parameters", "sub:", "start (optional):", "end (optional):", "Return", "Note:", "Output", "find()", "Output", "find()", "Output", "Output", "4. Check if the Substring Exists using the find() Function", "Output", "Read other ", "Python String Methods", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-string-find/?ref=ml_lbp"},
{"title": "Python String istitle() Method - GeeksforGeeks", "h1": ["Python String istitle() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python String istitle() Method Syntax", "Python String istitle() Method Example", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python String istitle() Method ", "Syntax:", "Returns:", "Output:", "What is a title case? ", "Output: ", "Output: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-string-istitle-method/?ref=ml_lbp"},
{"title": "Python | Decimal number_class() method - GeeksforGeeks", "h1": ["Python | Decimal number_class() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-decimal-number_class-method/?ref=next_article"},
{"title": "Python String isspace() Method - GeeksforGeeks", "h1": ["Python String isspace() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python String isspace() Method Syntax", "Python String isspace() Method Example", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python String isspace() method ", "True", "False", "Syntax: ", "Returns:", "True ", "False ", "Output:", "Example 1:  Basic Intuition of isspace() in Program", "Output: ", "Application", "Algorithm:", "Output: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-string-isspace-method/?ref=ml_lbp"},
{"title": "Python String count() Method - GeeksforGeeks", "h1": ["Python String count() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What is the String count() Method?", "String count() Method Syntax", "Python3", "How to use String count() Method", "More Example on String count() Method", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" count()", "Output", " count()", "Note", "string. Count(substring, start= …., end= ….)", "Parameters: ", "Mandatory parameter: ", "Optional Parameters:", "Return Value: ", "number of times", "Example:", "Output", "Output", "Output", "Time Complexity: ", "Auxiliary Space:", "Output", "Time Complexity: ", "Auxiliary Space:", "Regular Expression", "Output", "Time Complexity: ", "Auxiliary Space:", "with Start and End Parameter", "Output", "Time Complexity: ", "Auxiliary Space:", "Read Other ", "Python String Methods", "Similar Articles:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-string-count-method/?ref=ml_lbp"},
{"title": "Python | Removing dictionary from list of dictionaries - GeeksforGeeks", "h1": ["Python | Removing dictionary from list of dictionaries"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using del + loop", "Output:", "Method #2 : Using list comprehension ", "Output:", "Method #3 : Using filter() + lambda", "Output:", "Method 4: Using pop() method", "Output", "Time complexity: ", "Auxiliary space:", "Approach: Using remove() method", "Algorithm:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-removing-dictionary-from-list-of-dictionaries/?ref=lbp"},
{"title": "Python Tkinter - Label - GeeksforGeeks", "h1": ["Python Tkinter – Label"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Label Widget", "Python3", "What kind of Experience do you want to share?"], "strong": ["Note:", "Syntax:", "Parameters:", "master:", "options:", "anchor:", "bg:", "height:", "width:", "bd:", "font:", "cursor:", "textvariable:", "bitmap:", "fg:", "image:", "padx:", "pady:", "justify:", "relief:", "underline:", "wraplength:", "Example:", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tkinter-label/?ref=lbp"},
{"title": "Python MongoDB Tutorial - GeeksforGeeks", "h1": ["Python MongoDB Tutorial"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Getting Started", "MongoDB Queries", "Working with Collections and documents in MongoDB", "Indexing in MongoDB", "Conversion between MongoDB data and Structured data", "Questions on MongoDB", "What kind of Experience do you want to share?"], "strong": ["MongoDB", "Table Of Content:", "Recent Articles on Python MongoDB !!", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-mongodb-tutorial/?ref=lbp"},
{"title": "Python - Convert list of dictionaries to dictionary of lists - GeeksforGeeks", "h1": ["Python – Convert list of dictionaries to dictionary of lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Method 1: Using for loop", "Python3", "Python3", "Method 2: Using ", "dictionary comprehension", "Python3", "Method 3: Using ", "pandas DataFrame", "Python3", "Method 4: Using NumPy", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output:", "Example:", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Syntax", "where", "Example:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Syntax", "Where:", "Example", "Output", "Time Complexity: ", "Auxiliary Space: ", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-convert-list-of-dictionaries-to-dictionary-of-lists/"},
{"title": "Python SQLite - Select Data from Table - GeeksforGeeks", "h1": ["Python SQLite – Select Data from Table"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "SQLite in Python - Getting Started", "SQLite Queries", "SQLite Clause", "SQLite Working with Data", "Working with Images", "Python SQLite - Exercise", "Python SQLite Additional", "SQLite in Python - Getting Started", "SQLite Queries", "SQLite Clause", "SQLite Working with Data", "Working with Images", "Python SQLite - Exercise", "Python SQLite Additional", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Demonstration of our GEEK table:", "Creating the above table:", "Syntax:", "Code:", "Output:", "Syntax:", "Parameters: ", "Code:", "Output:", "Syntax:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sqlite-select-data-from-table/?ref=lbp"},
{"title": "Python - Sum of tuple elements - GeeksforGeeks", "h1": ["Python – Sum of tuple elements"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Sum the elements of a Tuple in Python", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["test_tup", "Output :", "Output :", "Output :", "Output :", "Output :", "Output :", "Output :", "Output :", "Numpy ", "numpy.sum()", " ", "Output :", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-sum-of-tuple-elements/?ref=lbp"},
{"title": "Python Else Loop - GeeksforGeeks", "h1": ["Python Else Loop"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Else with While loop", "Python3", "Else with For loop", "Python3", "Else with the break statement", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output:", "Output:", "Explanation ", "Example 1: Using while loop", "Output:", "Example 2: Using for loop", "Output:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-else-loop/"},
{"title": "Python Tkinter | Create different type of lines using Canvas class - GeeksforGeeks", "h1": ["Python Tkinter | Create different type of lines using Canvas class"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Note: ", "Class parameters:", "Data members used:", "Member functions used for the given class:", "Widgets used: ", "Tkinter method used: ", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tkinter-create-different-type-of-lines-using-canvas-class/?ref=lbp"},
{"title": "Python Program to Swap Two Elements in a List - GeeksforGeeks", "h1": ["Python Program to Swap Two Elements in a List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Swap Two Elements in a List", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Swap Two Elements in a List Using temp variable", "Output", "Time Complexity: ", "Auxiliary Space: ", "Swap Two Elements in a List Using enumerate", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-swap-two-elements-in-a-list/"},
{"title": "Python Dictionary Exercise - GeeksforGeeks", "h1": ["Python Dictionary Exercise"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Dictionary Programs", "Conversion of dictionary", "Advance Dictionary Programs", "What kind of Experience do you want to share?"], "strong": ["Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-dictionary-exercise/?ref=lbp"},
{"title": "Python Matplotlib - An Overview - GeeksforGeeks", "h1": ["Python Matplotlib – An Overview"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Installation", "Basics", "Plotting Bar Graph", "Conclusion", "What kind of Experience do you want to share?"], "strong": ["Figure –", "Axes –", "Axis-", "Artists-", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-matplotlib-an-overview/"},
{"title": "Python program to interchange first and last elements in a list - GeeksforGeeks", "h1": ["Python program to interchange first and last elements in a list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input : ", "Output :", "Input :", "Output :", "Approach #1:", "Output", "Approach #2:", "Output", "Time Complexity: ", "Auxiliary Space:", "Approach #3:", "Output", "Approach #4:", "Output", "Output", "Approach #5:", "Output", "Output", "Time Complexity: O(1)", "Space Complexity: O(1)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-interchange-first-and-last-elements-in-a-list/"},
{"title": "Python | Working with PNG Images using Matplotlib - GeeksforGeeks", "h1": ["Python | Working with PNG Images using Matplotlib"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Multiple Plots", "Working with Legends", "Line Chart", "Bar Plot", "Histogram", "Scatter Plot", "Pie Chart", "3D Plots", "Working with Images", "Customizing Plots", "Applications, and Projects", "Introduction", "Multiple Plots", "Working with Legends", "Line Chart", "Bar Plot", "Histogram", "Scatter Plot", "Pie Chart", "3D Plots", "Working with Images", "Customizing Plots", "Applications, and Projects", "What kind of Experience do you want to share?"], "strong": ["Code #1:", "Output:", "Code #2:", "Output:", "Code #3:", "Output:", "Interpolation Schemes:", "Code # 4:", "Output:", "Code #6: ", "Output:", "Code #7: ", "Output:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-working-with-png-images-using-matplotlib/"},
{"title": "Python SQLite - JOIN Clause - GeeksforGeeks", "h1": ["Python SQLite – JOIN Clause"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "SQLite in Python - Getting Started", "SQLite Queries", "SQLite Clause", "SQLite Working with Data", "Working with Images", "Python SQLite - Exercise", "Python SQLite Additional", "SQLite in Python - Getting Started", "SQLite Queries", "SQLite Clause", "SQLite Working with Data", "Working with Images", "Python SQLite - Exercise", "Python SQLite Additional", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["sqlite3 ", "INNER JOIN ", "LEFT JOIN – ", "RIGHT JOIN – ", "FULL OUTER JOIN – ", "CROSS JOIN – ", "Note: ", "Tables Created:", "INNER JOIN ", "Syntax:", "Output:", "LEFT JOIN ", "Syntax:", "Output:", "RIGHT JOIN", "Syntax:", "Output:", "FULL OUTER JOIN", "Syntax:", "Output:", "CROSS JOIN ", "Syntax:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sqlite-join-clause/?ref=lbp"},
{"title": "Python SQLite - Deleting Data in Table - GeeksforGeeks", "h1": ["Python SQLite – Deleting Data in Table"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "SQLite in Python - Getting Started", "SQLite Queries", "SQLite Clause", "SQLite Working with Data", "Working with Images", "Python SQLite - Exercise", "Python SQLite Additional", "SQLite in Python - Getting Started", "SQLite Queries", "SQLite Clause", "SQLite Working with Data", "Working with Images", "Python SQLite - Exercise", "Python SQLite Additional", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output:", "Approach:", "Example 1: (Delete some data)", "Output:", "Example 2: (Delete all data)", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sqlite-deleting-data-in-table/?ref=lbp"},
{"title": "Python | Find missing and additional values in two lists - GeeksforGeeks", "h1": ["Python | Find missing and additional values in two lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Approach using numpy:", "note: install numpy module using command “pip install numpy”", "Python3", "What kind of Experience do you want to share?"], "strong": ["Algorithm:", "Output:", "Time complexity:", "Auxiliary Space:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-find-missing-additional-values-two-lists/?ref=ml_lbp"},
{"title": "Python program to find the sum of all items in a dictionary - GeeksforGeeks", "h1": ["Python program to find the sum of all items in a dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Method #1: Using Inbuilt sum() Function", "Output:", "Method #2: Using For loop to iterate through values using values() function", "Output:", "Method #3: Using", " ", "for loop to iterate over each value in a dictionary", "Output:", "Method #4: Using values() and sum() function", " dictionary.sum() method", "Step by step approach : ", "Output:", "Method #5: ", "Using the lambda function", "Output:", "Method #6: Using a generator expression and the built-in sum function", "Output", "Time complexity: ", "Auxiliary space: ", "Method #7: Using the reduce() function ", "functools", "reduce()", "sum_dict_values", " reduce()", "Output", "Time complexity: ", "Auxiliary space:", "Method #8: Using numpy:", "Algorithm:", "Output:", "Time complexity:", "Space complexity:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-find-the-sum-of-all-items-in-a-dictionary/"},
{"title": "Python | Count of common elements in the lists - GeeksforGeeks", "h1": ["Python | Count of common elements in the lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using sum() + zip()", "Output : ", "Time complexity: ", "Auxiliary space: ", "Method #2 : Using sum() + map() + eq", "Output : ", "Time complexity: ", "Auxiliary space: ", "Method #3: Using set() + len() ", "Output", " Method#4: Using set intersection", "Algorithm:", "Output", "Time complexity: ", "Auxiliary space: ", "Method #5: Using dictionary", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-count-of-common-elements-in-the-lists/"},
{"title": "Python program to capitalize the first and last character of each word in a string - GeeksforGeeks", "h1": ["Python program to capitalize the first and last character of each word in a string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input:", "Output:", "Input:", "Output:", "Approach:1", "Output", "Time Complexity: ", "Auxiliary Space:", "Approach: 2: Using slicing and upper(),split() methods", "Output", "Time Complexity: ", "Auxiliary Space: ", "Output", "Time Complexity:", "Auxiliary Space: ", "Coding for Everyone ", "DSA to Development: A Complete Guide ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-program-to-capitalize-the-first-and-last-character-of-each-word-in-a-string/"},
{"title": "Python For Loops - GeeksforGeeks", "h1": ["Python For Loops"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "For Loops in Python", "Flowchart of for loop", "Examples of Python For Loop", "Python", "Python", "Python", "Python", "Python", "Python", "Python", "Loop Control Statements", "Python", "Python", "Python", "Python", "Python", "Python for-loops Exercise Questions", "Python", "Python", "What kind of Experience do you want to share?"], "strong": ["“for” loop", "Note: ", "Output :", "Output:", "Output:", "Output :", "Output :", "Output :", "Output :", "Output:", "Output:", "Output:", "start:", "stop:", "step:", "Output:", "Output:", "Python for-loops Exercise Questions", "Q1. ", "Output", "Q2. ", "Output", "Master Java Programming - Complete Beginner to Advanced ", "Complete Machine Learning & Data Science Program ", "Master C++ Programming - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-for-loops/?ref=ml_lbp"},
{"title": "Python | Sort list of dates given as strings - GeeksforGeeks", "h1": ["Python | Sort list of dates given as strings"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input : ", "Output :", "Approach:", "Syntax:", "%d", "%b", "%Y", "Output:", "Using sorted():", "Output", "Data Science Training Program ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-sort-list-of-dates-given-as-strings/?ref=ml_lbp"},
{"title": "Python Program to Swap Two Variables - GeeksforGeeks", "h1": ["Python Program to Swap Two Variables"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method 1:", "Output", "Method 2:", "Output", "Method 3:", "Output", "Method 4:", "Using addition and subtraction operator :", "Output", "Using multiplication and division operator :", "Output", "Method 5: ", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Master Java Programming - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-program-to-swap-two-variables/"},
{"title": "Python | Permutation of a given string using inbuilt function - GeeksforGeeks", "h1": ["Python | Permutation of a given string using inbuilt function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output:", "Permutations of a given string with repeating characters", "Output:", "Time Complexity:", "Auxiliary Space:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-permutation-given-string-using-inbuilt-function/?ref=previous_article"},
{"title": "Python | Automating Happy Birthday post on Facebook using Selenium - GeeksforGeeks", "h1": ["Python | Automating Happy Birthday post on Facebook using Selenium"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["Installation:", "Below are the steps:", "Data Science Training Program ", "Mastering System Design: From Low-Level to High-Level Solutions ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-automating-happy-birthday-post-on-facebook-using-selenium/?ref=lbp"},
{"title": "Python Program to check if a matrix is symmetric - GeeksforGeeks", "h1": ["Python Program to check if a matrix is symmetric"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "Python", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["symmetric matrix", "The symmetric matrix", "Input ", "Output", "Input ", "Output ", "Method 1:", "Simple solution", "Output", "Time Complexity", "Auxiliary Space : ", "Method 2:", "Efficient solution", "Output", "Time Complexity :", "Auxiliary Space ", "Method 3: Using List Comprehension", "Output", "Time Complexity", "Auxiliary Space", "Method 4:Using numpy.array() and numpy.transpose() :", "Algorithm:", "Time complexity:", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "DSA for Interview Preparation "], "link": "https://www.geeksforgeeks.org/python-program-for-program-to-check-if-a-matrix-is-symmetric/"},
{"title": "Python | Maximum sum of elements of list in a list of lists - GeeksforGeeks", "h1": ["Python | Maximum sum of elements of list in a list of lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "Python", "Python", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method 1 : Traversal of list in lists", "max function", "Output", "Time Complexity:", "Auxiliary Space:", "Method 2 : Traversal of list", "Output", "Time Complexity:", "Auxiliary Space: ", "Method 3 : Sum and Max function", "sum(max(list1, key=sum))", "key=sum", "max(list1, key=sum)", "sum(max(list1, key=sum))", "Output", "Time Complexity:", "Auxiliary Space:", "Method 4 : Using sum() and sort() methods", "Output", "Time Complexity : O(NlogN)", "Auxiliary Space : O(N)", "Method 5 : Using reduce()", "Output", "Time complexity: O(n*m) where n is the number of lists and m is the maximum size of the list.", "Space complexity: O(1)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-maximum-sum-elements-list-list-lists/?ref=ml_lbp"},
{"title": "Python | Number of values greater than K in list - GeeksforGeeks", "h1": ["Python | Number of values greater than K in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method 1 : Naive method", "Output :", "Time Complexity: ", "Auxiliary Space: ", "Method 2 : Using list comprehension", "Output :", "Time Complexity:", "Auxiliary Space: ", "Method 3: Using sum()", "Output :", "Time Complexity", "Auxiliary Space:", "Method 4: Using functools.reduce()", "Output :", "Time Complexity:", "Auxiliary Space:", "Method 5 : Using bisect() + sort()", "Output :", "Time Complexity: ", "Auxiliary Space: ", "Method #6: Using filter(),list(),len() and lambda functions", "Output", "Time Complexity:", "Auxiliary Space:", "Method #7: Using remove() function", "Output", "Method #8: Using  numpy():", "Output:", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-number-of-values-greater-than-k-in-list/?ref=ml_lbp"},
{"title": "Python | Check if string is a valid identifier - GeeksforGeeks", "h1": ["Python | Check if string is a valid identifier"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["identifier", "re.search() :", "Output", "Using the isidentifier method:", "Output", "Time complexity: O", "Auxiliary Space:  ", "Method #3: Using the keyword module", "Step-by-Step Algorithm : ", "Output", "Complexity Analysis : ", "Time Complexity: O(1), ", "Auxiliary Spacey: O(1), ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-check-if-string-is-a-valid-identifier/?ref=previous_article"},
{"title": "Python | Remove consecutive duplicates from list - GeeksforGeeks", "h1": ["Python | Remove consecutive duplicates from list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using groupby() + list comprehension", "Output:", "Time complexity:", "Auxiliary", "space: ", "Method #2 : Using zip_longest() + list comprehension", "Output:", "Time complexity:", "Auxiliary space complexity", "Method #3 : Using iteration A", "Output", "Time complexity:", "Auxiliary", "space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-remove-consecutive-duplicates-from-list/?ref=ml_lbp"},
{"title": "Python | How to sort a list of strings - GeeksforGeeks", "h1": ["Python | How to sort a list of strings"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example #1:", "Output:", "Example #2:", "Output:", "Example #3:", "Output:", "Example #4:", "Output:", "Example #5:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-how-to-sort-a-list-of-strings/"},
{"title": "Python | Printing list vertically - GeeksforGeeks", "h1": ["Python | Printing list vertically"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using Naive Method", "Output :", "Method #2 : Using zip()", "Output :", "Method #3 : Using a list comprehension:", "Output", "Method #4 : Using Numpy", "Output:", "Time complexity: O(n*m)", "Auxiliary Space: O(n*m)", "Method#5: Using Pandas", "Output", "Time complexity: O(n*m)", "Auxiliary Space: O(n*m)", "Method#6: Using reduce():", "Algorithm:", "Output", "Time complexity:", "Space complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-printing-list-vertically/?ref=ml_lbp"},
{"title": "Python | Get unique values from a list - GeeksforGeeks", "h1": ["Python | Get unique values from a list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Get unique values from a list", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input : [", "Output :", "Explaination: ", " by Traversal of the List", "Output", "Time Complexity:", "Auxiliary Space: ", " Using Set Method", "Output", "Time complexity: ", "Auxiliary Space: ", "Get Unique Values From a List in Python Using reduce() function", "Output", "Output", "Time Complexity:O(N)", "Auxiliary Space: O(N)", "Get Unique Values From a List in Python Using pandas module", "Output:", "Time Complexity:O(N)", "Auxiliary Space: O(N)", " Using numpy.unique", "x=numpy.array(list)", "numpy.unique(x)", "numpy.unique()", "Output: ", "Time complexity: ", "Auxiliary space: ", "Get Unique Values From a List in Python Using collections.Counter()", "“*” ", "Output", "Time Complexity: O(n)", "Auxiliary Space : O(n)", "Output", "Time Complexity – O(n)", "Space Complexity – O(n)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-get-unique-values-list/?ref=ml_lbp"},
{"title": "Python SQLite - DROP Table - GeeksforGeeks", "h1": ["Python SQLite – DROP Table"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "SQLite in Python - Getting Started", "SQLite Queries", "SQLite Clause", "SQLite Working with Data", "Working with Images", "Python SQLite - Exercise", "Python SQLite Additional", "SQLite in Python - Getting Started", "SQLite Queries", "SQLite Clause", "SQLite Working with Data", "Working with Images", "Python SQLite - Exercise", "Python SQLite Additional", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["DROP", "Syntax: ", "Output:", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sqlite-drop-table/?ref=previous_article"},
{"title": "Python | Matching elements count - GeeksforGeeks", "h1": ["Python | Matching elements count"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension + index() + len()", "Output", "Method #2 : Using enumerate() + len() + list comprehension", "Output", "Method #3:Using Counter() function", "Output", "Time Complexity: O(N)", "Auxiliary Space: O(N)", "Method #4: Using set intersection", "Output", "Time Complexity: O(N)", "Auxiliary Space: O(N)", "Method #5: Using a dictionary and a loop", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-matching-elements-count/"},
{"title": "Python String index() Method - GeeksforGeeks", "h1": ["Python String index() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", " Python String Index() Method Syntax", "Python String Index() Method Example", "Python3", "Python3", "Python3", "Python3", "Python3", "Python", "Practical Application", "Python", "What kind of Experience do you want to share?"], "strong": ["String index()", "Syntax:  ", "Parameters: ", "substring:", "start (default : 0) :", "end (default: length of string):", "Return:  ", "Exception:  ", "Output", "and", "Output", "Note: ", "Output", "Output", "Output", "ValueError: ", "Output", "suffix or prefix length after or before the target word", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-string-index-method/?ref=ml_lbp"},
{"title": "Python Program for Markov matrix - GeeksforGeeks", "h1": ["Python Program for Markov matrix"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Markov Matrix: ", "Examples:", "Approach: ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-program-for-markov-matrix/?ref=ml_lbp"},
{"title": "Python | Ways to sort list of strings in case-insensitive manner - GeeksforGeeks", "h1": ["Python | Ways to sort list of strings in case-insensitive manner"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using casefold()", "Output", "Time Complexity", "O(nlogn)", "Space Complexity: O(n)", "Method #2: Using lower()", "Output", "Time Complexity:", "Space Complexity: ", "Approach:", "Example:", "Output", "Time Complexity: O(n log n)", "Auxiliary Space: O(1)", "Method #4:", "Output", "Time complexity:", "Auxiliary space:", "Method #5: Comparing each element and placing at their correct position.", "Output", "Time complexity: O(n * n) ", "Auxiliary space: O(n)", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-ways-to-sort-list-of-strings-in-case-insensitive-manner/"},
{"title": "Python | Consecutive duplicates all elements deletion in list - GeeksforGeeks", "h1": ["Python | Consecutive duplicates all elements deletion in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method 1: Using list comprehension + groupby() + sum()", "Example:", "Output : ", "Time Complexity: O(n*n)", "Auxiliary Space: O(n),", "Method 2: Using for loop", "Output", "Time complexity: O(n)", "Auxiliary space: O(n) ", "METHOD 3:Using re method", "APPROACH:", "ALGORITHM:", "Output", "Time complexity:", "Space complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-consecutive-duplicates-all-elements-deletion-in-list/"},
{"title": "Python | Binary list to integer - GeeksforGeeks", "h1": ["Python | Binary list to integer"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using join() + list comprehension", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #2: Using bit shift + | operator", "Output", "Time complexity:", "Auxiliary Space:", "Method #3: Using for loop, without any built in methods", "Output", "Time complexity: ", "Auxiliary space complexity:", "Method #4: Using reduce()", "Output", "Time complexity:", "Auxiliary space", "Method #5 : Using math.pow() and for loop", "Output", "Time Complexity : O(n)", "Auxiliary Space : O(n)", "Method #6: Using the built-in function int() and join()", "Output", "Method#7 Using the sum() function with a generator expression", "Output", "Time complexity:", "Auxiliary space complexity:", "Method#8:Using the struct module and the pack() function", "step-by-step algorithm for implementing the approach using the struct module and the pack() function to convert a binary list to an integer:", "Output", "Time complexity:", "Auxiliary space complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-binary-list-to-integer/?ref=ml_lbp"},
{"title": "Python Program to Interchange elements of first and last rows in matrix - GeeksforGeeks", "h1": ["Python Program to Interchange elements of first and last rows in matrix"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples :", "Method 1:", "Output", "Time Complexity", "Auxiliary Space", "Output", "Time Complexity: ", "Auxiliary Space:", "Method 3 : Using pop(),insert() and append() methods", "Output", "Method 4: Using XOR operation", "Output", "Time complexity: ", "Auxiliary space:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-program-to-interchange-elements-of-first-and-last-rows-in-matrix/?ref=ml_lbp"},
{"title": "Python | Intersection of two nested list - GeeksforGeeks", "h1": ["Python | Intersection of two nested list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method 1: Naive Method", "Output :", "Time Complexity:", "Auxiliary Space:", "Method 2: Using list comprehension", "Time Complexity:", "Auxiliary Space:", "Method 3: Using set() + map() and &", "Output :", "Time Complexity:", "Auxiliary Space:", "Method 4: Using filter() and lambda function", "Output", "Time Complexity: ", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-intersection-of-two-nested-list/"},
{"title": "Python Program to Check horizontal and vertical symmetry in binary matrix - GeeksforGeeks", "h1": ["Python Program to Check horizontal and vertical symmetry in binary matrix"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["N", "M", "Examples:", "Output", "Time Complexity: ", "Auxiliary Space", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "DSA for Interview Preparation "], "link": "https://www.geeksforgeeks.org/python-program-to-check-horizontal-and-vertical-symmetry-in-binary-matrix/?ref=ml_lbp"},
{"title": "Python - Sort by Rear Character in Strings List - GeeksforGeeks", "h1": ["Python – Sort by Rear Character in Strings List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using sort()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #2 : Using ", "sorted()", " + ", "lambda", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method#3: Using Recursive method.", "Output", "Time Complexity: O(n log n)", "Auxiliary Space: O(n)", "Method #4: Using map(), list(), and lambda", "Output", "Time Complexity: O(nlogn)", "Auxiliary Space: O(n)", "Method #5: Using a Dictionary and List Comprehension", "Output", "Time Complexity: O(n log n)", "Auxiliary Space: O(n)", "Method #6: Using a custom comparator function", "Output", "Time Complexity: O(n log n)", "Auxiliary Space: O(n)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-sort-by-rear-character-in-strings-list/"},
{"title": "Python program to convert camel case string to snake case - GeeksforGeeks", "h1": ["Python program to convert camel case string to snake case"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Method #1 : ", "Output", "Time complexity: ", "Auxiliary Space: ", "Method #2 : ", "Output", "Method #3 : ", "Output", "Method #4 : ", "Output", "Method #5 : Using isupper(),lower() and slicing", "Output", "Method #6 : Using recursion", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-to-convert-camel-case-string-to-snake-case/"},
{"title": "Python Program to Print matrix in snake pattern - GeeksforGeeks", "h1": ["Python Program to Print matrix in snake pattern"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Program to Print matrix in snake pattern", "Python3", "Reversing Alternate rows Using Slicing", "Python3", "What kind of Experience do you want to share?"], "strong": ["n x n", "Examples:", "PRACTICE", "Output", "Time complexity: O(n^m)", "Auxiliary space : O(1)", "Output", "Time Complexity: O(N x M), ", "Auxiliary Space: O(1)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "DSA for Interview Preparation "], "link": "https://www.geeksforgeeks.org/python-program-to-print-matrix-in-snake-pattern/"},
{"title": "Python | Check if two lists have at-least one element common - GeeksforGeeks", "h1": ["Python | Check if two lists have at-least one element common"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "Python", "Python", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Method 1: Traversal of List", "Output:", "Time complexity: ", "Auxiliary space:", "Method 2 : Using Set and Property", "Output:", "Time complexity: ", "Auxiliary space: ", "Method 3 : Using Set Intersection", "Output:", "Time complexity: ", "Auxiliary space: ", "Output", "Time complexity: ", "Auxiliary space: ", "Method #5 : Using operator.countOf() method", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 4: Using the any() function and the list comprehension method.", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-check-two-lists-least-one-element-common/"},
{"title": "Python | Simple GUI calculator using Tkinter - GeeksforGeeks", "h1": ["Python | Simple GUI calculator using Tkinter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output :", "Code Explanation: ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-simple-gui-calculator-using-tkinter/?ref=lbp"},
{"title": "Python | Count occurrences of an element in a list - GeeksforGeeks", "h1": ["Python | Count occurrences of an element in a list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Count Occurrences of Item in Python List", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples: ", "Input:", "Output:", "Explanation: ", "Input:", "Output:", "Explanation:", "Python Count occurrences using a Loop in Python", "Output", "Output", "Python Count using Enumerate Function", "Output", "Count occurrences of an element using count()", "Output", "Python Count occurrences of an element in a list using Counter()", "Output", "sing", "Output", "Output", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-count-occurrences-element-list/"},
{"title": "Python Seaborn - Catplot - GeeksforGeeks", "h1": ["Python Seaborn – Catplot"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Styling Plots", "Multiple Plots", "Scatter Plot", "Line Plot", "Bar Plot", "Count Plot", "Box Plot", "Violin Plot", "Strip Plot", "Swarm Plot", "Factor Plot", "Histogram", "Pairplot", "KDE Plot", "Heatmap", "Catplot", "Introduction", "Styling Plots", "Multiple Plots", "Scatter Plot", "Line Plot", "Bar Plot", "Count Plot", "Box Plot", "Violin Plot", "Strip Plot", "Swarm Plot", "Factor Plot", "Histogram", "Pairplot", "KDE Plot", "Heatmap", "Catplot", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax: ", "Parameters", "x, y, hue: ", "data: ", "row, col: ", "kind: ", "color:", "palette: ", "kwargs: ", "Examples:", "Output:", "Output:", "Output:", "Output:", "Output:", "Output:", "Output:", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-seaborn-catplot/"},
{"title": "Python MongoDB - find_one Query - GeeksforGeeks", "h1": ["Python MongoDB – find_one Query"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python MongoDB - Introduction", "Python MongoDB - Getting Started", "Python MongoDB - Basic", "Python MongoDB - Method", "Python MongoDB Queries", "Working with Collections and documents in MongoDB", "Indexing in MongoDB", "Conversion between MongoDB data and Structured data", "Python MongoDB - Exercise", "Python MongoDB - Introduction", "Python MongoDB - Getting Started", "Python MongoDB - Basic", "Python MongoDB - Method", "Python MongoDB Queries", "Working with Collections and documents in MongoDB", "Indexing in MongoDB", "Conversion between MongoDB data and Structured data", "Python MongoDB - Exercise", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["find_one()", "Prerequisites: ", "Importing PyMongo Module: ", "Creating a Connection: ", "Accessing the Database: ", "Accessing the Collection:", "Finding in the collection: ", "Syntax:", "Example 1:", "Sample Database:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-mongodb-find_one-query/?ref=lbp"},
{"title": "Python MongoDB - Sort - GeeksforGeeks", "h1": ["Python MongoDB – Sort"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python MongoDB - Introduction", "Python MongoDB - Getting Started", "Python MongoDB - Basic", "Python MongoDB - Method", "Python MongoDB Queries", "Working with Collections and documents in MongoDB", "Indexing in MongoDB", "Conversion between MongoDB data and Structured data", "Python MongoDB - Exercise", "Python MongoDB - Introduction", "Python MongoDB - Getting Started", "Python MongoDB - Basic", "Python MongoDB - Method", "Python MongoDB Queries", "Working with Collections and documents in MongoDB", "Indexing in MongoDB", "Conversion between MongoDB data and Structured data", "Python MongoDB - Exercise", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["non-relational", "Note:", "Syntax:", "sort(key_or_list, direction)", "key_or_list:", "direction (optional)", "Note:", "Example 1:", "Output :", "Example 2:", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-mongodb-sort/?ref=lbp"},
{"title": "Python MongoDB - Update_many Query - GeeksforGeeks", "h1": ["Python MongoDB – Update_many Query"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python MongoDB - Introduction", "Python MongoDB - Getting Started", "Python MongoDB - Basic", "Python MongoDB - Method", "Python MongoDB Queries", "Working with Collections and documents in MongoDB", "Indexing in MongoDB", "Conversion between MongoDB data and Structured data", "Python MongoDB - Exercise", "Python MongoDB - Introduction", "Python MongoDB - Getting Started", "Python MongoDB - Basic", "Python MongoDB - Method", "Python MongoDB Queries", "Working with Collections and documents in MongoDB", "Indexing in MongoDB", "Conversion between MongoDB data and Structured data", "Python MongoDB - Exercise", "Update_many()", "Python3", "Python", "What kind of Experience do you want to share?"], "strong": ["MongoDB", "PyMongo", "Syntax:", "<boolean>", "<document>", "<document>", "document", "Update Operators in MongoDB", "Setting Values:", "Numeric Operators:", "Miscellaneous Operators:", "Sample Database:", "Some use cases we are going to see in this article where updating many records can be useful: ", "Example 1:", "Database After Query:", "Example 2: ", "Database After query: ", "Data Structures & Algorithms in Python - Self Paced ", "GATE Computer Science & Information Technology 2025 ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-mongodb-update_many-query/"},
{"title": "Python - Compound Interest GUI Calculator using Tkinter - GeeksforGeeks", "h1": ["Python – Compound Interest GUI Calculator using Tkinter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisites :", "Below is the implementation :", "Output : ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "DevOps Engineering - Planning to Production "], "link": "https://www.geeksforgeeks.org/python-compound-interest-gui-calculator-using-tkinter/?ref=next_article"},
{"title": "Python MongoDB - find_one_and_update Query - GeeksforGeeks", "h1": ["Python MongoDB – find_one_and_update Query"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python MongoDB - Introduction", "Python MongoDB - Getting Started", "Python MongoDB - Basic", "Python MongoDB - Method", "Python MongoDB Queries", "Working with Collections and documents in MongoDB", "Indexing in MongoDB", "Conversion between MongoDB data and Structured data", "Python MongoDB - Exercise", "Python MongoDB - Introduction", "Python MongoDB - Getting Started", "Python MongoDB - Basic", "Python MongoDB - Method", "Python MongoDB Queries", "Working with Collections and documents in MongoDB", "Indexing in MongoDB", "Conversion between MongoDB data and Structured data", "Python MongoDB - Exercise", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Parameters:", "Example 1:", "Sample Database:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-mongodb-find_one_and_update-query/"},
{"title": "Python program to print all odd numbers in a range - GeeksforGeeks", "h1": ["Python program to print all odd numbers in a range"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input:", "Output:", "Input:", "Output:", "Example #1:", "Output", "Time Complexity: ", "Auxiliary Space:", "Example #2:", "Output:", "Time Complexity: ", "Auxiliary Space:", "Example #3:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Example #4:", "Time Complexity: ", "Auxiliary Space: ", "Output", "Time Complexity:", "Auxiliary Space:", "Output", "Time Complexity:", "Auxiliary Space:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Output", "Time Complexity:", "Auxiliary Space: ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method: Using filter method:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method: Using bitwise & operator  ", "Output", "Time Complexity: O(n) ", "Auxiliary Space: O(1), As constant extra space is used.", "Method: Using bitwise | operator  ", "Output", "Time Complexity:", "Auxiliary Space:", "Method : Using numpy module:", "Algorithm:", "Output:", "The time complexity :O(N), ", "The auxiliary space :O(N),", "Approach:", "Output", "Time Complexity:", "Auxiliary Space:", "Approach: ", "Output:", "Time Complexity:", "Auxiliary Space: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-print-all-odd-numbers-in-a-range/?ref=ml_lbp"},
{"title": "Python | Arithmetic operations in excel file using openpyxl - GeeksforGeeks", "h1": ["Python | Arithmetic operations in excel file using openpyxl"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisite:", "Openpyxl ", "=SUM(cell1:cell2) :", "Output: ", "=PRODUCT(cell1:cell2) :", "Output: ", "=AVERAGE(cell1:cell2) :", "Output: ", "=QUOTIENT(num1, num2) :", "Output: ", "=MOD(num1, num2) :", "Output: ", "=COUNT(cell1:cell2) :", "Output: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-arithmetic-operations-in-excel-file-using-openpyxl/"},
{"title": "Python | Ways to remove numeric digits from given string - GeeksforGeeks", "h1": ["Python | Ways to remove numeric digits from given string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using join and isdigit()", "Output", "Time Complexity:", "Auxiliary Space: ", "Method #2: Using translate and digits", "Output", "Time Complexity:", "Auxiliary", "Space: ", "Method #3: Using filter and lambda", "Output", "Time Complexity:", "Auxiliary Space:", "Method#4 Using join() and isalpha() ", "Output", "Time Complexity:", "Auxiliary Space:", "Method#5: Using loop and in ", "Output", "Method #6: Using ord() function", "Output", "Method #7: Using re", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #8: Using replace() method", "Output", "Time Complexity: ", "Auxiliary Space:", "Method #9 : Using re.match()", "Approach", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-ways-to-remove-numeric-digits-from-given-string/?ref=ml_lbp"},
{"title": "Python program to print all positive numbers in a range - GeeksforGeeks", "h1": ["Python program to print all positive numbers in a range"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input:", "Output:", "Input:", "Output:", "Example #1: ", "Output:", "Time Complexity:", "Auxiliary Space:", "Example #2: ", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Output", "Time Complexity: ", "Auxiliary Space:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method: Using recursion", "Output", "Time Complexity", "Auxiliary Space", "Method : Using filter() function:", "So, the overall approach is to use the range() function to generate a range of integers, filter out the negative integers using the filter() function with a lambda function, and convert the resulting iterator to a list using the list() function.", "Output", "Time Complexity: O(N) ", "Space Complexity: O(N) ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-program-to-print-all-positive-numbers-in-a-range/?ref=ml_lbp"},
{"title": "Python program to count Even and Odd numbers in a List - GeeksforGeeks", "h1": ["Python program to count Even and Odd numbers in a List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python", "note: install numpy module using command “pip install numpy”", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input: ", "Output: ", "Input: ", "Output: ", "Example 1:", "Output:", "Time Complexity: ", "Auxiliary Space:", "Example 2:", "Output:", "Time Complexity: ", "Auxiliary Space:", "Example 3:", "Output:", "Time Complexity: O(n)", "Space Complexity: O(1)", "Example 4:", "Output:", "Time Complexity: ", "Auxiliary Space:", "Example 5: ", "Output", "Time Complexity: ", "Auxiliary Space:", "Example 6: ", "Output", "Time Complexity: ", "Auxiliary Space:", "Example 7: ", "Output", "Time Complexity: ", "Auxiliary Space:", "Example 8", "Output", "Time Complexity: ", "Auxiliary Space:", "Output", "Time Complexity: ", "Auxiliary Space:", "Output:", "Time Complexity: ", "Auxiliary Space:", "Method: Using Numpy.where() function : ", "Algorithm:", "Output:", "Method: Using ", "Sum", " and ", "len ", "function  ", "Approach: ", "Output:", "Time Complexity: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Master Java Programming - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-program-to-count-even-and-odd-numbers-in-a-list/?ref=ml_lbp"},
{"title": "Convert string to DateTime and vice-versa in Python - GeeksforGeeks", "h1": ["Convert string to DateTime and vice-versa in Python"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "How to Convert String to DateTime?", "Python3", "Python3", "How to Convert Datetime to String?", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Strings to Datetime ", "How to Convert String to DateTime?", "Input:", "Output:", "Explanation:", "1. Convert String to Datetime using Datetime.Strptime()", "datetime ", "string of Datetime", "Example:", "string to a datetime ", "Output:", "2. Convert String to Datetime Using", "Dateutil ", "Example:", "string to datetime ", "Output:", "Read More: ", "Create Python Datetime from string", "How to Convert Datetime to String?", "Input:", "Output:", "Explanation: ", "sing Time.strftime()", "datetime ", "datetime to string ", "Example:", "converts", "Datetime to String", "Output:", "Time Complexity: ", "Auxiliary Space:", "Learn More:", " using Datetime", "convert datetime to String", "Example: ", "Output:", "Time Complexity: ", "Auxiliary Space:", "Also Read:", "Converting string ‘yyyy-mm-dd’ into DateTime in Python", "How to convert datetime to date in Python", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-convert-string-to-datetime-and-vice-versa/?ref=ml_lbp"},
{"title": "Python program to check if a string has at least one letter and one number - GeeksforGeeks", "h1": ["Python program to check if a string has at least one letter and one number"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input: ", "Output: ", "Input:", "Output:", "Approach: ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Approach: Without using builtin methods", "Output", "Time Complexity: ", "Auxiliary Space: ", "Approach : Using operator.countOf() method", "Output", "Time Complexity: O(N)", "Auxiliary Space : O(1)", "Approach : Using regular Expressions", "Output", "Time Complexity: O(N)", "Auxiliary Space : O(1)", "Approach: Using  set intersection: ", "Algorithm:", "Output", "Time Complexity:", "Space Complexity:", "Approach: Using lambda function ", "Output", "Time Complexity: ", "Space Complexity: ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-check-if-a-string-has-at-least-one-letter-and-one-number/?ref=ml_lbp"},
{"title": "Python program to sort a list of tuples by second Item - GeeksforGeeks", "h1": ["Python program to sort a list of tuples by second Item"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "note: install numpy module using command “pip install numpy”", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Method #1:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #2:", "Output", "Time Complexity:", "Auxiliary Space:", "Method #3:", "Iterable :", "Key(optional) :", "Reverse(optional) :", "Output", "Time Complexity:", "Auxiliary Space:", "Method 4: Using the itemgetter function from the operator module", "Output", "Method 5: Using numpy.argsort() function", "note: install numpy module using command “pip install numpy”", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-sort-a-list-of-tuples-by-second-item/?ref=ml_lbp"},
{"title": "Python | List Initialization with alternate 0s and 1s - GeeksforGeeks", "h1": ["Python | List Initialization with alternate 0s and 1s"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using list comprehension", "Output", "Time complexity: ", "Auxiliary space:", "Method #2 : Using itertools.cycle() + itertools.islice()", "itertools", " 1’s (count_1)", "0’s (count_0)", "count_1", "1’s", "count_0", "0’s", " itertools.cycle()", "itertools.islice()", " itertools.islice() ", "list() ", " print() ", "Output", "Time complexity:", "Auxiliary space:", "Method #3 : Using *,extend() and slicing", "Output", "Time complexity: ", "Auxiliary space: ", "Method #4 : Using itertools.repeat():", "Output", "Time complexity: ", "Auxiliary", "space: ", "Method #5: Using a while loop", "test_list", "test_list", "size", "count_1″", "test_list", "count_0", "test_list", "size", "size", "test_list", "Output", "Time complexity: ", "Auxiliary space: ", "Method #6: Using numpy.tile():", "Algorithm:", "count_1", "count_0", "count_1 + count_0", "size", "Output:", "Time Complexity:", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-list-initialization-with-alternate-0s-and-1s/?ref=ml_lbp"},
{"title": "Python - Replace to K at ith Index in String - GeeksforGeeks", "h1": ["Python – Replace to K at ith Index in String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using string slicing", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #2 : Using join() + generator expression", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3 : Using replace() method", "Output", "Time Complexity: ", "Auxiliary Space:", "Method #4 : Using list() and join() methods", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #5: Using bytearray()", "Output", "Time complexity: O(n),", "Auxiliary space: O(n)", "Method #6: Using string concatenation and string indexing", "K", "i", "i", "K", "i+1", "Output", "Time complexity: ", "Auxiliary space: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-replace-to-k-at-ith-index-in-string/?ref=ml_lbp"},
{"title": "Python - Extract domain name from Email address - GeeksforGeeks", "h1": ["Python – Extract domain name from Email address"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using index() + slicing", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #2 : Using split()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3 : Using find() and slicing", "Output", "Time Complexity: ", "Auxiliary Space: ", "Output", "Method#5: Using itertools:", "Algorithm:", "Output", "Time Complexity:", "Space Complexity:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-extract-domain-name-from-email-address/?ref=ml_lbp"},
{"title": "Removing newline character from string in Python - GeeksforGeeks", "h1": ["Removing newline character from string in Python"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Remove Newline character from String in Python", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Remove Newline From String in Python:", "Using the Python ", "replace()", " function", "Using the Python ", "strip()", " function", "Using Python ", "splitlines()", " method", "Using the Python ", "re.sub()", " Function", "Use the replace function to Remove a Newline Character From the String in Python", "“\\n”", "Output :", "Use the strip() Function to Remove a Newline Character From the String in Python", "strip() method", "Output:", "Use the splitlines() method to Remove a Newline Character From the String in Python", "splitlines()", "Output:", "Use the re.sub() Function to Remove a Newline Character From the String in Python", "Output:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-removing-newline-character-from-string/?ref=ml_lbp"},
{"title": "Python | Binary list to integer - GeeksforGeeks", "h1": ["Python | Binary list to integer"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using join() + list comprehension", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #2: Using bit shift + | operator", "Output", "Time complexity:", "Auxiliary Space:", "Method #3: Using for loop, without any built in methods", "Output", "Time complexity: ", "Auxiliary space complexity:", "Method #4: Using reduce()", "Output", "Time complexity:", "Auxiliary space", "Method #5 : Using math.pow() and for loop", "Output", "Time Complexity : O(n)", "Auxiliary Space : O(n)", "Method #6: Using the built-in function int() and join()", "Output", "Method#7 Using the sum() function with a generator expression", "Output", "Time complexity:", "Auxiliary space complexity:", "Method#8:Using the struct module and the pack() function", "step-by-step algorithm for implementing the approach using the struct module and the pack() function to convert a binary list to an integer:", "Output", "Time complexity:", "Auxiliary space complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-binary-list-to-integer/"},
{"title": "Python | Printing String with double quotes - GeeksforGeeks", "h1": ["Python | Printing String with double quotes"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using backslash (“\\”)", "Output : ", "Time Complexity: O(1)", "Auxiliary Space: O(1)", "Method #2 : Using triple quotes", "Output : ", "Time Complexity: ", "Auxiliary Space: ", "Output", "Time Complexity:", "Auxiliary Space", "Approach#4:  Using reduce method:", "Algorithm:", "Output", "Time Complexity:  O(n), ", "Space Complexity:  O(n),", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-printing-string-with-double-quotes/?ref=ml_lbp"},
{"title": "Python | Ways to split strings using newline delimiter - GeeksforGeeks", "h1": ["Python | Ways to split strings using newline delimiter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using splitlines()", "splitlines()", "ini_str", " splitlines()", "(\\n) ", "res_list", "print() ", "Resultant prefix", "str()", "Output:", "Time complexity: ", "Auxiliary Space:", "Method #2: Using split() method", "Output:", "Time Complexity: O(n), where n is the length of the input string.", "Auxiliary Space: O(1)", "Method 3: Use the re module ", "Output", "Time complexity: ", "Auxiliary space: ", "Method 4: Using the re.findall() method with a regular expression", " re module", "ini_str", "Geeks\\nFor\\nGeeks\\n”", "print() ", "Initial String:", "ini_str", " re.findall()", " [^\\n]+ ", "res_list", "print() ", "Resultant list:", "res_list", "Output", "Time complexity: ", "Auxiliary space: ", "Method #5: Using the StringIO module and the csv.reader() function", "StringIO", "csv.reader() ", "StringIO ", " StringIO", " csv.reader() ", " csv.reader", "list() ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-ways-to-split-strings-using-newline-delimiter/?ref=ml_lbp"},
{"title": "Python - Get Nth word in given String - GeeksforGeeks", "h1": ["Python – Get Nth word in given String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loop", "Output : ", "Method #2 : Using split()", "Output : ", "Method #3 : Using re.findall()", "Output", "Method 4 : using the string slicing method.", "step-by-step approach ", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-get-nth-word-in-given-string/?ref=ml_lbp"},
{"title": "Python MongoDB - find_one_and_delete query - GeeksforGeeks", "h1": ["Python MongoDB – find_one_and_delete query"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python MongoDB - Introduction", "Python MongoDB - Getting Started", "Python MongoDB - Basic", "Python MongoDB - Method", "Python MongoDB Queries", "Working with Collections and documents in MongoDB", "Indexing in MongoDB", "Conversion between MongoDB data and Structured data", "Python MongoDB - Exercise", "Python MongoDB - Introduction", "Python MongoDB - Getting Started", "Python MongoDB - Basic", "Python MongoDB - Method", "Python MongoDB Queries", "Working with Collections and documents in MongoDB", "Indexing in MongoDB", "Conversion between MongoDB data and Structured data", "Python MongoDB - Exercise", "find_one_and_delete()", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["MongoDB", "find_one_and_delete()", "Syntax:", "Parameters:", "‘filter’", "‘projection’", "(optional):", "‘", "sort’", "(optional)", "‘session’", "(optional):", "‘**kwargs’ (optional):", "Example 1:", "Output :", "Example 2:", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-mongoddb-find_one_and_delete-query/?ref=previous_article"},
{"title": "Python - Test String in Character List and vice-versa - GeeksforGeeks", "h1": ["Python – Test String in Character List and vice-versa"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1: Using ", "in operator", " + ", "join()", " [ String in character list ]", "Output", "Method #2 : Using in operator + join() [ Character List in String ]", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 3 :  using the set() function and intersection() method", "Step-by-step approach:", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-test-string-in-character-list-and-vice-versa/"},
{"title": "Python - Convert Image to String and vice-versa - GeeksforGeeks", "h1": ["Python – Convert Image to String and vice-versa"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Convert Image To String", "Python3", "Convert String To Image", "Python3", "What kind of Experience do you want to share?"], "strong": ["Convert Image To String", "“", "Base64", "“", "rb", "image2.read()", "Image used:", "Output:", "b’", "print(my_string.decode(‘utf-8’))", "Convert String To Image", "Base64. Then", "rb", "R", "B", "ex:”myimage.png”", "wb ", "W", "B", ".close()", "Note:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-convert-image-to-string-and-vice-versa/"},
{"title": "Python - Morse Code Translator GUI using Tkinter - GeeksforGeeks", "h1": ["Python – Morse Code Translator GUI using Tkinter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisites :", "Below is the implementation : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-morse-code-translator-gui-using-tkinter/"},
{"title": "Python MongoDB - $group (aggregation) - GeeksforGeeks", "h1": ["Python MongoDB – $group (aggregation)"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python MongoDB - Introduction", "Python MongoDB - Getting Started", "Python MongoDB - Basic", "Python MongoDB - Method", "Python MongoDB Queries", "Working with Collections and documents in MongoDB", "Indexing in MongoDB", "Conversion between MongoDB data and Structured data", "Python MongoDB - Exercise", "Python MongoDB - Introduction", "Python MongoDB - Getting Started", "Python MongoDB - Basic", "Python MongoDB - Method", "Python MongoDB Queries", "Working with Collections and documents in MongoDB", "Indexing in MongoDB", "Conversion between MongoDB data and Structured data", "Python MongoDB - Exercise", "$group operation", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["$group ", "Aggregate Method", "$group", "$group", "_id-", "field (Optional) –", "Example 1:", "Output:", "$user", " ", "num_tutorial ", "$sum", "Example 2:", "Output:", "$title", "total ", "$sum", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-mongodb-group-aggregation/"},
{"title": "Python | Swap commas and dots in a String - GeeksforGeeks", "h1": ["Python | Swap commas and dots in a String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples: ", "Input : ", "Output : ", "Method 1: Using maketrans and translate()", "maketrans:", "translate:", "Output", "Method 2: Using replace()", "Output", "Method 3: Using sub() of RegEx ", "Output", "Approach 4: Using split and join", "Output", "Approach 5: Using simple for loop and join method.", "Steps- ", "Below is the implementation of above approach:", "Output", "Time Complexity : ", "Auxiliary Space : ", "Approach 6: Using reduce():", "Algorithm:", "Output", "Time Complexity: O(n), ", "Space Complexity: O(n), ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-swap-commas-dots-string/"},
{"title": "Python - All pair combinations of 2 tuples - GeeksforGeeks", "h1": ["Python – All pair combinations of 2 tuples"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Input", "Output", "Method #1 : Using list comprehension", "Output : ", "Time complexity: ", "Auxiliary space:", "Method #2 : Using chain() + product()", "Output : ", "Time complexity: ", "Auxiliary space: ", "Method #3 : Using itertools.product(): ", "Algorithm:", "Output", "Time complexity: O(nm)", "Auxiliary Space: O(nm)", "METHOD 4:Using nested loops", "APPROACH:", "ALGORITHM:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-all-pair-combinations-of-2-tuples/"},
{"title": "Python - Elements frequency in Tuple - GeeksforGeeks", "h1": ["Python – Elements frequency in Tuple"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1  Using defaultdict()", "defaultdict", "Output", "Time complexity: ", "Auxiliary space:", "Method #2 : Using Counter()", "Output", "Time complexity:", "Auxiliary space:", "Method #3 : Using count() method.", "Output", "Method #4 : Using operator.countOf() method.", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 5:dictionary and loop over the elements in the tuple to count their frequency. ", "Output", "Time complexity:", "Auxiliary space:", "Method 6: using the built-in function set()", "Output", "Time complexity: ", "Auxiliary space: ", "Method 7: Using reduce():", "Algorithm:", "Output", "Time Complexity:", "Auxiliary Space:", "Method 8: Using numpy:", "Output:", "Time complexity:", "Auxiliary Space:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-elements-frequency-in-tuple/"},
{"title": "Python - Compound Interest GUI Calculator using Tkinter - GeeksforGeeks", "h1": ["Python – Compound Interest GUI Calculator using Tkinter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisites :", "Below is the implementation :", "Output : ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "DevOps Engineering - Planning to Production "], "link": "https://www.geeksforgeeks.org/python-compound-interest-gui-calculator-using-tkinter/?ref=ml_lbp"},
{"title": "Python | Program to print duplicates from a list of integers - GeeksforGeeks", "h1": ["Python | Program to print duplicates from a list of integers"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Method 1: ", "Using the Brute Force approach", "Python3", "Method 2: Using a single for loop", "Python3", "Method 3:", " Using Counter() function from collection module", "Python3", "Method 4: Using count() method", "Python3", "Method 5: Using list comprehension method", "Python3", "Method 6: Using list-dictionary approach (without any inbuild count function)", "Python3", "Method 7: Using in, not in operators and count() method", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Method 1: ", "Output", "Time complexity: ", "Auxiliary space:", "Output", "Method 3:", "Output", "Time Complexity:", "Auxiliary Space:", "Output", "Output", "Output", "Output", "Output", "Time Complexity: ", "Auxiliary Space:", "Method 9: Using operator.countOf() method", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(1)", "Method 10 : Using operator.countOf(),in and not in operators", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method 11 : Using numpy:", "Algorithm:", "Time Complexity:", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-program-print-duplicates-list-integers/"},
{"title": "Python - Convert Lists of List to Dictionary - GeeksforGeeks", "h1": ["Python – Convert Lists of List to Dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Convert Lists of List to Dictionary in Python", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" Using Loop", "Output", "Time Complexity", "Auxiliary Space:", "Python ", "Using Dictionary Comprehension", "Output", "Time Complexity:", "Auxiliary Space:", "Output", "Time Complexity:", "Auxiliary Space:", " Using the zip() Function and a Loop", "Output", "Time Complexity:", "Auxiliary Space: ", "Convert Lists of List to Dictionary Using the reduce() Function", "Output", "Time Complexity: ", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-convert-lists-of-list-to-dictionary/?ref=leftbar-rightbar"},
{"title": "Python - Convert key-values list to flat dictionary - GeeksforGeeks", "h1": ["Python – Convert key-values list to flat dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Convert key-values list to flat dictionary using zip() + dict()", "Output : ", "Convert key-values list to flat dictionary ", "Output", "Convert key-values list to flat dictionary Using a dictionary comprehension", "Output", "Time complexity: ", "Auxiliary space: ", "Use a for loop to iterate over the keys and values and create a new dictionary by assigning each key-value pair to the new dictionary.", "Output", "Time complexity: ", "Auxiliary space: ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-convert-key-values-list-to-flat-dictionary/?ref=leftbar-rightbar"},
{"title": "Python | Binding function in Tkinter - GeeksforGeeks", "h1": ["Python | Binding function in Tkinter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["pip", "Python’s Functions", "Code #1:", "Output:", "Code #2:", "Output:", "Code #3:", "Output:", "Note:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-binding-function-in-tkinter/?ref=lbp"},
{"title": "Python | ToDo GUI Application using Tkinter - GeeksforGeeks", "h1": ["Python | ToDo GUI Application using Tkinter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisites :", "To create a tkinter :", "Below is the implementation : ", "Output: ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-todo-gui-application-using-tkinter/"},
{"title": "Python-projects Archives - GeeksforGeeks", "h1": ["Python-projects"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/tag/python-projects/"},
{"title": "Python program to find tuples which have all elements divisible by K from a list of tuples - GeeksforGeeks", "h1": ["Python program to find tuples which have all elements divisible by K from a list of tuples"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using list comprehension + all()", "Output", "Time Complexity:", "Auxiliary Space: ", "Method #2 : Using filter() + lambda + all()", "filter() + lambda", "all()", "test_list", "test_list", "K", "filter() ", "test_list", "K", "True", "K", "filter() ", "test_list", "res", "res", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3 : Using list comprehension + not any()", "Output", "Time Complexity: ", "Auxiliary Space:  ", "Method #4: Using for loops", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #5: Using Recursive method.", "Output", "Time Complexity: O(n*m), ", "Auxiliary Space: O(n)", "Method 6: Using the filter() function, without using lambda and all()", "is_multiple_of_K()", " filter()", "Output", "Time complexity:", "Auxiliary space:", "Method #7: Using numpy array and np.all()", "Output: ", "Time Complexity: ", "Auxiliary Space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-find-tuples-which-have-all-elements-divisible-by-k-from-a-list-of-tuples/"},
{"title": "Python Program for Binary Search (Recursive and Iterative) - GeeksforGeeks", "h1": ["Python Program for Binary Search (Recursive and Iterative)"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python Program for Binary Search Using Recursive", "Output", "Time Complexity", "Auxiliary Space", "Python Program for Binary Search Using Iterative", "Output", "Time Complexity", "Auxiliary Space", "Python Program for Binary Search Using the built-in bisect module", "Step by step approach:", "Output", "Time Complexity", "Auxiliary Space", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-for-binary-search/?ref=lbp"},
{"title": "Python Django Archives - GeeksforGeeks", "h1": ["Python Django"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "GATE Data Science and Artificial Intelligence 2025 "], "link": "https://www.geeksforgeeks.org/tag/python-django/"},
{"title": "Python - Sort String list by K character frequency - GeeksforGeeks", "h1": ["Python – Sort String list by K character frequency"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using sorted() + count() + lambda", "Output", "Method #2 : Using sort() + count() + lambda", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3 : Using operator.countOf() method", "Output", "Time Complexity: ", "Auxiliary Space:", "Method 4: Using heapq.nlargest() and count()", "Step-by-step approach:", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-sort-string-list-by-k-character-frequency/"},
{"title": "Python - Avoid Last occurrence of delimiter - GeeksforGeeks", "h1": ["Python – Avoid Last occurrence of delimiter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1: Using ", "String slicing", "Output", "Time complexity: ", "Auxiliary space:", "Method #2 : Using map() + join() + str()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3: Using str.join() with list comprehension", "Output", "Time complexity:", "Auxiliary space:", "Method #4: Using reduce() and lambda function:", "Step-by-Step Approach:", "Output", "Time Complexity:  ", "Space Complexity: ", "Method #5: Using str.rstrip() ", " rstrip() ", "Output", "Time complexity: ", "Auxiliary space: ", "Method 5: Using a loop and string concatenation", "test_list", "delim", "res", "test_list", "res", "test_list", "res", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-avoid-last-occurrence-of-delimitter/"},
{"title": "Python Program For Removing Duplicates From An Unsorted Linked List - GeeksforGeeks", "h1": ["Python Program For Removing Duplicates From An Unsorted Linked List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["PRACTICE", "METHOD 1 (Using two loops):", "Output:", "Time Complexity:", "Auxiliary Space:", "METHOD 2 (Use Sorting):", "Time Complexity:", "METHOD 3 (Use Hashing):", "Output: ", "Time Complexity:", "Auxiliary Space: O(n), ", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-for-removing-duplicates-from-an-unsorted-linked-list/"},
{"title": "Python - Segregate elements by delimiter - GeeksforGeeks", "h1": ["Python – Segregate elements by delimiter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using list comprehension + split()", "Output", "Time Complexity:", "Auxiliary Space: ", "Method #2 : Using map() + list + zip() + generator expression", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3 : Using index() method and slicing", "Output", "Time Complexity:", "Auxiliary Space:", "Method #4: Using slicing", "Output", "Time complexity:", "Auxiliary space:", "Method #5: Using a dictionary and a loop", "Output", "Time complexity: ", "Auxiliary space: ", "Method #6: Using a defaultdict", "Output", "Time complexity: ", "Auxiliary space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-segregate-elements-by-delimiter/"},
{"title": "Python - Binding and Listening with Sockets - GeeksforGeeks", "h1": ["Python – Binding and Listening with Sockets"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Binding and Listening with Sockets", "Python3", "What kind of Experience do you want to share?"], "strong": ["Socket programming", "Note:", "Example", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-binding-and-listening-with-sockets/"},
{"title": "Python | Sort list elements by frequency - GeeksforGeeks", "h1": ["Python | Sort list elements by frequency"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using collections.counter()", "Output:", "Method #2: Using iterables", "Output:", "Method #3: Using sorted", "Output:", "Time Complexity:", "Auxiliary Space: ", "Method #4: Using dictionary comprehension", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-sort-list-elements-by-frequency/"},
{"title": "Python - Simple Port Scanner with Sockets - GeeksforGeeks", "h1": ["Python – Simple Port Scanner with Sockets"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["To scan the ports, the following steps can be implemented:", " import socket ", "Let’s see some more functions from socket module that can be used to create simple port scanner ", " ", "newSocket = socket.socket(socket_family, socket_type)", " AF_INET for socket family of address version 4", " AF_INET6 for socket family of address version 6", " ", "SOCK_STREAM  for Socket type of TCP connections ", "SOCK_DGRAM for Socket type of UDP connections ", " socket.gethostname() ", " socket.gethostbyname(hostname)", " ", "socket.bind(self,address)", " ", "socket.close()", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-simple-port-scanner-with-sockets/"},
{"title": "Python | Sort tuple list by Nth element of tuple - GeeksforGeeks", "h1": ["Python | Sort tuple list by Nth element of tuple"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using sort() + lambda", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #2: Using sort() + itemgetter()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3:  using sorted and custom function", "Output", "Time complexity: ", "Auxiliary space: ", "Method #4:  using Bubble sort algorithm", "Output", "Time complexity : O(n^2)", "Auxiliary Space: O(1)", "Method 5: Using the heapq.nsmallest() function", "heapq.nsmallest() ", "nsmallest() ", "sorted_list", "Output", "Time complexity: ", "Auxiliary space:", "Method#6: Using Recursive method.", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-sort-tuple-list-by-nth-element-of-tuple/?ref=ml_lbp"},
{"title": "Python | Removing duplicates from tuple - GeeksforGeeks", "h1": ["Python | Removing duplicates from tuple"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using set() + tuple()", "Output", "Time complexity: ", "Auxiliary space: ", "Method #2 : Using OrderedDict() + fromkeys()", "Output", "Time complexity:", "Auxiliary space:", "Method #3: Using in, not in operators and tuple()", "Output", "Time complexity:", "Auxiliary space:", "Method#4: Using list comprehension", "Output", "Time complexity: O(n)", "Auxiliary Space: O(n)", "Method 5 : Using Counter() from collections module", "Output", "Time complexity: ", "Auxiliary space:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-removing-duplicates-from-tuple/?ref=ml_lbp"},
{"title": "Python | Count the sublists containing given element in a list - GeeksforGeeks", "h1": ["Python | Count the sublists containing given element in a list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Approach #1 : ", "Output:", "Approach #2 : ", "Output:", "Approach #3 : ", "Output:", "Approach #4 :  Using reduce()", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-count-the-sublists-containing-given-element-in-a-list/"},
{"title": "Python | True Record - GeeksforGeeks", "h1": ["Python | True Record"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using not + any() + map() + lambda", "Output : ", "Method #2: Using all()", "Output : ", "Method #3 : Using count() and len() methods", "Output", "Method #4 : Using * and tuple(),len() methods", "Output", "Method #5: Using set() and len() methods", "Output", "Method #6 : Using operator.countOf(),len() methods", "Output", "Method#7: Using the sum() function", "Step-by-step algorithm for implementing the approach ", "Output", "The time complexity", "The auxiliary space", "Method#8: Using numpy.all() function from numpy module: ", "Output:", "The time complexity : O(n)", "The auxiliary space : O(1),", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-true-record/?ref=ml_lbp"},
{"title": "Python - Stop & Wait Implementation using CRC - GeeksforGeeks", "h1": ["Python – Stop & Wait Implementation using CRC"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Sender side", "Receiver side", "At sender", "At receiver:", "At sender", "Error Generation ", "Python3", "Modulo two Division", "Python3", "Configuration Data", "Python3", "Client", "Python3", "Server", "Python3", "What kind of Experience do you want to share?"], "strong": ["Note: ", " Cyclic redundancy check", "Sender side", "Receiver side", "sender computes error detecting code using CRC", "data along with error detecting code to the receiver using socket", "At sender", "At receiver:", "OK", "NAK", "At sender", "Final outcome:", "Error Generation ", " i", "error_gen.py.", "Output:", "calc.py.", "Output:", "configuration.py.", "Constructor", "asciiToBin", "appendZero", "encode", "sendfile", "CLIENT.py.", "Constructor", "iszero", "isCurrupted", "decode", "log", "receive_file", "SERVER.py", "execute the server file before executing the", "client’s file. ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "GATE Computer Science & Information Technology 2025 "], "link": "https://www.geeksforgeeks.org/python-stop-wait-implementation-using-crc/?ref=ml_lbp"},
{"title": "Python - Construct dictionary Key-Value pairs separated by delimiter - GeeksforGeeks", "h1": ["Python – Construct dictionary Key-Value pairs separated by delimiter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using split() + loop", "delim", "delim", "“$”", "test_str", "split() ", ", ", "dicts", "res", "dicts", "split() ", "delim", "res", "res", "print() ", "Output", "Time complexity: ", "Auxiliary space: ", "Method #2 : Using dictionary comprehension + split()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 3: Using Regular Expressions", "Output", "Time complexity: ", "Auxiliary space: ", "Method #4: Using str.partition()", "str.partition() ", "Output", "Time complexity:", "Auxiliary space: ", "Method #5: Using zip() and list comprehension", "zip() ", "zip() ", "Output", "Time complexity: ", "Auxiliary space:", "Method #7: Using re.findall() and dict()", "step-by-step approach for the program:", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-construct-dictionary-key-value-pairs-separated-by-delimiter/"},
{"title": "Python | Whatsapp birthday bot - GeeksforGeeks", "h1": ["Python | Whatsapp birthday bot"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python Bindings for Selenium ( Browser Automation software )", "Chrome webdriver", "How the JSON file looks", "Code Explanation: ", "Master Java Programming - Complete Beginner to Advanced ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-whatsapp-birthday-bot/"},
{"title": "Python - Extract elements with Frequency greater than K - GeeksforGeeks", "h1": ["Python – Extract elements with Frequency greater than K"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using count() + loop", "Output", "Method #2 : Using list comprehension + Counter()", "Output", "Method #3: Using a dictionary", "Output", "Method #4: Using operator.countOf() method", "Output", "Time Complexity:O(N)", "Auxiliary Space:O(N)", "Method#5: using NumPy module", "Output:", "Time Complexity:O(N)", "Auxiliary Space:O(N)", "Method #6: Using filter() and lambda()", "Output", "Time Complexity:", "Auxiliary Space:", "Method #7: Using  defaultdict module from the collections library:", "Algorithm:", "Output", "Time Complexity: O(n), ", "Auxiliary Space: O(n), ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-extract-elements-with-frequency-greater-than-k/"},
{"title": "Python 3 | Program to print double sided stair-case pattern - GeeksforGeeks", "h1": ["Python 3 | Program to print double sided stair-case pattern"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input:", "Output:", "Note:", "Example1", "Output:", "Time Complexity: ", "Auxiliary Space:", "Example 2", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-3-program-print-double-sided-stair-case-pattern/?ref=lbp"},
{"title": "Python - Right and Left Shift characters in String - GeeksforGeeks", "h1": ["Python – Right and Left Shift characters in String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using String multiplication + string slicing", "Output : ", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method #2: Using % operator and string slicing", "Output : ", "Time Complexity: ", "Auxiliary Space: ", "Method #3: Using list slicing and join", "Algorithm:", "Output", "Approach 4: Using lambda function", "rotate ", " returns the rotated string.", "Output", "Time Complexity: ", "test_str", "Auxiliary Space: ", "Approach #5: Using List comprehension and string concatenation", "Steps:", "Output", "Time complexity: O(n)", "Auxiliary space: O(n)", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-right-and-left-shift-characters-in-string/?ref=leftbar-rightbar"},
{"title": "Python - Replace multiple words with K - GeeksforGeeks", "h1": ["Python – Replace multiple words with K"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using join() + split() + list comprehension", "Output : ", "Time complexity: ", "Auxiliary space:", "Method #2: Using regex + join()", "Output : ", "Time Complexity: ", "Auxiliary Space: ", "Method #3 : Using for loop+replace() methods", "Output", "Time Complexity: ", "Auxiliary Space:", "Approach 4: Using dictionary and re.sub()", "Output", "Approach #5: Using a lambda function with reduce() method.", "Step-by-step approach:", "Output", "Approach 6: Using heapq:", "Algorithm:", "Output", "Time complexity: O(n log n)", "Auxiliary Space: O(n) ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-replace-multiple-words-with-k/?ref=leftbar-rightbar"},
{"title": "Python - Flatten tuple of List to tuple - GeeksforGeeks", "h1": ["Python – Flatten tuple of List to tuple"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Input", "Output", "Method #1: Using sum() + tuple()", "Output", "Time complexity:", "Auxiliary space:", "Method #2 : Using tuple() + chain.from_iterable()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3: Using extend() and tuple() methods", "Output", "Time complexity:", "Auxiliary space: ", "Method #4: Using Nested loops", "test_tuple", "test_tuple", "res", "test_tuple", "res", "res", "res", "res", "Output", "Time Complexity: ", "Auxiliary Space:", "Method 5: Using list comprehension and extend()", "test_tuple", "res_list", "extend() ", "res_list", "tuple() ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 6: using the itertools.chain()", "itertools.chain() ", " tuple()", "*", "itertools.chain() ", "Output", "Time complexity: ", "Auxiliary space: ", "Method 7: Using Recursive method.", "Output", "Time complexity: ", "Space complexity: ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-flatten-tuple-of-list-to-tuple/"},
{"title": "Python program to find difference between current time and given time - GeeksforGeeks", "h1": ["Python program to find difference between current time and given time"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Input :", "Output :", "Approach:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-find-difference-between-current-time-and-given-time/?ref=lbp"},
{"title": "Python program to find the Strongest Neighbour - GeeksforGeeks", "h1": ["Python program to find the Strongest Neighbour"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input: ", "Output: ", "Input: ", "Output: ", "Approach:", "Output:", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-find-the-strongest-neighbour/"},
{"title": "Python program to Count Uppercase, Lowercase, special character and numeric values using Regex - GeeksforGeeks", "h1": ["Python program to Count Uppercase, Lowercase, special character and numeric values using Regex"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisites:", "Examples:", "Input : ", "Output :", "Example 1:", "Output:", "Time complexity :", "Space Complexity : ", "Example 2:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-count-uppercase-lowercase-special-character-and-numeric-values-using-regex/?ref=lbp"},
{"title": "Python Program to print all Possible Combinations from the three Digits - GeeksforGeeks", "h1": ["Python Program to print all Possible Combinations from the three Digits"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input:", "Output:", "Input: ", "Output:", "Method 1: ", "Example:", "Output:", "Method 2: ", "Example:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-print-all-possible-combinations-from-the-three-digits/"},
{"title": "Python - Append Dictionary Keys and Values ( In order ) in dictionary - GeeksforGeeks", "h1": ["Python – Append Dictionary Keys and Values ( In order ) in dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using list() + keys() + values()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #2 : Using chain() + keys() + values()", "Output", "Time complexity: ", "Auxiliary space: ", "Method #3 : Using  list() +keys() + values() + extend()", "Output", "Time complexity: ", "Auxiliary space:", "Method #4: Using zip() function and list comprehension", "Output", "Time complexity:", "Auxiliary space: ", "Method #5: Using sorted() function and list comprehension", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-append-dictionary-keys-and-values-in-order-in-dictionary/?ref=leftbar-rightbar"},
{"title": "Python - Itertools.starmap() - GeeksforGeeks", "h1": ["Python – Itertools.starmap()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "starmap() function", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["starmap()", "Note:", "Syntax :", "Output:", "Output:", "Output:", "What if we want to add different numbers to different elements of the list ?", "Output:", "Practical example of using starmap():", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-itertools-starmap/?ref=previous_article"},
{"title": "Python - Itertools.Permutations() - GeeksforGeeks", "h1": ["Python – Itertools.Permutations()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Itertools.permutation()", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Different types of iterators provided by this module are:", "Note:", "Syntax:", "Example 1:-", "Output :-", "Time Complexity:", "Auxiliary Space:", "Example 2:-", "Output:-", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-itertools-permutations/?ref=ml_lbp"},
{"title": "Python - Itertools.compress() - GeeksforGeeks", "h1": ["Python – Itertools.compress()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Compress()", "What kind of Experience do you want to share?"], "strong": ["Note:", "Compress():", "Syntax:", "Example 1 :", "Output:", "Example 2 : ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-itertools-compress/?ref=lbp"},
{"title": "Python - Itertools.chain() - GeeksforGeeks", "h1": ["Python – Itertools.chain()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "chain() function", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["chain()", "Note:", "Syntax :", "Example 1:", "Output:", "Example 2:", "Output:", "Example 3:", "Output:", "Example 4:", "Output:", "chain.from_iterable() function", "Example 5:", "Output:", "Example 6:", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-itertools-chain/?ref=lbp"},
{"title": "Python - Itertools.chain.from_iterable() - GeeksforGeeks", "h1": ["Python – Itertools.chain.from_iterable()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Chain.from_iterable() method", "What kind of Experience do you want to share?"], "strong": ["Note:", "Syntax :", "Example #1:", "Output :", "Example #2:", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-itertools-chain-from_iterable/?ref=lbp"},
{"title": "Python - Append Multitype Values in Dictionary - GeeksforGeeks", "h1": ["Python – Append Multitype Values in Dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Input", "Output", "Method 1: Using isinstance() + update() + extend()", "Output : ", "Time Complexity: O(n),", "Auxiliary Space: O(n)", "Method 2: Using a for loop and dictionary comprehension", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-append-multitype-values-in-dictionary/"},
{"title": "Python - Ways to remove multiple empty spaces from string List - GeeksforGeeks", "h1": ["Python – Ways to remove multiple empty spaces from string List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loop + strip()", "Output : ", "Method #2: Using list comprehension + strip()", "Output : ", "Time Complexity:", "Auxiliary Space: ", "Method #3 : Using find()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #4: Using lambda function", "Output", "Method #5:  Using itertools.filterfalse()", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Approach 6: Using str.isspace()", "Output", "Approach #7:Using regex.findall() method", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-ways-to-remove-multiple-empty-spaces-from-string-list/?ref=leftbar-rightbar"},
{"title": "Python | Count the elements in a list until an element is a Tuple - GeeksforGeeks", "h1": ["Python | Count the elements in a list until an element is a Tuple"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1:", "Method #2: ", "Output", "Method#3:  ", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-count-elements-list-element-tuple/"},
{"title": "Python | Loan calculator using Tkinter - GeeksforGeeks", "h1": ["Python | Loan calculator using Tkinter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["To create a Tkinter :", "Step #1: ", "Step #2: ", "Step #3:", "Output: ", "Code Explanation: ", "Why we used sticky argument?", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-loan-calculator-using-tkinter/"},
{"title": "Python | Ways to initialize list with alphabets - GeeksforGeeks", "h1": ["Python | Ways to initialize list with alphabets"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Initialize the list with alphabets using ", "string.ascii_uppercase", " ", "Python3", "Initialize the list with alphabets using a naive method ", "Python3", "Initialize the list with alphabets using list comprehension", " ", "Python3", "Initialize the list with alphabets using a map()", " ", "Python3", "What kind of Experience do you want to share?"], "strong": ["Initialize the list with alphabets using ", "string.ascii_uppercase", "Note: ", "Output :", "Initialize the list with alphabets using a naive method ", "Refer", "Output : ", "Initialize the list with alphabets using list comprehension", "Output :", "Initialize the list with alphabets using a map()", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-ways-to-initialize-list-with-alphabets/?ref=ml_lbp"},
{"title": "Python - Remove Consecutive K element records - GeeksforGeeks", "h1": ["Python – Remove Consecutive K element records"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Input", "Output", "Method #1 : Using zip() + list comprehension", "Output : ", "Time complexity: ", "Auxiliary space: ", "Method #2 : Using any() + list comprehension", "Output : ", "Method #3: Using a for loop and a temporary list", "Output", "Time complexity: ", "Auxiliary space: ", "Method #4: Using filter() function ", "Output", "Time complexity: ", "Auxiliary space:", "Method 5: Using the itertools module", "Output", "Method 6: Using numpy:", "Algorithm:", "Output:", "Time complexity: O(nm),", "Space complexity: O(nm), ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-remove-consecutive-k-element-records/"},
{"title": "Python String - GeeksforGeeks", "h1": ["Python String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "What is a String in Python?", "Python3", "Creating a String in Python", "Python3", "Accessing characters in Python String", "Python3", "String Slicing", "Python3", "Reversing a Python String", "Python3", "Python3", "Deleting/Updating from a String", "Python3", "Python3", "Python3", "Python3", "Python3", "Escape Sequencing in Python", "Python3", "Python3", "Formatting of Strings", "Python3", "Python3", "Python3", "Python3", "Useful Python String Operations", "  ", "Python String constants ", "Deprecated string functions", "What kind of Experience do you want to share?"], "strong": ["What is a String in Python?", "Example:", "Output:", "Strings in Python", "Example:", "Output:", "IndexError", "TypeError", "Example:", "Output:", "Example:", "Output:", "Example:", "Output:", "Example:", "Output:", "Example:", "Output:", "Example:", "Output:", "del", "Output:", "Example:", "Output:", "Error:", "SyntaxError", "Example:", "Output:", "Example:", "r", "R", "Output:", "Example 1:", "Output:", "Example 2:", "Output:", "Example 3:", "Output:", "Example 4:", " ", " % ", "Output:", "Useful Python String Operations", "Advantages of String in Python:", "Drawbacks of String in Python:", "1. what is a Python string?", "2. How can I create a string in Python?", "3. How can I access characters in a string?", "4. Can I concatenate strings in Python?", "5. How can I get the length of a string?", "More Videos on Python Strings", "Programs of Python Strings", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-string/"},
{"title": "Python - Difference between json.dump() and json.dumps() - GeeksforGeeks", "h1": ["Python – Difference between json.dump() and json.dumps()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "json.dumps()", "Python3", "json.dump()", "Python3", "What kind of Experience do you want to share?"], "strong": ["Note:", "Syntax:", "Parameters:", "dictionary –", "indent –", "Example:", "Output:", "Python objects and their equivalent conversion to JSON:", "Syntax:", "Parameters:", "dictionary –", "file pointer –", "Example:", "Output:", "Let us see the differences in a tabular form -:", "json.dump() ", "json.dumps()", "1.", "2.", "json.dump(obj, fp, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)", "json.dumps(obj, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)", "3.", "4.", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-difference-between-json-dump-and-json-dumps/?ref=ml_lbp"},
{"title": "Python - Convert Nested Tuple to Custom Key Dictionary - GeeksforGeeks", "h1": ["Python – Convert Nested Tuple to Custom Key Dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Input", "Output", "Method #1 : Using list comprehension + dictionary comprehension", "Output", "Time complexity: ", "Auxiliary space:", "Method #2: Using zip() + list comprehension", "Output", "Method #3: Using a for loop", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-convert-nested-tuple-to-custom-key-dictionary/"},
{"title": "Python - Remove K length Duplicates from String - GeeksforGeeks", "h1": ["Python – Remove K length Duplicates from String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method : Using loop + slicing", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-remove-k-length-duplicates-from-string/"},
{"title": "Python - Spell Corrector GUI using Tkinter - GeeksforGeeks", "h1": ["Python – Spell Corrector GUI using Tkinter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisites:", "Output:", "Code Explanation:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-spell-corrector-gui-using-tkinter/"},
{"title": "Python - Extract Symmetric Tuples - GeeksforGeeks", "h1": ["Python – Extract Symmetric Tuples"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Input", "Output", "Method #1: Using dictionary comprehension + set()", "Output : ", "Time complexity: ", "Auxiliary space: ", "Method #2 : Using Counter() + list comprehension", "Output : ", "Time complexity:", "Auxiliary space: ", "Method 3: Using nested for loops and a temporary set", "Steps:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-extract-symmetric-tuples/"},
{"title": "Python program to Sort Tuples by their Maximum element - GeeksforGeeks", "h1": ["Python program to Sort Tuples by their Maximum element"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using ", "max()", " + ", "sort()", "Output:", "Method #2 : Using sort() +", " lambda", " + reverse", "Output:", "Method #3: Using a loop to find the maximum element and sort based on it", "Output", "Method #6: Using Heapq module", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-sort-tuples-by-their-maximum-element/"},
{"title": "Python | Program to extract frames using OpenCV - GeeksforGeeks", "h1": ["Python | Program to extract frames using OpenCV"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["OpenCV", "Function Used:", "VideoCapture(File_path) :", "read():", "imwrite(filename, img[, params]) : ", "Output:", "DevOps Engineering - Planning to Production ", "GATE Data Science and Artificial Intelligence 2025 ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-extract-frames-using-opencv/"},
{"title": "Python pass Statement - GeeksforGeeks", "h1": ["Python pass Statement"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Python3", "Examples of Python pass statement", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["IndentationError ", "Output:", "IndentationError", "pass", "Output:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-pass-statement/"},
{"title": "Python Sets - GeeksforGeeks", "h1": ["Python Sets"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Set ", "set()", "Note: ", "Ouput", "Time complexity: ", "Auxiliary space:", "Output", "Output", "add()", "Note:", "Output", "Output", "Output", "Output", "Note: ", "Output", "Output", "Frozen sets", "Output", "Output", "Output", "Unique Elements", "Fast Membership Testing", "Mathematical Set Operations:", "Mutable", "Unordered", "Limited Functionality:", "Memory Usage:", "Less Commonly Used:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-sets/"},
{"title": "Python - Substring presence in Strings List - GeeksforGeeks", "h1": ["Python – Substring presence in Strings List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using loop", "Output", "Method #2 : Using list comprehension + any()", "Output", "Time Complexity: ", "Space Complexity: ", "Method 3:  using the built-in set and intersection functions. ", " steps to implement this approach:", "Output", "Method 4:  using numpy:", "Algorithm:", "Output:", "Time complexity:", "Space complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-substring-presence-in-strings-list/"},
{"title": "Python-tkinter Archives - GeeksforGeeks", "h1": ["Python-tkinter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/tag/python-tkinter/"},
{"title": "Python | Play a video in reverse mode using OpenCV - GeeksforGeeks", "h1": ["Python | Play a video in reverse mode using OpenCV"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["CV2", "CV2", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-play-video-reverse-mode-using-opencv/"},
{"title": "Python-tkinter Archives - Page 19 of 19 - GeeksforGeeks", "h1": ["Python-tkinter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/tag/python-tkinter/page/19/?type=popular"},
{"title": "Python - Dictionary items in value range - GeeksforGeeks", "h1": ["Python – Dictionary items in value range"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1: Using loop ", "Output", "Time complexity:", "Auxiliary Space:", "Method #2 : Using filter() + lambda + dictionary comprehension ", "Output", "Time complexity: ", "Auxiliary space: ", "Method #3 : Using range(),keys() methods", "Output", "Time Complexity : O(N)", "Auxiliary Space : O(N)", "Method 4: Using list comprehension and dict() constructor:", "Output", "Time Complexity: O(N)", "Auxiliary Space: O(N)", "Method #5: Using dictionary comprehension with conditionals", "res", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #6: Using the items() method and list comprehension", "Output", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-dictionary-items-in-value-range/?ref=ml_lbp"},
{"title": "Python | Convert tuple records to single string - GeeksforGeeks", "h1": ["Python | Convert tuple records to single string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Method #1: Using join() + list comprehension", "Python3", "Method #2: Using map() + join()", "Python3", "Method #3 : Using join() and replace() methods", "Python3", "Method #4 : Using a format():", "Python3", "Method 5: Using a simple for loop:", "Python3", "Method 6: Using reduce() function", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using join() + list comprehension", " join() ", "test_list", "join() ", "join()", "res", "print() ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #2: Using map() + join()", "Output", "Time complexity: ", "Auxiliary space:", "Method #3 : Using join() and replace() methods", "Output", "Time complexity:", "Auxiliary space:", "Method #4 : Using a format():", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method 5: Using a simple for loop:", "Output", "Time complexity: ", "Auxiliary space: ", "Method 6: Using reduce() function", "Algorithm:", "Output", "Time complexity: O(n)", "Auxiliary space: O(n)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-convert-tuple-records-to-single-string/"},
{"title": "Python | Check if tuple exists as dictionary key - GeeksforGeeks", "h1": ["Python | Check if tuple exists as dictionary key"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using in operator", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #2 : Using get()", "Output : ", "Method #3: Using try-catch", "Output", "Method #4: Using the “in” keyword with dictionary keys()", "Output", "Time complexity: ", "Auxiliary Space: ", "Method #5: Using the dictionary.items() inbuilt methods :", "Output", "Time complexity: O(1) ", "Auxiliary Space: O(1) as no extra memory is used", "Method #6: Using a list comprehension to check if the tuple is equal to any of the dictionary keys:", "Step by step Algorithm:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #7: Using a loop to iterate through the dictionary keys and compare them with the target tuple.", "Output", "Time complexity: ", "Auxiliary Space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-check-if-tuple-exists-as-dictionary-key/?ref=ml_lbp"},
{"title": "Python - Displaying real time FPS at which webcam/video file is processed using OpenCV - GeeksforGeeks", "h1": ["Python – Displaying real time FPS at which webcam/video file is processed using OpenCV"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["FPS ", "frame per second", "frame rate", "how to calculate FPS in our Computer Vision projects.", "Steps to Calculate Live FPS:", " create a VideoCapture object", "webcam", "video file", "capture.read()", "So fps at the current moment will be :", "cv2.putText()", "cv2.imshow()", "Code: Python code implementation of the above mentioned approach", "Output: video file displaying live FPS in green colour.", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-displaying-real-time-fps-at-which-webcam-video-file-is-processed-using-opencv/"},
{"title": "Python object - GeeksforGeeks", "h1": ["Python object"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Understanding of Python Object", "Creating a Python Object", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Object", "Note:", "Syntax:", "Instance", "Working of the Program: ", "Output:", "Accessing Class Member Using Object:", "Syntax:", "Example 1:", "Output:", "Example 2:", "Output:", "Self Variable:", "Example:", "Output:", "Note:", "Deleting an Object in Python:", "Syntax:", "Syntax:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/python-object/?ref=next_article"},
{"title": "Python | Finding frequency in list of tuples - GeeksforGeeks", "h1": ["Python | Finding frequency in list of tuples"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using map() + count() ", "Output", "Method #2 : Using Counter() + list comprehension", "Output", "Method #3 : Dictionary comprehension and the get() method", "Output", "Time complexity: O(n)", "Auxiliary Space: O(n)", "Method #4 : Using map() + operator.countOf() method", "Output", "Time complexity: O(n*n)", "Auxiliary Space: O(1)", "Method #5: Using np.unique", "Output:", "METHOD 6:Using re-module.", "APPROACH:", "ALGORITHM:", "Output", "Time complexity:", "Space complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-finding-frequency-in-list-of-tuples/?ref=ml_lbp"},
{"title": "Python | Play a video using OpenCV - GeeksforGeeks", "h1": ["Python | Play a video using OpenCV"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["OpenCV ", "Syntax", "Step 1: ", "Step 2: ", "Step 3:", "Step 4:", "Output:", "Note : ", "Explanation:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-play-a-video-using-opencv/"},
{"title": "Python-tkinter Archives - Page 2 of 19 - GeeksforGeeks", "h1": ["Python-tkinter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/tag/python-tkinter/page/2/?type=popular"},
{"title": "Python-tkinter Archives - Page 4 of 19 - GeeksforGeeks", "h1": ["Python-tkinter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/tag/python-tkinter/page/4/?type=popular"},
{"title": "Python | Check for None values in given dictionary - GeeksforGeeks", "h1": ["Python | Check for None values in given dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using all() + not operator + values()", "Output : ", "Time Complexity: O(N)", "Auxiliary Space: O(1)", "Method #2 : Using in operator + values()", "Output : ", "Method #3 : Using values() and count() methods", "Output", "Time complexity: ", "Auxiliary space: ", "Method #4: Using filter()+list()+ lambda functions", "Output", "Method #5 :  Using any()", "Output", "Method 6: Using operator.countOf() method", "Output", "Time Complexity: O(N)", "Auxiliary Space: O(1)", "Method 7: Using list comprehension", "Output", "Time Complexity:O(N)", "Auxiliary Space :O(N)", "Method#8: Using Recursive method.", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-check-for-none-values-in-given-dictionary/?ref=ml_lbp"},
{"title": "Python Set | difference_update() - GeeksforGeeks", "h1": ["Python Set | difference_update()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "A.difference_update(B)", "B.difference_update(A)", "returns ", "None", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-set-difference_update/"},
{"title": "Python - Possible Substring count from String - GeeksforGeeks", "h1": ["Python – Possible Substring count from String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using count() + min() + set()", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(1)", "Method #2 : Using Counter() + list comprehension", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 3:  using operator.countOf() method", "Output", "Time Complexity: O(N)", "Auxiliary Space : O(1)", "Method #4: Using for loop, max_count", "Approach:", "Output", "Time Complexity: O(N)", "Auxiliary Space : O(1)", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-possible-substring-count-from-string/"},
{"title": "Python Web Development - Django Tutorial - GeeksforGeeks", "h1": ["Python Web Development – Django Tutorial"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Why Django Framework?", "Django Architecture", "Setting up the Virtual Environment", "Installing Django", "Starting the project", "Project Structure", "Creating an app", "Python3", "Python3", "Django Views", "Python3", "Django URL Patterns", "Python3", "Python3", "Django Models", "Python3", "Python3", "Python3", "Python3", "Python3", "Uploading Images in Django", "Python3", "Render a model in Django Admin Interface", "Python3", "Connecting Django to different Database", "Python3", "Python3", "Django Templates", "Python3", "Python3", "HTML", "Python3", "Python3", "HTML", "HTML", "Django Forms", "Python3", "Python3", "Python3", "HTML", "Python3", "Python3", "More on Django", "Django Projects", "What kind of Experience do you want to share?"], "strong": ["Model:", "View: ", "Template:", "./", ". ", "Note: ", "manage.py:", "_init_.py:", "settings.py:", "urls.py:", "wsgi.py:", "Note:", "urlpatterns", "URL patterns", "Including other URLConf modules", "Syntax:", "Example:", "Adding objects", "Retrieving objects", "Output:", "Modifying existing objects", "Output:", "Deleting objects", "Output:", "Note: ", "Configuration", "HTML file:", "views.py", "views.py", "index.html", "Variables", "Syntax", "Tags", "Syntax", "Filters", "Syntax", "Comments", "Syntax", "Syntax", "Example: ", "Note:", "views.py", "urls.py", "views.py", "Note: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-web-development-django-tutorial/"},
{"title": "ToDo webapp using Django - GeeksforGeeks", "h1": ["ToDo webapp using Django"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Python3", "Python3", "Python3", "Python3", "HTML", "What kind of Experience do you want to share?"], "strong": ["Modules required: ", "Basic setup", "Step 1: ", "Step 2:", "Let’s create an app now", "Step 3:", "Step 4:", "settings.py", "Step 5: ", "Step 6: ", "Step 7:", "Step 8: ", "Step 9: ", "Step 10: ", "Step 11: ", "Step 12: ", "Output:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-todo-webapp-using-django/"},
{"title": "Check Whether a Given Key Already Exists in a Python Dictionary - GeeksforGeeks", "h1": ["Check Whether a Given Key Already Exists in a Python Dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "How to Check If a Key Already Exists in a Dictionary", "Python3", "Python3", "Python", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example", "Input : ", "Output :", "Input :", "Output : ", "1. Check If the Key Exists Using keys() Method", "Output:", "Time Complexity", "Auxiliary Space", "2. Check If the Key Exists Using if and in", "Output:", "Time complexity", "Auxiliary space", "3. Check If the Key Exists Using has_key() Method", "Note – ", "Output:", "4. Check If the Key Exists Using get() Method", "Output:", "Output:", "Check If the Key Exists Using ", "Output:", "Similar Reads:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-check-whether-given-key-already-exists-in-a-dictionary/"},
{"title": "Python | Maximum and Minimum value from two lists - GeeksforGeeks", "h1": ["Python | Maximum and Minimum value from two lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using max() + min() + “+” operator", "Output:", "Method #2: Using max() + min() + chain()", "Output:", "Time Complexity:", "Auxiliary Space: ", "Method #3:", "Output", "Time Complexity:", "Auxiliary Space:", "Method #4: Using enumerate function", "Output", "Method #5: Using extend", "Output", "time complexity", "Auxiliary Space", "Method #6: Using heapq module", "Output", "Time Complexity: O(nlogn)", "Auxiliary Space: O(1)", "Method #7: Using a for loop to find the maximum and minimum values", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-maximum-and-minimum-value-from-two-lists/?ref=next_article"},
{"title": "Python - Prefix tuple records - GeeksforGeeks", "h1": ["Python – Prefix tuple records"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension + zip() + all()", "Output", "Time Complexity", "Auxiliary Space:", "Method #2 : Using filter() + lambda + generator expression + all()", "Output", "Time Complexity:", "Auxiliary Space: ", "Method #3 : Using startswith() method", "Output", "Time Complexity:", "Auxiliary Space: ", "Method #4 : Using find() method", "Output", "Time complexity: ", "Auxiliary space: ", "Method #5: Using a for loop", "Output", "Time complexity:", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-prefix-tuple-records/"},
{"title": "Python Django | Google authentication and Fetching mails from scratch - GeeksforGeeks", "h1": ["Python Django | Google authentication and Fetching mails from scratch"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Django Basics", "Django view", "Django Model", "Django Forms", "Django URLS", "More topics on Django", "Projects", "Django Interview Questions and Answers", "Django Basics", "Django view", "Django Model", "Django Forms", "Django URLS", "More topics on Django", "Projects", "Django Interview Questions and Answers", "Python3", "Python3", "Python3", "Python3", "HTML", "javascript", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Step #1:", "Step #2:", "Step #3:", "Important guideline:", "Step #4:", "Step #5:", "Step #6:", "Step #7:", "here", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-django-google-authentication-and-fetching-mails-from-scratch/"},
{"title": "Python - Cross mapping of Two dictionary value lists - GeeksforGeeks", "h1": ["Python – Cross mapping of Two dictionary value lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using loop + setdefault() + extend()", "Output", "Method #2 : Using list comprehension + dictionary comprehension", "Output", "Method #3: Using dictionary comprehensions, loops, set operations", "Output", "Time Complexity: O(N*M) where n and m are the sizes of the two dictionaries.", "Auxiliary Space: O(N) as we are creating a new dictionary.", "Method #4: Using map() and lambda function", "Step by step Algorithm:", "Output", "Time Complexity:", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-cross-mapping-of-two-dictionary-value-lists/"},
{"title": "Python | User groups with Custom permissions in Django - GeeksforGeeks", "h1": ["Python | User groups with Custom permissions in Django"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Django Basics", "Django view", "Django Model", "Django Forms", "Django URLS", "More topics on Django", "Projects", "Django Interview Questions and Answers", "Django Basics", "Django view", "Django Model", "Django Forms", "Django URLS", "More topics on Django", "Projects", "Django Interview Questions and Answers", "Python3", "Python3", "Python", "Python", "What kind of Experience do you want to share?"], "strong": ["Starter plan", "Golden Plan", "Diamond Plan", "users", "Django Admin Panel", "Group ", "By Programmatically creating a group with permissions", "For example :", "For example :", "References :", "Complete Machine Learning & Data Science Program ", "Complete Guide to Software Testing and Automation: Master Java, Selenium and Cucumber ", "JAVA Backend Development - Live "], "link": "https://www.geeksforgeeks.org/python-user-groups-custom-permissions-django/"},
{"title": "Python Set symmetric_difference() - GeeksforGeeks", "h1": ["Python Set symmetric_difference()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Syntax : ", "Parameters : ", "Return value : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-set-symmetric_difference/?ref=lbp"},
{"title": "Python set symmetric_difference_update() - GeeksforGeeks", "h1": ["Python set symmetric_difference_update()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python set symmetric_difference_update() Syntax", "Python set symmetric_difference_update() Examples", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Symmetric Difference is marked in Green", "Syntax:", "Parameters:", "Returns:", "A.symmetric_difference_update(B)", "set", "Output ", "Output :", "symmetric_difference_update()", "Output", " symmetric_difference_update()", "Output ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-set-symmetric-difference-update/?ref=lbp"},
{"title": "Python - Mapping Matrix with Dictionary - GeeksforGeeks", "h1": ["Python – Mapping Matrix with Dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using loop", "Output", "Method #2 : Using list comprehension", "Output", "Method 3 :  using the map() function:", "Step-by-step approach:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-mapping-matrix-with-dictionary/"},
{"title": "Python - Replace None with Empty Dictionary - GeeksforGeeks", "h1": ["Python – Replace None with Empty Dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method : Using recursion + ", "isinstance()", "Output:", "Method 2: Using stack", "Output", "Time complexity:", "Auxiliary space:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-replace-none-with-empty-dictionary/"},
{"title": "Python | Finding frequency in list of tuples - GeeksforGeeks", "h1": ["Python | Finding frequency in list of tuples"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using map() + count() ", "Output", "Method #2 : Using Counter() + list comprehension", "Output", "Method #3 : Dictionary comprehension and the get() method", "Output", "Time complexity: O(n)", "Auxiliary Space: O(n)", "Method #4 : Using map() + operator.countOf() method", "Output", "Time complexity: O(n*n)", "Auxiliary Space: O(1)", "Method #5: Using np.unique", "Output:", "METHOD 6:Using re-module.", "APPROACH:", "ALGORITHM:", "Output", "Time complexity:", "Space complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-finding-frequency-in-list-of-tuples/?type=article&id=280226"},
{"title": "Python | Corner detection with Harris Corner Detection method using OpenCV - GeeksforGeeks", "h1": ["Python | Corner detection with Harris Corner Detection method using OpenCV"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Python3", "What kind of Experience do you want to share?"], "strong": ["Harris Corner detection", "About the function used: ", "Syntax:", "Parameters:", "src", "dest", "blockSize", "ksize", "freeParameter", "borderType", "Input:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-corner-detection-with-harris-corner-detection-method-using-opencv/?ref=ml_lbp"},
{"title": "Python | Detect corner of an image using OpenCV - GeeksforGeeks", "h1": ["Python | Detect corner of an image using OpenCV"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "What kind of Experience do you want to share?"], "strong": ["OpenCV ", "cv2.goodFeaturesToTrack", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-detect-corner-of-an-image-using-opencv/"},
{"title": "Python Set clear() Method - GeeksforGeeks", "h1": ["Python Set clear() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Set clear() Method Syntax:", "Example 1: Python Set clear() Method Example", "Python3", "Example 2: Python Set clear() Method on a Set of Strings", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python Set clear() Method Syntax:", "Syntax: ", "parameters:", " Return:", "Example 1: Python Set clear() Method Example", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-set-clear-method/?ref=lbp"},
{"title": "Python - Maximum and Minimum K elements in Tuple - GeeksforGeeks", "h1": ["Python – Maximum and Minimum K elements in Tuple"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Input", "Output", "Method #1 : Using sorted() + loop", "Output", "Time complexity: ", "Auxiliary space:", "Method #2 : Using list slicing + sorted()", "Output", "Time complexity:", "Auxiliary space: ", "Method #3 : Using heapq module:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 4 :  using the built-in functions min() and max() and a loop to extract the K elements.", "step-by-step approach :", "Output", "Algorithm :", "Output", "me Complexity :", "Auxiliary Space  :  ", "Output", "time Space : O(kn)", "Auxiliary Space  :  O(k)", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-maximum-and-minimum-k-elements-in-tuple/?ref=next_article"},
{"title": "Python Backend Development with Django - Live Course By GeeksforGeeks - GeeksforGeeks", "h1": ["Python Backend Development with Django – Live Course By GeeksforGeeks"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "About the Course", "Conclusion", "FAQs", "What kind of Experience do you want to share?"], "strong": ["Python used by 48% of the developer community", "Python backend development with Django", " ", "Python Backend Development with Django – Live course", "Python Backend Development with Django – Live", ",", " Django Web Framework. ", " high-level and highly secured and scalable", "Python and Django", "building models, creating views, and handling user authentication", "deploying", "caching, and working with RESTful APIs. ", "5+ hours of recorded Python Programming Foundation by CEO & Founder Mr. Sandeep Jain", "GeeksforGeeks Python Back-end Development with Django-Live course, ", "Enroll Now!", "Strong fundamentals of Python Programming Language", "OOPs concept in Python Programming Language", "Various web tools including VSCode, Git, Postman, etc", " Developing full-fledged web applications in Django", "Various HTTP Methods including GET POST etc", "Templates, Forms, DB, and Model layers", "Minor and Major Projects", "Projects Evaluations and Tips on How to Crack Dev Interviews", "Python Backend Development with Django – Live", " ", " build the most interactive web application.", " Become a successful Python developer", "1. Can I become a backend developer with Python and Django?", "become a backend developer with Python and Django.", "complete understanding of Django and Flask fundamentals as a beginner. ", "2. Which is the best Python Django course?", "Python Backend Development with Django – Live", " ", " Python developer.", "3. Can I use Django just for the backend?", " not only can be used for the backend but for front-end development as well in Python. ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-backend-development-with-django-live-course-by-geeksforgeeks/"},
{"title": "Python | Add style to tkinter button - GeeksforGeeks", "h1": ["Python | Add style to tkinter button"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["tkinter.ttk", "ttk.Button options –", "command:", "text:", "image:", "style:", "Code #1: ", "Output:", "Code #2", "Output:", "Code #3", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-add-style-to-tkinter-button/"},
{"title": "Python List clear() Method - GeeksforGeeks", "h1": ["Python List clear() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What is List clear() Method?", "List clear() Syntax", "How to Use clear() Function in Python", "Python3", "More Methods to clear a List", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python List clear() method", "Example", "Output", "Syntax", "Parameters", "Returns", "Output", "Output", "Output", "Output", "Output", "Output", "Note:", "del lis_2", "Read Other ", "Python List Methods", "Also Read:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-list-clear-method/"},
{"title": "Python - Order Tuples by List - GeeksforGeeks", "h1": ["Python – Order Tuples by List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Input", "Output", "Method #1 : Using dict() + list comprehension", "Output : ", "Time complexity:", "Auxiliary space: ", "Method #2 : Using setdefault() + sorted() + lambda", "Output : ", "Time complexity: ", "Auxiliary space: ", "Method #3: Using lists and index() method", "Output", "Output", "Time complexity: ", "Auxiliary Space:", "METHOD 4:Using sorted() function with itemgetter() function", "APPROACH:", "ALGORITHM:", "Output", "METHOD 5:Using reduce():", "Algorithm:", "Output", "Time Complexity:", "Space Complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-order-tuples-by-list/"},
{"title": "Python - Test if Substring occurs in specific position - GeeksforGeeks", "h1": ["Python – Test if Substring occurs in specific position"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using loop", "Output : ", "Method #2: Using string slicing ", "Output : ", "Method #3 : Using find() method", "Output", "Method#4: Using Recursive method.", "Output", "Method #5: Using Regular Expression", "Step-by-step approach:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-test-if-substring-occurs-in-specific-position/"},
{"title": "Python - AND operation between Tuples - GeeksforGeeks", "h1": ["Python – AND operation between Tuples"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using map() + lambda", "Output : ", "Method #2 : Using map() + iand()", "Output : ", "Method #3: Using List comprehension", "Output", "Method #4: Using zip():", "Output", "Time complexity: O(n) ", "Space complexity: O(n) ", "Method #5: Using a for loop", "Step-by-step approach:", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-and-operation-between-tuples/"},
{"title": "Python Program to Find Largest Item in a Tuple - GeeksforGeeks", "h1": ["Python Program to Find Largest Item in a Tuple"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python program to demonstrate the maximum element in a Tuple.", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input: ", "Output: ", "Explanation: ", "Method 1: ", "Output:", "Time complexity:", "Auxiliary space: ", "Method 2: ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 3: ", "Output", "Output", "Time complexity", "Auxiliary space", "Method 4: Using sort() method", "Output", "Method 5: Using enumerate() method", "Output", "Method 6: Using heapq module: ", "Output", "Time complexity: O(nlogk),", "Auxiliary Space: O(k),", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-find-largest-item-in-a-tuple/"},
{"title": "Python Program to check if given array is Monotonic - GeeksforGeeks", "h1": ["Python Program to check if given array is Monotonic"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["A", "n", "Monotonic", "monotone increasing", "monotone decreasing", "A[i] <= A[j]", "A[i] >= A[j]", "Return Type:", "True", "False", "Examples:", "Input :", "Output :", "Input :", "Output :", "Approach :", "Using extend() and sort()", "Output", "Time Complexity:", "Auxiliary space: ", "Approach:", "monotonic", "monotone increasing", "monotone decreasing", "p <= q", "q <= r", "p <= r", "monotone increasing", "A[i] <= A[i+1]", "monotone decreasing", "A[i] >= A[i+1]", "Note:", "single element", "monotonic increasing or decreasing", "True", "Output", "Time Complexity:", "O(N)", "Auxiliary space: O(1) ", "Approach 3 – By checking length of the array", "Output", "The time complexity of the above program is O(n).", "The auxiliary space of the above program is O(1)", "Approach : By using the set to Identify Unique Elements", "Below is implementation for the above approach:", "Output", "Time Complexity:", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-program-to-check-if-given-array-is-monotonic/?ref=next_article"},
{"title": "Python Program for Array Rotation - GeeksforGeeks", "h1": ["Python Program for Array Rotation"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python Program for Array Rotation Example", "Python3", "Python Program for Array Rotation Using temp array", "Python3", "Python Program for Array Rotation Using Rotate one by one", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Array Rotation:", "Partitioning the sub arrays and reversing them", "Approach:", "Example:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Python Program for Array Rotation Using temp array", "Output", "Time complexity:", "Auxiliary Space: ", "Python Program for Array Rotation Using Rotate one by one", "Output", "Time complexity :", "Auxiliary Space :", "Python Program for Array Rotation Using 4 Juggling Algorithm", "Output", "Time complexity :", "Auxiliary Space :", "Another Approach : ", "Output", "Time complexity ", "Auxiliary Space", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-for-program-for-array-rotation-2/"},
{"title": "Simple registration form using Python Tkinter - GeeksforGeeks", "h1": ["Simple registration form using Python Tkinter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output :", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-simple-registration-form-using-tkinter/"},
{"title": "Python Program for Reversal algorithm for array rotation - GeeksforGeeks", "h1": ["Python Program for Reversal algorithm for array rotation"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example", "Input:  ", "Output:", "Output", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-for-reversal-algorithm-for-array-rotation/"},
{"title": "Python program to find N largest elements from a list - GeeksforGeeks", "h1": ["Python program to find N largest elements from a list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "note: install numpy module using command “pip install numpy”", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples :", "Output", "Time Complexity:", "Auxiliary space: ", "Method 2: ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 3: Using sort() and loop", "Approach:", "Output", "Time Complexity:", "Auxiliary Space:", "Output", "Time complexity: O(n log n)", "Auxiliary Space: O(n)", "Using numpy.argsort() function", "note: install numpy module using command “pip install numpy”", "Algorithm:", "Output:", "Algorithm :", "Output", "Time Complexity :", "Auxiliary Space : ", "Data Science Training Program ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-find-n-largest-elements-from-a-list/"},
{"title": "Python | Binding function in Tkinter - GeeksforGeeks", "h1": ["Python | Binding function in Tkinter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["pip", "Python’s Functions", "Code #1:", "Output:", "Code #2:", "Output:", "Code #3:", "Output:", "Note:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-binding-function-in-tkinter/"},
{"title": "Python Dictionary Quiz - GeeksforGeeks", "h1": ["Python Dictionary Quiz"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Dictionary Quiz"], "strong": ["Question 1:Find the output of the following program:", "Explanation:", "Note:", "Question 2:Find the output of the following program:", "Explanation:", "Question 3:Find the output of the following program:", "Explanation:", "Question 4:Find the output of the following program:", "Explanation:", "Question 5:Find the output of the following program:", "Explanation:", "Question 6:Find the output of the following program:", "Explanation:", "Question 7:Find the output of the following program:", "Explanation:", "fromkeys() ", "Question 8:Find the output of the following program:", "Explanation:", "Question 9:Find the output of the following program:", "Explanation:", "Question 10:Find the output of the following program:", "Which of these about a dictionary is false?", "Explanation:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-dictionary-quiz/"},
{"title": "Python | Sum of number digits in List - GeeksforGeeks", "h1": ["Python | Sum of number digits in List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Note: Install numpy module using command “pip install numpy”", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loop + str()", "Output : ", "Method #2 : Using sum() + list comprehension", "Output : ", "Time Complexity: ", "Auxiliary Space: ", "Method #3 : Using sum() + reduce()", "Output:", "Method #4 : Using numpy", "Note: Install numpy module using command “pip install numpy”", "Output:", "Method #5 : Using itertools library:", "Output", "Method #6 : Using map() function and modulo operator :", "Step-by-step algorithm for implementing the approach", "Code :", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #7: Creating a expression without changing to a string", "Output", "Time Complexity: O(N*M) ", "Auxiliary Space: O(N)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-sum-of-number-digits-in-list/"},
{"title": "Python program to multiply two matrices - GeeksforGeeks", "h1": ["Python program to multiply two matrices"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples: ", "{IDE}", "Using Simple Nested Loops: ", "Implementation:", "Output: ", "Time Complexity: O(M*M*N)", "Auxiliary Space: O(M*N", "Method 2: ", "Implementation:", "Output: ", "Time Complexity: O(M*M*N", "Auxiliary Space: O(M*N)", "Method 3: ", "Implementation:", "Output: ", "Time Complexity: O(M*M*N)", "Auxiliary Space: O(M*N)", "Method 4:Using recursive matrix multiplication:", "Algorithm:", "Output", "Time complexity: ", "Auxiliary Space : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "DSA for Interview Preparation "], "link": "https://www.geeksforgeeks.org/python-program-multiply-two-matrices/"},
{"title": "Python Program to Add Two Matrices - GeeksforGeeks", "h1": ["Python Program to Add Two Matrices"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python", "Python", "Python", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples: ", "Input :", "Output :", "Add Two Matrices Using for loop", "Output", "Time Complexity: O(len(X) * len(X[0]))", "Auxiliary Space: O(len(X) * len(X[0]))", "Using nested ", "list comprehension", " : ", "Output", "Time Complexity:", "O(len(X) * len(X[0]))", "Auxiliary Space:", "O(len(X) * len(X[0]))", "Add Two Matrices Using zip() function", "Output", "Time Complexity: O(len(X) * len(X[0]))", "Auxiliary Space:", "O(len(X) * len(X[0]))", "Explanation:- ", "Add Two Matrices Using Numpy", " numpy ", " ", "+", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-add-two-matrices/"},
{"title": "Python Program for Dijkstra's shortest path algorithm | Greedy Algo-7 - GeeksforGeeks", "h1": ["Python Program for Dijkstra’s shortest path algorithm | Greedy Algo-7"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Dijkstra's Algorithm in different language", "Different ways to implement Dijkstra's algorithm", "Variations of Dijkstra's algorithm", "Some problems on Dijkstra's algorithm", "Dijkstra's Algorithm in different language", "Different ways to implement Dijkstra's algorithm", "Variations of Dijkstra's algorithm", "Some problems on Dijkstra's algorithm", "Python3", "What kind of Experience do you want to share?"], "strong": ["1)", "2)", "3)", "Output", "Time Complexity:", "Space Complexity: ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-for-dijkstras-shortest-path-algorithm-greedy-algo-7/"},
{"title": "Python program to check whether the string is Symmetrical or Palindrome - GeeksforGeeks", "h1": ["Python program to check whether the string is Symmetrical or Palindrome"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input:", "Output:", "Input:", "Output:", "Approach 1:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Approach 2:", "Output", "Time Complexity: ", "Auxiliary Space: ", "METHOD 3:Using re module", "APPROACH:", "ALGORITHM:", "Output", "reversed()", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-to-check-whether-the-string-is-symmetrical-or-palindrome/"},
{"title": "Python Program to Check if a String is Palindrome or Not - GeeksforGeeks", "h1": ["Python Program to Check if a String is Palindrome or Not"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python", "Python", "Python", "Python", "Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output : ", "Output", "Time complexity: ", "Auxiliary Space: ", "Check if a String is Palindrome or Not Using Iterative Method", "Output", "Time complexity: ", "Auxiliary Space: ", "Check String is Palindrome or Not Using the", "inbuilt function to reverse a string", "‘ ‘.join(reversed(string)) ", "Output", "Time complexity: ", "Auxiliary Space: ", "Check String is Palindrome using one extra variable", "Output", "Time complexity: ", "Auxiliary Space: ", "Check String is Palindrome using flag", "Output", "Time complexity: ", "Auxiliary Space: ", "Check String is Palindrome using recursion", "Output", "Time complexity: ", "Auxiliary Space: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-check-string-palindrome-not/"},
{"title": "Python | Ways to format elements of given list - GeeksforGeeks", "h1": ["Python | Ways to format elements of given list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Format Elements of Given List using List Comprehension ", "Output", "Time Complexity", "Auxiliary Space: ", "Format Elements of Given List using Map()", "Output", "Format Elements of Given List using Format()", "Output", "Format Elements of Given List using Iteration ", "Output", "Format Elements of Given List using Reduce", "Output", "Format Elements of Given List using Math Functions", "Algorithm:", "Output", "Time Complexity:", "Auxiliary Space:", "Format Elements of Given List using Counter Method", "Output", "Time Complexity:", "Space Complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-ways-to-format-elements-of-given-list/?ref=ml_lbp"},
{"title": "Python | Find frequency of largest element in list - GeeksforGeeks", "h1": ["Python | Find frequency of largest element in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Method 1:", "Output:", "Time Complexity: ", "Auxiliary Space:", "Method 2:", "Output:", "Method 3:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-find-frequency-of-largest-element-in-list/"},
{"title": "Python program to multiply two matrices - GeeksforGeeks", "h1": ["Python program to multiply two matrices"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples: ", "{IDE}", "Using Simple Nested Loops: ", "Implementation:", "Output: ", "Time Complexity: O(M*M*N)", "Auxiliary Space: O(M*N", "Method 2: ", "Implementation:", "Output: ", "Time Complexity: O(M*M*N", "Auxiliary Space: O(M*N)", "Method 3: ", "Implementation:", "Output: ", "Time Complexity: O(M*M*N)", "Auxiliary Space: O(M*N)", "Method 4:Using recursive matrix multiplication:", "Algorithm:", "Output", "Time complexity: ", "Auxiliary Space : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "DSA for Interview Preparation "], "link": "https://www.geeksforgeeks.org/python-program-multiply-two-matrices/?ref=next_article"},
{"title": "Python-Quizzes | Python Dictionary Quiz | Question 3 - GeeksforGeeks", "h1": ["Python-Quizzes | Python Dictionary Quiz | Question 3"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Question 3:Find the output of the following program:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Test Series for Service-Based Companies ", "Data Structures and Algorithms - Self Paced "], "link": "https://www.geeksforgeeks.org/python-quizzes-python-dictionary-quiz-question-3/"},
{"title": "Python Program to Check if a String is Palindrome or Not - GeeksforGeeks", "h1": ["Python Program to Check if a String is Palindrome or Not"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python", "Python", "Python", "Python", "Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output : ", "Output", "Time complexity: ", "Auxiliary Space: ", "Check if a String is Palindrome or Not Using Iterative Method", "Output", "Time complexity: ", "Auxiliary Space: ", "Check String is Palindrome or Not Using the", "inbuilt function to reverse a string", "‘ ‘.join(reversed(string)) ", "Output", "Time complexity: ", "Auxiliary Space: ", "Check String is Palindrome using one extra variable", "Output", "Time complexity: ", "Auxiliary Space: ", "Check String is Palindrome using flag", "Output", "Time complexity: ", "Auxiliary Space: ", "Check String is Palindrome using recursion", "Output", "Time complexity: ", "Auxiliary Space: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-check-string-palindrome-not/?ref=previous_article"},
{"title": "Python | Element with largest frequency in list - GeeksforGeeks", "h1": ["Python | Element with largest frequency in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Naive method ", "Output", "Time Complexity:", "Auxiliary Space:", "Method #2 : Using max() + set()", "Output", "Time Complexity:", "Auxiliary Space:", "Method #3 : Using statistics.mode()", "Output", "Time Complexity:", "Auxiliary Space:", "Method #4 : Using collections.Counter.most_common()", "Output", "Time Complexity:", "Auxiliary Space:", "Method 5:  using operator.countOf() method", "Output", "Time Complexity: O(N)", "Auxiliary Space : O(1)", "Method 5:  Using numpy.bincount()", "Output:", "Time Complexity: O(N)", "Auxiliary Space : O(1)", "Method 6: Using dictionary.", "Output", "Time Complexity: O(N)", "Auxiliary Space : O(N)", "Method 7: Using list comprehension", "Output", "Time Complexity: O(N)", "Auxiliary Space : O(N)", "Method 8:  using ", "numpy.argmax()", " method", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-element-with-largest-frequency-in-list/"},
{"title": "Python - Element Frequency starting with K in dictionary value List - GeeksforGeeks", "h1": ["Python – Element Frequency starting with K in dictionary value List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loop + startswith()", "Output : ", "Method #2 : Using sum() + startswith()", "Output : ", "Method #3 : Using list comprehension + count()", "Output", "Time Complexity : O(n^2)", "Auxiliary Space : O(n)", "Explanation:", "Method #5 : Using find(),extend(),values() methods", "Approach ", "Output", "Time Complexity : O(n^2)", "Auxiliary Space : O(n)", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-element-frequency-starting-with-k-in-dictionary-value-list/"},
{"title": "Python-Quizzes | Python Dictionary Quiz | Question 23 - GeeksforGeeks", "h1": ["Python-Quizzes | Python Dictionary Quiz | Question 23"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Question 23:Find the output of the following program:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Test Series for Service-Based Companies ", "Data Structures and Algorithms - Self Paced "], "link": "https://www.geeksforgeeks.org/python-quizzes-python-dictionary-quiz-question-23/?ref=ml_lbp"},
{"title": "Python-Quizzes | Python Dictionary Quiz | Question 25 - GeeksforGeeks", "h1": ["Python-Quizzes | Python Dictionary Quiz | Question 25"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Question 25:Find the output of the following program:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Test Series for Service-Based Companies ", "Data Structures and Algorithms - Self Paced "], "link": "https://www.geeksforgeeks.org/python-quizzes-python-dictionary-quiz-question-25/?ref=ml_lbp"},
{"title": "Python-Quizzes | Python Dictionary Quiz | Question 14 - GeeksforGeeks", "h1": ["Python-Quizzes | Python Dictionary Quiz | Question 14"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Question 14:Find the output of the following program:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Test Series for Service-Based Companies ", "Data Structures and Algorithms - Self Paced "], "link": "https://www.geeksforgeeks.org/python-quizzes-python-dictionary-quiz-question-14/?ref=ml_lbp"},
{"title": "Python | Adding two list elements - GeeksforGeeks", "h1": ["Python | Adding two list elements"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Adding Two list Elements in Python", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input:", "Output: ", "Explanation: ", "Adding two list elements Naive Method ", "Output :", "Time Complexity:", "Auxiliary Space:", "Adding two list elements using List Comprehension", "Output :", "Time Complexity:", "Auxiliary Space:", "Adding two list elements using map() with add() Function", " ", "Output :", "Time Complexity:", "Auxiliary Space:", "Adding two list elements using zip() with sum()", "Output :", "Time Complexity:", "Auxiliary Space:", "Output", "Time complexity:", "Auxiliary space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-adding-two-list-elements/?ref=ml_lbp"},
{"title": "Python-Quizzes | Python Tuples Quiz | Question 7 - GeeksforGeeks", "h1": ["Python-Quizzes | Python Tuples Quiz | Question 7"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Question 7:", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures and Algorithms - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/python-quizzes-python-tuples-quiz-question-7/?ref=ml_lbp"},
{"title": "Python | Accessing all elements at given list of indexes - GeeksforGeeks", "h1": ["Python | Accessing all elements at given list of indexes"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Accessing all elements at given list of indexes", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input: ", "Output:", "Explanation:", " ", "map() ", " ", "__getitem__", " ", "ccessing all items on a given list using List Comprehension", "Output :", "Time Complexity: ", "Space Complexity:O(k)", "Accessing multiple elements at given list using map() and __getitem__", " ", "__getitem__", " ", "Output :", "Time Complexity: ", "Space Complexity:", "Accessing multiple items in a given list using operator.itemgetter()", "operator.", "itemgetter()", "Output :", "Time complexity:", "Space complexity:", "Algorithm:", "Output:", "Time Complexity: ", "Space Complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-accessing-all-elements-at-given-list-of-indexes/"},
{"title": "Python | Adding K to each element in a list of integers - GeeksforGeeks", "h1": ["Python | Adding K to each element in a list of integers"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using List Comprehension", "Output :", "Method #2: Using map() + lambda", "Output :", "Method #3 : Using map() + operator.add", "Output :", "Method #4: Using zip function", "Output", "Method #5:Using the built-in list method extend()’", "Step-by-step algorithm:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #6: Using numpy library", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-adding-k-to-each-element-in-a-list-of-integers/"},
{"title": "Python-Quizzes | Python Tuples Quiz | Question 3 - GeeksforGeeks", "h1": ["Python-Quizzes | Python Tuples Quiz | Question 3"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Question 3:", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures and Algorithms - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/python-quizzes-python-tuples-quiz-question-3/"},
{"title": "Python | Subtract two list elements if element in first list is greater - GeeksforGeeks", "h1": ["Python | Subtract two list elements if element in first list is greater"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input:", "Output:", "Input:", "Output:", "Method 1:", "Output:", "Method 2: ", "Output:", "Method 3:", "Output:", "Method 4:", "Output:", "Method 5: Using map() and lambda function", "Output", "Method 6: Using Pandas", "Output:", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Data Structures & Algorithms in JavaScript - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-subtract-two-list-elements-if-element-in-first-list-is-greater/"},
{"title": "Python-Quizzes | Python Tuples Quiz | Question 2 - GeeksforGeeks", "h1": ["Python-Quizzes | Python Tuples Quiz | Question 2"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Question 2:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Test Series for Service-Based Companies ", "Data Structures and Algorithms - Self Paced "], "link": "https://www.geeksforgeeks.org/python-quizzes-python-tuples-quiz-question-2/"},
{"title": "Python | Accessing nth element from tuples in list - GeeksforGeeks", "h1": ["Python | Accessing nth element from tuples in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension", "Output :", "Time complexity: ", "Auxiliary space: ", "Method #2 : Using map() + itemgetter()", "Output :", "Method #3 : Using zip()", "Output :", "Method #4 : Using map() + lambda", "Output", "Time complexity: ", "Auxiliary space: ", "Method #5: Using a for loop", "Output", "Time complexity: ", "Auxiliary space: ", "Method 6: Using reduce()", "Output", "Method #7 : Using numpy.array(), and then fancy indexing to get the nth column ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-accessing-nth-element-from-tuples-in-list/"},
{"title": "Python | Find elements of a list by indices - GeeksforGeeks", "h1": ["Python | Find elements of a list by indices"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Explanation: ", "Input :", "Output :", "Approach #1 : ", "Output:", "Time complexity", "Auxiliary space", "Approach #2 : ", "Output:", "Time complexity: ", "Auxiliary space: ", "Approach #3 : ", "Output:", "Time complexity: ", "Auxiliary space:", "Approach #4: ", "Output:", "Approach #6: ", "Output", "Time complexity: ", "Auxiliary space:", "Method#7: Using Recursive method.", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-find-elements-of-a-list-by-indices/?ref=next_article"},
{"title": "Python | Pandas dataframe.subtract() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.subtract()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.subtract()", "Syntax: ", "Parameters : ", "other : ", "axis : ", "level : ", "fill_value : ", "Returns :", "Example #1: ", "Output : ", "Example #2: ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-subtract/"},
{"title": "Python - Element Frequency starting with K in dictionary value List - GeeksforGeeks", "h1": ["Python – Element Frequency starting with K in dictionary value List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loop + startswith()", "Output : ", "Method #2 : Using sum() + startswith()", "Output : ", "Method #3 : Using list comprehension + count()", "Output", "Time Complexity : O(n^2)", "Auxiliary Space : O(n)", "Explanation:", "Method #5 : Using find(),extend(),values() methods", "Approach ", "Output", "Time Complexity : O(n^2)", "Auxiliary Space : O(n)", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-element-frequency-starting-with-k-in-dictionary-value-list/?type=article&id=383470"},
{"title": "Python | Ways to find indices of value in list - GeeksforGeeks", "h1": ["Python | Ways to find indices of value in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Ways to find indices of value in the list", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Find the Index of an Item Using the Naive Method", "Output", "Time Complexity:", "O(n)", "Auxiliary Space:", "O(n)", "Find the Index of an Item Using List Comprehension", "Output", "Time Complexity:", "O(n)", "Auxiliary Space:", "O(n)", "Find the Index of an Item Using Enumerate()", "unction ", "Output", "Time Complexity:", "O(n)", "Auxiliary Space:", "O(n)", "Find the Index of an Item Using filter()", "unction ", "Output", "Time Complexity:", "O(n)", "Auxiliary Space:", "O(n)", "Find the Index of an Item Using numpy Library", "OUTPUT:", "Time complexity: ", "Auxiliary space:", "Find the Index of an Item Using a for Loop", "Output", "Time complexity: O(n)", "Auxiliary space: O(k)", "Find the Index of an Item Using list.index() Method with a while Loop", "Output", "Time Complexity:", "Auxiliary Space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-ways-to-find-indices-of-value-in-list/?ref=ml_lbp"},
{"title": "Python | Operation to each element in list - GeeksforGeeks", "h1": ["Python | Operation to each element in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension", "Output:", "Method #2 : Using map()", "Output:", "Method #3 : Using enumerate and iteration", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-operation-to-each-element-in-list/"},
{"title": "Python-Quizzes | Python Tuples Quiz | Question 6 - GeeksforGeeks", "h1": ["Python-Quizzes | Python Tuples Quiz | Question 6"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Question 6:", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures and Algorithms - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/python-quizzes-python-tuples-quiz-question-6/"},
{"title": "Python-Quizzes | Python Tuples Quiz | Question 4 - GeeksforGeeks", "h1": ["Python-Quizzes | Python Tuples Quiz | Question 4"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Question 4:", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures and Algorithms - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/python-quizzes-python-tuples-quiz-question-4/?ref=next_article"},
{"title": "Python | Ways to initialize list with alphabets - GeeksforGeeks", "h1": ["Python | Ways to initialize list with alphabets"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Initialize the list with alphabets using ", "string.ascii_uppercase", " ", "Python3", "Initialize the list with alphabets using a naive method ", "Python3", "Initialize the list with alphabets using list comprehension", " ", "Python3", "Initialize the list with alphabets using a map()", " ", "Python3", "What kind of Experience do you want to share?"], "strong": ["Initialize the list with alphabets using ", "string.ascii_uppercase", "Note: ", "Output :", "Initialize the list with alphabets using a naive method ", "Refer", "Output : ", "Initialize the list with alphabets using list comprehension", "Output :", "Initialize the list with alphabets using a map()", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-ways-to-initialize-list-with-alphabets/"},
{"title": "Python | Indices of Kth element value - GeeksforGeeks", "h1": ["Python | Indices of Kth element value"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loop", "Output : ", "Method #2: Using enumerate() + list comprehension", "Output : ", "Method 3: ", "Output", "Time complexity:", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-indices-of-kth-element-value/"},
{"title": "Python | Make a list of intervals with sequential numbers - GeeksforGeeks", "h1": ["Python | Make a list of intervals with sequential numbers"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Method #1 :", "Output:", "Method #2 :", "Output:", "Method #3 :", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-make-a-list-of-intervals-with-sequential-numbers/?ref=ml_lbp"},
{"title": "Python | Find elements of a list by indices - GeeksforGeeks", "h1": ["Python | Find elements of a list by indices"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Explanation: ", "Input :", "Output :", "Approach #1 : ", "Output:", "Time complexity", "Auxiliary space", "Approach #2 : ", "Output:", "Time complexity: ", "Auxiliary space: ", "Approach #3 : ", "Output:", "Time complexity: ", "Auxiliary space:", "Approach #4: ", "Output:", "Approach #6: ", "Output", "Time complexity: ", "Auxiliary space:", "Method#7: Using Recursive method.", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-find-elements-of-a-list-by-indices/"},
{"title": "Python Program to Accessing index and value in list - GeeksforGeeks", "h1": ["Python Program to Accessing index and value in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Accessing index and value in list Using", "Output", "Time Complexity:", "Auxiliary Space:", "Output", "Time Complexity:", "Auxiliary Space:", "Accessing index and value in list", "Output", "Time Complexity:", "Auxiliary Space:", "Accessing index and value in list", "Output", "Time Complexity:", "Auxiliary Space:", "Accessing index and value in list Using numpy.ndenumerate()", "Approach:", "Output", "Accessing index and value in list Using heapq", "Approach:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-accessing-index-and-value-in-list/"},
{"title": "Python Lists - GeeksforGeeks", "h1": ["Python Lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Example of list in Python", "Python3", "Creating a List in Python", "Python3", "Python3", "Accessing elements from the List", "Python3", "Python3", "Python3", "Getting the size of Python list", "Python3", "Taking Input of a Python List", "Python3", "Python", "Adding Elements to a Python List", "Python3", "Python3", "Python3", "Reversing a List", "Python3", "Python3", "Removing Elements from the List", "Python3", "Python3", "Python3", "Slicing of a List", "Python3", "Python3", "List Comprehension", "Python3", "Python3", "Basic Example on Python List", "List Methods", "What kind of Experience do you want to share?"], "strong": ["Python Lists ", "Example of list in Python", "List", "Output:", "Note: ", "Output", "Time Complexity: ", "Space Complexity: ", "Output", "Example 1: Accessing elements from list", "Output", "Example 2: Accessing elements from a multi-dimensional list", "Output", "Output", "Time Complexity:", "Space Complexity: ", "Output", "Example 1: ", "Output:", "Example 2:", "Output:", "append()", "Output", "Time Complexity:", "pace Complexity:", "Output", "Time Complexity:", "Space Complexity:", "extend()", "Note: ", "Output", "Time Complexity:", "Space Complexity:", "Output", "Output", "remove()", "Note: ", "Example 1:", "Output", "Example 2:", "Output", "Time Complexity: ", "Space Complexity:", "Output", "Time Complexity:", "Space Complexity:", "To print elements from beginning to a range use:", "Note – ", "UNDERSTANDING SLICING OF LISTS:", "Output", "Output", "Python List comprehensions", "Syntax:", "Example:", "Output", "Output", "Useful Links:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-lists/?ref=previous_article"},
{"title": "Python | Reverse sign of each element in given list - GeeksforGeeks", "h1": ["Python | Reverse sign of each element in given list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Methods #1: ", "Output:", "Time Complexity: O(n).", "Space Complexity: O(1).", "Methods #2 : ", "Output:", "Time Complexity: O(n).", "Space Complexity: O(1).", "Method #3 : Using startswith() and replace() methods", "Output", "Time Complexity: O(n).", "Space Complexity: O(n).", "Method #4: Using map function and neg operator methods", "Output:", "Time Complexity: O(n).", "Space Complexity: O(1).", "Method #5 : Using find(),int()+slicing", "Approach", "Convert integer list to string list using list(),map(),str", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-reverse-sign-of-each-element-in-given-list/"},
{"title": "Python | Pandas dataframe.sub() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.sub()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.sub()", "Syntax: ", "Parameters : ", "other : ", "axis : ", "level : ", "fill_value : ", "Returns :", "Example #1: ", "Output : ", "Example #2: ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-sub/"},
{"title": "Python-Quizzes | Python Tuples Quiz | Question 7 - GeeksforGeeks", "h1": ["Python-Quizzes | Python Tuples Quiz | Question 7"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Question 7:", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures and Algorithms - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/python-quizzes-python-tuples-quiz-question-7/?ref=next_article"},
{"title": "Python | Perform operation on each key dictionary - GeeksforGeeks", "h1": ["Python | Perform operation on each key dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loop", "Output", "Time Complexity: O(n),", "Space Complexity: O(1).", "Method #2 : Using update() + dictionary comprehension", "Output", "Method #3 : Using map() + lambda function", "Output", "time complexity", "Auxiliary Space", "Method #4: Using the dict() constructor and a generator expression", "Output", "Time complexity: ", "Auxiliary space: ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-perform-operation-on-each-key-dictionary/"},
{"title": "Python | Pandas Series.is_monotonic_increasing - GeeksforGeeks", "h1": ["Python | Pandas Series.is_monotonic_increasing"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " Series.is_monotonic_increasing", "Syntax:", "Parameter : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2 : ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-series-is_monotonic_increasing/"},
{"title": "Python Program to find the cube of each list element - GeeksforGeeks", "h1": ["Python Program to find the cube of each list element"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method 1: ", "Example:", "Output:", "Time Complexity: O(n)", "Auxiliary Space: O(1)", "Method 2: ", "Output", "Time complexity: O(N)", "Auxiliary Space: O(N)", "Method 3: ", "Example:", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Method 4: ", "Example", "Output", "Time complexity: O(n)", "Auxiliary Space: O(1)", "Method 5:", "Example:", "Output:", "Method 6 : Using operator.pow() method", "Approach ", "Output", "Time Complexity : ", "Auxiliary Space : ", "Method 7:  using the map() function", "Output", "Time Complexity: ", "Auxiliary Space : ", "Using numpy:", "Algorithm:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-find-the-cube-of-each-list-element/"},
{"title": "Python-Quizzes | Python Tuples Quiz | Question 5 - GeeksforGeeks", "h1": ["Python-Quizzes | Python Tuples Quiz | Question 5"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Question 5:", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures and Algorithms - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/python-quizzes-python-tuples-quiz-question-5/"},
{"title": "Python-Quizzes | Python Tuples Quiz | Question 4 - GeeksforGeeks", "h1": ["Python-Quizzes | Python Tuples Quiz | Question 4"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Question 4:", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures and Algorithms - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/python-quizzes-python-tuples-quiz-question-4/"},
{"title": "How To Find the Length of a List in Python - GeeksforGeeks", "h1": ["How To Find the Length of a List in Python"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Find the Length of a List in Python", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Performance Analysis: Naive vs Python len() vs Python length_hint()", "Python3", "What kind of Experience do you want to share?"], "strong": [" Example:", "Input: ", "Output:", "Explanation: ", "1. Find the Length of a List Using len() Function", "Output: ", "Time Complexity:", "Auxiliary Space: ", "2. Find the Length of a List Using Naive Method", "Output:", "Time Complexity:", "Auxiliary Space:", "3. Find the Length of a List Using length_hint() Method", "Output :", "4. Find the Length of a List Using sum() Function", "Output:", "5. Find the Length of a List Using a List Comprehension", "Output", "Time Complexity: ", "Auxiliary Space: ", "6. Find the Length of a List Using Recursion", "lst", "Output", "Time complexity: ", "Space complexity: ", "7. Find the Length of a List Using enumerate() function", "Output", "8. Find the Length of a List Using Collections", "Collections", "Output", "Time complexity:", "The space complexity:", "Performance Analysis: Naive vs Python len() vs Python length_hint()", "Output:", "naive >> length_hint() > len()", "Check Out More Python Lists Pages:", "Python List methods", "Python List Exercise", "Space complexity of List Operations in Python", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-ways-to-find-length-of-list/?ref=next_article"},
{"title": "Python | Accessing variable value from code scope - GeeksforGeeks", "h1": ["Python | Accessing variable value from code scope"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using locals()", "Output : ", "Method #2: Using globals()", "Output : ", "Output", "Method 4: using the built-in function vars(). ", "Steps:", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Master Java Programming - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-accessing-variable-value-from-code-scope/"},
{"title": "Python-Quizzes | Python Tuples Quiz | Question 5 - GeeksforGeeks", "h1": ["Python-Quizzes | Python Tuples Quiz | Question 5"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Question 5:", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures and Algorithms - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/python-quizzes-python-tuples-quiz-question-5/?ref=next_article"},
{"title": "Python | Union of two or more Lists - GeeksforGeeks", "h1": ["Python | Union of two or more Lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Maintained repetition only", "Maintained repetition and order", "Without repetition", "Union of three lists", "Maintaining Repetition", "plus “+” operator", "Maintaining both Repetition and Order", "sorted() function", "Without Repetition", "set() function", "More than two lists", "set() and union() function", " Approach : Using extend() method", "collections", "lst1 and lst2", "extend()", "lst2", "lst1", "lst1", "lst1", "lst2.", "print()", "lst1", "set() ", "lst1", " list() ", "print() ", "x", "Output", " Approach : Using itertools", "Algorithm:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-union-two-lists/"},
{"title": "Python Program to assign each list element value equal to its magnitude order - GeeksforGeeks", "h1": ["Python Program to assign each list element value equal to its magnitude order"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input :", "Output : ", "Explanation : ", "Input : ", "Output :", "Explanation :", "Method 1 : Using", " set() ", "+ ", "zip()", " + ", "dict()", " +", " list comprehension", "Output:", "Method 2 : Using ", "sorted()", " + ", "set()", " + ", "index() ", "+", " list comprehension", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-assign-each-list-element-value-equal-to-its-magnitude-order/"},
{"title": "Python-Quizzes | Python Tuples Quiz | Question 6 - GeeksforGeeks", "h1": ["Python-Quizzes | Python Tuples Quiz | Question 6"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Question 6:", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures and Algorithms - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/python-quizzes-python-tuples-quiz-question-6/?ref=next_article"},
{"title": "Python - Assign keys with Maximum element index - GeeksforGeeks", "h1": ["Python – Assign keys with Maximum element index"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Method #1 : Using ", "max()", " + loop + ", "index()", "Output:", "Method #2 : Using dictionary comprehension + max() + index()", "Output:", "Method #3: Using a loop and the enumerate() function", "Step-by-step algorithm:", "Output", "Time Complexity: ", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-assign-keys-with-maximum-element-index/"},
{"title": "Python | Find maximum length sub-list in a nested list - GeeksforGeeks", "h1": ["Python | Find maximum length sub-list in a nested list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Approach #1 : ", "Output:", "Time Complexity:", "Auxiliary Space:", "Approach #2: ", "Output:", "Time Complexity", "Auxiliary Space:", "Approach #3: ", "Output:", "Time Complexity:", "Auxiliary Space:", "Approach 4: use list comprehension", "Output", "Time complexity", "Auxiliary space", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-find-maximum-length-sub-list-in-a-nested-list/"},
{"title": "Python | Intersection of two lists - GeeksforGeeks", "h1": ["Python | Intersection of two lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method 1:", "Method 2:", "set() method", "Method 3:", "set() the larger list", "intersection()", "intersection()", "Method 4:", "hybrid method", "Method 5:", "filter().", "Working: ", "Method 6: Using reduce():", "Algorithm:", "Output", "Time Complexity: O(n^2),", "Space Complexity: O(n),", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-intersection-two-lists/?ref=ml_lbp"},
{"title": "Python | Print all the common elements of two lists - GeeksforGeeks", "h1": ["Python | Print all the common elements of two lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Method 1:Using Set’s & property", "set1&set2", "Output:", "Time complexity: ", "Auxiliary space: ", "Method 2:Using Set’s intersection property", "Output:", "Time complexity: ", "Auxiliary space:", "Method 3: ", "Output:", "Time complexity: ", "Auxiliary space: ", "Method 4: Using collections", "Output", "Method 5: Using operator.countOf()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 6: ", "Output", "Time complexity: ", "Auxiliary space:", "Method 7: Using NumPy", "Output", "Time complexity: O(n log n)", "Auxiliary space: O(n),", "Method 8: Using itertools", "Algorithm:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-print-common-elements-two-lists/?ref=ml_lbp"},
{"title": "Python | Assign value to unique number in list - GeeksforGeeks", "h1": ["Python | Assign value to unique number in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using enumerate() + list comprehension", "Output:", "Method #2 : Using setdefault() + map() + count()", "Output:", "Time Complexity:", "Auxiliary Space:", "Method #3: Using in , not in operators and index() method", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #4: Using reduce():", "Output", "The time complexity : O(n^2), ", "The space complexity :O(n^2),", "Method 5: Using sorted() and bisect_left()", "In this approach, we first create a sorted copy of the original list. Then, we iterate over the sorted list and assign unique values to each element based on its position using the bisect_left() method from the bisect module.", "Output", "Method 6: Using numpy:", "Algorithm:", "Output:", "Time complexity: O(n^2),", "Space complexity: O(n), ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-assign-value-to-unique-number-in-list/"},
{"title": "Python | Assign multiple variables with list values - GeeksforGeeks", "h1": ["Python | Assign multiple variables with list values"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension ", "Output:", "Method #2 : Using itemgetter()", "Output:", "Method #3 : Using itertools.compress()", "Output:", " Using dictionary unpacking", "Output", "Time Complexity: O(1)", "Space Complexity: O(k), where k is the number of variables", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-assign-multiple-variables-with-list-values/"},
{"title": "Python - Assign values to initialized dictionary keys - GeeksforGeeks", "h1": ["Python – Assign values to initialized dictionary keys"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using dict() + zip()", "Output : ", "Time Complexity: ", "Auxiliary Space: ", "Method #2 : Using loop + zip()", "Output : ", "Method #3: Using keys() and for loop", "Output", "Method #4: Using dictionary comprehension", "Output", "Method #5: Using dictionary.update() method", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-assign-values-to-initialized-dictionary-keys/"},
{"title": "Python | Assign range of elements to List - GeeksforGeeks", "h1": ["Python | Assign range of elements to List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using extend()", "Output : ", "Method #2 Using * operator", "Output : ", "Method #3 Using the list() function:", "Output", "Time complexity: ", "Auxiliary space:", "Method #4 Using += operator:", "Output", "Time Complexity: O(N)", "Auxiliary Space:  O(N)", "Method 5: Using the append() method. ", "0", "5 ", "Output", "Time complexity: ", "Auxiliary space: ", "Method 6: Using the insert() method.", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-assign-range-of-elements-to-list/"},
{"title": "Python - Assign list items to Dictionary - GeeksforGeeks", "h1": ["Python – Assign list items to Dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using zip() + loop", "Output : ", "Method #2 : Using list comprehension + zip()", "Output : ", "Method #3 : Using for loop and update() method", "Output", "Method #4: Using dictionary comprehension and zip()", "Output", "Method #5:Using map() and filter()", "Algorithm", "Output", "Time Complexity: O(N)", "Auxiliary Space: O(N)", "Method 6: Using a list comprehension with enumerate() function:", "Output", "Method#7: Using Recursive method.", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-assign-list-items-to-dictionary/"},
{"title": "Python | K Value Indices Product - GeeksforGeeks", "h1": ["Python | K Value Indices Product"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Naive Method", "Output : ", "Method #2 : Using enumerate() + loop", "Output : ", "Output", "Method #4: Using numpy.where() function", "Step-by-step approach", "Method #5: Using a list comprehension and the reduce() function from the functools module.", "Steps:", "Output", "Time complexity: O(n)", "Auxiliary space: O(1) ", "Method #6: Using heapq :", "Algorithm:", "Output", "Time complexity:", "Space complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-k-value-indices-product/"},
{"title": "Python - Extracting Kth Key in Dictionary - GeeksforGeeks", "h1": ["Python – Extracting Kth Key in Dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list() + keys()", "Output : ", "Method #2 : Using next() + iter()", "Output : ", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-extracting-kth-key-in-dictionary/?ref=previous_article"},
{"title": "Python Program to get indices of sign change in a list - GeeksforGeeks", "h1": ["Python Program to get indices of sign change in a list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input :", "Output ", "Explanation : ", "Input : ", "Output :", "Explanation :", "Method 1 : ", "Example:", "Output", "Time Complexity: O(n), ", "Space Complexity: O(n), ", "Method 2 : ", "Example:", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method #3: Recursive method.", "Output", "time complexity", "Auxiliary space ", "Method #4: using the built-in zip() function ", "Step-by-step approach", "Output", "Method #5: Using itertools pairwise() and enumerate()", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-get-indices-of-sign-change-in-a-list/"},
{"title": "How To Find the Length of a List in Python - GeeksforGeeks", "h1": ["How To Find the Length of a List in Python"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Find the Length of a List in Python", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Performance Analysis: Naive vs Python len() vs Python length_hint()", "Python3", "What kind of Experience do you want to share?"], "strong": [" Example:", "Input: ", "Output:", "Explanation: ", "1. Find the Length of a List Using len() Function", "Output: ", "Time Complexity:", "Auxiliary Space: ", "2. Find the Length of a List Using Naive Method", "Output:", "Time Complexity:", "Auxiliary Space:", "3. Find the Length of a List Using length_hint() Method", "Output :", "4. Find the Length of a List Using sum() Function", "Output:", "5. Find the Length of a List Using a List Comprehension", "Output", "Time Complexity: ", "Auxiliary Space: ", "6. Find the Length of a List Using Recursion", "lst", "Output", "Time complexity: ", "Space complexity: ", "7. Find the Length of a List Using enumerate() function", "Output", "8. Find the Length of a List Using Collections", "Collections", "Output", "Time complexity:", "The space complexity:", "Performance Analysis: Naive vs Python len() vs Python length_hint()", "Output:", "naive >> length_hint() > len()", "Check Out More Python Lists Pages:", "Python List methods", "Python List Exercise", "Space complexity of List Operations in Python", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-ways-to-find-length-of-list/?ref=ml_lbp"},
{"title": "Python Program to Re-assign a dictionary based on path relation - GeeksforGeeks", "h1": ["Python Program to  Re-assign a dictionary based on path relation"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input", "Output", "Explanation", "Method 1: ", "Output:", "Output", "Method 3:  Using dictionary comprehension ", "Output", "Time complexity: O(n^2)", "Auxiliary space: O(n)", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-re-assign-a-dictionary-based-on-path-relation/"},
{"title": "Python | Union of two or more Lists - GeeksforGeeks", "h1": ["Python | Union of two or more Lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Maintained repetition only", "Maintained repetition and order", "Without repetition", "Union of three lists", "Maintaining Repetition", "plus “+” operator", "Maintaining both Repetition and Order", "sorted() function", "Without Repetition", "set() function", "More than two lists", "set() and union() function", " Approach : Using extend() method", "collections", "lst1 and lst2", "extend()", "lst2", "lst1", "lst1", "lst1", "lst2.", "print()", "lst1", "set() ", "lst1", " list() ", "print() ", "x", "Output", " Approach : Using itertools", "Algorithm:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-union-two-lists/?ref=next_article"},
{"title": "Python | Convert list of string to list of list - GeeksforGeeks", "h1": ["Python | Convert list of string to list of list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using strip() + split()", "Output :", "Method #2: Using list slicing and split()", "Output :", "Method#3: Using re.findall and list comprehension ", "Output:", "Method#4: U", "Output:", "Method #5:", "Output", "Method #6: Using json", "Output", "Method #7: Using list comprehension and the ast.literal_eval() function from the ast module.", "Output", "Method #8: Using enumeration", "test_list", " x ", "test_list ", "eval()", "x", "Output", "Time Complexity:", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-convert-list-of-string-to-list-of-list/?ref=previous_article"},
{"title": "Python | Assign range of elements to List - GeeksforGeeks", "h1": ["Python | Assign range of elements to List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using extend()", "Output : ", "Method #2 Using * operator", "Output : ", "Method #3 Using the list() function:", "Output", "Time complexity: ", "Auxiliary space:", "Method #4 Using += operator:", "Output", "Time Complexity: O(N)", "Auxiliary Space:  O(N)", "Method 5: Using the append() method. ", "0", "5 ", "Output", "Time complexity: ", "Auxiliary space: ", "Method 6: Using the insert() method.", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-assign-range-of-elements-to-list/?type=article&id=302790"},
{"title": "Python | Ways to Copy Dictionary - GeeksforGeeks", "h1": ["Python | Ways to Copy Dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Dictionary", "Method#1: Using copy()", "Output", "Method #2: Using dict()", "Output", "Method#3 : Using Dictionary comprehension", "Output", "Method #4: Using copy module", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-ways-to-copy-dictionary/"},
{"title": "Python String join() Method - GeeksforGeeks", "h1": ["Python String join() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python String join() Syntax", "String join() in Python Examples", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python join()", "Example:", "Output:", "Syntax:", "Parameters:", "List, Tuple, String, Dictionary", " and Set", "Return Value:", "Type Error", "Output: ", "Output: ", "Note: ", "4 ", "Output: ", "Output:", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-string-join-method/?ref=next_article"},
{"title": "Python - Assign pair elements from Tuple Lists - GeeksforGeeks", "h1": ["Python – Assign pair elements from Tuple Lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method 1: ", "Output", "Time Complexity:", "Auxiliary Space:", "Method 2: ", "Output", "Time complexity: ", "Auxiliary space:", "Method #3: Use dictionary comprehension as shown below", "test_list", "Output", "Time complexity: ", "Auxiliary space: ", "Method 4: Using the defaultdict() method ", "Output", "Method 5: Using the itertools.groupby() function. ", "itertools", "test_list", "sorted() ", "test_list", "itertools.groupby()", "Output", "Time complexity: ", "Auxiliary space: ", "Method 6: Using numpy arrays and functions", "Step-by-step approach:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-assign-pair-elements-from-tuple-lists/"},
{"title": "Python | Assign ids to each unique value in a list - GeeksforGeeks", "h1": ["Python  | Assign ids to each unique value in a list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using defaultdict + lambda + list comprehension", "Output", "Method #2 : Using OrderedDict.fromkeys() + enumerate() + list comprehension", "Output", "Method #3: Using in , not in operators and index() method", "Output", "Method #4: Using reduce():", "Algorithm :", "Output", " The time complexity: O(n^2) ", "The space complexity : O(n)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-assign-ids-to-each-unique-value-in-a-list/"},
{"title": "Python Program to Split the Even and Odd elements into two different lists - GeeksforGeeks", "h1": ["Python Program to Split the Even and Odd elements into two different lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Split the Even and Odd elements", "Examples", "Input:", "Output:", "Input:", "Output:", "Output:", "Alternate Shorter Solution", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-split-even-odd-elements-two-different-lists/?ref=ml_lbp"},
{"title": "Python String lower() Method - GeeksforGeeks", "h1": ["Python String lower() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Syntax of String lower()", "What is the Python String lower() Method?", "How to use the Python string lower() Method?", "Python3", "How to Convert a String to Lowercase in Python", "Python3", "Python3", "Other Methods to Convert String to Lower Case", "Python3", "Python3", "Python3", "Python3", "Python3", "Applications of String lower() method", "Python3", "What kind of Experience do you want to share?"], "strong": ["lower()", "Example:", "Output", "string_name.lower()", "Parameters", "Returns", "Output", " Lowercase a string in Python ", "Output:", "Original String", "Converted String:", "String with alphanumeric characters", "Output:", "Original String:", "Converted String:", "Output:", "Output :", "Output :", "() Function", "swapcase()", " ", "Output:", "() Function", "casefold", "Output:", "Comparison of Strings using lower() Method", "Output:", "Strings are same", "You can also check other ", "string methods", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-string-lower/?ref=next_article"},
{"title": "Python String isupper() method - GeeksforGeeks", "h1": ["Python String isupper() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python String isupper() method Syntax", "Python String isupper() method Examples", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python String isupper()", "Syntax: ", "Returns: ", "Output:", "Example 1: ", "Output:", "Practical Application", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-string-isupper-method/?ref=previous_article"},
{"title": "Python - Assign keys with Maximum element index - GeeksforGeeks", "h1": ["Python – Assign keys with Maximum element index"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Method #1 : Using ", "max()", " + loop + ", "index()", "Output:", "Method #2 : Using dictionary comprehension + max() + index()", "Output:", "Method #3: Using a loop and the enumerate() function", "Step-by-step algorithm:", "Output", "Time Complexity: ", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-assign-keys-with-maximum-element-index/?ref=previous_article"},
{"title": "Python Dictionary copy() - GeeksforGeeks", "h1": ["Python Dictionary copy()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Syntax of copy() method", "Python3", "Python3", "Difference between shallow copy and deep copy", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python Dictionary copy() method", "shallow copy", " Examples", "Input:", "Output:", "Syntax of copy() method", "Syntax:", "Return:", "Python ", "Error:", "Output:", "Example 2: Python Dictionary copy()", "Output:", "Example 1: Using copy()", "Output: ", "Output: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-dictionary-copy/?ref=ml_lbp"},
{"title": "Python String join() Method - GeeksforGeeks", "h1": ["Python String join() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python String join() Syntax", "String join() in Python Examples", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python join()", "Example:", "Output:", "Syntax:", "Parameters:", "List, Tuple, String, Dictionary", " and Set", "Return Value:", "Type Error", "Output: ", "Output: ", "Note: ", "4 ", "Output: ", "Output:", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-string-join-method/?type=article&id=169595"},
{"title": "Python Program to Split a List into Two Halves - GeeksforGeeks", "h1": ["Python Program to Split a List into Two Halves"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Program To Split A List Into Two Halves", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output", "Output", "Output", "Output ", "Conclusion ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-split-a-list-into-two-halves/"},
{"title": "Python program to check if number is palindrome (one-liner) - GeeksforGeeks", "h1": ["Python program to check if number is palindrome (one-liner)"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Palindrome Number Program in Python", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input1:", "Output1:", "Input2: ", "Output2:", "Palindrome Program using math.log() + recursion + list comprehension", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Python Check Palindrome Using str() + string slicing", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(1)", "Time Complexity:", "Auxiliary Space:", "Palindrome Program in Python Using all() and zip()", "Output", "Time complexity:", "Space complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-check-if-number-is-palindrome-one-liner/"},
{"title": "Python-Quizzes | Python Dictionary Quiz | Question 5 - GeeksforGeeks", "h1": ["Python-Quizzes | Python Dictionary Quiz | Question 5"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Question 5:Find the output of the following program:", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures and Algorithms - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/python-quizzes-python-dictionary-quiz-question-5/"},
{"title": "Python | Create list of numbers with given range - GeeksforGeeks", "h1": ["Python | Create list of numbers with given range"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Naive Approach using a loop", "Python3", "Using List comprehension ", "Python3", "Using Python range()", "Python3", "Using itertools:", "Python3", "Using numpy.arange() ", "Python3", "Using numpy to create list of numbers with given range", "Python3", "Python3", "Approach 5: Using map() and lambda function", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Creating a list of numbers with a given range in ", "Python", "Output:", "Output:", "Output:", "Output", "Output:", "Output:", "Output", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-create-list-of-numbers-with-given-range/?ref=ml_lbp"},
{"title": "Python List Equality | Program to check if two given matrices are identical - GeeksforGeeks", "h1": ["Python List Equality | Program to check if two given matrices are identical"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "List Equality", "Implementation:", "Output", "Output", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-list-equality-program-check-two-given-matrices-identical/"},
{"title": "Python | Split a sentence into list of words - GeeksforGeeks", "h1": ["Python | Split a sentence into list of words"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Method 1: Split a sentence into a list using split()", "split()", "Output", "Method 2: Split a sentence into a list u", "Output", "Method 3: Split a sentence into a list u", "Output", "Output:", "Output", "METHOD 6:Using lambda function.", "APPROACH:", "ALGORITHM:", "Output", "Time complexity:", "O(n * m + n + k).", "Space complexity:", "O(n + k)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-spilt-a-sentence-into-list-of-words/"},
{"title": "Python Collections Module - GeeksforGeeks", "h1": ["Python Collections Module"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Counters", "Python3", "OrderedDict", "Python3", "Python3", "DefaultDict", "Python3", "Python3", "ChainMap", "Python3", "Python3", "Python3", "NamedTuple", "Python3", "Python3", "Deque", "Python3", "Python3", "Python3", "UserDict", "Python3", "UserList", "Python3", "UserString", "Python3", "What kind of Experience do you want to share?"], "strong": ["Table of Content:", "Note: ", "Syntax:", "Example:", "Output:", "Note: ", "Syntax:", "Example:", "Output:", "Example:", "Output:", "Note: ", "Syntax:", "Example:", "Output:", "Example 2:", "Output:", "Note:", "Syntax:", "Example:", "Output:", "Example:", "Output:", "new_child()", "Example:", "Output:", "Note: ", "Syntax:", "Example:", "Output:", "1. _make():", "2. _asdict():", " ", "Example:", "Output:", "Note: ", "Syntax:", "Example:", "Output:", "Example:", "Output:", "Example:", "Output:", "Note:", "Syntax:", "Example:", "Output:", "Syntax:", "Example:", "Output:", "Note:", "Syntax:", "Example:", "Output:", "Note:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-collections-module/"},
{"title": "Python Program for Iterative Quick Sort - GeeksforGeeks", "h1": ["Python Program for Iterative Quick Sort"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "QuickSort using different languages", "Iterative QuickSort", "Different implementations of QuickSort", " Visualization of QuickSort", "Partitions in QuickSort", "Some problems on QuickSort", "QuickSort using different languages", "Iterative QuickSort", "Different implementations of QuickSort", " Visualization of QuickSort", "Partitions in QuickSort", "Some problems on QuickSort", "Python", "What kind of Experience do you want to share?"], "strong": ["Output:", "Time Complexity:", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-for-iterative-quick-sort/"},
{"title": "Python | Count occurrences of an element in a list - GeeksforGeeks", "h1": ["Python | Count occurrences of an element in a list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Count Occurrences of Item in Python List", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples: ", "Input:", "Output:", "Explanation: ", "Input:", "Output:", "Explanation:", "Python Count occurrences using a Loop in Python", "Output", "Output", "Python Count using Enumerate Function", "Output", "Count occurrences of an element using count()", "Output", "Python Count occurrences of an element in a list using Counter()", "Output", "sing", "Output", "Output", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-count-occurrences-element-list/?ref=ml_lbp"},
{"title": "Python NLTK | nltk.tokenizer.word_tokenize() - GeeksforGeeks", "h1": ["Python NLTK | nltk.tokenizer.word_tokenize()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["nltk.tokenize.word_tokenize()", "syllables", "Syntax :", "Return :", "Return the list of syllables of words.", "Example #1 :", "Output :", "Example #2 :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-nltk-nltk-tokenizer-word_tokenize/"},
{"title": "Python - Queue.LIFOQueue vs Collections.Deque - GeeksforGeeks", "h1": ["Python – Queue.LIFOQueue vs Collections.Deque"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["queue.LifoQueue:", "Below is a program which depicts the implementation of ", "Lifo.Queue", ":", "Output:", "collections.deque:", "Below is a program that illustrates the implementation of ", "collections.deque", ":", "Output:", "Difference between LIFOQueue and Deque:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-queue-lifoqueue-vs-collections-deque/"},
{"title": "Python program to print words from a sentence with highest and lowest ASCII value of characters - GeeksforGeeks", "h1": ["Python program to print words from a sentence with highest and lowest ASCII value of characters"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["S", "N", "Examples:", "Approach 1: ", "list", "lis[].", "maxi, mini, maxId,", "minId", " ", "lis[] ", "averageValue(),", "lis[]", " i", "th", " ", "lis[]", " ", "curr.", "curr> maxi, ", "maxi", "maxi = curr", "maxId = i.", "curr< mini,", "mini ", " mini = curr ", "minId = i.", "lis[minId]", "lis[maxId]", ".", "Output", "Time Complexity: ", "Auxiliary Space: ", "Approach 2: Using ord(),statistics.mean(),sort(),extend(),index() methods", "Output", "Time Complexity: O(N)", "Auxiliary Space: O(N) ", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-print-words-from-a-sentence-with-highest-and-lowest-ascii-value-of-characters/"},
{"title": "Python | NLTK nltk.tokenize.ConditionalFreqDist() - GeeksforGeeks", "h1": ["Python | NLTK nltk.tokenize.ConditionalFreqDist()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["nltk.tokenize.ConditionalFreqDist()", "Syntax :", "Return :", "Return the frequency distribution of words in a dictionary.", "Example #1 :", "Output :", "Example #2 :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-nltk-nltk-tokenize-conditionalfreqdist/"},
{"title": "Python Program for Iterative Merge Sort - GeeksforGeeks", "h1": ["Python Program for Iterative Merge Sort"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Program for Iterative Merge Sort", "Python", "What kind of Experience do you want to share?"], "strong": ["Output", "Time Complexity", "Auxiliary Space", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-for-iterative-merge-sort/"},
{"title": "Python Program for Merge Sort - GeeksforGeeks", "h1": ["Python Program for Merge Sort"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Merge sort in different languages", "Variations of Merge Sort", "Merge Sort in Linked List", "Visualization of Merge Sort", "Some problems on Merge Sort", "Merge sort in different languages", "Variations of Merge Sort", "Merge Sort in Linked List", "Visualization of Merge Sort", "Some problems on Merge Sort", "Python Program for Merge Sort", "Python3", "What kind of Experience do you want to share?"], "strong": ["The merge() function", "Output", "Time Complexity:", "Auxiliary Space:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-for-merge-sort/"},
{"title": "Python NLTK | nltk.tokenize.StanfordTokenizer() - GeeksforGeeks", "h1": ["Python NLTK | nltk.tokenize.StanfordTokenizer()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["nltk.tokenize.StanfordTokenizer()", "stanford", "Syntax :", "Return :", "Return the tokens from a string of characters or numbers.", "Example #1 :", "Output :", "Example #2 :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-nltk-nltk-tokenize-stanfordtokenizer/"},
{"title": "Python | NLTK nltk.tokenize.ConditionalFreqDist() - GeeksforGeeks", "h1": ["Python | NLTK nltk.tokenize.ConditionalFreqDist()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["nltk.tokenize.ConditionalFreqDist()", "Syntax :", "Return :", "Return the frequency distribution of words in a dictionary.", "Example #1 :", "Output :", "Example #2 :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-nltk-nltk-tokenize-conditionalfreqdist/?ref=ml_lbp"},
{"title": "Python program to check if a string contains all unique characters - GeeksforGeeks", "h1": ["Python program to check if a string contains all unique characters"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples: ", "Input : ", "Output:", "Input :", "Output:", "Implementation:", "Output", "Complexity Analysis:", "Time Complexity:", "O(N),", "Auxiliary Space:", "O(1),", "Method #2:Using Built-in Python Functions", "Counter() ", "Implementation:", "Output", "Complexity Analysis:", "Time Complexity: O(N)", "Auxiliary Space:", "O(26)", "Method #3 : Using list() and set() methods", "Output", "Time Complexity: O(logn)", "Auxiliary Space: O(1)", "Method #4: Using for loop and membership operators", "Output", "Time Complexity: O(N)", "Auxiliary Space: O(N)", "Method #5 : Using Operator.countOf() function", "Output", "Complexity Analysis:", "Time Complexity: O(N), where N is the length of the string.", "Auxiliary Space: O(1), no extra space required so it is a constant.", "Method #6 : Using count() function", "Output", "Time Complexity: O(N)", "Auxiliary Space: O(1)", "Data Structures and Algorithms - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-check-if-a-string-contains-all-unique-characters/?ref=ml_lbp"},
{"title": "Python - Counter.items(), Counter.keys() and Counter.values() - GeeksforGeeks", "h1": ["Python – Counter.items(), Counter.keys() and Counter.values()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Counter.items()", "Python3", "Counter.keys()", "Python3", "Counter.values()", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax : ", "Parameters : ", "Returns : ", "Example :", "Output :", "Syntax : ", "Parameters : ", "Returns : ", "Example :", "Output :", "Syntax : ", "Parameters : ", "Returns : ", "Example :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-counter-items-counter-keys-and-counter-values/?ref=ml_lbp"},
{"title": "Python Program For Merge Sort Of Linked Lists - GeeksforGeeks", "h1": ["Python Program For Merge Sort Of Linked Lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["PRACTICE", "Output:", "Time Complexity: ", "Space Complexity: ", "Approach 2:", "Output:", "Time Complexity", "Space Complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-for-merge-sort-of-linked-lists/"},
{"title": "Python NLTK | nltk.tokenizer.word_tokenize() - GeeksforGeeks", "h1": ["Python NLTK | nltk.tokenizer.word_tokenize()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["nltk.tokenize.word_tokenize()", "syllables", "Syntax :", "Return :", "Return the list of syllables of words.", "Example #1 :", "Output :", "Example #2 :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-nltk-nltk-tokenizer-word_tokenize/?ref=ml_lbp"},
{"title": "Python Program for Comb Sort - GeeksforGeeks", "h1": ["Python Program for Comb Sort"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "What kind of Experience do you want to share?"], "strong": ["Comb Sort ", "(n", "2", ")", "Output", "Time Complexity:", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-for-comb-sort/?ref=previous_article"},
{"title": "Python | os.supports_bytes_environ object - GeeksforGeeks", "h1": ["Python | os.supports_bytes_environ object"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Python3", "What kind of Experience do you want to share?"], "strong": ["OS module", "os.supports_bytes_environ", "os.getenvb()", "os.environb", "os.supports_bytes_environ", "For example:", "os.supports_bytes_environ", "os.getenvb()", "os.environb", "Syntax:", "Parameters:", "Return Type:", "Code:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-supports_bytes_environ-object-2/"},
{"title": "Python Program to Count Inversions in an array | Set 1 (Using Merge Sort) - GeeksforGeeks", "h1": ["Python Program to Count Inversions in an array | Set 1 (Using Merge Sort)"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input:", "Output:", "Explanation:", "Input:", "Output:", "Explanation:", "PRACTICE", "METHOD 1 (Simple):", "Approach:", "Algorithm:", "Implementation:", "Output:", "Complexity Analysis:", "Time Complexity:", "Space ", ":", "METHOD 2(Enhance Merge Sort):", "Approach:", "How to get the number of inversions in merge()?", "The complete picture:", "Algorithm:", "Implementation:", "Output:", "Complexity Analysis:", "Time Complexity:", "Space ", ":", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-for-count-inversions-in-an-array-set-1-using-merge-sort/"},
{"title": "Python | Counter Objects | elements() - GeeksforGeeks", "h1": ["Python | Counter Objects | elements()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Counter ", "collections", "Counter", "elements()", "Parameters :", "Return type : ", "Errors and Exceptions :", "-> ", "-> ", "Code #1:", "Output:", "Output:", "Code #2:", "Output:", "Code #3:", "Output:", "Code #4:", "Output:", "Note:", "Applications:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-counter-objects-elements/"},
{"title": "Python NLTK | nltk.tokenize.TabTokenizer() - GeeksforGeeks", "h1": ["Python NLTK | nltk.tokenize.TabTokenizer()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["nltk.tokenize.TabTokenizer()", "Syntax :", "Return :", "Example #1 :", "Output :", "Example #2 :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-nltk-nltk-tokenize-tabtokenizer/?ref=ml_lbp"},
{"title": "Python | Testing Output to stdout - GeeksforGeeks", "h1": ["Python | Testing Output to stdout"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["standard Output (sys.stdout)", "unittest.mock module’s ", "patch()", "Code #1 : Example", "Code #2 : Test code for the above code", "urlprint()", "unittest.mock.patch()", "sys.stdout ", "fake_out ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-testing-output-to-stdout/?ref=next_article"},
{"title": "Python NLTK | nltk.WhitespaceTokenizer - GeeksforGeeks", "h1": ["Python NLTK | nltk.WhitespaceTokenizer"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["nltk.tokenize.WhitespaceTokenizer()", "whitespaces", "new line", "tabs", "Syntax :", "Return :", "Return the tokens from a string", "Example #1 :", "Output :", "Example #2 :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-nltk-nltk-whitespacetokenizer/"},
{"title": "Python Program for ShellSort - GeeksforGeeks", "h1": ["Python Program for ShellSort"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Program for ShellSort", "Python", "What kind of Experience do you want to share?"], "strong": ["Output", "Time Complexity: ", "Auxiliary Space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-for-shellsort/"},
{"title": "Python Program for BogoSort or Permutation Sort - GeeksforGeeks", "h1": ["Python Program for BogoSort or Permutation Sort"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["PseudoCode:", "Output", "Time Complexity:", "Worst Case:", "Average Case:", "Best Case:", "Auxiliary Space:", "BogoSort implementation using builtin shuffle() and sorted() function", "random.shuffle", "Output", "Time Complexity:", "Worst Case: ", "Average Case:", "Best Case:", "Auxiliary Space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-for-bogosort-or-permutation-sort/"},
{"title": "Python Program for Stooge Sort - GeeksforGeeks", "h1": ["Python Program for Stooge Sort"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output:", "Time Complexity", "T(n) = 3T(3n/2) + O(1)", "Auxiliary Space", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-program-for-stooge-sort/"},
{"title": "Python | Extending and customizing django-allauth - GeeksforGeeks", "h1": ["Python | Extending and customizing django-allauth"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Django Basics", "Django view", "Django Model", "Django Forms", "Django URLS", "More topics on Django", "Projects", "Django Interview Questions and Answers", "Django Basics", "Django view", "Django Model", "Django Forms", "Django URLS", "More topics on Django", "Projects", "Django Interview Questions and Answers", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Extending Signup Form or adding custom fields in django-allauth:", " forms.py . ", "User Intervention and Custom validations:", "Example #1: Restricted List of email’s", "Example #2: Add a Maximum length to a username", "References: ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-extending-and-customizing-django-allauth/?ref=lbp"},
{"title": "Python - Remove Similar Rows from Tuple Matrix - GeeksforGeeks", "h1": ["Python – Remove Similar Rows from Tuple Matrix"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Input", "Output", "Method #1: Using set() + tuple() + sorted() + list comprehension", "Output : ", "Method #1: Using set() + tuple() + sorted() + list comprehension", "Output : ", "Method #3 : Using dict + tuple() + list ", "Output", "Method #4:  Using the numpy library to remove duplicates:", "Algorithm:", "Output:", "Time complexity:", "Space complexity:", "Method 5: Using a loop to iterate over each tuple and checking if it has already been added to the unique list using a separate list.", "unique_list", "test_list", "unique_list", "unique_list", "Output", "Time complexity:", "Auxiliary space: ", "Method#6: Using Recursive method.", "Algorithm:", "Output", "Time complexity:", "Space complexity:", "Method#7: Using heapq:", "Algorithm:", "Output", "Time complexity:", "Auxiliary Space:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-remove-similar-rows-from-tuple-matrix/?ref=ml_lbp"},
{"title": "Python | Print an Inverted Star Pattern - GeeksforGeeks", "h1": ["Python | Print an Inverted Star Pattern"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Let’s see Python program to print inverted star pattern:", "Output", "Time complexity:", "Auxiliary Space: ", "Example2: Using Recursion", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Master Java Programming - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-print-inverted-star-pattern/"},
{"title": "Python 3 | Program to print double sided stair-case pattern - GeeksforGeeks", "h1": ["Python 3 | Program to print double sided stair-case pattern"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input:", "Output:", "Note:", "Example1", "Output:", "Time Complexity: ", "Auxiliary Space:", "Example 2", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-3-program-print-double-sided-stair-case-pattern/"},
{"title": "Python | Django Admin Interface - GeeksforGeeks", "h1": ["Python | Django Admin Interface"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Django Basics", "Django view", "Django Model", "Django Forms", "Django URLS", "More topics on Django", "Projects", "Django Interview Questions and Answers", "Django Basics", "Django view", "Django Model", "Django Forms", "Django URLS", "More topics on Django", "Projects", "Django Interview Questions and Answers", "Django  Admin Interface", "What kind of Experience do you want to share?"], "strong": ["Prerequisites: ", "Django  Admin Interface", "Creating a Superuser in Django Project", "Note: ", " Then run the command:", "python manage.py changepassword <username>", "python manage.py changepassword Abhishek_Shakya", "python manage.py createapp myapp", "from .models import <model.name>", "from .models import Faclity_details", "admin.site.register<Model.name>", "admin.site.register(Faclity_details)", "python manage.py makemigrations", "pyhton manage.py migrate", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-django-admin-interface/?ref=previous_article"},
{"title": "Python - Matrix elements Frequencies Counter - GeeksforGeeks", "h1": ["Python – Matrix elements Frequencies Counter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using Counter() + sum() + map()", "Output : ", "Method #2 : Using chain() + Counter()", "Output : ", "Method #3 : Using extend(),set() and count() methods", "Output", "Time Complexity: O(nlogn)", "Auxiliary Space: O(n)", "Method #4 : Using extend(),set() and operator.countOf() methods", "Output", "Method #5 :Using itertools.chain() and collections.Counter(): ", "Algorithm :", "Output", "Time complexity:", "Space complexity:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-matrix-elements-frequencies-counter/"},
{"title": "Python Program for Odd-Even Sort / Brick Sort - GeeksforGeeks", "h1": ["Python Program for Odd-Even Sort / Brick Sort"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output", "Time Complexity:", "Auxiliary Space:", "Python Program for Odd-Even Sort / Brick Sort Using the sorted() function ", "odd-indexed and even-indexed ", "assign them back", "Output", "Time Complexity: ", "Auxiliary Space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-for-odd-even-sort-brick-sort/?ref=next_article"},
{"title": "Python | os.umask() method - GeeksforGeeks", "h1": ["Python | os.umask() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "What kind of Experience do you want to share?"], "strong": ["Code #1:", "Output:", "Code #2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-umask-method/?ref=next_article"},
{"title": "Python | os.strerror() method - GeeksforGeeks", "h1": ["Python | os.strerror() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "What kind of Experience do you want to share?"], "strong": ["Code #1:", "Output:", "Code #2:", "Output:", "Code #3:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-strerror-method/?ref=previous_article"},
{"title": "Python-interface module - GeeksforGeeks", "h1": ["Python-interface module"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Declaring interface", "Implementing interface", "Methods", "Interface Inheritance", "What kind of Experience do you want to share?"], "strong": ["zope.interface", "interface.Interface", "Syntax", "Example ", "Output :", "implementer", "Syntax : ", "Example ", "implementedBy(class) –", "providedBy(object) –", "providedBy(class) –", "list(zope.interface.implementedBy(class)) –", "list(zope.interface.providedBy(object)) –", "list(zope.interface.providedBy(class)) –", "Output :", "extends(interface) – ", "isOrExtends(interface) – ", "isEqualOrExtendedBy(interface) – ", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-interface-module/"},
{"title": "Python Program for BogoSort or Permutation Sort - GeeksforGeeks", "h1": ["Python Program for BogoSort or Permutation Sort"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["PseudoCode:", "Output", "Time Complexity:", "Worst Case:", "Average Case:", "Best Case:", "Auxiliary Space:", "BogoSort implementation using builtin shuffle() and sorted() function", "random.shuffle", "Output", "Time Complexity:", "Worst Case: ", "Average Case:", "Best Case:", "Auxiliary Space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-for-bogosort-or-permutation-sort/?ref=previous_article"},
{"title": "Python - Network Interface - GeeksforGeeks", "h1": ["Python – Network Interface"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Network interface", "Installation:", "Implementation of ", "netifaces", " module for various network operations:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "GATE Data Science and Artificial Intelligence 2025 ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-network-interface/"},
{"title": "Python Program for Gnome Sort - GeeksforGeeks", "h1": ["Python Program for Gnome Sort"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "What kind of Experience do you want to share?"], "strong": ["Algorithm Steps:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-for-gnome-sort/?ref=next_article"},
{"title": "Python Program for Iterative Merge Sort - GeeksforGeeks", "h1": ["Python Program for Iterative Merge Sort"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Program for Iterative Merge Sort", "Python", "What kind of Experience do you want to share?"], "strong": ["Output", "Time Complexity", "Auxiliary Space", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-for-iterative-merge-sort/?ref=next_article"},
{"title": "Python Property Decorator - @property - GeeksforGeeks", "h1": ["Python Property Decorator – @property"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python @property decorator", "Python", "Python", "What kind of Experience do you want to share?"], "strong": ["metaprogramming", "Note:", "Now, lets see some examples to illustrate the use of @property decorator in Python:", "Example 1:", "Output:", "name(self)", "name(self, val)", "__name", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-property-decorator-property/?ref=next_article"},
{"title": "Python Program for Check if count of divisors is even or odd - GeeksforGeeks", "h1": ["Python Program for Check if count of divisors is even or odd"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Program for Check if count of divisors is even or odd using Naive Approach:", "Python3", "Efficient Solution: ", "Python3", "Python Program for Check if count of divisors is even or odd using factorization:", "Python3", "What kind of Experience do you want to share?"], "strong": ["n", "Examples", "naive approach", "Output", "Time Complexity: ", "Auxiliary Space: ", "Efficient Solution: ", "Output", "Time Complexity:", "Auxiliary Space:", "Output", "Time Complexity: ", "Auxiliary space: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-for-check-if-count-of-divisors-is-even-or-odd/?ref=previous_article"},
{"title": "Python Program to Count Inversions of size three in a given array - GeeksforGeeks", "h1": ["Python Program to Count Inversions of size three in a given array"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example :", "Simple approach :-", "Time complexity", "Better Approach :", "Output :", "Time Complexity", "Binary Indexed Tree Approach :", "Solution :", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-program-to-count-inversions-of-size-three-in-a-given-array/"},
{"title": "Python program to get Current Time - GeeksforGeeks", "h1": ["Python program to get Current Time"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example 1: Current time of a timezone –", "Output:", "Example 2 : Current time – ", "Output:", "Example 3:", "Output:", "Example 4. Getting Time –", "Output:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-get-current-time/"},
{"title": "Python Programs Archives - GeeksforGeeks", "h1": ["Python Programs"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/category/python-programs/"},
{"title": "Python | Sort lists in tuple - GeeksforGeeks", "h1": ["Python | Sort lists in tuple"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using tuple() + sorted() + generator expression", "Output : ", "Method #2 : Using map() + sorted()", "Output : ", "Output", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-sort-lists-in-tuple/?ref=ml_lbp"},
{"title": "Python | Add list elements with a multi-list based on index - GeeksforGeeks", "h1": ["Python | Add list elements with a multi-list based on index"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example: ", "Input:", "Output:", "Explanation:", "Method #1: Using iteration", "Output:", "Method #2: Using enumerate()", "Output:", "Method #3: Using Zip() ", "Output:", "Method #4: Using map()", "Output", "Method #5: Using nested list comprehension", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-add-list-elements-with-a-multi-list-based-on-index/"},
{"title": "Python | Reverse each tuple in a list of tuples - GeeksforGeeks", "h1": ["Python | Reverse each tuple in a list of tuples"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Method #1 : ", "Output", "Method #2 : ", "Output", "Method #3 : ", "Output", "  Method #3 :Using a list comprehension and zip", "Output", "Output", " Using Recursive method.", "Algorithm:", "Output", "Using numpy:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-reverse-each-tuple-in-a-list-of-tuples/?ref=ml_lbp"},
{"title": "Python | Longest Run of given Character in String - GeeksforGeeks", "h1": ["Python | Longest Run of given Character in String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loop", "Output", "Method #2 : Using max() + re.findall()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3 : Using while loop and max(),pop() methods", "Output", "Method #4 : Using recursive method", "Output", "Time Complexity:", "Auxiliary Space: ", "Method #5: Using itertools groupby()", "itertools ", "test_str ", "K", "itertools.groupby() ", "K,", "K ", "test_str", "result", "Output", "Time complexity: O(n)", "Auxiliary Space: O(k)", "Method #6: Using Counter from collections module:", "Algorithm:", "Output", "Time Complexity: O(n)", "Space Complexity: O(k)", "Method #7: Using regex", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-longest-run-of-given-character-in-string/?ref=next_article"},
{"title": "Python Program that prints elements common at specified index of list elements - GeeksforGeeks", "h1": ["Python Program that prints elements common at specified index of list elements"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Illustration:", "Method 1 : ", "Output", "Method 2 : ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 3: Using set comprehension + zip() function", "Output", "Time Complexity: O(n2)", "Auxiliary Space: O(n)", "Method 4: Using set intersection and loop", "Example:", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(m),", "Method 5: Using Counter from collections module", "Output", "Time complexity: O(n*m)", "Auxiliary space: O(K)", "Method 6: Using reduce() from functools module", "Output", "Time complexity: O(n * m) ", "Auxiliary space: O(k)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-that-prints-elements-common-at-specified-index-of-list-elements/"},
{"title": "Python | Check for Nth index existence in list - GeeksforGeeks", "h1": ["Python | Check for Nth index existence in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using len()", "Output : ", "Time Complexity : ", "Auxiliary Space : ", "Method #2 : Using try-except block + IndexError exception", "Output : ", "Method#3: using the in operator", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(1)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-check-for-nth-index-existence-in-list/"},
{"title": "Python | Find dictionary matching value in list - GeeksforGeeks", "h1": ["Python | Find dictionary matching value in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method 1: Get a list of values from a List of Dictionary using a ", "loop", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(1)", "Method 2: Get a list of values from a List of Dictionary using ", "next()", " + ", "dictionary comprehension", "Output", "Get a list of values from a List of Dictionary using a list comprehension", "Output", "Get a list of values from a List of Dictionary using a filter method", "Output", "Method 5: Using the list.index() method", "Output", "METHOD 6:Using defaultdict method.", "APPROACH:", "ALGORITHM:", "Output", "Time complexity:", "Space complexity:", "METHOD 7:Using recursion:", "Algorithm:", "Output", "Time Complexity:", "Space Complexity:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-find-dictionary-matching-value-in-list/"},
{"title": "Python | functools.wraps() function - GeeksforGeeks", "h1": ["Python | functools.wraps() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["functools", "Syntax:", "Parameters:", "wrapped", "assigned", "updated", "Example 1:", "Output:", "Output:", "Output:", "Output:", "functools.wraps() as decorator to wrapper function", "Example (with functools.wraps())", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-functools-wraps-function/?ref=ml_lbp"},
{"title": "Python Functools - update_wrapper() - GeeksforGeeks", "h1": ["Python Functools – update_wrapper()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["functools", "higher order functions", "Syntax:", "Parameters:", "wrapper:", "wrapped:", "assigned:", "updated:", "decorators and partials", "Example 1:", "Output:", "hi", "hello", "module level constants", "hello", "__name__", "__doc__", "wrapper", "hi", "Example 2:", "Output:", "help(function)", "help(function)", "Example 1:", "Output:", "Output:", "decorators and partials", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-functools-update_wrapper/?ref=ml_lbp"},
{"title": "Python - Pie Syntax (@) - GeeksforGeeks", "h1": ["Python – Pie Syntax (@)"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Example:", "Program 1:", "Output:", ".", "Program 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-pie-syntax/?ref=ml_lbp"},
{"title": "Python Decorators: A Complete Guide - GeeksforGeeks", "h1": ["Python Decorators: A Complete Guide"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Understanding Decorators", "Decorating Classes", "Decorate a Function and return a Class", "Summary", "What kind of Experience do you want to share?"], "strong": ["decorator", " a decorator is a ", "callable", " that accepts and returns a callable. ", "Output:", "Output:", "Output:", "Here the reverse_decorator does not execute the function reverse_wrapper instead it creates the reference and returns it when the callable invokes the function.", "Output:", "the order of the decorator", "applied from bottom to top", "Output:", "Output:", "Output", " Output: ", "Output", "its primary responsibility is to run the wrapped function and also add an extra functionality to the wrapped function", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-decorators-a-complete-guide/?ref=ml_lbp"},
{"title": "Python Program for Bitonic Sort - GeeksforGeeks", "h1": ["Python Program for Bitonic Sort"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Program for Bitonic Sort", "Python3", "What kind of Experience do you want to share?"], "strong": ["Bitonic Sequence: ", "x0 <= x1 …..<= xi  and  xi >= xi+1….. >= xn-1 ", "Bitonic Sorting: ", "Example:", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-for-bitonic-sort/?ref=next_article"},
{"title": "Python Program that prints the rows of a given length from a matrix - GeeksforGeeks", "h1": ["Python Program that prints the rows of a given length from a matrix"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method 1 : ", "Output:", "Method 2 : ", "Output:", "Method 3: Using a for loop", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method 4: Using the map() function", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-that-prints-the-rows-of-a-given-length-from-a-matrix/"},
{"title": "Python Program to print element with maximum vowels from a List - GeeksforGeeks", "h1": ["Python Program to print element with maximum vowels from a List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Approach 1: ", "Output", "Time Complexity: ", "Auxiliary Space:", "Approach 2: ", "Output", "Approach 3:", "Output", "Time Complexity: O(n*m), where n is the number of words in the list and m is the average length of the words.", "Auxiliary Space: O(n)", "Approach 4: Using re module", "Output", "Time Complexity: O(n*m)", "Auxiliary Space: O(n)", "Approach 5: Using mao() + index()", "Output", "Time complexity: O(n)", "Auxiliary space: O(n)", "Method 6 :  using the filter() and lambda functions.", "Output", "Method 7: Use the reduce() function from the functools module.", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-print-element-with-maximum-vowels-from-a-list/?ref=next_article"},
{"title": "Python | Nth tuple index Subtraction by K - GeeksforGeeks", "h1": ["Python | Nth tuple index Subtraction by K"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loop", "Output : ", "Time Complexity: O(n*n),", "Auxiliary Space: O(n)", "Method #2: Using list comprehension", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method #3 : Using map()", "Output", "Time complexity: O(N)", "Auxiliary Space: O(N)", "Method #4: Using list slicing and unpacking", "Output", "Time Complexity: O(n),", "Auxiliary Space: O(n)", "Method #5: Using NumPy library", "Algorithm:", "Output:", "Time Complexity: O(n),", "Auxiliary Space Complexity: O(n), ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-nth-tuple-index-subtraction-by-k/"},
{"title": "Python | Making program run faster - GeeksforGeeks", "h1": ["Python | Making program run faster"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Code #1: Taking this code into consideration. ", "Code #2 : ", "Code #3 : ", "Output : ", "Code #4 : Change the compute_roots() function", "Output : ", "Code #5 : Modified version of the compute_roots() function", "Code #6 : ", "Dynamic Typing:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-making-program-run-faster/"},
{"title": "Python | How to Concatenate tuples to nested tuples - GeeksforGeeks", "h1": ["Python | How to Concatenate tuples to nested tuples"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using + operator + “, ” operator during initialization", "Output : ", "Time complexity: ", "Auxiliary space:", "Method #2 : Using “, ” operator during concatenation", "Output : ", "Time complexity: ", "Auxiliary space:", "Method #3 : Using list(),extend() and tuple() methods", "Output", "Time complexity: ", "Auxiliary space:", "Method #4: Using the itertools.chain() function", "itertools.chain() ", "itertools.chain()", "tuple() ", "Output", "Time complexity: ", "Auxiliary space: ", "Method #5: Using the reduce() method of functools", "Output", "Time complexity: ", "Auxiliary space: ", "Method 6 : using the extend() method of the list class.", "Approach:", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-how-to-concatenate-tuples-to-nested-tuples/?ref=previous_article"},
{"title": "Python | Reshape a list according to given multi list - GeeksforGeeks", "h1": ["Python | Reshape a list according to given multi list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Method #1 : ", "Output:", "Method #2 : ", "Output:", "Method #3 : ", "Output:", " Method #4 : ", "Output", "Output", "METHOD 6:using defaultdict:", "Output", "Using numpy:", "output: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-reshape-a-list-according-to-given-multi-list/"},
{"title": "Python Program to Remove duplicate tuples irrespective of order - GeeksforGeeks", "h1": ["Python Program to Remove duplicate tuples irrespective of order"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input :", "Output : ", "Explanation :", "Input : ", "Output :", "Explanation :", "Method 1 : ", "Example:", "Output", "Time complexity: ", "Auxiliary space: ", "Method 2 : ", "Example:", "Output", "Method#3: Using Recursive method.", "Output", "Time Complexity: ", "Auxiliary Space:", "METHOD 4:Using re module .", "Steps:", "Output", "Time Complexity:", "Space Complexity:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-remove-duplicate-tuples-irrespective-of-order/?ref=ml_lbp"},
{"title": "Python | time.time_ns() method - GeeksforGeeks", "h1": ["Python | time.time_ns() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Parameter:", "Return type:", "Code:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-time-time_ns-method/?ref=ml_lbp"},
{"title": "Generate Test Datasets for Machine learning - GeeksforGeeks", "h1": ["Generate Test Datasets for Machine learning"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Getting Started with Machine Learning", "Data Preprocessing", "Classification & Regression", "K-Nearest Neighbors (KNN)", "Support Vector Machines", "Decision Tree", "Ensemble Learning", "Generative Model", "Time Series Forecasting", "Clustering Algorithm", "Convolutional Neural Networks", "Recurrent Neural Networks", "Reinforcement Learning", "Model Deployment and Productionization", "Advanced Topics", "Getting Started with Machine Learning", "Data Preprocessing", "Classification & Regression", "K-Nearest Neighbors (KNN)", "Support Vector Machines", "Decision Tree", "Ensemble Learning", "Generative Model", "Time Series Forecasting", "Clustering Algorithm", "Convolutional Neural Networks", "Recurrent Neural Networks", "Reinforcement Learning", "Model Deployment and Productionization", "Advanced Topics", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example 1: ", "Output:", "Example 2:", "Output", "Example 1: ", "Output", "Example 2: ", "Output", "Example 3:", "Output:", "Example 1:  ", "Output", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-generate-test-datasets-for-machine-learning/"},
{"title": "Python Functools - cached_property() - GeeksforGeeks", "h1": ["Python Functools – cached_property()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["@cached_property", "Note:", "Difference between @property and @cached_property: ", "But how does it reduces the execution time and makes the program faster ?", "Example:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-functools-cached_property/"},
{"title": "Python | Issue Warning Message - GeeksforGeeks", "h1": ["Python | Issue Warning Message"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Problem –", "Code #1 : Use the ", "warnings.warn()", " function", "Code #2 : ", "Code #3 : Warning message generated by destroying a file without closing it.", "Output : ", "-W", "warnings.simplefilter()", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-issue-warning-message/?ref=ml_lbp"},
{"title": "Python | How to Parse Command-Line Options - GeeksforGeeks", "h1": ["Python | How to Parse Command-Line Options"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Parsing command line arguments using Python argparse module", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["sys.argv", " argparse ", "The program mentioned above defines a command-line parser with the following usage:", "Note:", "Code: The following session shows how data shows up in the program.", "Input:", "Output:", "argparse", "ArgumentParser ", "add_argument", "dest", "metavar ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-how-to-parse-command-line-options/?ref=ml_lbp"},
{"title": "Python | shutil.copyfileobj() method - GeeksforGeeks", "h1": ["Python | shutil.copyfileobj() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Shutil module", "shutil.copyfileobj()", "Syntax:", "Parameters:", "fsrc:", "fdst:", "length (optional):", "Return Type:", "Code:", "shutil.copyfileobj()", "Output:", "Reference:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-shutil-copyfileobj-method/?ref=ml_lbp"},
{"title": "Python PIL | ImageChops.add() method - GeeksforGeeks", "h1": ["Python PIL | ImageChops.add() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["ImageChops module", "PIL.ImageChops.add()", "Syntax:", "Parameters:", "image1:", "image2:", "scale:", "offset:", "Return Type:", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-pil-imagechops-add-method/?ref=ml_lbp"},
{"title": "Python Program to Count the Number of Vowels in a String - GeeksforGeeks", "h1": ["Python Program to Count the Number of Vowels in a String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input: ", "Output: ", "Explanation: ", "Method #1: ", "Output", "Complexity analysis:", "Time complexity: O(n*m),", "Auxiliary Space: O(n+m), ", "Method #2 : Using operator.countOf() method", "Output", "Complexity analysis:", "Time complexity: O(n*m), ", "Auxiliary Space: O(n+m), ", "Method #2 : Using re module:", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method#4: Using Recursive method.", "Output", "Method #5: Using the list and filter() function: ", "Output", "Time complexity:", "Auxiliary Space:", "Method #6: Using reduce()", "Output", "Time Complexity: ", "O(n)", "O(n^2)", "Space Complexity: ", "O(n)", "Data Structures & Algorithms in Python - Self Paced ", "GATE Data Science and Artificial Intelligence 2025 ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-count-the-number-of-vowels-in-a-string/"},
{"title": "Python | Bar Charts in Vincent - GeeksforGeeks", "h1": ["Python | Bar Charts in Vincent"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Requirement : install vincent", "warning :", "Example 1:", "Output : ", "Example 2:", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-bar-charts-in-vincent/?ref=next_article"},
{"title": "Python - Get maximum of Nth column from tuple list - GeeksforGeeks", "h1": ["Python – Get maximum of Nth column from tuple list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using list comprehension + max()", "Output", "Time Complexity: ", "Auxiliary Space:", "Method #2: Using imap() + max() + itemgetter()", "itemgetter", "imap", "itertools", "test_list", "print()", "N", "e itemgetter() ", "imap()", "itemgetter()", "test_list", " max()", "test_list", "res", "print()", "Output : ", "The time complexity ", "The auxiliary space", "Method #3: Using sort() method", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #4: Using reduce() method", "Output", "Time Complexity:", "Auxiliary Space:", "Method 5 : Using NumPy library", "OUTPUT:", "Maximum of Nth Column of Tuple List : 19", "Time complexity: ", "Auxiliary space:", "Method 6: Using a loop.", "N", "max_val", "max_val", "max_val", "max_val", "Output", "Time complexity:", "Auxiliary space:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-get-maximum-of-nth-column-from-tuple-list/?ref=next_article"},
{"title": "Python | Extract unique tuples from list, Order Irrespective - GeeksforGeeks", "h1": ["Python | Extract unique tuples from list, Order Irrespective"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension + set()", "Output : ", "Method #2: Using frozenset()", "Output : ", "Method #3: Use a dictionary to track unique tuples:", "Output", "Time complexity: O(n log n)", "Auxiliary Space: O(n)", "Method #4: Using numpy.unique() function.", "Output", "Time Complexity:", "Space Complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-extract-unique-tuples-from-list-order-irrespective/"},
{"title": "Python PIL | GaussianBlur() method - GeeksforGeeks", "h1": ["Python PIL | GaussianBlur() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Computer Vision", "Image Processing & Transformation", "Feature Extraction and Description", "Deep Learning for Computer Vision", "Object Detection and Recognition", "Image Segmentation", "3D Reconstruction", "Introduction to Computer Vision", "Image Processing & Transformation", "Feature Extraction and Description", "Deep Learning for Computer Vision", "Object Detection and Recognition", "Image Segmentation", "3D Reconstruction", "What kind of Experience do you want to share?"], "strong": ["ImageFilter", "Image.filter()", "PIL.ImageFilter.GaussianBlur()", "Syntax:", "Parameters", "radius", "Returns type", "Image Used:", "Output:", "radius:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pil-gaussianblur-method/"},
{"title": "Python PIL | ImageChops.constant() - GeeksforGeeks", "h1": ["Python PIL | ImageChops.constant()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["PIL.ImageChops.constant()", "Syntax:", "Parameters:", "image", "Returns:", "Image Used:", "Output:", "Another Example:", "Image Used:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pil-imagechops-constant/"},
{"title": "Python PIL | ImageChops.darker() method - GeeksforGeeks", "h1": ["Python PIL | ImageChops.darker() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Parameters:", "image1:", "image2:", "Return Value:", "Note:", "MODE", "Code #1:", "Output:", "Code #2:", "Output:", "Note:", "Data Science Training Program ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pil-imagechops-darker-method/"},
{"title": "Python PIL | ImageOps.expand() method - GeeksforGeeks", "h1": ["Python PIL | ImageOps.expand() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["ImageOps module ", "ImageOps.expand()", "Syntax", "Parameters", "image :", "border :", "fill: ", "0", "black", "Returns", "ImageOps.expand()", "Image used:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pil-imageops-expand-method/"},
{"title": "Python PIL | ImageEnhance.Color() and ImageEnhance.Contrast() method - GeeksforGeeks", "h1": ["Python PIL | ImageEnhance.Color() and ImageEnhance.Contrast() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "ImageEnhance.Color() method –", "ImageEnhance.Contrast() method –", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Output:", "factor = 0.0", "factor is 5.0", "Syntax:", "Output:", "factor is 5.0", "for second 0.0", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pil-imageenhance-color-and-imageenhance-contrast-method/"},
{"title": "Python PIL | Image.merge() method - GeeksforGeeks", "h1": ["Python PIL | Image.merge() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Pillow", "Installation and setup", "Loading and Saving Images", "Image Manipulation Basics", "Adjusting Image Properties", "Image Filtering and Effects", "Drawing on Images", "Image Transformations", "Working with Image Metadata", "Image Analysis and Processing", "Image Compositing and Blending", "Image Formats and Conversion", "Batch Processing and Automation", "Image Enhancement Techniques", "Working with Animated Images", "OCR and Text Extraction from Images", "Pillow function", "Introduction to Pillow", "Installation and setup", "Loading and Saving Images", "Image Manipulation Basics", "Adjusting Image Properties", "Image Filtering and Effects", "Drawing on Images", "Image Transformations", "Working with Image Metadata", "Image Analysis and Processing", "Image Compositing and Blending", "Image Formats and Conversion", "Batch Processing and Automation", "Image Enhancement Techniques", "Working with Animated Images", "OCR and Text Extraction from Images", "Pillow function", "What kind of Experience do you want to share?"], "strong": ["Image.merge()", "Syntax:", "Parameters:", "mode", "bands", "Returns:", "Image Used:", "Output:", "Another Example:", "Image Used:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pil-image-merge-method/?ref=previous_article"},
{"title": "Python | shutil.copyfile() method - GeeksforGeeks", "h1": ["Python | shutil.copyfile() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What is Shutil.copyfile() method?", "shutil.copyfile()", " Method Syntax ", "How to Copy a File using Shutil.copyfile() Method in Python", "Python3", "Possible Errors ", "Python3", "Error Handling", "Python3", "What kind of Experience do you want to share?"], "strong": ["Shutil module", "copying and removing files", "shutil.copyfile()", "SameFileError exception ", "shutil.copyfile()", "shutil.copyfile(source, destination, *, follow_symlinks = True)", "Parameters:", "source", "destination", "follow_symlinks", "Note:", "Returns:", "Output:", "‘IsADirectoryError’", " ‘PermissionError’ ", "Output:", "Destination path: /home/User/Documents/file(copy).txt", "Output:", "Also Read:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-shutil-copyfile-method/?ref=ml_lbp"},
{"title": "Python OpenCV - Smoothing and Blurring - GeeksforGeeks", "h1": ["Python OpenCV – Smoothing and Blurring"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Computer Vision", "Image Processing & Transformation", "Feature Extraction and Description", "Deep Learning for Computer Vision", "Object Detection and Recognition", "Image Segmentation", "3D Reconstruction", "Introduction to Computer Vision", "Image Processing & Transformation", "Feature Extraction and Description", "Deep Learning for Computer Vision", "Object Detection and Recognition", "Image Segmentation", "3D Reconstruction", "Method 1: With 2D Convolution  ", "Python3", "Method 2:  With pre-built functions", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Note:", "Syntax: ", "Code", "Output:", "Syntax:", "Image", "shapeOfTheKernel", "Code", "Output:", "Syntax:", "Image", "shapeOfTheKernel", "sigmaX", "Note: ", "Code", "Output:", "Syntax:", "Image", "KernelSize", "Note", "Code", "Output:", "Syntax:", "Image", "Diameter", "SigmaColor", "SigmaSpace ", "Code:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-opencv-smoothing-and-blurring/?ref=previous_article"},
{"title": "Python PIL | paste() and rotate() method - GeeksforGeeks", "h1": ["Python PIL | paste() and rotate() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Pillow", "Installation and setup", "Loading and Saving Images", "Image Manipulation Basics", "Adjusting Image Properties", "Image Filtering and Effects", "Drawing on Images", "Image Transformations", "Working with Image Metadata", "Image Analysis and Processing", "Image Compositing and Blending", "Image Formats and Conversion", "Batch Processing and Automation", "Image Enhancement Techniques", "Working with Animated Images", "OCR and Text Extraction from Images", "Pillow function", "Introduction to Pillow", "Installation and setup", "Loading and Saving Images", "Image Manipulation Basics", "Adjusting Image Properties", "Image Filtering and Effects", "Drawing on Images", "Image Transformations", "Working with Image Metadata", "Image Analysis and Processing", "Image Compositing and Blending", "Image Formats and Conversion", "Batch Processing and Automation", "Image Enhancement Techniques", "Working with Animated Images", "OCR and Text Extraction from Images", "Pillow function", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["PIL.Image.Image.paste()", "Syntax:", "Parameters:", "image_1/image_object", "image_2:", "box:", "mask:", "Output:", "Syntax:", "Parameters:", "image_object:", "angle:", "resample:", "expand:", "Return Value:", "Output:", "Images used –", "Data Science Training Program ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pil-paste-and-rotate-method/?ref=ml_lbp"},
{"title": "Python OpenCV - Pose Estimation - GeeksforGeeks", "h1": ["Python OpenCV – Pose Estimation"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Computer Vision", "Image Processing & Transformation", "Feature Extraction and Description", "Deep Learning for Computer Vision", "Object Detection and Recognition", "Image Segmentation", "3D Reconstruction", "Introduction to Computer Vision", "Image Processing & Transformation", "Feature Extraction and Description", "Deep Learning for Computer Vision", "Object Detection and Recognition", "Image Segmentation", "3D Reconstruction", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["What is Pose Estimation?", "What is ", " ?", "Use of ", " in python :", "Datasets you can use:", "http://cocodataset.org/#keypoints-2018", "http://human-pose.mpi-inf.mpg.de/", "http://www.robots.ox.ac.uk/~vgg/data/pose_evaluation/", "Code for Human Pose Estimation in OpenCV", "Step 1: Download Model Weights", "Step 2: Load Network", "Step 3: Read Image and Prepare Input to the Network", "Step 4: Make Predictions and Parse Key points", "Step 5: Draw Skeleton", "Applications of Pose Estimation :", "REFERENCES:", "https://github.com/CMU-Perceptual-Computing-Lab/openpose", "  ", "https://learnopencv.com/deep-learning-based-human-pose-estimation-using-opencv-cpp-python/", "    ", "https://ieeexplore.ieee.org/document/9144178", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-opencv-pose-estimation/?ref=lbp"},
{"title": "Python OpenCV - Morphological Operations - GeeksforGeeks", "h1": ["Python OpenCV – Morphological Operations"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Computer Vision", "Image Processing & Transformation", "Feature Extraction and Description", "Deep Learning for Computer Vision", "Object Detection and Recognition", "Image Segmentation", "3D Reconstruction", "Introduction to Computer Vision", "Image Processing & Transformation", "Feature Extraction and Description", "Deep Learning for Computer Vision", "Object Detection and Recognition", "Image Segmentation", "3D Reconstruction", "Images used for demonstration:", "Erosion", "Python3", "Dilation", "Python3", "Opening", "Python3", "Closing", "Python3", "Morphological Gradient", "Python3", "Top Hat", "Python3", "Black Hat", "Python3", "What kind of Experience do you want to share?"], "strong": ["Morphological operations based on OpenCV are as follows:", "binary image", "kernel structuring element", "Erosion", "Erosion ", "Code:", "Output:", "Dilation ", "Code:", "Output:", "Opening", "Opening", "Code:", "Output:", "Closing ", "Code:", "Output:", "Code:", "Output:", "Code:", "Output:", "Code:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-opencv-morphological-operations/?ref=lbp"},
{"title": "Python PIL | MedianFilter() and ModeFilter() method - GeeksforGeeks", "h1": ["Python PIL | MedianFilter() and ModeFilter() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Computer Vision", "Image Processing & Transformation", "Feature Extraction and Description", "Deep Learning for Computer Vision", "Object Detection and Recognition", "Image Segmentation", "3D Reconstruction", "Introduction to Computer Vision", "Image Processing & Transformation", "Feature Extraction and Description", "Deep Learning for Computer Vision", "Object Detection and Recognition", "Image Segmentation", "3D Reconstruction", "What kind of Experience do you want to share?"], "strong": ["PIL.ImageFilter.MedianFilter()", "Syntax:", "Parameters:", "size:", "Output:", "PIL.ImageFilter.ModeFilter()", "Syntax:", "Parameters:", "size:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pil-medianfilter-and-modefilter-method/?ref=lbp"},
{"title": "Python | Line Charts in Vincent - GeeksforGeeks", "h1": ["Python | Line Charts in Vincent"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Requirement : install vincent", "warning :", "Example 1:", "Output : ", "Example 2:", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-line-charts-in-vincent/"},
{"title": "Python - Color Inversion using Pillow - GeeksforGeeks", "h1": ["Python – Color Inversion using Pillow"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Computer Vision", "Image Processing & Transformation", "Feature Extraction and Description", "Deep Learning for Computer Vision", "Object Detection and Recognition", "Image Segmentation", "3D Reconstruction", "Introduction to Computer Vision", "Image Processing & Transformation", "Feature Extraction and Description", "Deep Learning for Computer Vision", "Object Detection and Recognition", "Image Segmentation", "3D Reconstruction", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Note:", "Sample Image – ", "Method #1:", "Output:", "Explanation:", "Method #2:", "Output:", "Explanation: ", "JPG/JPEG", "Data Science Training Program ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-color-inversion-using-pillow/?ref=lbp"},
{"title": "Python | time.localtime() method - GeeksforGeeks", "h1": ["Python | time.localtime() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Time module", "time.localtime()", "Time module", "time.struct_time", "time.struct_time", "time.gmtime()", "time.struct_time", "time.struct_time", "0", "tm_year", "1", "tm_mon", "2", "tm_mday", "3", "tm_hour", "4", "tm_min", "5", "tm_sec", "6", "tm_wday", "7", "tm_yday", "8", "tm_isdst", "N/A", "tm_zone", "N/A", "tm_gmtoff", "Syntax:", "Parameter:", "secs", "Return type:", "Code #1:", "time.localtime()", "Output:", "Code #2:", "time.localtime()", "Output:", "Reference:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-time-localtime-method/?ref=lbp"},
{"title": "Python - Channel Drop using Pillow - GeeksforGeeks", "h1": ["Python – Channel Drop using Pillow"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Pillow", "Installation and setup", "Loading and Saving Images", "Image Manipulation Basics", "Adjusting Image Properties", "Image Filtering and Effects", "Drawing on Images", "Image Transformations", "Working with Image Metadata", "Image Analysis and Processing", "Image Compositing and Blending", "Image Formats and Conversion", "Batch Processing and Automation", "Image Enhancement Techniques", "Working with Animated Images", "OCR and Text Extraction from Images", "Pillow function", "Introduction to Pillow", "Installation and setup", "Loading and Saving Images", "Image Manipulation Basics", "Adjusting Image Properties", "Image Filtering and Effects", "Drawing on Images", "Image Transformations", "Working with Image Metadata", "Image Analysis and Processing", "Image Compositing and Blending", "Image Formats and Conversion", "Batch Processing and Automation", "Image Enhancement Techniques", "Working with Animated Images", "OCR and Text Extraction from Images", "Pillow function", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["METHOD 1:", "SAMPLE IMAGE:", "CODE:", "OUTPUT IMAGE:", "EXPLANATION:", "Examples:", "METHOD 2:", "CODE:", "OUTPUT IMAGE:", "EXPLANATION:", "NOTE:", "2", "Data Science Training Program ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-channel-drop-using-pillow/"},
{"title": "Python PIL | Image.new() method - GeeksforGeeks", "h1": ["Python PIL |  Image.new() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["PIL.Image.new()", "Syntax:", "Parameters: ", "mode:", "size:", "color:", "Return Value:", "Image", "Code #1:", "Output:", "Code #2:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-pil-image-new-method/"},
{"title": "Python PIL | ImagePath.Path.tolist() method - GeeksforGeeks", "h1": ["Python PIL | ImagePath.Path.tolist() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Pillow", "Installation and setup", "Loading and Saving Images", "Image Manipulation Basics", "Adjusting Image Properties", "Image Filtering and Effects", "Drawing on Images", "Image Transformations", "Working with Image Metadata", "Image Analysis and Processing", "Image Compositing and Blending", "Image Formats and Conversion", "Batch Processing and Automation", "Image Enhancement Techniques", "Working with Animated Images", "OCR and Text Extraction from Images", "Pillow function", "Introduction to Pillow", "Installation and setup", "Loading and Saving Images", "Image Manipulation Basics", "Adjusting Image Properties", "Image Filtering and Effects", "Drawing on Images", "Image Transformations", "Working with Image Metadata", "Image Analysis and Processing", "Image Compositing and Blending", "Image Formats and Conversion", "Batch Processing and Automation", "Image Enhancement Techniques", "Working with Animated Images", "OCR and Text Extraction from Images", "Pillow function", "What kind of Experience do you want to share?"], "strong": ["ImagePath", "ImagePath.Path.tolist()", "Syntax:", "Parameters:", "flat", "Returns:", "Output:", "Another Example:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pil-imagepath-path-tolist-method/?ref=lbp"},
{"title": "Python PIL | Image.save() method - GeeksforGeeks", "h1": ["Python PIL | Image.save() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Pillow", "Installation and setup", "Loading and Saving Images", "Image Manipulation Basics", "Adjusting Image Properties", "Image Filtering and Effects", "Drawing on Images", "Image Transformations", "Working with Image Metadata", "Image Analysis and Processing", "Image Compositing and Blending", "Image Formats and Conversion", "Batch Processing and Automation", "Image Enhancement Techniques", "Working with Animated Images", "OCR and Text Extraction from Images", "Pillow function", "Introduction to Pillow", "Installation and setup", "Loading and Saving Images", "Image Manipulation Basics", "Adjusting Image Properties", "Image Filtering and Effects", "Drawing on Images", "Image Transformations", "Working with Image Metadata", "Image Analysis and Processing", "Image Compositing and Blending", "Image Formats and Conversion", "Batch Processing and Automation", "Image Enhancement Techniques", "Working with Animated Images", "OCR and Text Extraction from Images", "Pillow function", "What kind of Experience do you want to share?"], "strong": ["Image.save()", "Syntax:", "Parameters:", "fp", "format", "options", "Returns:", "Raises:", "KeyError", "IOError", "Image Used:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pil-image-save-method/?ref=lbp"},
{"title": "Python PIL | ImageDraw.Draw.multiline_textsize() - GeeksforGeeks", "h1": ["Python PIL | ImageDraw.Draw.multiline_textsize()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["PIL is the Python Imaging Library ", "ImageDraw.Draw.multiline_textsize()", "Syntax:", "Parameters:", "text", "font", "spacing", "Return Type:", "Image Used:", "Output:", "Data Science Training Program ", "Complete Machine Learning & Data Science Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-pil-imagedraw-draw-multiline_textsize/?ref=ml_lbp"},
{"title": "Python | Peak Signal-to-Noise Ratio (PSNR) - GeeksforGeeks", "h1": ["Python | Peak Signal-to-Noise Ratio (PSNR)"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["PSNR", "L", "MSE", "O", "D", "m", "i", "n", "j", "RMSE", "PSNR", "Original Image :", "Compressed Image :", "Output:", "Data Science Training Program ", "Complete Machine Learning & Data Science Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-peak-signal-to-noise-ratio-psnr/?ref=ml_lbp"},
{"title": "Python | Detect Polygons in an Image using OpenCV - GeeksforGeeks", "h1": ["Python | Detect Polygons in an Image using OpenCV"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Approach :", "Prerequisite :", "Implementation :", "Code: Python program to detect polygons in an image", "Note :", "Result :", "Data Science Training Program ", "Complete Machine Learning & Data Science Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-detect-polygons-in-an-image-using-opencv/?ref=ml_lbp"},
{"title": "Python - Color Inversion using Pillow - GeeksforGeeks", "h1": ["Python – Color Inversion using Pillow"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Computer Vision", "Image Processing & Transformation", "Feature Extraction and Description", "Deep Learning for Computer Vision", "Object Detection and Recognition", "Image Segmentation", "3D Reconstruction", "Introduction to Computer Vision", "Image Processing & Transformation", "Feature Extraction and Description", "Deep Learning for Computer Vision", "Object Detection and Recognition", "Image Segmentation", "3D Reconstruction", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Note:", "Sample Image – ", "Method #1:", "Output:", "Explanation:", "Method #2:", "Output:", "Explanation: ", "JPG/JPEG", "Data Science Training Program ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-color-inversion-using-pillow/"},
{"title": "Python | Line Charts in Vincent - GeeksforGeeks", "h1": ["Python | Line Charts in Vincent"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Requirement : install vincent", "warning :", "Example 1:", "Output : ", "Example 2:", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-line-charts-in-vincent/?type=article&id=335407"},
{"title": "Python | Find dictionary matching value in list - GeeksforGeeks", "h1": ["Python | Find dictionary matching value in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method 1: Get a list of values from a List of Dictionary using a ", "loop", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(1)", "Method 2: Get a list of values from a List of Dictionary using ", "next()", " + ", "dictionary comprehension", "Output", "Get a list of values from a List of Dictionary using a list comprehension", "Output", "Get a list of values from a List of Dictionary using a filter method", "Output", "Method 5: Using the list.index() method", "Output", "METHOD 6:Using defaultdict method.", "APPROACH:", "ALGORITHM:", "Output", "Time complexity:", "Space complexity:", "METHOD 7:Using recursion:", "Algorithm:", "Output", "Time Complexity:", "Space Complexity:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-find-dictionary-matching-value-in-list/?type=article&id=329529"},
{"title": "Python PIL | ImageOps.equalize() method - GeeksforGeeks", "h1": ["Python PIL | ImageOps.equalize() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Pillow", "Installation and setup", "Loading and Saving Images", "Image Manipulation Basics", "Adjusting Image Properties", "Image Filtering and Effects", "Drawing on Images", "Image Transformations", "Working with Image Metadata", "Image Analysis and Processing", "Image Compositing and Blending", "Image Formats and Conversion", "Batch Processing and Automation", "Image Enhancement Techniques", "Working with Animated Images", "OCR and Text Extraction from Images", "Pillow function", "Introduction to Pillow", "Installation and setup", "Loading and Saving Images", "Image Manipulation Basics", "Adjusting Image Properties", "Image Filtering and Effects", "Drawing on Images", "Image Transformations", "Working with Image Metadata", "Image Analysis and Processing", "Image Compositing and Blending", "Image Formats and Conversion", "Batch Processing and Automation", "Image Enhancement Techniques", "Working with Animated Images", "OCR and Text Extraction from Images", "Pillow function", "What kind of Experience do you want to share?"], "strong": [" ImageOps module", "ImageOps.equalize()", "Syntax:", "Parameters:", "image:", "mask:", "Returns:", "Output:", "Data Science Training Program ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pil-imageops-equalize-method/?ref=lbp"},
{"title": "Python PIL | ImagePalette() Method - GeeksforGeeks", "h1": ["Python PIL | ImagePalette() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Pillow", "Installation and setup", "Loading and Saving Images", "Image Manipulation Basics", "Adjusting Image Properties", "Image Filtering and Effects", "Drawing on Images", "Image Transformations", "Working with Image Metadata", "Image Analysis and Processing", "Image Compositing and Blending", "Image Formats and Conversion", "Batch Processing and Automation", "Image Enhancement Techniques", "Working with Animated Images", "OCR and Text Extraction from Images", "Pillow function", "Introduction to Pillow", "Installation and setup", "Loading and Saving Images", "Image Manipulation Basics", "Adjusting Image Properties", "Image Filtering and Effects", "Drawing on Images", "Image Transformations", "Working with Image Metadata", "Image Analysis and Processing", "Image Compositing and Blending", "Image Formats and Conversion", "Batch Processing and Automation", "Image Enhancement Techniques", "Working with Animated Images", "OCR and Text Extraction from Images", "Pillow function", "What kind of Experience do you want to share?"], "strong": ["ImagePalette.ImagePalette()", "Syntax:", "Parameters:", "mode", "palette", "size", "Return::", "Image Used:", "Output:", "Another Example:", "Image Used:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pil-imagepalette-method/?ref=lbp"},
{"title": "Python | Create Test DataSets using Sklearn - GeeksforGeeks", "h1": ["Python | Create Test DataSets using Sklearn"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Getting Started with Machine Learning", "Data Preprocessing", "Classification & Regression", "K-Nearest Neighbors (KNN)", "Support Vector Machines", "Decision Tree", "Ensemble Learning", "Generative Model", "Time Series Forecasting", "Clustering Algorithm", "Convolutional Neural Networks", "Recurrent Neural Networks", "Reinforcement Learning", "Model Deployment and Productionization", "Advanced Topics", "Getting Started with Machine Learning", "Data Preprocessing", "Classification & Regression", "K-Nearest Neighbors (KNN)", "Support Vector Machines", "Decision Tree", "Ensemble Learning", "Generative Model", "Time Series Forecasting", "Clustering Algorithm", "Convolutional Neural Networks", "Recurrent Neural Networks", "Reinforcement Learning", "Model Deployment and Productionization", "Advanced Topics", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["sklearn.datasets.samples_generator", "Output:", "Output:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "GATE Data Science and Artificial Intelligence 2025 "], "link": "https://www.geeksforgeeks.org/python-create-test-datasets-using-sklearn/?ref=previous_article"},
{"title": "Python PIL | GaussianBlur() method - GeeksforGeeks", "h1": ["Python PIL | GaussianBlur() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Computer Vision", "Image Processing & Transformation", "Feature Extraction and Description", "Deep Learning for Computer Vision", "Object Detection and Recognition", "Image Segmentation", "3D Reconstruction", "Introduction to Computer Vision", "Image Processing & Transformation", "Feature Extraction and Description", "Deep Learning for Computer Vision", "Object Detection and Recognition", "Image Segmentation", "3D Reconstruction", "What kind of Experience do you want to share?"], "strong": ["ImageFilter", "Image.filter()", "PIL.ImageFilter.GaussianBlur()", "Syntax:", "Parameters", "radius", "Returns type", "Image Used:", "Output:", "radius:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pil-gaussianblur-method/?ref=lbp"},
{"title": "Python PIL | putpixel() method - GeeksforGeeks", "h1": ["Python PIL | putpixel() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["PixelAccess ", "putpixel()", "Syntax:", "Parameters:", "xy :", "value:", "Returns:", "Image Used:", "Output:", "Another example:", "Image Used", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pil-putpixel-method/?ref=ml_lbp"},
{"title": "Python PIL | getbands() and getextrema() method - GeeksforGeeks", "h1": ["Python PIL | getbands() and getextrema() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["PIL.Image.Image.getbands()", "Syntax:", "Parameters:", "Return value:", "Output:", "Syntax:", "Parameters:", "Return Value:", "Output:", "These images used in above article –", "Multiband Images", "Single band Image", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pil-getbands-and-getextrema-method/?ref=ml_lbp"},
{"title": "Python PIL | BoxBlur() method - GeeksforGeeks", "h1": ["Python PIL | BoxBlur() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["PIL.ImageFilter.BoxBlur()", "Syntax:", "Partameters:", "radius:", "Output:", "Output:", "Output:", "Data Science Training Program ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pil-boxblur-method/"},
{"title": "Python PIL | ImagePath.Path.tolist() method - GeeksforGeeks", "h1": ["Python PIL | ImagePath.Path.tolist() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Pillow", "Installation and setup", "Loading and Saving Images", "Image Manipulation Basics", "Adjusting Image Properties", "Image Filtering and Effects", "Drawing on Images", "Image Transformations", "Working with Image Metadata", "Image Analysis and Processing", "Image Compositing and Blending", "Image Formats and Conversion", "Batch Processing and Automation", "Image Enhancement Techniques", "Working with Animated Images", "OCR and Text Extraction from Images", "Pillow function", "Introduction to Pillow", "Installation and setup", "Loading and Saving Images", "Image Manipulation Basics", "Adjusting Image Properties", "Image Filtering and Effects", "Drawing on Images", "Image Transformations", "Working with Image Metadata", "Image Analysis and Processing", "Image Compositing and Blending", "Image Formats and Conversion", "Batch Processing and Automation", "Image Enhancement Techniques", "Working with Animated Images", "OCR and Text Extraction from Images", "Pillow function", "What kind of Experience do you want to share?"], "strong": ["ImagePath", "ImagePath.Path.tolist()", "Syntax:", "Parameters:", "flat", "Returns:", "Output:", "Another Example:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pil-imagepath-path-tolist-method/?ref=ml_lbp"},
{"title": "Python time.tzset() Function - GeeksforGeeks", "h1": ["Python time.tzset() Function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["std and dst:", "offset: ", " ", "start[/time], end[/time]: ", "Jn: ", "n: ", "Mm.n.d:  ", "time: ", "Syntax:", "Parameters:", "Return Value:", "Note", "Example 1", "Output", "Example 2:", "Output", "Example 3:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-time-tzset-function/?ref=lbp"},
{"title": "Python | shutil.unpack_archive() method - GeeksforGeeks", "h1": ["Python | shutil.unpack_archive() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Shutil module", "shutil.unpack_archive()", "Syntax:", "Parameter:", "filename:", "extract_dir", "formats", "Code #1:", "Output:", "Code #2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-shutil-unpack_archive-method/"},
{"title": "Python | Nested Tuples Subtraction - GeeksforGeeks", "h1": ["Python | Nested Tuples Subtraction"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using zip() + nested generator expression", "Output : ", "Method #2: Using isinstance() + zip() + loop + list comprehension", "Output : ", "Time complexity: ", "Auxiliary space: ", "Approach 3: Using NumPy", "Note:", "Output:", "Approach #4: Using map() and lambda function", "Output", "Approach #5: Using a loop and append function", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-nested-tuples-subtraction/"},
{"title": "Python - Replace Consonants by i, Vowels by j - GeeksforGeeks", "h1": ["Python – Replace Consonants by i, Vowels by j"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using sub() + regex", "Output", "Time complexity:", "Auxiliary space: ", "Method #2 : Using maketrans() + symmetric difference", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3: Using replace()", "in", "replace()", "Output", "Time Complexity:", "Auxiliary Space: ", "Method #4 : Using for loop", "Output", "Time complexity: ", "Auxiliary space:", "Method#5: Using list comprehension.", "Output", "Method #6 : Using ord() and replace() methods", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method #7 : Using operator.countOf() method", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-replace-consonents-by-i-vowels-by-j/"},
{"title": "Python Program for Coin Change | DP-7 - GeeksforGeeks", "h1": ["Python Program for Coin Change | DP-7"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "                                                ", "Recommended: Please solve it on “", "PRACTICE", " ” first, before moving on to the solution.", "                                            ", "Python Program for Coin Change using", " Recursion", ":", "Python3", "Python Program for Coin Change using ", "Dynamic Programming", " (Memoization) :", "Python3", "Python Program for Coin Change", " ", "using ", "Dynamic Programming", " (Tabulation):", "Python3", "Python Program for Coin Change using the Space Optimized 1D array:", "Python", "What kind of Experience do you want to share?"], "strong": ["coins[ ] ", " N ", "sum", "sum", "Examples", "Input: ", "Output: ", "Explanation: ", "Input: ", "Output: ", "Explanation: ", "Include the current coin", "Exclude the current coin", "Base case:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Python Program for Coin Change using ", "Dynamic Programming", " (Memoization) :", " ", "Step-by-step approach:", " ", " j ", "i ", "Output", "Time Complexity:", "Auxiliary Space:", " ", "dp[0][0] ", "1", "target sum", "0", "dp", "dp[i][j] += dp[i-1][j]", "dp[i][j] += dp[i][j-coins[i-1]]", "dp[n][sum]", " ", "Output", "Time complexity :", "Auxiliary Space : ", "Python Program for Coin Change using the Space Optimized 1D array:", "Step-by-step approach:", "dp[i]", "i", "dp[j]", "dp[sum]", "Output", "Time complexity :", "Auxiliary Space : ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-for-coin-change-dp-7/?ref=previous_article"},
{"title": "Python | Split flatten String List - GeeksforGeeks", "h1": ["Python | Split flatten String List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension + split() + extend()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #2 : Using split() + join()", "Output", "Time Complexity: ", "Auxiliary Space:", "Method #3:", "Output", "Time Complexity:", "Auxiliary Space: ", "Method #4: Using the reduce function from the functools library", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #5: Using the str.replace() method: ", "Output", "Time Complexity: O(n)", "Auxiliary  Space: O(n)", "Method 6: Using nested for loops:", "Output", "Time complexity: O(n*m)", "Auxiliary space: O(n*m), ", "Method 7: Using reduce(), split(), and operator.concat", " ", "Output", "Time Complexity: ", "Auxiliary  Space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-split-flatten-string-list/"},
{"title": "Python - Remove elements at Indices in List - GeeksforGeeks", "h1": ["Python – Remove elements at Indices in List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method 1: Remove an item by index and get its value using pop()", "we will pass the index value to remove the element at that position", "Output:", "Time complexity: ", "Auxiliary space:", "Method 2: Remove items by index or slice using del", "Output:", "Method 3: ", "Output:", "Time complexity: ", "Auxiliary space: ", "Method 4: Remove items at a specific index using enumerate() + list comprehension", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Method#5: Using Recursive method.", "Output", "Approach:", "Output", "METHOD 7: Using List Comprehension", "APPROACH:", "ALGORITHM:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-remove-elements-at-indices-in-list/"},
{"title": "Python | Maximum modulo pair - GeeksforGeeks", "h1": ["Python | Maximum modulo pair"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension + max() + combination() + lambda", "Output : ", "Method #2 : Using list comprehension + nlargest() + combination() + lambda", "Output : ", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-maximum-modulo-pair/"},
{"title": "Python PIL | ImageOps.equalize() method - GeeksforGeeks", "h1": ["Python PIL | ImageOps.equalize() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Pillow", "Installation and setup", "Loading and Saving Images", "Image Manipulation Basics", "Adjusting Image Properties", "Image Filtering and Effects", "Drawing on Images", "Image Transformations", "Working with Image Metadata", "Image Analysis and Processing", "Image Compositing and Blending", "Image Formats and Conversion", "Batch Processing and Automation", "Image Enhancement Techniques", "Working with Animated Images", "OCR and Text Extraction from Images", "Pillow function", "Introduction to Pillow", "Installation and setup", "Loading and Saving Images", "Image Manipulation Basics", "Adjusting Image Properties", "Image Filtering and Effects", "Drawing on Images", "Image Transformations", "Working with Image Metadata", "Image Analysis and Processing", "Image Compositing and Blending", "Image Formats and Conversion", "Batch Processing and Automation", "Image Enhancement Techniques", "Working with Animated Images", "OCR and Text Extraction from Images", "Pillow function", "What kind of Experience do you want to share?"], "strong": [" ImageOps module", "ImageOps.equalize()", "Syntax:", "Parameters:", "image:", "mask:", "Returns:", "Output:", "Data Science Training Program ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pil-imageops-equalize-method/?ref=ml_lbp"},
{"title": "Python time altzone() Method - GeeksforGeeks", "h1": ["Python time altzone() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python altzone() method", "Syntax:", "Example:", "Output:", "Example: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-time-altzone-method/?ref=next_article"},
{"title": "Python PIL | UnsharpMask() method - GeeksforGeeks", "h1": ["Python PIL | UnsharpMask() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["PIL.ImageFilter.UnsharpMask()", "Syntax:", "Parameters:", "radius:", "percent:", "threshold:", "Output:", "Output:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pil-unsahrpmask-method/?ref=ml_lbp"},
{"title": "Python | shutil.move() method - GeeksforGeeks", "h1": ["Python | shutil.move() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Shutil module", "shutil.move()", "Syntax:", "Parameters: ", "source: ", "destination: ", "copy_function ", "Return Value: ", "Example #1 :", "Output:", "Example #2 :", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-shutil-move-method/"},
{"title": "Python Program to Rotate Matrix Elements - GeeksforGeeks", "h1": ["Python Program to Rotate Matrix Elements"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "What kind of Experience do you want to share?"], "strong": ["Examples:", "PRACTICE", "Output:", "Time Complexity: ", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures and Algorithms - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-program-to-rotate-matrix-elements/?ref=next_article"},
{"title": "Python - Color Inversion using Pillow - GeeksforGeeks", "h1": ["Python – Color Inversion using Pillow"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Computer Vision", "Image Processing & Transformation", "Feature Extraction and Description", "Deep Learning for Computer Vision", "Object Detection and Recognition", "Image Segmentation", "3D Reconstruction", "Introduction to Computer Vision", "Image Processing & Transformation", "Feature Extraction and Description", "Deep Learning for Computer Vision", "Object Detection and Recognition", "Image Segmentation", "3D Reconstruction", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Note:", "Sample Image – ", "Method #1:", "Output:", "Explanation:", "Method #2:", "Output:", "Explanation: ", "JPG/JPEG", "Data Science Training Program ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-color-inversion-using-pillow/?ref=ml_lbp"},
{"title": "Python | Using PIL ImageGrab and PyTesseract - GeeksforGeeks", "h1": ["Python | Using PIL ImageGrab and PyTesseract"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "ImageGrab and PyTesseract", "Implementation of code", "Output", "Read about other libraries used in the code", "What kind of Experience do you want to share?"], "strong": ["Optical Character Recognition(OCR)", "pytesseract.image_to_string(image, lang=**language**) – ", "cv2.cvtColor(image, **colour conversion**) – ", "ImageGrab.grab(bbox=**Coordinates of the area of the screen to be captured**) – ", "The objectives of the code are:", "Code : Python code to use ImageGrab and PyTesseract", "Complete Machine Learning & Data Science Program ", "Master Java Programming - Complete Beginner to Advanced ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-using-pil-imagegrab-and-pytesseract/?ref=ml_lbp"},
{"title": "Python - Check if String Contain Only Defined Characters using Regex - GeeksforGeeks", "h1": ["Python – Check if String Contain Only Defined Characters using Regex"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Algorithm", "Check if String Contains Only Defined Characters using Regex", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input:", "Output:", "Explanation: ", "Input:", "Output:", "Explanation: ", "Step 1:", "Step 2: ", "Step 3", "Check if String Contains Only Defined Characters using Regex", "Functions Used:", "compile()", ": ", "search()", ": ", "Output:", "Note: ", "Time complexity :", "Space Complexity :", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-check-if-string-contain-only-defined-characters-using-regex/"},
{"title": "Python Program for Rotate a Matrix by 180 degree - GeeksforGeeks", "h1": ["Python Program for Rotate a Matrix by 180 degree"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples :", "Python Program for Rotate a Matrix by 180 degree", "From the above illustration", " we get that simply to rotate the matrix by 180 degrees then we will have to print the", "given matrix in a", "reverse manner.", "Output", "Time complexity: ", "Auxiliary Space:", "In-place rotation for Rotate a Matrix by 180 degree", "Output", "Time complexity :", "Auxiliary Space :", "Position swapping for Rotate a Matrix by 180 degree", "Output", "Time complexity :", "Auxiliary Space :", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "DSA for Interview Preparation "], "link": "https://www.geeksforgeeks.org/python-program-for-rotate-a-matrix-by-180-degree/?ref=ml_lbp"},
{"title": "Python regex to find sequences of one upper case letter followed by lower case letters - GeeksforGeeks", "h1": ["Python regex to find sequences of one upper case letter followed by lower case letters"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Output:", "Time complexity: O(n), where n is length of string.", "Auxiliary Space: O(1)", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-regex-to-find-sequences-of-one-upper-case-letter-followed-by-lower-case-letters/"},
{"title": "Python | Ways to check string contain all same characters - GeeksforGeeks", "h1": ["Python | Ways to check string contain all same characters"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using Naive Method", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #2: Using String Comparisons", "Output", "Time Complexity:", "Auxiliary Space:", "Method #3: Using count comparison", "Output", "Time complexity: ", "Auxiliary space: ", "Method #4 : Using len() and set() methods", "Output", "Method #5 : Using all()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-ways-to-check-string-contain-all-same-characters/"},
{"title": "Python PIL | ImageGrab.grab() method - GeeksforGeeks", "h1": ["Python PIL | ImageGrab.grab() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["PIL.ImageGrab.grab()", "Syntax:", "parameters:", "bbox:", "Returns:", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-pil-imagegrab-grab-method/"},
{"title": "Python - Get maximum of Nth column from tuple list - GeeksforGeeks", "h1": ["Python – Get maximum of Nth column from tuple list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using list comprehension + max()", "Output", "Time Complexity: ", "Auxiliary Space:", "Method #2: Using imap() + max() + itemgetter()", "itemgetter", "imap", "itertools", "test_list", "print()", "N", "e itemgetter() ", "imap()", "itemgetter()", "test_list", " max()", "test_list", "res", "print()", "Output : ", "The time complexity ", "The auxiliary space", "Method #3: Using sort() method", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #4: Using reduce() method", "Output", "Time Complexity:", "Auxiliary Space:", "Method 5 : Using NumPy library", "OUTPUT:", "Maximum of Nth Column of Tuple List : 19", "Time complexity: ", "Auxiliary space:", "Method 6: Using a loop.", "N", "max_val", "max_val", "max_val", "max_val", "Output", "Time complexity:", "Auxiliary space:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-get-maximum-of-nth-column-from-tuple-list/"},
{"title": "Python Program to merge two files into a third file - GeeksforGeeks", "h1": ["Python Program to merge two files into a third file"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Program to Merge two files into New File", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Note:", "file1.txt", "file2.txt", "Output:", "Output:", "Output:", "Output:", "Master C Programming with Data Structures ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-merge-two-files-into-a-third-file/"},
{"title": "Python Program to Reverse a linked list - GeeksforGeeks", "h1": ["Python Program to Reverse a linked list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Iterative Method", "Output:", "A Simpler and Tail Recursive Method", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-for-reverse-a-linked-list/"},
{"title": "Python Program for Print Number series without using any loop - GeeksforGeeks", "h1": ["Python Program for Print Number series without using any loop"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Problem –", "Note :", "Examples :", "Input :", "Output :", "Input :", "Output :", "Explanation –", "recursion", "Output :", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-for-print-number-series-without-using-any-loop/?ref=ml_lbp"},
{"title": "Python Tkinter - SpinBox range Validation - GeeksforGeeks", "h1": ["Python Tkinter – SpinBox range Validation"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisites:", "Note:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tkinter-spinbox-range-validation/"},
{"title": "Python Program To Merge A Linked List Into Another Linked List At Alternate Positions - GeeksforGeeks", "h1": ["Python Program To Merge A Linked List Into Another Linked List At Alternate Positions"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["PRACTICE", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-program-to-merge-a-linked-list-into-another-linked-list-at-alternate-positions/?ref=ml_lbp"},
{"title": "Python-Data-Structures Archives - GeeksforGeeks", "h1": ["Python-Data-Structures"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/tag/python-data-structures/"},
{"title": "Python Program to generate one-time password (OTP) - GeeksforGeeks", "h1": ["Python Program to generate one-time password (OTP)"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Used Function:", "random.random():", "math.floor(): ", "Example #1 : ", "Output:", "Example #2:", "Output:", "Example #3:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-to-generate-one-time-password-otp/"},
{"title": "Python | Converting list string to dictionary - GeeksforGeeks", "h1": ["Python | Converting list string to dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using dictionary comprehension + split()", "Output : ", "Method #2 : Using eval() + replace()", "Output : ", " Method #3: Using a for loop: ", "Output", "Method #4: Using regular expressions", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-converting-list-string-to-dictionary/?ref=ml_lbp"},
{"title": "Python | Program to convert a tuple to a string - GeeksforGeeks", "h1": ["Python | Program to convert a tuple to a string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Approach 1: using simple for loop", "Output:", "Time complexity: ", "Auxiliary space: ", "Approach 2: using str.join()", "Output:", "Time complexity:", "Auxiliary space:", "Approach 3: using  str.join() function and map() function", "Output:", "Approach 4: using reduce() function", "Output:", "Method 5: Use a list comprehension + join()", "join()", "convertTuple() ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-convert-a-tuple-to-a-string/"},
{"title": "Python Program to Calculate Gross Salary of a Person - GeeksforGeeks", "h1": ["Python Program to Calculate Gross Salary of a Person"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Program to Calculate Gross Salary of a Person", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["basic ", "grade ", "Gross Salary:", "Examples:", "Input: ", "Output: ", "Input: ", "Output: ", "{IDE}", "Approach: ", "HRA:", "DA:", "PF:", "Output", "Time Complexity:", "Auxiliary Space:", "Output", " Time complexity: ", "Auxiliary space ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-to-calculate-gross-salary-of-a-person/?ref=ml_lbp"},
{"title": "Python Program to Find and Print Address of Variable - GeeksforGeeks", "h1": ["Python Program to Find and Print Address of Variable"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Method 1: ", "Find and Print Address of Variable using ", "id()", "Python3", "Method 2: ", "Find and Print Address of Variable using addressof()", "Python3", "Method 3: ", "Find and Print Address of Variable using", " ", "hex()", "Python3", "What kind of Experience do you want to share?"], "strong": ["It can be done in these ways:", "Method 1: ", "Syntax: ", "Output:", "Method 2: ", "Syntax:", "Output:", "Method 3: ", " ", "hex()", "Syntax: ", "Example: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Master Java Programming - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-program-to-find-and-print-address-of-variable/?ref=ml_lbp"},
{"title": "Python Program to Convert a List to String - GeeksforGeeks", "h1": ["Python Program to Convert a List to String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Program to Convert a List to a String", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example", "Input:", "Output", "Explanation:", "U", " ", "Output", "Time Complexity:", "Auxiliary Space:", " using join() method", "Output", "Time Complexity:", "Auxiliary Space:", "Convert a List to a String using list comprehension", "Output", "Time complexity", "Space complexity:", " ", "Convert a List to a String using the map() function", "Output", "Time complexity", "t", "Space complexity: ", " using ", "Output", "Time Complexity:", "Auxiliary Space:", "List to a String using", "Output", "Time Complexity:", "Auxiliary Space:", "Convert a List to ", "Output", "Time complexity: ", "Space complexity: ", "Output", "Output", "Time complexity:", "Space complexity:", " using Recursion ", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-convert-a-list-to-string/?ref=next_article"},
{"title": "Python User defined functions - GeeksforGeeks", "h1": ["Python User defined functions"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python User-defined functions", "Python3", "Python Parameterized Function", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python ", "Function with return value", "Python3", "What kind of Experience do you want to share?"], "strong": ["user defines functions", "Table of Content ", "Syntax:", "Example:", "Output:", "Syntax:", "Example:", "Output:", "Python Default arguments", "Example:", "Output:", "Note:", "Python ", "Example", "Output:", "Python ", "Example:", "Output:", "Note:", "Example:", "Output", "Output:", "Example:", "Output:", "Python ", "Syntax:", "Example:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-user-defined-functions/?ref=ml_lbp"},
{"title": "Python - Dictionary Values Mean - GeeksforGeeks", "h1": ["Python – Dictionary Values Mean"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loop + len()", "Output", "Method #2 : Using sum() + len() + values()", "Output", "Method #3 : Using values() and mean() method of statistics module", "Output", "Method 4:Using the reduce function from the functools library", "Output", "Time complexity: O(n)", "Space complexity: O(1)", "Method 5:using the NumPy module", "Approach:", "Output", "Time complexity:", "Auxiliary space complexity:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-dictionary-values-mean/?ref=ml_lbp"},
{"title": "Python repr() Function - GeeksforGeeks", "h1": ["Python repr() Function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python repr() Function Syntax ", "How repr() works in Python?", "Python3", "repr() in Python Examples ", "Python3", "Python3", "Python3", "Implement __repr__() for custom objects", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example", "repr(s)", "‘Hello, Geeks.’", "Output :", "Syntax:", "object: ", "Return:", "Output :", "Output :", "repr()", "Output :", "Output :", "__repr__()", "__repr__()", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-repr-function/?ref=ml_lbp"},
{"title": "Python | Passing dictionary as keyword arguments - GeeksforGeeks", "h1": ["Python | Passing dictionary as keyword arguments"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method : Using ** ( splat ) operator", "Output : ", "Method 2 : Single argument to the function and then unpack it inside the function", " step-by-step approach ", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-passing-dictionary-as-keyword-arguments/"},
{"title": "Python | Find the tuples containing the given element from a list of tuples - GeeksforGeeks", "h1": ["Python | Find the tuples containing the given element from a list of tuples"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples: ", "Input:", "Output:", "Input:", "Output:", "Method #1: Using for loop", "Approach:", "Output", "Time complexity:", "O(n)", "Auxiliary space:", "O(m)", "Method #2:", "Output", "Time complexity: ", "Auxiliary space: ", "Method #3:", "Output", "Time complexity:", "Auxiliary space: ", "Method #4: ", "Output", "Time complexity: O(n)", "Auxiliary space: (n),", "Method#5:Using reduce() + filter() +lambda() function.", "Output", "Time complexity: ", "Auxiliary Space:", "Method #6 : Using count() method", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(k),", "Method #7: Using itertools", "Approach:", "itertools", "Input", "x", "in", "Output", "Input", "x", "if", "itertools.chain() ", "Output", "Time Complexity:O(N)", "Auxiliary Space :O(N)", "Method #8: Using list comprehension with conditional expression", "Output", "Time Complexity: ", "Auxiliary Space: ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-find-the-tuples-containing-the-given-element-from-a-list-of-tuples/?ref=ml_lbp"},
{"title": "Python: Passing Dictionary as Arguments to Function - GeeksforGeeks", "h1": ["Python: Passing Dictionary as Arguments to Function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Refer to the below article to get the idea about Python Dictionary.", "Example:", "Output:", "Passing Dictionary as kwargs", "Example 1: ", "Output:", "Example 2:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-passing-dictionary-as-arguments-to-function/"},
{"title": "Python - Vertical Concatenation in Matrix - GeeksforGeeks", "h1": ["Python – Vertical Concatenation in Matrix"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1: Using loop", "Output", "Time Complexity: ", "Space Complexity: ", "Method #2 : Using join() + list comprehension + zip_longest()", "Output", "Time Complexity: ", "Space Complexity: ", "Method #3: Using numpy.transpose() and numpy.ravel()", "numpy", "max() ", "numpy", " np.array() ", "OUTPUT:", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-vertical-concatenation-in-matrix/?ref=ml_lbp"},
{"title": "Python def Keyword - GeeksforGeeks", "h1": ["Python def Keyword"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python def Syntax", "How to Use def in Python?", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Frequently Asked Questions (FQAs)", "What kind of Experience do you want to share?"], "strong": ["Python def keyword", "def", "Python def Syntax", "def", "Use of def keyword", "def ", "Hello", "Output", "python_def_subNumbers(). ", " ", "Output", "python_def_prime()", "Output", "python_def_factorial()", "Output", "python_def_keyword()", "*args", " ,", "print()", "Output", "python_def_keyword()", "**kwargs", "kwargs", "print()", "Output", "apply_function()", "square", "apply_function()", "Output", "python_def_keyword", "__init__()", "say_hello() ", "python_def_keyword", "python_def_keyword1", "say_hello()", "python_def_keyword1", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Master Java Programming - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-def-keyword/"},
{"title": "Python | Merge elements of sublists - GeeksforGeeks", "h1": ["Python | Merge elements of sublists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input:", "Output:", "Method #1: Using Map + lambda", "Output:", "Method #2: Using Zip()", "Output:", "Method #3: Using starmap() and concat()", "Output:", "Method #4:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-merge-elements-of-sublists/?ref=next_article"},
{"title": "Python | Check if all elements in a List are same - GeeksforGeeks", "h1": ["Python | Check if all elements in a List are same"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input:", "Output:", "Input:", "Output:", "Method #1:", "Output", "Method #2:", "Output", "Method #3:", "Output", "Method #4:", "Output", "Method #5 : Using len() method", "Output", "Method#6: Using recursion", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method #7:", "Output:", "Time Complexity:", "Auxiliary Space:", "Method #8 : Using operator.countOf() method", "Output", "Method #9: Using  heapq module:", "Equal", "Not Equal", "Output", "Time Complexity: ", "Space Complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-check-if-all-elements-in-a-list-are-same/"},
{"title": "Python Tuple - max() Method - GeeksforGeeks", "h1": ["Python Tuple – max() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python tuple max() Method", "Example 1: Using tuple max() Method", "Python3", "Example 2: Using tuple max() Method for string elements", "Python3", "Example 3: Using max for equal-length elements", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example", "Input:", "Output:", "Explanation: ", "Syntax:", "Parameters:", "object: ", "Return type:", "Example 1: Using tuple max() Method", "Output:", "Example 2: Using tuple max() Method for string elements", "Output:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-tuple-max-method/?ref=ml_lbp"},
{"title": "Python | Check if string is a valid identifier - GeeksforGeeks", "h1": ["Python | Check if string is a valid identifier"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["identifier", "re.search() :", "Output", "Using the isidentifier method:", "Output", "Time complexity: O", "Auxiliary Space:  ", "Method #3: Using the keyword module", "Step-by-Step Algorithm : ", "Output", "Complexity Analysis : ", "Time Complexity: O(1), ", "Auxiliary Spacey: O(1), ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-check-if-string-is-a-valid-identifier/?ref=ml_lbp"},
{"title": "Python | Program to implement Jumbled word game - GeeksforGeeks", "h1": ["Python | Program to implement Jumbled word game"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Jumbled word game: ", "Example :", "Input:", "Output:", "Input:", "Output:", "Input:", "Output:", "Using Inbuilt functions :", "choice() method", "sample() method", "User-defined functions :", "choose() :", "jumble() :", "thank() :", "check_win() :", "play() :", "Output: ", "Code Explanation:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-to-implement-jumbled-word-game/?ref=ml_lbp"},
{"title": "Python | Plotting Area charts in excel sheet using XlsxWriter module - GeeksforGeeks", "h1": ["Python |  Plotting Area charts in excel sheet using XlsxWriter module"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisite:", "XlsxWriter ", "Code #1 :", "Output:", "Code #2 :", "Output:", "Code #3 :", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-plotting-area-charts-in-excel-sheet-using-xlsxwriter-module/?ref=ml_lbp"},
{"title": "Get a list as input from user in Python - GeeksforGeeks", "h1": ["Get a list as input from user in Python"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input :", "Output :", "Input :", "Output :", "Get a list as input from user in Python", "Output: ", "Get a list as input from user in Python ", "Output: ", "Get a list as input from user in Python ", "Output: ", "Get a list as input from user in Python ", "Output: ", "Get a list as input from user in Python", "Output: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-get-a-list-as-input-from-user/?ref=ml_lbp"},
{"title": "Python Bokeh - Plotting Line Segments on a Graph - GeeksforGeeks", "h1": ["Python Bokeh – Plotting Line Segments on a Graph"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "plotting.figure.segment()", "What kind of Experience do you want to share?"], "strong": ["Syntax : ", "Parameters : ", "x0 : ", "y0 : ", "x1 : ", "y1 : ", "Returns : ", "Example 1 : ", "Output : ", "Example 2 : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-bokeh-plotting-line-segments-on-a-graph/?ref=ml_lbp"},
{"title": "Python | Geographical plotting using plotly - GeeksforGeeks", "h1": ["Python | Geographical plotting using plotly"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["plotly ", "plotly ", "cufflink", "choropleth ", "Command to install plotly:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-geographical-plotting-using-plotly/?ref=ml_lbp"},
{"title": "Python - Edit objects inside tuple - GeeksforGeeks", "h1": ["Python – Edit objects inside tuple"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Yes", "Method #1: Using Access methods", "Output : ", "Method #2 : Using pop() + index()", "Output : ", "Approach", "Algorithm", "Output", "Output", "Method #5: Using the slicing", "Output", "METHOD 6:By creating a new tuple", "APPROACH:", "ALGORITHM:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-edit-objects-inside-tuple/?ref=ml_lbp"},
{"title": "Python program to print the octal value of the numbers from 1 to N - GeeksforGeeks", "h1": ["Python program to print the octal value of the numbers from 1 to N"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Approach:", "i", "Note: ", "oct() ", " ", "Below are the implementations based on the above approach:", "Output", "Time complexity:", ",", "Space complexity:", "Output", "The time complexity of this program is O(n log n), where n is the input number, The auxiliary space used by this program is O(1).", "List Comprehension with Join method", "Steps:", "Output", "Time Complexity:", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-print-the-octal-value-of-the-numbers-from-1-to-n/"},
{"title": "Python natsorted() Function - GeeksforGeeks", "h1": ["Python natsorted() Function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python natsorted() Function Syntax", "What is natsorted() Function in Python?", "Python3", "Python3", "More Python natsorted() Function Examples", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax ", "Parameters:", "iterable", "key", "alg", "signed", "kwargs", "Return Type:", "Example: String Sorting", "Output", "Output", "Output", "Time Complexity: ", "Space Complexity:", "Sorting Mixed Alphanumeric Strings", "Output :", "Time Complexity:", "Space Complexity:", "Output", "Time Complexity", "Space Complexity: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-natsorted-function/?ref=previous_article"},
{"title": "Python program to print the hexadecimal value of the numbers from 1 to N - GeeksforGeeks", "h1": ["Python program to print the hexadecimal value of the numbers from 1 to N"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Approach: String formatting approach to convert numbers to hexadecimal", "Python3", "Method: Manual conversion method ", "Python3", "Approach: Using bitwise operators to convert decimal numbers to hexadecimal.", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input:", "Output:", "Input:", "Output:", "Approach:", "i", "Note: ", "hex() ", "Below are the implementations based on the above approach:", "Output", "Time complexity :", "Space complexity :", "Output", "The time complexity of the string formatting approach to convert numbers to their hexadecimal values is O(N),", "The auxiliary space of this approach is O(1).", "Method: Manual conversion method ", "Output", "Steps:", "N", "hex_digits", "hex_digits", "hex_value", "4 bits", "Output", "Time Complexity:", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-print-the-hexadecimal-value-of-the-numbers-from-1-to-n/"},
{"title": "Python | range() does not return an iterator - GeeksforGeeks", "h1": ["Python | range() does not return an iterator"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": [" range() : ", "OUTPUT : ", " Runtime Errors : ", " Note : ", "range is iterable ", " OUTPUT : ", " Example ", " OUTPUT : ", " Runtime Error : ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Master Java Programming - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-range-does-not-return-an-iterator/?ref=ml_lbp"},
{"title": "Python - Test if all elements in list are of same type - GeeksforGeeks", "h1": ["Python – Test if all elements in list are of same type"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using loop + isinstance()", "Output", "Method #2: Using all() + isinstance()", "Output", "Method #3 : Using loop+type() method", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(1)", "Method #4: Using lambda function and filter() method", "Output", "Method #5:Using itertools.filterfalse() method", "Output", "Time Complexity:O(N)", "Auxiliary Space:O(N)", "Method #6: Using set()", "Output", "Time Complexity", "Auxiliary Space", "Method #7: Using numpy:", "Algorithm:", "Output:", "Time complexity:", "Space complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-test-if-all-elements-in-list-are-of-same-type/"},
{"title": "Python | Plotting column charts in excel sheet using XlsxWriter module - GeeksforGeeks", "h1": ["Python | Plotting column charts in excel sheet using XlsxWriter module"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisite:", "XlsxWriter ", "firstly, create chart object of specific chart type( i.e Column, Stacked Column, Percent Stacked Column chart etc.). After creating chart objects, insert data in it and lastly, add that chart object in the sheet object. ", "Code #1 :", "Output:", "Code #2 : ", "Output:", "Code #3 : ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-plotting-column-charts-in-excel-sheet-using-xlsxwriter-module/"},
{"title": "Python | Test if tuple is distinct - GeeksforGeeks", "h1": ["Python | Test if tuple is distinct"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loop", "Output", "Method #2 : Using set() + len()", "Output", "Method #3: Using collections.Counter()", "Output", "Time Complexity: O(n)", "Auxiliary space: O(n)", "Method 4 :  use a boolean flag and iterate over the tuple to check if there are any duplicate elements. ", " step-by-step approach for the above program:", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-test-if-tuple-is-distinct/?ref=ml_lbp"},
{"title": "Python - Concatenation of two String Tuples - GeeksforGeeks", "h1": ["Python – Concatenation of two String Tuples"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using zip() + generator expression", "Output : ", "Method #2 : Using map() + concat", "Output : ", "Method #3: Use a for loop to iterate over the indices of the tuples and concatenate the corresponding elements.", "Output", "Time complexity:", "Auxiliary space:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-concatenation-of-two-string-tuples/?ref=ml_lbp"},
{"title": "Python - Get maximum of Nth column from tuple list - GeeksforGeeks", "h1": ["Python – Get maximum of Nth column from tuple list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using list comprehension + max()", "Output", "Time Complexity: ", "Auxiliary Space:", "Method #2: Using imap() + max() + itemgetter()", "itemgetter", "imap", "itertools", "test_list", "print()", "N", "e itemgetter() ", "imap()", "itemgetter()", "test_list", " max()", "test_list", "res", "print()", "Output : ", "The time complexity ", "The auxiliary space", "Method #3: Using sort() method", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #4: Using reduce() method", "Output", "Time Complexity:", "Auxiliary Space:", "Method 5 : Using NumPy library", "OUTPUT:", "Maximum of Nth Column of Tuple List : 19", "Time complexity: ", "Auxiliary space:", "Method 6: Using a loop.", "N", "max_val", "max_val", "max_val", "max_val", "Output", "Time complexity:", "Auxiliary space:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-get-maximum-of-nth-column-from-tuple-list/?ref=ml_lbp"},
{"title": "Python program to check whether the string is Symmetrical or Palindrome - GeeksforGeeks", "h1": ["Python program to check whether the string is Symmetrical or Palindrome"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input:", "Output:", "Input:", "Output:", "Approach 1:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Approach 2:", "Output", "Time Complexity: ", "Auxiliary Space: ", "METHOD 3:Using re module", "APPROACH:", "ALGORITHM:", "Output", "reversed()", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-to-check-whether-the-string-is-symmetrical-or-palindrome/?ref=ml_lbp"},
{"title": "Python PIL | ImageSequence.Iterator() - GeeksforGeeks", "h1": ["Python PIL | ImageSequence.Iterator()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Pillow", "Installation and setup", "Loading and Saving Images", "Image Manipulation Basics", "Adjusting Image Properties", "Image Filtering and Effects", "Drawing on Images", "Image Transformations", "Working with Image Metadata", "Image Analysis and Processing", "Image Compositing and Blending", "Image Formats and Conversion", "Batch Processing and Automation", "Image Enhancement Techniques", "Working with Animated Images", "OCR and Text Extraction from Images", "Pillow function", "Introduction to Pillow", "Installation and setup", "Loading and Saving Images", "Image Manipulation Basics", "Adjusting Image Properties", "Image Filtering and Effects", "Drawing on Images", "Image Transformations", "Working with Image Metadata", "Image Analysis and Processing", "Image Compositing and Blending", "Image Formats and Conversion", "Batch Processing and Automation", "Image Enhancement Techniques", "Working with Animated Images", "OCR and Text Extraction from Images", "Pillow function", "What kind of Experience do you want to share?"], "strong": ["ImageSequence", "ImageSequence.Iterator()", "Syntax:", "Parameters:", "im", "Returns:", "Image Used:", "Output:", "Another Example:", "Image Used:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pil-imagesequence-iterator/"},
{"title": "Get a list as input from user in Python - GeeksforGeeks", "h1": ["Get a list as input from user in Python"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input :", "Output :", "Input :", "Output :", "Get a list as input from user in Python", "Output: ", "Get a list as input from user in Python ", "Output: ", "Get a list as input from user in Python ", "Output: ", "Get a list as input from user in Python ", "Output: ", "Get a list as input from user in Python", "Output: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-get-a-list-as-input-from-user/"},
{"title": "Word Embedding using Word2Vec - GeeksforGeeks", "h1": ["Word Embedding using Word2Vec"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What is Word Embedding?", "Python", "Frequently Asked Quetions (FAQs)", "What kind of Experience do you want to share?"], "strong": ["What is Word Embedding?", "Word Embedding", "Word2Vec ", "What is Word2Vec?", "CBOW (Continuous Bag of Words):", "Skip Gram : ", "nltk", " ", "gensim", "nltk ", "gensim", "NLTK:", "GENSIM: ", "Semantic Representations:", "Distributional Semantics:", "Vector Arithmetic:", "Efficiency:", "Transfer Learning:", "Applications:", "Scalability:", "Open Source Implementations:", "Output :", "Applications of Word Embedding:", "Text classification: ", "Named Entity Recognition (NER):", "Information Retrieval:", "Machine Translation:", " Increasing response accuracy and understanding of semantic context in Q&A systems.", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-word-embedding-using-word2vec/?ref=next_article"},
{"title": "Python - Lambda Function to Check if value is in a List - GeeksforGeeks", "h1": ["Python – Lambda Function to Check if value is in a List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Method 1: ", "Using ", "Lambda", " and ", "Count()", " method", "Python3", "Method 2: ", "Using Lambda and ", "in keyword", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input  : ", "Output :  ", "Input ", "Output", "Method 1: ", "Output:", "Explanation: ", "Method 2: ", "Output:", "Explanation:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-lambda-function-to-check-if-value-is-in-a-list/?ref=next_article"},
{"title": "Python | Similarity metrics of strings - GeeksforGeeks", "h1": ["Python | Similarity metrics of strings"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using Naive Approach(sum() + zip())", "Output : ", "Time Complexity: O(n), ", "Auxiliary Space: O(1)", "Method #2 : Using SequenceMatcher.ratio()", "Output : ", "Method #3 : Using difflib.ndiff", "Output", "Method #4: Levenshtein distance algorithm. ", "Output", "Time complexity:", "Auxiliary space: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-similarity-metrics-of-strings/?ref=next_article"},
{"title": "Python | Plotting Line charts in excel sheet using XlsxWriter module - GeeksforGeeks", "h1": ["Python | Plotting Line charts in excel sheet using XlsxWriter module"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Prerequisite: ", "XlsxWriter", " Code :", "add_chart()", " Output:", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-plotting-line-charts-in-excel-sheet-using-xlsxwriter-module/?ref=ml_lbp"},
{"title": "Python | Lemmatization with NLTK - GeeksforGeeks", "h1": ["Python | Lemmatization with NLTK"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Lemmatization ", "Lemmatization Techniques", "Implementation of Lemmatization", "Python3", "Python3", "Advantages of Lemmatization with NLTK", "Disadvantages of Lemmatization with NLTK", "Frequently Asked Questions (FAQs)", "What kind of Experience do you want to share?"], "strong": ["Lemmatization", "text pre-processing technique ", "natural language processing (NLP) ", "lemmatization with NLTK", "1. Rule Based Lemmatization", "Rule:", "2. Dictionary-Based Lemmatization", "3. Machine Learning-Based Lemmatization", "Example", "Output:", "Output:", "Advantages of Lemmatization with NLTK", "Improves text analysis accuracy: ", "Reduces data size:", "Better search results:", "Disadvantages of Lemmatization with NLTK", "Time-consuming:", "Not suitable for real-time applications:", "May lead to ambiguity:", "What is lemmatization?", "How is lemmatization different from stemming?", "Why is lemmatization important in natural language processing (NLP)?", "How does lemmatization handle different parts of speech?", "What are some common lemmatization tools or libraries in Python?", "Data Science Training Program ", "Complete Machine Learning & Data Science Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-lemmatization-with-nltk/?ref=ml_lbp"},
{"title": "Python - Get Function Signature - GeeksforGeeks", "h1": ["Python – Get Function Signature"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Using signature() function", "Using Decorators", "What kind of Experience do you want to share?"], "strong": ["signature()", "Syntax:", "Example 1:", "Output", "Example:", "Output:", "Master C Programming with Data Structures ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-get-function-signature/?ref=lbp"},
{"title": "Python Bokeh - Plotting Diamond Crosses on a Graph - GeeksforGeeks", "h1": ["Python Bokeh – Plotting Diamond Crosses on a Graph"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "plotting.figure.diamond_cross()", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax : ", "Parameters : ", "x : ", "y : ", "size : ", "angle : ", "angle_units : ", "fill_alpha : ", "fill_color : ", "line_alpha : ", "line_cap : ", "line_color : ", "line_dash : ", "line_dash_offset : ", "line_join : ", "line_width : ", "name : ", "tags : ", "Other Parameters : ", "alpha : ", "color : ", "legend_field : ", "legend_group : ", "legend_label : ", "muted : ", "name : ", "source : ", "view : ", "visible : ", "x_range_name : ", "y_range_name : ", "level : ", "Returns : ", "Example 1 :", "Output : ", "Example 2 :", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-bokeh-plotting-diamond-crosses-on-a-graph/?ref=previous_article"},
{"title": "Python | Working with Pandas and XlsxWriter | Set – 3 - GeeksforGeeks", "h1": ["Python | Working with Pandas and XlsxWriter | Set – 3"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "What kind of Experience do you want to share?"], "strong": [" Prerequisite: :", "Pandas", " Code #1 : ", " Output : ", " Code #2 : ", " Output : ", " Code #3 : ", " Output : ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-working-with-pandas-and-xlsxwriter-set-3/?ref=previous_article"},
{"title": "Python | Plotting charts in excel sheet with data tools using XlsxWriter module | Set – 2 - GeeksforGeeks", "h1": ["Python | Plotting charts in excel sheet with data tools using XlsxWriter module | Set – 2"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisite: ", "XlsxWriter", "Code #1 :", "Output : ", "Code #2 :", "Output : ", "Code #3 :", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-plotting-charts-in-excel-sheet-with-data-tools-using-xlsxwriter-module-set-2/?ref=ml_lbp"},
{"title": "Python | os.makedev() method - GeeksforGeeks", "h1": ["Python | os.makedev() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "What kind of Experience do you want to share?"], "strong": ["Note:", "Code:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-makedev-method/?ref=lbp"},
{"title": "Python | os.abort() method - GeeksforGeeks", "h1": ["Python | os.abort() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Parameter:", "Return type:", "Code #1:", "Output:", "Code #2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-abort-method/?ref=lbp"},
{"title": "Python | os.device_encoding() method - GeeksforGeeks", "h1": ["Python | os.device_encoding() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "What kind of Experience do you want to share?"], "strong": ["Note:", "Code:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-device_encoding-method/?ref=lbp"},
{"title": "Python | os.fstat() method - GeeksforGeeks", "h1": ["Python | os.fstat() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "What kind of Experience do you want to share?"], "strong": ["Note", "Code:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-fstat-method/?ref=lbp"},
{"title": "Python | Pandas TimedeltaIndex.get_level_values - GeeksforGeeks", "h1": ["Python | Pandas TimedeltaIndex.get_level_values"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " TimedeltaIndex.get_level_values()", "Syntax :", "Parameters : ", "level : ", "Return : ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-timedeltaindex-get_level_values/?ref=next_article"},
{"title": "Python | os.mkfifo() method - GeeksforGeeks", "h1": ["Python | os.mkfifo() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Parameters:", "path:", "mode", "dir_fd", "Note:", "Return type:", "Code:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-mkfifo-method/?ref=lbp"},
{"title": "Python | os.getcwd() method - GeeksforGeeks", "h1": ["Python | os.getcwd() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "What kind of Experience do you want to share?"], "strong": ["OS module", "OSError", "Syntax:", "Parameter: ", "Return Value: ", "Example #1 :", "Output:", "Example #2 :", "root", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-getcwd-method/?ref=lbp"},
{"title": "Python | os.fchdir() method - GeeksforGeeks", "h1": ["Python | os.fchdir() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "What kind of Experience do you want to share?"], "strong": ["Code #1:", "Output:", "Code #2:", "Output:", "Code #3:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-fchdir-method/?ref=lbp"},
{"title": "Python - Stack and StackSwitcher in GTK+ 3 - GeeksforGeeks", "h1": ["Python – Stack and StackSwitcher in GTK+ 3"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "What kind of Experience do you want to share?"], "strong": ["Follow below steps:", "Example :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-stack-and-stackswitcher-in-gtk-3/?ref=lbp"},
{"title": "Python - Read CSV Columns Into List - GeeksforGeeks", "h1": ["Python – Read CSV Columns Into List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["File Used:", "Method 1: ", "Approach:", "Below is the implementation:", "Output:", "Method 2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-read-csv-columns-into-list/?ref=lbp"},
{"title": "Python Program to Delete Specific Line from File - GeeksforGeeks", "h1": ["Python Program to Delete Specific Line from File"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Method 1: Deleting a line using a specific position", "Python3", "Method 2: Deleting a line using a text that matches exactly with the line", "Python3", "Method 3: Using custom-made logics", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["months.txt", "Method 1: Deleting a line using a specific position", "Example:", "Output:", "Output:", "Output:", "Example 2: ", "Output:", "Master C Programming with Data Structures ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-delete-specific-line-from-file/?ref=lbp"},
{"title": "Python | Program that matches a word containing 'g' followed by one or more e's using regex - GeeksforGeeks", "h1": ["Python | Program that matches a word containing ‘g’ followed by one or more e’s using regex"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisites :", "Examples :", "Input :", "Output :", "Input :", "Output :", "Approach :", "\\w – ", "* ", "+ ", "Output :", "Time complexity:  O(n)", "Auxiliary Space: O(1),", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-that-matches-a-word-containing-g-followed-by-one-or-more-es-using-regex/?ref=ml_lbp"},
{"title": "Sort numeric strings in a list in Python - GeeksforGeeks", "h1": ["Sort numeric strings in a list in Python"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Naive Method ", "Output:", "Method #2 : Using sort() using key", "Output:", "Method #3 : Using sorted() + key", "Output:", "Method #4 : Using sorted() + key with len ()", "Output:", "time complexity", "space complexity", "Method #5 : Using Decimal module:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/"},
{"title": "Python - Read CSV Column into List without header - GeeksforGeeks", "h1": ["Python – Read CSV Column into List without header"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisites: ", "Reading and Writing data in CSV ", "Steps to read CSV columns into a", "list without headers:", "csv", "Example:", "Below is the full implementation:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "GATE Computer Science & Information Technology 2025 ", "GATE Data Science and Artificial Intelligence 2025 "], "link": "https://www.geeksforgeeks.org/python-read-csv-column-into-list-without-header/"},
{"title": "Python - Capitalize repeated characters in a string - GeeksforGeeks", "h1": ["Python – Capitalize repeated characters in a string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input:", "Output: ", "Explanation: ", "Input:", "Output:", "Explanation: ", "Approach 1:", "Implementation:", "Output", "Time Complexity", ": ", "Auxiliary Space", ": ", "Approach 2:", "count()", "upper()", "Output", "Time Complexity", ": ", "Auxiliary Space", ": ", "Approach 3: Using replace() and len() methods", "Output", "Time Complexity", ": ", "Auxiliary Space", ": ", "Approach #4 : Using Counter() function", "Output", "Approach #5 : Using List Comprehension", "Output", "Approach #6 : Using operator.countOf() method", "operator.countOf()", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-capitalize-repeated-characters-in-a-string/"},
{"title": "Python - Get list of files in directory sorted by size - GeeksforGeeks", "h1": ["Python – Get list of files in directory sorted by size"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Method 1: ", "Using ", "os.listdir()", " function", "Python3", "Method 2: U", "sing ", "glob()", " function", "Python3", "What kind of Experience do you want to share?"], "strong": ["The two different approaches to get the list of files in a directory are sorted by size is as follows:", " ", "Method 1: ", "os.listdir() method", "Syntax: ", "Parameters: ", "Return: ", " lambda x: os.stat(os.path.join(dir_name, x)).st_size", "Output:", "Method 2: U", "Output:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-get-list-of-files-in-directory-sorted-by-size/?ref=ml_lbp"},
{"title": "Python | Simple FLAMES game using Tkinter - GeeksforGeeks", "h1": ["Python | Simple FLAMES game using Tkinter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisites:", " ", "To create a Tkinter : ", "FLAMES", "Below is the implementation :", "Output :", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-simple-flames-game-using-tkinter/?ref=ml_lbp"},
{"title": "Python program to capitalize the first letter of every word in the file - GeeksforGeeks", "h1": ["Python program to capitalize the first letter of every word in the file"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input:", "Output:", "Input text:", "temp.txt", "Output:", "Output:", "Output:", "Output:", "Master C Programming with Data Structures ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-capitalize-the-first-letter-of-every-word-in-the-file/?ref=ml_lbp"},
{"title": "Python - Read CSV Columns Into List - GeeksforGeeks", "h1": ["Python – Read CSV Columns Into List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["File Used:", "Method 1: ", "Approach:", "Below is the implementation:", "Output:", "Method 2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-read-csv-columns-into-list/?ref=ml_lbp"},
{"title": "Python | numpy.isin() method - GeeksforGeeks", "h1": ["Python | numpy.isin() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["numpy.isin()", "Syntax :", "Return :", "Example #1 :", "Output :", "Example #2 :", "Output :", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-numpy-isin-method/"},
{"title": "Python string | hexdigits - GeeksforGeeks", "h1": ["Python string | hexdigits"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["string.hexdigits", "Syntax :", "Parameters :", "Returns :", "Note : ", "Code #1 :", "Output :", "Code #2 :", "Output:", "Applications :", "hexdigits ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-string-hexdigits/?ref=ml_lbp"},
{"title": "Python Program to Find and Print Address of Variable - GeeksforGeeks", "h1": ["Python Program to Find and Print Address of Variable"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Method 1: ", "Find and Print Address of Variable using ", "id()", "Python3", "Method 2: ", "Find and Print Address of Variable using addressof()", "Python3", "Method 3: ", "Find and Print Address of Variable using", " ", "hex()", "Python3", "What kind of Experience do you want to share?"], "strong": ["It can be done in these ways:", "Method 1: ", "Syntax: ", "Output:", "Method 2: ", "Syntax:", "Output:", "Method 3: ", " ", "hex()", "Syntax: ", "Example: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Master Java Programming - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-program-to-find-and-print-address-of-variable/"},
{"title": "Python Script to Restart Computer - GeeksforGeeks", "h1": ["Python Script to Restart Computer"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Note:", "Causion:", "Output: ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-script-to-restart-computer/?ref=ml_lbp"},
{"title": "Python program to print number of bits to store an integer and also the number in Binary format - GeeksforGeeks", "h1": ["Python program to print number of bits to store an integer and also the number in Binary format"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input: ", "Output: ", "Input:", "Output:", "Method 1: Using loops", "Approach", "Example :", "Output:", "Method 2:Using Recursion", "Approach:", "Example:", "Output:", "Method 3: Using in-built function", "bit_length()", "Syntax: ", "Parameter:", "Returns: ", "bin()", "Syntax : ", "Parameters :", "Return Value :", "Exceptions :", "Example:", "Output", "Output:", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-print-number-of-bits-to-store-an-integer-and-also-the-number-in-binary-format/?ref=ml_lbp"},
{"title": "Python Program To Delete Middle Of Linked List - GeeksforGeeks", "h1": ["Python Program To Delete Middle Of Linked List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["PRACTICE", "Simple solution:", "Output:", "Complexity Analysis:", "Time Complexity:", "Auxiliary Space:", "Efficient solution:", "Approach:", "Output:", "Complexity Analysis:", "Time Complexity:", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-delete-middle-of-linked-list/"},
{"title": "Python | Pandas DataFrame.isin() - GeeksforGeeks", "h1": ["Python | Pandas DataFrame.isin()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Pandas DataFrame.isin() Syntax ", "isin() Function in Pandas Examples", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Parameters:", "Return Type:", "Single Parameter filtering Using Pandas DataFrame.isin() ", "Output", "Multiple parameter Filtering Using Pandas DataFrame.isin() ", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-isin/"},
{"title": "Python | Pandas Series.isin() - GeeksforGeeks", "h1": ["Python | Pandas Series.isin()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" Series.isin()", "Syntax:", "Parameter : ", "values : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2 : ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-series-isin/"},
{"title": "Python | Flatten a 2d numpy array into 1d array - GeeksforGeeks", "h1": ["Python | Flatten a 2d numpy array into 1d array"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using np.flatten()", "Output:", "Time complexity: ", "Auxiliary space:", "Method #2: Using np.ravel()", "Output:", "Method #3: Using np.reshape()", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-flatten-a-2d-numpy-array-into-1d-array/?ref=ml_lbp"},
{"title": "Python string | strip() - GeeksforGeeks", "h1": ["Python string | strip()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python strip() Method Syntax", "Purpose of the Python Strip() Function", "String strip() in Python Example", "Python3", "Python3", "Python3", "Python3", "Python3", "Practical Application", "Python", "What kind of Experience do you want to share?"], "strong": ["strip()", "Syntax: ", "Parameter: ", "chars", "Return Value:", "Example", "Output", "Output", "Output", "Input", "Output", "Output ", " ", "Input", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-string-strip/?ref=ml_lbp"},
{"title": "Python Tkinter-exercises Archives - Page 6 of 7 - GeeksforGeeks", "h1": ["Python Tkinter-exercises"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/tag/python-tkinter-exercises/page/6/?type=popular"},
{"title": "Python getpass module - GeeksforGeeks", "h1": ["Python getpass module"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "getpass()", "Python3", "Python3", "Python3", "Python3", "getuser()", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Getpass module provides two function:", "Output:", "Let’s understand this module some example:", "Output:", "prompt", "Output:", "Output:", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-getpass-module/"},
{"title": "Python | Pandas Series.item() - GeeksforGeeks", "h1": ["Python | Pandas Series.item()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": [" Series.item()", "Note : ", "Syntax:", "Parameter : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2 : ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-series-item/?ref=next_article"},
{"title": "Python Program For Inserting Node In The Middle Of The Linked List - GeeksforGeeks", "h1": ["Python Program For Inserting Node In The Middle Of The Linked List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["n", "x", "n", "(n/2)", "(n+1)/2", "Examples:", "Input :", "Output :", "Input : ", "Output :", "PRACTICE", "Method 1(Using length of the linked list):", "len", "c", "len", "c", "len", "c", "c", "Output:", "Time Complexity:", "Space complexity", "Method 2(Using two pointers):", "slow", "fast", "Output:", "Time Complexity:", "Space complexity", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-for-inserting-node-in-the-middle-of-the-linked-list/?ref=ml_lbp"},
{"title": "Python - Import from sibling directory - GeeksforGeeks", "h1": ["Python – Import from sibling directory"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Directory Tree:", "path.append() ", "sys", "‘..’ ", "Code for A.py :", "Code for B.py :", "Output after execution of A.py :", "Note: ", "Directory Tree:", "Code for A.py :", "Code for __init__.py :", "Code for B.py :", "Output after execution of A.py :", "NOTE:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-import-from-sibling-directory/?ref=ml_lbp"},
{"title": "Python – Import module from different directory - GeeksforGeeks", "h1": ["Python – Import module from different directory"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Method 1: Import module from different directory using the sys module", "Python3", "Method 2: Using the PYTHONPATH", " ", "environment variable", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["module", "Note: ", ".py ", "Directory Structure:", "Module1:", "module1.py ", "module1", "Folder_2, ", "main.py", "Output:", "ModuleNotFoundError", "Method 1: Import module from different directory using the sys module", "sys.path", " ", "sys.path", "list type class ", "Output", "Method 2: Using the PYTHONPATH", "environment variable", "sys ", "Output:", "Suppose we have a directory structure like this:", " new.py", "Folder_2 ", "main.py", "Syntax:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-import-module-from-different-directory/?ref=ml_lbp"},
{"title": "median() function in Python statistics module - GeeksforGeeks", "h1": ["median() function in Python statistics module"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["median()", "Syntax :", "median( ", "[data-set]", " )", "Parameters :", "[data-set]", "Returns : ", "Exceptions :", "StatisticsError", "Code #1 :", "Output :", "Code #2 :", "Output :", "Code #3 :", "Output :", "Applications :", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-statistics-median/"},
{"title": "uniform() method in Python Random module - GeeksforGeeks", "h1": ["uniform() method in Python Random module"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["uniform()", "random", "uniform(int x, int y)", "Parameters :", "x", "y", "Returns :", "Code #1 :", "Application :", "Code #2 :", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-number-uniform-method/"},
{"title": "Python Program for Identity Matrix - GeeksforGeeks", "h1": ["Python Program for Identity Matrix"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Introduction to Identity Matrix :", "Identity Matrix", "Unit Matrix", " I ", "A property of the identity matrix is that it leaves a matrix unchanged if it is multiplied by an Identity Matrix.", "Examples:", "Program to print Identity Matrix : ", "Output: ", "Time complexity", "Space Complexity: ", "Program to check if a given square matrix is Identity Matrix : ", "Output:", "Time complexity", "Auxiliary Space: ", "Using Numpy:", "pip install numpy", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-program-for-identity-matrix/?ref=next_article"},
{"title": "Python | Numpy matrix.clip() - GeeksforGeeks", "h1": ["Python | Numpy matrix.clip()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Numpy matrix.clip()", "minimum", "maximum", "Syntax :", "Return :", "Example #1 :", "Example #2 :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-numpy-matrix-clip/?ref=ml_lbp"},
{"title": "Python string | strip() - GeeksforGeeks", "h1": ["Python string | strip()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python strip() Method Syntax", "Purpose of the Python Strip() Function", "String strip() in Python Example", "Python3", "Python3", "Python3", "Python3", "Python3", "Practical Application", "Python", "What kind of Experience do you want to share?"], "strong": ["strip()", "Syntax: ", "Parameter: ", "chars", "Return Value:", "Example", "Output", "Output", "Output", "Input", "Output", "Output ", " ", "Input", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-string-strip/?ref=lbp"},
{"title": "Python statistics | mean() function - GeeksforGeeks", "h1": ["Python statistics | mean() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["mean()", "arithmetic mean ", "Syntax ", "mean([data-set])", "Parameters :", "[data-set]", "Returns : ", "Exceptions", "TypeError", "Code #1 :", "Code #2 :", "Output :", "Code #3 :", "Output :", "Applications :", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-statistics-mean-function/"},
{"title": "Python getpass module - GeeksforGeeks", "h1": ["Python getpass module"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "getpass()", "Python3", "Python3", "Python3", "Python3", "getuser()", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Getpass module provides two function:", "Output:", "Let’s understand this module some example:", "Output:", "prompt", "Output:", "Output:", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-getpass-module/?ref=ml_lbp"},
{"title": "Python | Reverse Geocoding to get location on a map using geographic coordinates - GeeksforGeeks", "h1": ["Python | Reverse Geocoding to get location on a map using geographic coordinates"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Modules needed:", "reverse_geocoder:", "pprint:", "Installation:", "pip", "Examples:", "Input :", "Output :", "Input :", "Output :", "Output:", "References:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-reverse-geocoding-to-get-location-on-a-map-using-geographic-coordinates/?ref=ml_lbp"},
{"title": "Python program to check if lowercase letters exist in a string - GeeksforGeeks", "h1": ["Python program to check if lowercase letters exist in a string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "Python", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input:", "Output:", "Input:", "Output:", "Input:", "Output:", "Methods 1#: ", " ", "Output", "Methods 2#: ", " ", "Output", "Methods 3#: ", "Example:  ", "Output", "Method#4: Using re.search() ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #5: Without using any builtin methods", "Output", "Method #6 : Using replace() and len() methods", "Output", "Method 7: Using operator.countOf() method", "Output", "Time Complexity: O(N)", "Auxiliary Space : O(1)", "Method #8 : Using the any() and ord() functions", "Output", "Method #9 – Using string module’s ascii_lowercase method", "ascii_lowercase", "Step – 1:", "Step – 2:", "Step – 3: ", "Step 4: ", "ascii_lowercase ", "ascii_lowercase", "Step – 5:", "Example:", "Output", "Time Complexity – ", "Auxiliary Space – ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-program-to-check-if-lowercase-letters-exist-in-a-string/?ref=ml_lbp"},
{"title": "Python | Merging two list of dictionaries - GeeksforGeeks", "h1": ["Python | Merging two list of dictionaries"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["U", "Output:", " Using extend() only.", "Output:", "Merging two list of dictionaries Using a simple for loop and if-else statements. ", "Output", "Time complexity: ", "Auxiliary space: ", "Output", "merge()", "to_dict()", "Step – 1 :", "Step – 2 :", "Step – 3 :", "concat()", "Step – 4 :", "list()", "apply()", "school_id", "roll_id", "Step – 5 :", "to_dict()", "Step – 6 : ", "Below is the implementation –", "Output – ", "Time Complexity – ", "Auxiliary Space – ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-merging-two-list-of-dictionaries/"},
{"title": "Python | Pandas Series.str.strip(), lstrip() and rstrip() - GeeksforGeeks", "h1": ["Python | Pandas Series.str.strip(), lstrip() and rstrip()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas ", "Pandas ", ".str", "Syntax: ", "Return Type: ", "Output", "Example 1:", " str.lstrip()", "Output:", "Example 2: ", "Output:", "Example 3: ", "Output:", "Data Structures & Algorithms in JavaScript - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/python-pandas-series-str-strip-lstrip-and-rstrip/?ref=next_article"},
{"title": "Python | Remove unwanted spaces from string - GeeksforGeeks", "h1": ["Python | Remove unwanted spaces from string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Example 1:", "Input", "Output", "Explanation", "Example 2:", "Input", "Output", "Explanation", "Method #1: Using re.sub()", "Output : ", "Method #2: Using split() and join()", "Output : ", " Method #3 :", "Method 4: Using a loop to iterate over each character of the string", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-remove-unwanted-spaces-from-string/"},
{"title": "Python | Pandas Dataframe/Series.head() method - GeeksforGeeks", "h1": ["Python | Pandas Dataframe/Series.head() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "What kind of Experience do you want to share?"], "strong": ["Pandas", "head()", "Syntax: ", "n: ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Complete Test Series for Service-Based Companies ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-series-head-method/?ref=lbp"},
{"title": "Python | Check for spaces in string - GeeksforGeeks", "h1": ["Python | Check for spaces in string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using regex", "Output : ", "Method #2 : Using in operator", "Output : ", "Method #3: Using find() method", "Output", "Method #4: Using isspace() method", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #5: Using count() method:", "Output", "Method #6: Using operator.countOf() method:", "Output", "Method#7:Using Recursion", "Output", "Method #8: Using the split() method", "Output", "Method #9:Using regex.findall() method", "Output", "Method #10:Using the any() function", "Output", "Time complexity: O(n) iterates over the data structure", "Auxiliary Space: O(1) does not takes any space.", "Method #11:Using a while loop", "Iterating over the string test_str checking each character if it equals to ‘ ‘ then storing the result TRUE and break from the loop else returning FALSE.", "Output", "Time Complexity: O(N) ", "Auxiliary Space: O(1) ", "Method #12: Using ", "reduce()", ":", "Algorithm:", "Output", "Time Complexity:", "Space Complexity:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-check-for-spaces-in-string/"},
{"title": "Python | Numpy MaskedArray.__le__ - GeeksforGeeks", "h1": ["Python | Numpy MaskedArray.__le__"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["numpy.ma.MaskedArray class", "Syntax:", "Return:", "Example #1 :", "Example #2: ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-numpy-maskedarray-__le__/"},
{"title": "Pandas DataFrame mean() Method - GeeksforGeeks", "h1": ["Pandas DataFrame mean() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Pandas DataFrame mean() ", "Pandas DataFrame.mean() Examples", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas", " ", " dataframe.mean()", "Syntax:", "Parameters :", "axis : ", "skipna :", "level :", "numeric_only :", "Returns :", "Example 1:", "Output:", "Example 2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-mean/?ref=lbp"},
{"title": "Python | Numpy MaskedArray.__abs__ - GeeksforGeeks", "h1": ["Python | Numpy MaskedArray.__abs__"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["numpy.ma.MaskedArray class", "Syntax:", "Return:", "Example #1 :", "Example #2: ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-numpy-maskedarray-__abs__/?ref=next_article"},
{"title": "Python - __lt__ magic method - GeeksforGeeks", "h1": ["Python – __lt__  magic method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python __lt__ magic method Syntax", "Python3", "Python __lt__ magic method Example", "Python3", "Python3", "Conclusion:", "What kind of Experience do you want to share?"], "strong": ["Python  __lt__  magic method ", " ", "Syntax: __lt__(self, obj)", "self: ", "obj:", "Returns: ", "Note: ", "Output:", "Output:", "Explanation:", "Output:", "Conclusion:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-__lt__-magic-method/"},
{"title": "Python | Pandas Index.append() - GeeksforGeeks", "h1": ["Python | Pandas Index.append()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " ", "Index.append()", "Syntax:", "Parameters : ", "other : ", "Returns :", "Example 1: ", "Output : ", "Output :", "Example 2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-index-append/?ref=lbp"},
{"title": "Python | Pandas Series.str.cat() to concatenate string - GeeksforGeeks", "h1": ["Python | Pandas Series.str.cat() to concatenate string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas ", "str.cat()", ".str", "Syntax: ", "Parameters: ", "others: ", "sep", "na_rep: ", "Return type: ", "Example #1: ", "Output:", "Example #2: ", "Output:", "Data Structures & Algorithms in JavaScript - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/python-pandas-series-str-cat-to-concatenate-string/"},
{"title": "Python | Pandas Series.append() - GeeksforGeeks", "h1": ["Python | Pandas Series.append()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "What kind of Experience do you want to share?"], "strong": [" Series.append()", "Syntax:", "Parameter : ", "to_append : ", "ignore_index : ", "verify_integrity : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-series-append/?ref=lbp"},
{"title": "Python - Find the maximum number of triangles with given points on three lines - GeeksforGeeks", "h1": ["Python – Find the maximum number of triangles with given points on three lines"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Approach:", "Below is the Python code implementation of the approach.", "Output:", "Method#2: Using reduce():", " Algorithm:", "Output", "Time complexity:", "Space complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-find-the-maximum-number-of-triangles-with-given-points-on-three-lines/?ref=ml_lbp"},
{"title": "Plotly tutorial - GeeksforGeeks", "h1": ["Plotly tutorial"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Creating a plot", "Advanced Plot Customization", "Plotly Dash Basics", "Creating a plot", "Advanced Plot Customization", "Plotly Dash Basics", "How to install Plotly?", "Package Structure of Plotly", "Python3", "Getting Started", "Python3", "Creating Different Types of Charts", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Heatmaps", "Python3", "Error Bars", "Python3", "3D Line Plots", "Python3", "3D Scatter Plot Plotly", "Python3", "3D Surface Plots", "Python3", "Interacting with the Plots", "Python3", "Adding Buttons to the Plot", "Python3", "Creating Sliders and Selectors to the Plot", "Python3", "More Plots using Plotly", "What kind of Experience do you want to share?"], "strong": ["Plotly ", " Plotly ", "Plotly ", "Plotly ", "plotly.plotly", "plotly.graph_objects", "plotly.graph_objects.Figure ", "Note: ", "Example:", "Output:", "data, layout, and frames ", "layout.legend ", "plotly.tools ", "Example:", "Output:", "Line plot ", "px.line", "Example:", "Output:", "bar chart", "Example:", "Output:", "histogram", "Example:", "Output:", "scatter plot", "bubble plot", "Example 1: ", "Output:", "Example 2: ", "Output:", "pie chart", "Example:", "Output:", "Box Plot", "Example:", "Output:", "A Violin Plot", "Example:", "Output:", "Generalized Activity Normalization Time Table (GANTT) chart", "Example:", "Output:", " Contour plots", "Example:", "Output:", "Heatmap", "Example:", "Output:", "error bars", "Example:", "Output:", "3D Line Plots", "px.line_3d ", "Example:", "Output:", "3D Scatter Plot", "Example:", "Output:", "Surface plot", "Example:", "Output:", "drop-down menu", "restyle: ", "relayout:", "update:", "animate:", "Example:", "Output:", "actions custom Buttons", "restyle:", "relayout:", "update:", "animate:", "Example:", "Output:", "range slider", "Example:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-plotly-tutorial/?ref=shm"},
{"title": "Python Seaborn Tutorial - GeeksforGeeks", "h1": ["Python Seaborn Tutorial"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Styling Plots", "Multiple Plots", "Scatter Plot", "Line Plot", "Bar Plot", "Count Plot", "Box Plot", "Violin Plot", "Strip Plot", "Swarm Plot", "Factor Plot", "Histogram", "Pairplot", "KDE Plot", "Heatmap", "Catplot", "Introduction", "Styling Plots", "Multiple Plots", "Scatter Plot", "Line Plot", "Bar Plot", "Count Plot", "Box Plot", "Violin Plot", "Strip Plot", "Swarm Plot", "Factor Plot", "Histogram", "Pairplot", "KDE Plot", "Heatmap", "Catplot", "Getting Started", "Python3", "Using Seaborn with Matplotlib", "Python3", "Python3", "Customizing Seaborn Plots", "Python3", "Python3", "Python3", "Python3", "Python3", "Color Palette", "Python3", "Python3", "Python3", "Python3", "Multiple plots with Seaborn", "Python3", "Python3", "Python3", "Python3", "Python3", "Creating Different Types of Plots", "Relational Plots", "Python3", "Python3", "Python3", "Categorical Plots", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Distribution Plots", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Regression Plots", "Python3", "Python3", "Python3", "Python3", "More Gaphs in Seaborn", "More Topics on Seaborn", "What kind of Experience do you want to share?"], "strong": ["Seaborn", "Table Of Content", "Recent articles on Seaborn !!", "Note: ", "Example:", "Output:", "Example 1: ", "Output:", "Example 2:", "Output:", "set_style() ", "Syntax:", "Example: ", "Output:", "Syntax:", "Example:", "Output:", "figure()", "figsize", "Example:", "Output:", "Syntax:", "Example:", "Output:", "with", "Syntax:", "Example:", "Output:", "color_palette() ", "palplot() ", "Example:", "Output:", "Example:", "Output:", "Example:", "Output:", "set_palette() ", "Example:", "Output:", "Example 1: ", "Output:", "Example 2: ", " ", "Output:", "Example 3: ", "Output:", "Method 1:", "Syntax:", "Example:", "Output:", "Method 2:", "Syntax:", "Example:", "Output:", "Relational plots", "There are different types of Relational Plots. We will discuss each of them in detail –", "relplot()", "Syntax:", "Example:", "Output:", "scatter plot", "scatterplot()", "Syntax:", "Example:", "Output:", "lineplot()", "Syntax:", "Example:", "Output:", "Categorical Plots", "categorical", " ", "barplot", "barplot()", "Syntax:", "Example:", "Output:", "countplot", "countplot()", "Syntax:", "Example:", "Output:", "boxplot", "boxplot()", "Syntax:", "Example:", "Output:", "violinplot()", "Syntax:", "Example:", "Output:", "stripplot()", "Syntax:", "Example:", "Output:", "Swarmplot", "swarmplot()", "Syntax:", "Example:", "Output:", "Factorplot", "factorplot()", "Syntax:", "Example:", "Distribution Plots", "histplot()", "Syntax:", "Example:", "Output:", "Distplot", "distplot()", "Syntax:", "Example:", "Output:", "jointplot()", "Syntax:", "Example:", "Output:", "Pairplot", "pairplot()", "Syntax:", "Example:", "Output:", "Rugplot", "rugplot()", "Syntax:", "Example:", "Output:", "KDE Plot", "Kernel Density Estimate", "Syntax:", "Example:", "Output:", "regression plots", "lmplot()", "Syntax:", "Example:", "Output:", "Syntax:", "Example:", "Output:", "Note: ", "matrix plot", "Heatmap", "heatmap()", "Syntax:", "Example:", "Output:", "Syntax:", "Example:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-seaborn-tutorial/?ref=shm"},
{"title": "Python | Convert String to Binary - GeeksforGeeks", "h1": ["Python | Convert String to Binary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using join() + ord() + format()", "Output : ", "Time Complexity: O(N) where N is the lenght of the input string.", "Auxiliary Space: O(N)", "Method #2 : Using join() + bytearray() + format()", "Output : ", "Method #3 : Using join() + bin() + zfill() ", "Output", "Method 4 : Using the binascii module.", "Step-by-step approach:", "Output", "Time complexity: ", "Auxiliary space: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-convert-string-to-binary/?ref=next_article"},
{"title": "Python Program that Displays the Letters that are in the First String but not in the Second - GeeksforGeeks", "h1": ["Python Program that Displays the Letters that are in the First String but not in the Second"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input: ", "Output: ", "Input: ", "Output: ", "Approach: ", "A", "B ", "difference", "Example 1:", "Output", "Time Complexity:", "Auxiliary Space: ", "Example 2:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Note: ", "Example 3 :", "Output", "Example 4: Using operator.countOf() method", "Output", "Time Complexity: O(N)", "Auxiliary Space : O(N)", "Example 5: Using List comprehension", "Output", "Time Complexity: O(N)", "Auxiliary Space : O(N)", "Example 6: Using filter() and lambda", "Output", "Time Complexity: O(N)", "Auxiliary Space : O(N)", "Example 7: Using Recursive method.", "Output", "Time complexity:", "Auxiliary space:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-that-displays-the-letters-that-are-in-the-first-string-but-not-in-the-second/"},
{"title": "Python | Column wise sum of nested list - GeeksforGeeks", "h1": ["Python | Column wise sum of nested list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Method #1:", "Output", "Time Complexity:", "Auxiliary Space: ", "Method #2: ", "Output:", "Method #3: ", "Output:", "Method #4: ", "Output:", "Method #5: Using dictionary", "Output", "Time complexity: ", "Auxiliary Space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-column-wise-sum-of-nested-list/"},
{"title": "Python | Pandas Series.append() - GeeksforGeeks", "h1": ["Python | Pandas Series.append()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "What kind of Experience do you want to share?"], "strong": [" Series.append()", "Syntax:", "Parameter : ", "to_append : ", "ignore_index : ", "verify_integrity : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-series-append/?ref=previous_article"},
{"title": "Python - Pandas dataframe.append() - GeeksforGeeks", "h1": ["Python – Pandas dataframe.append()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Pandas dataframe.append() Syntax", "dataframe.append() in Pandas Examples", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas", " ", " dataframe.append()", "Syntax:", "Parameters:", "other: ", "ignore_index: ", "verify_integrity: ", "sort", ":", "Return Type: ", "NOTE: ", "Create and Append a Dataframe into another Dataframe", "Output", "Output", "Pandas Append Two DataFrames Ignore Index", "Output", "Output", "Output", "Note: pandas.DataFrame.append is deprecated since version 1.4.0 . Rather use  ", "concat()", " .", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-append/?ref=next_article"},
{"title": "Python | Numpy MaskedArray.__gt__ - GeeksforGeeks", "h1": ["Python | Numpy MaskedArray.__gt__"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["numpy.ma.MaskedArray class", "Syntax:", "Return:", "Example #1 :", "Output:", "Example #2: ", "Output:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-numpy-maskedarray-__gt__/?ref=next_article"},
{"title": "Python Program for Identity Matrix - GeeksforGeeks", "h1": ["Python Program for Identity Matrix"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Introduction to Identity Matrix :", "Identity Matrix", "Unit Matrix", " I ", "A property of the identity matrix is that it leaves a matrix unchanged if it is multiplied by an Identity Matrix.", "Examples:", "Program to print Identity Matrix : ", "Output: ", "Time complexity", "Space Complexity: ", "Program to check if a given square matrix is Identity Matrix : ", "Output:", "Time complexity", "Auxiliary Space: ", "Using Numpy:", "pip install numpy", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-program-for-identity-matrix/?ref=ml_lbp"},
{"title": "Python Program to check if a matrix is symmetric - GeeksforGeeks", "h1": ["Python Program to check if a matrix is symmetric"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "Python", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["symmetric matrix", "The symmetric matrix", "Input ", "Output", "Input ", "Output ", "Method 1:", "Simple solution", "Output", "Time Complexity", "Auxiliary Space : ", "Method 2:", "Efficient solution", "Output", "Time Complexity :", "Auxiliary Space ", "Method 3: Using List Comprehension", "Output", "Time Complexity", "Auxiliary Space", "Method 4:Using numpy.array() and numpy.transpose() :", "Algorithm:", "Time complexity:", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "DSA for Interview Preparation "], "link": "https://www.geeksforgeeks.org/python-program-for-program-to-check-if-a-matrix-is-symmetric/?ref=ml_lbp"},
{"title": "Python | Ways to determine common prefix in set of strings - GeeksforGeeks", "h1": ["Python | Ways to determine common prefix in set of strings"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using Naive Approach", "Output:", "Method #2: Using itertools.takewhile and zip", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Method #3: Using the Python built-in function os.path.commonprefix()", "Output", "Time Complexity:", "Auxiliary Space", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-ways-to-determine-common-prefix-in-set-of-strings/"},
{"title": "Python Seaborn - Catplot - GeeksforGeeks", "h1": ["Python Seaborn – Catplot"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Styling Plots", "Multiple Plots", "Scatter Plot", "Line Plot", "Bar Plot", "Count Plot", "Box Plot", "Violin Plot", "Strip Plot", "Swarm Plot", "Factor Plot", "Histogram", "Pairplot", "KDE Plot", "Heatmap", "Catplot", "Introduction", "Styling Plots", "Multiple Plots", "Scatter Plot", "Line Plot", "Bar Plot", "Count Plot", "Box Plot", "Violin Plot", "Strip Plot", "Swarm Plot", "Factor Plot", "Histogram", "Pairplot", "KDE Plot", "Heatmap", "Catplot", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax: ", "Parameters", "x, y, hue: ", "data: ", "row, col: ", "kind: ", "color:", "palette: ", "kwargs: ", "Examples:", "Output:", "Output:", "Output:", "Output:", "Output:", "Output:", "Output:", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-seaborn-catplot/?ref=lbp"},
{"title": "Python Seaborn - Strip plot illustration using Catplot - GeeksforGeeks", "h1": ["Python Seaborn – Strip plot illustration using Catplot"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Styling Plots", "Multiple Plots", "Scatter Plot", "Line Plot", "Bar Plot", "Count Plot", "Box Plot", "Violin Plot", "Strip Plot", "Swarm Plot", "Factor Plot", "Histogram", "Pairplot", "KDE Plot", "Heatmap", "Catplot", "Introduction", "Styling Plots", "Multiple Plots", "Scatter Plot", "Line Plot", "Bar Plot", "Count Plot", "Box Plot", "Violin Plot", "Strip Plot", "Swarm Plot", "Factor Plot", "Histogram", "Pairplot", "KDE Plot", "Heatmap", "Catplot", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Seaborn", " ", " Catplot ", "Stripplot ", ".", "Step-by-step Approach:", "Output:", "Output:", "Below is the complete program based on the above approach:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-seaborn-strip-plot-illustration-using-catplot/?ref=lbp"},
{"title": "Python | Pandas Series.astype() to convert Data type of series - GeeksforGeeks", "h1": ["Python | Pandas Series.astype() to convert Data type of series"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas", " ", "astype()", "astype()", "Data Structures & Algorithms in JavaScript - Self Paced ", "Complete Test Series for Service-Based Companies ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-series-astype-to-convert-data-type-of-series/?ref=ml_lbp"},
{"title": "Python pandas-dataFrame-methods Archives - GeeksforGeeks", "h1": ["Python pandas-dataFrame-methods"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/tag/python-pandas-dataframe-methods/"},
{"title": "Python IMDbPY – Info set to keys of Movie object - GeeksforGeeks", "h1": ["Python IMDbPY – Info set to keys of Movie object"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Syntax :", "Action performed :", "Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-imdbpy-info-set-to-keys-of-movie-object/"},
{"title": "Python | Pandas Series.str.lower(), upper() and title() - GeeksforGeeks", "h1": ["Python | Pandas Series.str.lower(), upper() and title()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas ", ".str ", "Syntax: ", "Parameters: ", "Return Type: ", "Output", ".lower()", "Output:", ".upper()", "Output:", ".title()", "Output:", "Coding for Everyone ", "DSA to Development: A Complete Guide ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-pandas-series-str-lower-upper-and-title/"},
{"title": "Python | Pandas series.str.get() - GeeksforGeeks", "h1": ["Python | Pandas series.str.get()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", "str.get()", " at the passed position.", ".str", " ", "str.get()", "str.split()", "Data Structures & Algorithms in JavaScript - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/python-pandas-series-str-get/"},
{"title": "Python | Pandas Series.to_string() - GeeksforGeeks", "h1": ["Python | Pandas Series.to_string()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": [" Series.to_string()", "Syntax:", "Parameter : ", "buf : ", "na_rep : ", "float_format : ", "header : ", "index : ", "length : ", "dtype : ", "name : ", "max_rows : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-series-to_string/"},
{"title": "Python | Pandas dataframe.replace() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.replace()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Pandas dataframe.replace() Method Syntax", "Python3", "Replace Values in Pandas Dataframe Examples", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["dataframe.replace()", "Syntax:", "Parameters:", "to_replace : ", "value :", "inplace :", "limit : ", "regex :", "method : ", "Returns: ", "Simple Example of Pandas dataframe.replace()", "Output:", "Output:", "Output:", "Example 2: Replacing Two Values with a Single Value", "Output:", "Example 3: Replacing Nan With a Random Integer Value", "Output", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-replace/"},
{"title": "Python | Pandas DataFrame.set_index() - GeeksforGeeks", "h1": ["Python | Pandas DataFrame.set_index()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Pandas DataFrame.set_index() Syntax ", "What is Pandas DataFrame.set_index() ?", "Pandas DataFrame.set_index() Examples ", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax:  ", "Parameters:", "keys:", "drop:", "append:", "inplace:", "verify_integrity:", "Float column ", "three columns", "MultiIndex", "Output", " Before operation –", "After operation – ", "Output:", "Float column ", "Output :", "Agg_Marks", "three columns", "MultiIndex", "Output :", "Name", "City", "ID", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-set_index/"},
{"title": "Python | Pandas dataframe.sum() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.sum()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.sum()", "Syntax: ", "Parameters : ", "axis : ", "skipna : ", "level : ", "numeric_only : ", "min_count : ", "Returns :", "Example #1: ", "Output : ", "Example #2: ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-sum/"},
{"title": "Python | Pandas Series.str.isdigit() - GeeksforGeeks", "h1": ["Python | Pandas Series.str.isdigit()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", "str.isdigit()", ".isdigit()", "Data Structures & Algorithms in JavaScript - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/python-pandas-series-str-isdigit/"},
{"title": "Python | Pandas Timestamp.timestamp - GeeksforGeeks", "h1": ["Python | Pandas Timestamp.timestamp"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Pandas Timestamp.timestamp Syntax", "Timestamp.timestamp in Pandas Examples", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " Timestamp.timestamp()", "Syntax : ", "Parameters : ", "Return : ", "Output:", "Output:", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-timestamp-timestamp/"},
{"title": "Python | Pandas Timestamp.timestamp - GeeksforGeeks", "h1": ["Python | Pandas Timestamp.timestamp"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Pandas Timestamp.timestamp Syntax", "Timestamp.timestamp in Pandas Examples", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " Timestamp.timestamp()", "Syntax : ", "Parameters : ", "Return : ", "Output:", "Output:", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-timestamp-timestamp/?ref=next_article"},
{"title": "Python | Pandas Timestamp.date - GeeksforGeeks", "h1": ["Python | Pandas Timestamp.date"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " Timestamp.date()", "Syntax :", "Parameters : ", "Return : ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-timestamp-date/?ref=ml_lbp"},
{"title": "Python | Pandas Series.str.isalpha() - GeeksforGeeks", "h1": ["Python | Pandas Series.str.isalpha()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", "str.isalpha()", "Data Structures & Algorithms in JavaScript - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "GATE Data Science and Artificial Intelligence 2025 "], "link": "https://www.geeksforgeeks.org/python-pandas-series-str-isalpha/?ref=ml_lbp"},
{"title": "Python | Pandas Series.str.ljust() and rjust() - GeeksforGeeks", "h1": ["Python | Pandas Series.str.ljust() and rjust()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", ".ljust()", ".rjust() ", ".str", "Data Structures & Algorithms in JavaScript - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/python-pandas-series-str-ljust-and-rjust/?ref=ml_lbp"},
{"title": "Python String | ljust(), rjust(), center() - GeeksforGeeks", "h1": ["Python String | ljust(), rjust(), center()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["ljust", "rjust", "center", "center()", "center aligns", "Syntax : ", "Parameters : ", "len :", "fillchr (optional):", "Return Value :  ", "ljust()", "left aligns", "Syntax : ", "Parameters : ", "len :", "fillchr (optional):", "Return Value :  ", "rjust()", "right aligns", "Syntax : ", "Parameters : ", "len :", "fillchr (optional) :", "Return Value :  ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-string-ljust-rjust-center/"},
{"title": "Python | Pandas DatetimeIndex.hour - GeeksforGeeks", "h1": ["Python | Pandas DatetimeIndex.hour"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " DatetimeIndex.hour", "Syntax:", "Return: ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-datetimeindex-hour/?ref=ml_lbp"},
{"title": "Python String rjust() Method - GeeksforGeeks", "h1": ["Python String rjust() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python String rjust() Method Syntax", "Python String rjust() Method Example", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python String rjust() method", "Syntax: ", "Parameters:", "length", "fillchar", "Return: ", "Output:", "*", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-string-rjust-method/"},
{"title": "Python | Pandas DatetimeIndex.hour - GeeksforGeeks", "h1": ["Python | Pandas DatetimeIndex.hour"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " DatetimeIndex.hour", "Syntax:", "Return: ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-datetimeindex-hour/?ref=previous_article"},
{"title": "Python | Pandas PeriodIndex.days_in_month - GeeksforGeeks", "h1": ["Python | Pandas PeriodIndex.days_in_month"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " PeriodIndex.days_in_month", "Syntax :", "Parameters : ", "Return : ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-periodindex-days_in_month/?ref=ml_lbp"},
{"title": "Python IMDbPY – Searching movies matching with keyword - GeeksforGeeks", "h1": ["Python IMDbPY – Searching movies matching with keyword"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax :", "Argument :", "Return :", "Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-imdbpy-searching-movies-matching-with-keyword/"},
{"title": "Python | Pandas DatetimeIndex.is_leap_year - GeeksforGeeks", "h1": ["Python | Pandas DatetimeIndex.is_leap_year"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " DatetimeIndex.is_leap_year", "Syntax:", "Returns: ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-datetimeindex-is_leap_year/?ref=ml_lbp"},
{"title": "Python | Grayscaling of Images using OpenCV - GeeksforGeeks", "h1": ["Python | Grayscaling of Images using OpenCV"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Grayscaling", "Dimension reduction:", "Reduces model complexity:", "For other algorithms to work:", "Input image:", "Output Image: ", "Output Image:", "Output Image:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-grayscaling-of-images-using-opencv/?ref=lbp"},
{"title": "Python - Process images of a video using OpenCV - GeeksforGeeks", "h1": ["Python – Process images of a video using OpenCV"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Adaptive Threshold –", "Python3", "Smoothing –", "Python3", "Edge Detection –", "Python3", "Bitwise Operations –", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output:", "Output:", "Output:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-process-images-of-a-video-using-opencv/?ref=lbp"},
{"title": "Python - Writing to video with OpenCV - GeeksforGeeks", "h1": ["Python – Writing to video with OpenCV"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Approach", "Python", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Syntax:", "Syntax:", "Syntax:", "Example: ", "Video Used:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-writing-to-video-with-opencv/?ref=lbp"},
{"title": "Python OpenCV | cv2.imshow() method - GeeksforGeeks", "h1": ["Python OpenCV | cv2.imshow() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["OpenCV-Python", "Syntax:", "Parameters:", "window_name:", "image:", "Return Value:", "Image used for all the below examples:", "Example #1:", "Output:", "Example #2:", "Output:", "Note: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-opencv-cv2-imshow-method/"},
{"title": "Python | Pandas PeriodIndex.days_in_month - GeeksforGeeks", "h1": ["Python | Pandas PeriodIndex.days_in_month"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " PeriodIndex.days_in_month", "Syntax :", "Parameters : ", "Return : ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-periodindex-days_in_month/"},
{"title": "Python | Denoising of colored images using opencv - GeeksforGeeks", "h1": ["Python | Denoising of colored images using opencv"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "What kind of Experience do you want to share?"], "strong": ["Denoising", "Syntax: ", "Parameters: ", "P1 –", "P2 – ", "P3 – ", "P4 – ", "P5 –", "P6 – ", "Below is the implementation: ", "Output:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-denoising-of-colored-images-using-opencv/"},
{"title": "Python OpenCV | cv2.imread() method - GeeksforGeeks", "h1": ["Python OpenCV | cv2.imread() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Examples of OpenCV cv2.imread() Method ", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["OpenCV-Python", "Example:", "Output:", "Syntax:", "cv2.IMREAD_COLOR – ", "1", "cv2.IMREAD_GRAYSCALE – ", "0", "cv2.IMREAD_UNCHANGED – ", "-1", "Output:", "Output:", "Output:", "image", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-opencv-cv2-imread-method/"},
{"title": "Python OpenCV: Capture Video from Camera - GeeksforGeeks", "h1": ["Python OpenCV: Capture Video from Camera"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "What kind of Experience do you want to share?"], "strong": ["Steps to capture a video:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-opencv-capture-video-from-camera/"},
{"title": "Python: Update Nested Dictionary - GeeksforGeeks", "h1": ["Python: Update Nested Dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Refer to the below article to get the idea about dictionaries:", "Nested Dictionary:", "employees", "emp1, emp2", "d={'a':1, 'b':2, 'c':3}", "‘b’", "7", "d['b']=7", "name        age      Designation", "emp1 ", "emp2 ", "‘salary’", "An alternative approach", "package ", "flatten-dict", "flatten()", " method:", "dict ", "reducer", "unflatten()", " method:", "dict ", "splitter", "inverse", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-update-nested-dictionary/"},
{"title": "Python | Pandas PeriodIndex.daysinmonth - GeeksforGeeks", "h1": ["Python | Pandas PeriodIndex.daysinmonth"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " PeriodIndex.daysinmonth", "Syntax :", "Parameters : ", "Return : ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-periodindex-daysinmonth/"},
{"title": "Python | Pandas Timestamp.dayofweek - GeeksforGeeks", "h1": ["Python | Pandas Timestamp.dayofweek"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " Timestamp.dayofweek", "Syntax :", "Parameters : ", "Return : ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-timestamp-dayofweek/?ref=next_article"},
{"title": "Python | Pandas DataFrame.set_index() - GeeksforGeeks", "h1": ["Python | Pandas DataFrame.set_index()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Pandas DataFrame.set_index() Syntax ", "What is Pandas DataFrame.set_index() ?", "Pandas DataFrame.set_index() Examples ", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax:  ", "Parameters:", "keys:", "drop:", "append:", "inplace:", "verify_integrity:", "Float column ", "three columns", "MultiIndex", "Output", " Before operation –", "After operation – ", "Output:", "Float column ", "Output :", "Agg_Marks", "three columns", "MultiIndex", "Output :", "Name", "City", "ID", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-set_index/?ref=lbp"},
{"title": "Python | pandas.to_numeric method - GeeksforGeeks", "h1": ["Python | pandas.to_numeric method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["pandas.to_numeric()", "Syntax:", "Parameters:", "arg :", "errors :", "-> ", "-> ", "-> ", "-> ", "-> ", "-> ", "Returns: ", "Code #1: ", "Output:", "Output:", "Code #2: ", "Output:", "Code #3: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-to_numeric-method/?ref=lbp"},
{"title": "Python Dictionary get() Method - GeeksforGeeks", "h1": ["Python Dictionary get() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Dictionary get() Method Syntax:", "Python Dictionary get() Method Example:", "Python3", "Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python Dictionary get() Method", "Syntax : ", "Parameters: ", "key:", "Value: ", "Returns:", "Output:", "Output: ", "Output:", "Time complexity:", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-dictionary-get-method/?ref=lbp"},
{"title": "Python Nested Dictionary - GeeksforGeeks", "h1": ["Python Nested Dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What is Python in Nested Dictionary?", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["What is Python in Nested Dictionary?", "Example", "Illustration using Image", "Output:", "Output:", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-nested-dictionary/?ref=ml_lbp"},
{"title": "Python OpenCV - cv2.calcHist method - GeeksforGeeks", "h1": ["Python OpenCV – cv2.calcHist method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["OpenCV", "cv2.calcHist()", "cv2.imread()", "cv2.calcHist() ", "Syntax:", "Parameters:", "images:", "channels:", "mask:", "histSize:", "ranges: ", "hist:", "accumulate:", "Return:", "cv2.calcHist()", "cv2.calcHist()", "Output:", "mountain.jpg", "cv2.calcHist()", "Output:", "Output:", "for loop", "Output:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-opencv-cv2-calchist-method/?ref=lbp"},
{"title": "Python Dictionary setdefault() Method - GeeksforGeeks", "h1": ["Python Dictionary setdefault() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Dictionary setdefault() Method Syntax:", "Python Dictionary setdefault() Method Example:", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python Dictionary setdefault()", "Syntax:", "Parameters:", "key –", "default_value (optional) –", "Returns:", "Output:", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-dictionary-setdefault-method/?ref=lbp"},
{"title": "Python dictionary (Avoiding Mistakes) - GeeksforGeeks", "h1": ["Python dictionary (Avoiding Mistakes)"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["What is dict in python ? ", "Example ", "Output : ", "where is used ? ", "Example to understand use of dict ", "Output : ", "Common mistakes while using dicts and overcomes", "1 ) ", "Output : ", "Runtime Error ", "2 ) ", "Output : ", "When not to use dicts ? ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-dictionary-avoiding-mistakes/?ref=ml_lbp"},
{"title": "Python OpenCV - Canny() Function - GeeksforGeeks", "h1": ["Python OpenCV – Canny() Function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Canny Edge detection is an Algorithm consisting of 4 major steps:", "Python3", "Canny() function", " with Aperture_size", "Python3", "Canny() function", " with L2Gradient", "Python3", "Canny() function", " with both Aperture size and L2gradient", "Python3", "What kind of Experience do you want to share?"], "strong": ["Canny Edge", "Syntax: ", "Where:", "Input Image", "Basic example of ", "Output", " with Aperture_size", "Output: ", " with L2Gradient", " Output: ", " with both Aperture size and L2gradient", "Output: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-opencv-canny-function/?ref=lbp"},
{"title": "Python | Pandas Timestamp.daysinmonth - GeeksforGeeks", "h1": ["Python | Pandas Timestamp.daysinmonth"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " Timestamp.daysinmonth", "Syntax :", "Parameters : ", "Return : ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-timestamp-daysinmonth/"},
{"title": "Python Nested Dictionary - GeeksforGeeks", "h1": ["Python Nested Dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What is Python in Nested Dictionary?", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["What is Python in Nested Dictionary?", "Example", "Illustration using Image", "Output:", "Output:", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-nested-dictionary/"},
{"title": "Python - Process images of a video using OpenCV - GeeksforGeeks", "h1": ["Python – Process images of a video using OpenCV"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Adaptive Threshold –", "Python3", "Smoothing –", "Python3", "Edge Detection –", "Python3", "Bitwise Operations –", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output:", "Output:", "Output:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-process-images-of-a-video-using-opencv/?ref=next_article"},
{"title": "Python | Pandas Period.daysinmonth - GeeksforGeeks", "h1": ["Python | Pandas Period.daysinmonth"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " Period.daysinmonth", "Syntax :", "Parameters : ", "Return : ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-period-daysinmonth/"},
{"title": "Python | Tokenize text using TextBlob - GeeksforGeeks", "h1": ["Python | Tokenize text using TextBlob"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["TextBlob ", "Corpus", "Lexicon", "Token", "So basically tokenizing involves splitting sentences and words from the body of the text.", " Output :", "GATE Computer Science & Information Technology 2025 ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-tokenize-text-using-textblob/?ref=next_article"},
{"title": "Python | Pandas.to_datetime() - GeeksforGeeks", "h1": ["Python | Pandas.to_datetime()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Pandas.to_datetime() Syntax", "Pandas.to_datetime() in Pandas Example", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Parameters:", "arg: ", "dayfirst: ", "yearfirst: ", "utc: ", "format: ", "Return type: ", "Output:", "Output:", "For the link to the CSV file used, ", "click here", ".", "Example 1: ", "using Pandas", "Output:", "Example 2: ", "Today’s date", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-to_datetime/?ref=previous_article"},
{"title": "Python program to print the dictionary in table format - GeeksforGeeks", "h1": ["Python program to print the dictionary in table format"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Method 1:", "Output", "Method 2:", "Output", "Method 3:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-program-to-print-the-dictionary-in-table-format/?ref=previous_article"},
{"title": "Python OpenCV | cv2.erode() method - GeeksforGeeks", "h1": ["Python OpenCV | cv2.erode() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "What kind of Experience do you want to share?"], "strong": ["OpenCV-Python", "Syntax:", "Parameters:", "src:", "kernel:", "dst:", "anchor:", "borderType:", "cv2.BORDER_CONSTANT", "cv2.BORDER_REFLECT", "iterations:", "borderValue:", "Return Value:", "Image used for all the below examples:", "Example #1:", "Output:", "Example #2:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-opencv-cv2-erode-method/?ref=previous_article"},
{"title": "Python | Add keys to nested dictionary - GeeksforGeeks", "h1": ["Python | Add keys to nested dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using for loop", "Output", "Time complexity:", "Auxiliary space: ", "Method #2: Using dictionary brackets", "Output : ", "Method #3: Using update()", "Output : ", "Method #4: Using setdefault() ", "Output", "Method #5: Using Recursion", "Base Case: ", "Else :", "Output", "Time Complexity: ", " ", "Auxiliary Space: ", " ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-add-keys-to-nested-dictionary/"},
{"title": "Python dictionary values() - GeeksforGeeks", "h1": ["Python dictionary values()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Dictionary values() Method Syntax", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["values()", "Syntax: ", "Parameters:", "Returns: ", "reversed", "Get all values from the dictionary", "Output:", "Get a sum of all values from the dictionary", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-dictionary-values/?ref=ml_lbp"},
{"title": "Python | Remove unordered duplicate elements from a list - GeeksforGeeks", "h1": ["Python | Remove unordered duplicate elements from a list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples: ", "Input :", "Output :", "Input: ", "Output: ", "Method #1 :", "Output:", "Method #2 :", "Output:", "Method #3:Using Counter() method", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-remove-unordered-duplicate-elements-from-a-list/?ref=ml_lbp"},
{"title": "Python | Delete rows/columns from DataFrame using Pandas.drop() - GeeksforGeeks", "h1": ["Python | Delete rows/columns from DataFrame using Pandas.drop()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Pandas DataFrame drop() Method Syntax", "Python Drop Function in Pandas", "Deleting Rows and Columns from Pandas DataFrame", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas", " ", "Syntax: ", "Parameters: ", "labels: ", "axis: ", "index or columns: ", "level: ", "inplace: ", "errors: ", "Return type:", "dataframe.drop()", "Dropping Rows in Pandas by Index Label", ".drop()", "Output", "Data Frame before Dropping values ", "Name              Team  Number Position   Age Height  Weight            College     Salary ", "drop ", "Output: Data Frame after Dropping values", "Dropping Columns in Pandas with Column Name", "axis ", "Output", "Data Frame before Dropping Columns", "drop ", "Output: Data Frame after Dropping Columns", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-delete-rows-columns-from-dataframe-using-pandas-drop/?ref=previous_article"},
{"title": "Python - Replace words from Dictionary - GeeksforGeeks", "h1": ["Python – Replace words from Dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using split() + get() + join()", "Output", "Time Complexity: O(N),", "Auxiliary Space: O(N)", "Method #2 : Using list comprehension + join()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3: Using a for loop and a temporary list", "Output", "Time complexity: ", "Auxiliary space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-replace-words-from-dictionary/?ref=ml_lbp"},
{"title": "Python RegEx - GeeksforGeeks", "h1": ["Python RegEx"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Python3", "MetaCharacters", "Why RegEx?", "Basic RegEx", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "More RegEx", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Compiled RegEx", "Python3", "Summary", "What kind of Experience do you want to share?"], "strong": ["re module", "Output", "Data Mining", "Data Validation", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-regex/"},
{"title": "Python | Pandas Dataframe.sort_values() | Set-1 - GeeksforGeeks", "h1": ["Python | Pandas Dataframe.sort_values() | Set-1"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Python Pandas DataFrame.sort_values() Syntax", "Python Pandas DataFrame sort_values() Examples", "Python", "Python", "Python", "What kind of Experience do you want to share?"], "strong": ["Pandas", "Dataframe.sort_values()", "Syntax", "Note", "Parameters:", "by:", "axis: ", "ascending:", "inplace: ", "kind: ", "na_position: ", "Return Type:", "Example 1: ", "Before Sorting", "Output:", "After Sorting", "Output:", "Example 2: ", "Output:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-sort_values-set-1/"},
{"title": "Python - String concatenation in Heterogeneous list - GeeksforGeeks", "h1": ["Python – String concatenation in Heterogeneous list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loop + conditions", "Output", "Method #2 : Using join() + isinstance()", "Output", "Method#3: Using reduce + type ", "reduce", "type", "Output", "Method #4: Using list comprehension", "test_list", "test_list", "str", " join() ", "res", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-string-concatenation-in-heterogeneous-list/"},
{"title": "Python | Pandas DataFrame.truncate - GeeksforGeeks", "h1": ["Python | Pandas DataFrame.truncate"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "What kind of Experience do you want to share?"], "strong": [" DataFrame.truncate()", "Syntax:", "Parameter : ", "before : ", "after : ", "axis : ", "copy : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-truncate/"},
{"title": "Python | Ways to Copy Dictionary - GeeksforGeeks", "h1": ["Python | Ways to Copy Dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Dictionary", "Method#1: Using copy()", "Output", "Method #2: Using dict()", "Output", "Method#3 : Using Dictionary comprehension", "Output", "Method #4: Using copy module", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-ways-to-copy-dictionary/?ref=ml_lbp"},
{"title": "Python - Substring concatenation by Separator - GeeksforGeeks", "h1": ["Python – Substring concatenation by Separator"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loop", "Output : ", "Method #2 : Using join() + split() + list comprehension", "Output : ", "Method #5: Using regular expressions", "re", "test_list", "separator", "joined_str", "re.split()", "K.", "Output", "Time complexity: ", "Auxiliary space: ", "Method #6: Using itertools.groupby()", " ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-substring-concatenation-by-separator/"},
{"title": "Python | Convert image to text and then to speech - GeeksforGeeks", "h1": ["Python | Convert image to text and then to speech"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Examples:        \r\n\r\n", " ", "Input : ", "Output: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-convert-image-to-text-and-then-to-speech/"},
{"title": "Python | Words extraction from set of characters using dictionary - GeeksforGeeks", "h1": ["Python | Words extraction from set of characters using dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Approach:", "check() : ", "permutations(str_arr, str_len) : ", "Below is the Python code implementation of the above approach.", "Output : ", "Time complexity ", "Space complexity : ", "Data Science Training Program ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-words-extraction-from-set-of-characters-using-dictionary/"},
{"title": "Python - Convert 2D list to 3D at K slicing - GeeksforGeeks", "h1": ["Python – Convert 2D list to 3D at K slicing"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Input", "Output", "Method #1: Using loop", "Output : ", "Time complexity: ", "Auxiliary Space: ", "Method #2 : Using zip() + list comprehension", "Output : ", "Time complexity: ", "Auxiliary space:", "Method #3: Using itertools.islice()", "Output", "Time complexity:", "Auxiliary space:", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-convert-2d-list-to-3d-at-k-slicing/"},
{"title": "Python | Summation of integers in heterogeneous list - GeeksforGeeks", "h1": ["Python | Summation of integers in heterogeneous list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using Type casting + Exception Handling", "Output : ", "Method #2 : Using sum() + isinstance()", "Output : ", "Method #3 : Using type() method", "Output", "Time Complexity : O(N)", "Auxiliary Space : O(N)", "Method 4: Using for loop", "Output", "Time complexity:", "Auxiliary space:", "Method #5: Using List Comprehension", "Output", "Time complexity:", "Auxiliary space:", "Method #6: Using numpy:", "Output:", "The time complexity : O(n),", "The auxiliary space :O(1), ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-summation-of-integers-in-heterogeneous-list/"},
{"title": "Python | Pandas Dataframe.sort_values() | Set-2 - GeeksforGeeks", "h1": ["Python | Pandas Dataframe.sort_values() | Set-2"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "What kind of Experience do you want to share?"], "strong": ["Pandas", "Dataframe.sort_values()", "Multiple Parameter Sorting", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-sort_values-set-2/"},
{"title": "Python | Pandas Panel.cumprod() - GeeksforGeeks", "h1": ["Python | Pandas Panel.cumprod()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Panel.cumprod()", "Syntax:", "Parameters:", "axis :", "skipna :", "Returns:", "Code #1:", "Code #2:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-panel-cumprod/?ref=ml_lbp"},
{"title": "Python - Alternate Elements operation on Tuple - GeeksforGeeks", "h1": ["Python – Alternate Elements operation on Tuple"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Input", "Output", "Method #1 : Using loop + enumerate()", "The combination of above functions provide brute force solution to this problem. In this, we extract the elements along with indices using enumerate() and perform chaining using condition. ", "Output", "Method #2 : Using list slicing", "Output", "Output", "Method 4:  using list comprehension", "Step-by-step approach:", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-alternate-elements-operation-on-tuple/"},
{"title": "Python | Pandas TimedeltaIndex.unique() - GeeksforGeeks", "h1": ["Python | Pandas TimedeltaIndex.unique()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " TimedeltaIndex.unique()", "Syntax :", "Parameters : ", "values : ", "Return : ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-timedeltaindex-unique/?ref=ml_lbp"},
{"title": "Python | Pandas dataframe.clip_upper() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.clip_upper()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.clip_upper()", "Syntax:", "Parameters: ", "threshold : ", "axis :", "inplace :", "Returns: ", "Example #1: ", "Output :", "Example #2: ", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-clip_upper/"},
{"title": "Python program to convert seconds into hours, minutes and seconds - GeeksforGeeks", "h1": ["Python program to convert seconds into hours, minutes and seconds"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Approach #1 : ", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Approach #2 : ", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Approach #3 : ", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Approach #4 : ", "Output:", "Time Complexity: ", "Auxiliary Space: ", " Approach #5 :", "Output", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-convert-seconds-into-hours-minutes-and-seconds/"},
{"title": "Python - Ordered tuples extraction - GeeksforGeeks", "h1": ["Python – Ordered tuples extraction"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using list comprehension + sorted()", "Output", "Time Complexity:", "Auxiliary Space: ", "Method #2 : Using filter() + lambda + sorted()", "Output", "Method#3: Using Recursive method.", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method #4: Using all()", "Output", "Time complexity: ", "Auxiliary space:", "Method #5: Using the itertools.groupby() function:", "Algorithm:", "Output", "Time complexity: O(nlogn)", "Auxiliary Space: O(m) ", "Method #6: Using map() and set()", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-ordered-tuples-extraction/"},
{"title": "Python - tensorflow.math.reduce_sum() - GeeksforGeeks", "h1": ["Python – tensorflow.math.reduce_sum()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["reduce_sum() ", "Syntax: ", "Parameters:", "input_tensor: ", "axis(optional): ", "keepdims(optional): ", "name(optional): ", "Returns:", "Example 1:", "Output:", "Example 2:", "Output:", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tensorflow-math-reduce_sum/"},
{"title": "Python | Character Encoding - GeeksforGeeks", "h1": ["Python | Character Encoding"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Charade Installation : ", "charade ", "wrapper function around the charade module. ", "Code : encoding.detect(string), to detect the encoding ", "Confidence : ", "Encoding   : ", "Code : encoding.convert(string) to convert the encoding.", "Code : Example", "Output : ", "detect() : ", "convert() : ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Master Java Programming - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-character-encoding/?ref=ml_lbp"},
{"title": "Python program to find number of days between two given dates - GeeksforGeeks", "h1": ["Python program to find number of days between two given dates"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Naive Approach: ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Using Python datetime module:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Time Complexity: O(1)", "Auxiliary Space: O(1)", "Output", "Time Complexity", "Space Complexity", "Method#5: Using reduce from functools:", "Algorithm:", "Output", "Time complexity: O(n),", "Auxiliary Space: O(1).", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-find-number-of-days-between-two-given-dates/?ref=ml_lbp"},
{"title": "Python program to calculate Date, Month and Year from Seconds - GeeksforGeeks", "h1": ["Python program to calculate Date, Month and Year from  Seconds"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Approach to Calculate Date, Month, and Year from Seconds", "Python", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples", "Input: ", "Output: ", "Input: ", "Output: ", "Input: ", "Output: ", "Approach to Calculate Date, Month, and Year from Seconds", "Below is the complete program based on the", "above stepwise approach", "Output", "time complexity", "space complexity", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-calculate-date-month-and-year-from-seconds/"},
{"title": "Python - Golomb Encoding for b=2n and b!=2n - GeeksforGeeks", "h1": ["Python – Golomb Encoding for b=2n and b!=2n"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Coding:-", "r = x-qb", "Examples:", "Input  : ", "Output : ", "Code : Python program to implement Golomb Encoding", "Output : ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-golomb-encoding-for-b2n-and-b2n/"},
{"title": "Python program to calculate age in year - GeeksforGeeks", "h1": ["Python program to calculate age in year"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Approach # 1:", "Approach #2:", "Output:", "Approach #3 :", "Output:", "Approach #4: ", "Output:", "Time complexity", "Auxiliary space", "Approach #5 :", "Output:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-calculate-age-in-year/"},
{"title": "Python Program to check date in date range - GeeksforGeeks", "h1": ["Python Program to check date in date range"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input :", "Output :", "Explanation :", "Input :", "Output :", "Explanation :", "Method 1: Using ", "loop", "Output:", "Time Complexity: O(n), ", "Auxiliary Space: O(1), ", "Method 2: Using ", "any()", "Output:", "Time complexity: ", "Auxiliary space: ", "Method 3: Using filter() and lambda function", "Output", "Time complexity: ", "Auxiliary Space: ", "Method 4 : using list comprehension. ", "Output", "Time complexity: ", "Auxiliary space: ", "Method 5 :  Using the set function", "Output", "Time complexity: ", "Auxiliary space: ", "Method 6: Using numpy:", "Output:", "Time complexity:", "Auxiliary Space:", "Method 7: Using the bisect module", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-check-date-in-date-range/?ref=ml_lbp"},
{"title": "Python program to print Calendar without calendar or datetime module - GeeksforGeeks", "h1": ["Python program to print Calendar without calendar or datetime module"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Approach:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-print-calendar-without-calendar-or-datetime-module/?ref=ml_lbp"},
{"title": "Python - Find the closest date from a List - GeeksforGeeks", "h1": ["Python – Find the closest date from a List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Explanation :", "Input :", "Output :", "Explanation :", "Method #1 : Using ", "min()", " + ", "dictionary comprehension", " + ", "abs()", "Output:", "Time complexity: ", "Auxiliary space: ", "Method #2 : Using min() + abs() + ", "lambda", "Output:", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-find-the-closest-date-from-a-list/?ref=ml_lbp"},
{"title": "Python | Column summation in uneven sized lists - GeeksforGeeks", "h1": ["Python | Column summation in uneven sized lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Note: Install numpy module using command “pip install numpy”", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using sum() + filter() + map() + list comprehension", "Output : ", "Method #2 : Using list comprehension + sum() + zip_longest()", "Output : ", "Output", "Method #4 : Using reduce() and zip_longest(): ", "Algorithm:", "Output", "Time complexity: O(n*m) ", "Space complexity: O(m) ", "METHOD 5:Using .items", "APPROACH:", "ALGORITHM:", "Output", "Approach using numpy:", "Note: Install numpy module using command “pip install numpy”", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-column-summation-in-uneven-sized-lists/?ref=ml_lbp"},
{"title": "Python | Pandas Series.rank() - GeeksforGeeks", "h1": ["Python | Pandas Series.rank()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": [" Series.rank()", "Syntax:", "Parameter : ", "axis : ", "method : ", "numeric_only : ", "na_option : ", "ascending : ", "pct : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-series-rank/?ref=ml_lbp"},
{"title": "Python | Remove all occurrences in nested list - GeeksforGeeks", "h1": ["Python | Remove all occurrences in nested list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using list comprehension", "Output", "Time complexity: ", "Auxiliary space: ", "Method #2 : Using filter() + partial() + operator.ne", "Output", "Time Complexity:", "Auxiliary Space: ", "Method #3: Using while loop+remove() method", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #4: Using nested loop", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-remove-all-occurrences-in-nested-list/"},
{"title": "Python | Ways to split strings on Uppercase characters - GeeksforGeeks", "h1": ["Python | Ways to split strings on Uppercase characters"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using re.findall() method", "Output:", "Time Complexity: ", "Auxiliary Space:", "Method #2: Using re.split()", "Output:", "Time complexity ", "Auxiliary space ", "Method #3: Using enumerate", "Output:", "Method #4 : Using isupper() and split() methods", "Output", "Time complexity : ", "Auxiliary space : ", "Method #5 : Using ord() function", "Output", "Method #6: Without using builtin methods(isupper() and ord())", "Output", "Method #7 : Using operator.countOf() method", "Output", "Time Complexity: O(n)", "Space Complexity: O(n)", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-ways-to-split-strings-on-uppercase-characters/"},
{"title": "Python | Pandas Series.dtype - GeeksforGeeks", "h1": ["Python | Pandas Series.dtype"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " Series.dtype", "Syntax:", "Parameter : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2 : ", "Output : ", "Output : ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/python-pandas-series-dtype/"},
{"title": "Python | Ways to concatenate boolean to string - GeeksforGeeks", "h1": ["Python | Ways to concatenate boolean to string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Ways to Boolean to String", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input: ", "Output: ", "Explanation:", "sing Format()", "Output", " using Str", "Output", "sing % Formatting", "Output", " using F-strings", "Output", "Time complexity:", "Auxiliary space: ", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-ways-to-concatenate-boolean-to-string/"},
{"title": "Python | Pandas Panel.cummin() - GeeksforGeeks", "h1": ["Python | Pandas Panel.cummin()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Panel.cummin() ", "Syntax:", "Parameters:", "axis :", "skipna :", "Returns:", "Code #1:", "Code #2:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-panel-cummin/?ref=next_article"},
{"title": "Python - Dictionary Key Value lists combinations - GeeksforGeeks", "h1": ["Python – Dictionary Key Value lists combinations"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using product() + zip() + loop", "Output", "Time complexity:", "Auxiliary space: ", "Method #2 : Using product() + loop", "Output", "Time complexity:", "Auxiliary space:", "Method 3: Using product() + nested list comprehension + dictionary comprehension", "Output", "Time complexity: ", "Auxiliary space:", "Method #4: Using itertools.combinations() and itertools.product()", "Output", "Time complexity:", "Auxiliary space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-dictionary-key-value-lists-combinations/?ref=ml_lbp"},
{"title": "Python | Front and rear range deletion in a list - GeeksforGeeks", "h1": ["Python | Front and rear range deletion in a list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using list slicing + del operator", "Method #2: Using list slicing", "Method #3: Using inbuilt methods", "Output", "Time complexity: ", "Auxiliary space:", "Method #4: Using del statement.", "step-by-step approach :", "Output", "Time complexity:", "Auxiliary space:", "Method #5: Using list comprehension", "Output", "Time complexity:", "Auxiliary space:", "Method #6: Using pop() method and a loop", "i", "0", "pop()", "i", "2", " i", " 2", "j ", "0", "pop() ", " j", "5 ", "j ", " 2", "Output", "Time complexity: ", "Auxiliary space: ", "Method #7: Using ", "heapq", ":", "Output:", "Time Complexity: O(n), ", "Space Complexity: O(n),", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-front-and-rear-range-deletion-in-a-list/?ref=ml_lbp"},
{"title": "Python Program to Find closest number in array - GeeksforGeeks", "h1": ["Python Program to Find closest number in array"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Method #1: Using Binary search", "Python3", "Method #2: Using min() function", "Python3", "Method #3: Using Two Pointers", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "simple solution ", "Method #1: Using Binary search", "Output", "Time Complexity:", "Auxiliary Space:", "Output", "Output", "Time Complexity:", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "DSA for Interview Preparation "], "link": "https://www.geeksforgeeks.org/python-program-to-find-closest-number-in-array/"},
{"title": "Python | Find closest number to k in given list - GeeksforGeeks", "h1": ["Python  | Find closest number to k in given list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Method #1 : ", "Output:", "Method #2 : ", "Output:", "Method #3:", "Output", "Output", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-find-closest-number-to-k-in-given-list/"},
{"title": "Python | Value summation of key in dictionary - GeeksforGeeks", "h1": ["Python | Value summation of key in dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using sum() + list comprehension", "Output : ", "Method #2: Using sum() + itemgetter() + map()", "Output : ", "Method #3: Using reduce() + lambda function", "Output", "Time complexity: ", "Auxiliary Space: ", "Method #4: Using a for loop", "gfg", "Output", "Time complexity:", "Auxiliary space:", "Method 5: Using Generator Expression and sum()", "STEP: ", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-value-summation-of-key-in-dictionary/?ref=ml_lbp"},
{"title": "Python Program to check date in date range - GeeksforGeeks", "h1": ["Python Program to check date in date range"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input :", "Output :", "Explanation :", "Input :", "Output :", "Explanation :", "Method 1: Using ", "loop", "Output:", "Time Complexity: O(n), ", "Auxiliary Space: O(1), ", "Method 2: Using ", "any()", "Output:", "Time complexity: ", "Auxiliary space: ", "Method 3: Using filter() and lambda function", "Output", "Time complexity: ", "Auxiliary Space: ", "Method 4 : using list comprehension. ", "Output", "Time complexity: ", "Auxiliary space: ", "Method 5 :  Using the set function", "Output", "Time complexity: ", "Auxiliary space: ", "Method 6: Using numpy:", "Output:", "Time complexity:", "Auxiliary Space:", "Method 7: Using the bisect module", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-check-date-in-date-range/"},
{"title": "Python - Compare Dictionaries on certain Keys - GeeksforGeeks", "h1": ["Python – Compare Dictionaries on certain Keys"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loop", "Output : ", "Method #2 : Using all()", "Output : ", "Output", "Method 4 :  use set operations", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-compare-dictionaries-on-certain-keys/?ref=ml_lbp"},
{"title": "Python - Value length dictionary - GeeksforGeeks", "h1": ["Python – Value length dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loop + len()", "Output : ", "Method #2: Using dictionary comprehension", "Output : ", "Method #3: Here is another approach using map and len functions:", "Output", "Method #7: Using collections.defaultdict() and loop", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-value-length-dictionary/?ref=ml_lbp"},
{"title": "Python | Pandas Index.dtype - GeeksforGeeks", "h1": ["Python | Pandas Index.dtype"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": [" Index.dtype", "Syntax:", "Parameter : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2 : ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-index-dtype/"},
{"title": "Python - Dictionary values String Length Summation - GeeksforGeeks", "h1": ["Python – Dictionary values String Length Summation"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using sum() + generator expression + len()", "Output : ", "Time complexity: ", "Auxiliary Space: ", "Method #2 : Using map() + len() + sum()", "Output : ", "Method 3 : using a for loop:", "step-by-step approach :", "Output", "Time complexity", "Auxiliary space", "Method #4: Using reduce() from functools module", "Step-by-Step Approach:", "Output", "Time complexity", "Auxiliary space", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-dictionary-values-string-length-summation/?ref=next_article"},
{"title": "Python | Grouping dictionary keys by value - GeeksforGeeks", "h1": ["Python | Grouping dictionary keys by value"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method 1: Using sorted() + items() + defaultdict()", "Output:", "Method 2:", "Output:", "Method 3: Using itertools.groupby()", "Output", "Time Complexity:", "Auxiliary Space:", "Method 4 : Using a loop", "Step-by-step approach:", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-grouping-dictionary-keys-by-value/"},
{"title": "Python | Matrix Tuple pair Column product - GeeksforGeeks", "h1": ["Python | Matrix Tuple pair Column product"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Note: Install numpy module using command “pip install numpy”", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using zip() + list comprehension", "Output", "Method #2 : Using zip() + map()", "Output : ", "Method #3 : Using numpy()", "Note: Install numpy module using command “pip install numpy”", "Output:", "Time complexity", "Auxiliary Space ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-matrix-tuple-pair-column-product/?ref=ml_lbp"},
{"title": "Python | Remove duplicates from nested list - GeeksforGeeks", "h1": ["Python | Remove duplicates from nested list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using sorted() + set()", "Output : ", "Time complexity: O(nmlog(m)),", "Auxiliary space: O(nm)", "Method #2: Using set() + map() + sorted()", "Output : ", "Time complexity: O(nmlog(m))", "Auxiliary space: O(nm)", "Method #3 : Using sorted() method ,in, not in operators", "Output", "Method #4: Using Numpy", "Example:", "Output:", "Time Complexity: O(nmlog(m))", "Auxiliary Space: O(nm)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-remove-duplicates-from-nested-list/"},
{"title": "Python - Ways to remove duplicates from list - GeeksforGeeks", "h1": ["Python – Ways to remove duplicates from list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Remove Duplicates from the list using the set() Method", "Output", "Time Complexity:", "Space Complexity:", "Remove duplicates from the list using list comprehension ", "Output", "Time Complexity:", "Space Complexity:", "Remove duplicates from the list using list comprehension with enumerate()", "Output", "Time Complexity:", "Space Complexity:", "Remove duplicates from the list in python using collections.OrderedDict.fromkeys()", "Output", "Time Complexity:", "Space Complexity:", "Remove duplicates from list using “in”, “not in” operators", "Output", "Time Complexity:", "Space Complexity:", "Remove duplicates from list using", "Output", "Time Complexity:", "Space Complexity:", "Remove duplicates from list using the ", "Counter() method", "Output", "Time Complexity:", "Space Complexity:", "Remove duplicates from list using numpy unique method", "Note: Install numpy module using the command “pip install numpy”", "Output", "Time Complexity:", "Space Complexity:", " frame", "Algorithm:", "Output:", "Time complexity:", "Space complexity: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-ways-to-remove-duplicates-from-list/"},
{"title": "Python - Filter rows with only Alphabets from List of Lists - GeeksforGeeks", "h1": ["Python – Filter rows with only Alphabets from List of Lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1: Using ", "isalpha()", " + ", "all()", " + ", "list comprehension", "Output", "Method #2 : Using ", "filter()", " + ", "lambda", " + ", "join()", " + ", "isalpha()", "Output", "Time Complexity: ", "Auxiliary Space : ", "Method #3 : Using itertools.filterfalse() method", "Output", "Time Complexity: O(n2)", "Auxiliary Space: O(n)", "Method #4 : Using re", "Output", "Method #5: Using a nested loop to iterate over each element and character of the list and check if it is an alphabet.", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-filter-rows-with-only-alphabets-from-list-of-lists/?ref=ml_lbp"},
{"title": "Python - tensorflow.math.tan() - GeeksforGeeks", "h1": ["Python – tensorflow.math.tan()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["tan()", "Syntax: ", "Parameters:", "x:", "name(optional): ", "Returns:", "Example 1:", "Output:", "Example 2: ", "Output:", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tensorflow-math-tan/"},
{"title": "Python | fmod() function - GeeksforGeeks", "h1": ["Python | fmod() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["fmod()", "Syntax:", "Parameters:", "Returns:", "Time Complexity:", "Auxiliary Space:", "Example #1:", "Output:", "Example #2:", "ValueError", "ValueError", "TypeError", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-fmod-function/?ref=next_article"},
{"title": "Python | Duplicate substring removal from list - GeeksforGeeks", "h1": ["Python | Duplicate substring removal from list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using split() and for loops", "Output", "Method #2: Using set() + split()", "Output : ", "Method #3: Using {} + split() + list comprehension", "Output : ", "Method #4:Using Counter() function", "Output", "Method#5: Using Recursive method. ", "Output", "Time Complexity: O(n)", "Space Complexity: O(n)", "Method#6: Using  list comprehension and set():", "Output", "Time Complexity: O(n)", "Space Complexity: O(n)", "Method#7:Using dict.fromkeys()", "Output", "The time complexity of this algorithm is O(n*m)", "The auxiliary space of this algorithm is also O(n*m),", "Method#8:Using reduce():", "Algorithm:", "Output", "Time Complexity:", "Space Complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-duplicate-substring-removal-from-list/"},
{"title": "Python | ldexp() function - GeeksforGeeks", "h1": ["Python | ldexp() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["ldexp()", "x * (2**i)", "Syntax:", "Parameters:", "x :", "i :", "Returns :", "Time Complexity:", "Auxiliary Space: ", "Code #1:", "Output:", "Code #2:", "Output:", "Code #3:", "TypeError", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-ldexp-function/?ref=ml_lbp"},
{"title": "Python datetime module - GeeksforGeeks", "h1": ["Python datetime module"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python DateTime module", "Python Date Class", "Python3", "Python3", "Python3", "Python3", "Python3", "Python Time class", "Python3", "Python3", "Python3", "Python Datetime class", "Python3", "Python3", "Python3", "Python3", "Python Timedelta Class", "Python3", "Python3", "Python3", "Python3", "Python DateTime.tzinfo()", "Python3", "Python DateTime timezone", "Python3", "What kind of Experience do you want to share?"], "strong": ["DateTime", "Python Datetime module", " DateTime in Python ", "Python Datetime", "date", "time", "date-time", "timedelta", "tzinfo", "timezone", "YYYY-MM-DD", "Python Date class Syntax", "Note", "Output:", "Output", "Output", "Output", "Output", "Constructor Syntax:", "Output:", "Output:", "Output", "Constructor Syntax:", "Note", "Output:", "Output:", "Output:", "Output", "Constructor syntax:", "Output:", "Output:", "Output", "Note: ", "Example:", "Output", "Example ", "Output:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-datetime-module/?ref=lbp"},
{"title": "Python Value Error :Math Domain Error in Python - GeeksforGeeks", "h1": ["Python Value Error :Math Domain Error in Python"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What is ‘ValueError: math domain error’ in Python?", "How to Fix “ValueError: math domain error” in Python? ", "Python", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["‘ValueError: math domain", "error’", "division by zero ", "square root of negative numbers ", "log of a negative number", "ValueError: math domain error’", "ValueError: math domain error’", "ValueError: math domain error’", "Output Error: ", "Solution: ", "Output 1: ", "Output 2: ", "ValueError: math domain error", "Output Error: ", "Solution: ", "Output 1: ", "Output 2: ", "ValueError: math domain error", "Output Error: ", "Solution: ", "Output 1", "Output 2", "ValueError: math domain error’", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-value-error-math-domain-error-in-python/"},
{"title": "Python | Combinations of elements till size N in list - GeeksforGeeks", "h1": ["Python | Combinations of elements till size N in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension + combinations()", "Output : ", "Method 2 : Using loop + extend() + combinations()", "Output : ", "Method#3: Using Recursive method.", "Output", "Time complexity:", "Auxiliary Space:", "Method#4: Using heapq:", "Algorithm :", "Output", "Time Complexity: ", "Space Complexity: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-combinations-of-elements-till-size-n-in-list/"},
{"title": "Python Itertools - GeeksforGeeks", "h1": ["Python Itertools"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["iterator algebra", "Output:", "Different types of iterators provided by this module are:", "Infinite iterators", "count(start, step):", "starts printing from the “start” number and prints infinitely", "Example:", "Output:", "cycle(iterable):", "printing from the beginning again when all elements are printed in a cyclic manner", "Example 1:", "Output:", "Example 2:", "Output:", "repeat(val, num):", "Example:", "Output:", "Product():", "computes the cartesian product", "Example:", "Output:", "Permutations():", "generate all possible permutations of an iterable", "Example:", "Output:", "Combinations():", "all the possible combinations(without replacement)", "Example:", "Output:", "Combinations_with_replacement():", "Individual elements may repeat itself", "Example:", "Output:", "accumulate(iter, func):", "Example:", "Output:", "chain(iter1, iter2..):", "Example:", "Output:", "chain.from_iterable():", "Example:", "Output:", "compress(iter, selector):", "Example:", "Output:", "dropwhile(func, seq):", "Example:", "Output:", "filterfalse(func, seq):", "Example:", "Output:", "islice(iterable, start, stop, step):", "Example:", "Output:", "starmap(func., tuple list):", "Example:", "Output:", "takewhile(func, iterable):", "Example:", "Output:", "tee(iterator, count):-", "Example:", "Output:", "zip_longest( iterable1, iterable2, fillval):", "Example:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-itertools/?ref=lbp"},
{"title": "expandtabs() method in Python - GeeksforGeeks", "h1": ["expandtabs() method in Python"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python String expandtabs() Method Syntax", "Python String expandtabs() Method Example", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python String expandtabs() Method ", "“\\t”", "Syntax : ", "Parameters", "tabsize : ", "Return :", "Output:", "Output:", "Exception : ", "TypeError", "Output:", "Applications :", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-expandtabs-method/?ref=lbp"},
{"title": "Python - Check if list contain particular digits - GeeksforGeeks", "h1": ["Python – Check if list contain particular digits"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input :", "Output :", "Explanation :", "Input :", "Output :", "Explanation :", "Method #1 : Using ", "loop", " + ", "str()", " + ", "join()", "Approach:", "Output", "Time Complexity: O(n^2)", "Auxiliary Space Complexity: O(n)", "Method #2 : Using ", "any()", " + ", "list comprehension", "Output", "Method #3: ", "Output", "Method #4 : Using list()+map()+join()+replace()+len() methods", "Output", "Method #5: Using NumPy module", "Step-by-step algorithm for implementing the approach", "Output", "Time complexity:", "Auxiliary space:", "Method#6: Using Recursive method.", "Output", "Time Complexity:", "Auxiliary Space Complexity:", "Method#7:Using a regular expression:", "Algorithm:", "Output", "Time complexity: O(nk), ", "Auxiliary Space: O(k),", "Method#8:Using filter() and set()", "Output", "The time complexity of the given code is O(nk),", "The space complexity of the code is also O(nk),", "Method#9: Using reduce():", "Algorithm:", "Output", "Time complexity:", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-check-if-list-contain-particular-digits/"},
{"title": "Python | Split list into lists by particular value - GeeksforGeeks", "h1": ["Python | Split list into lists by particular value"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Ways to Split Lists into Lists Based on Condition", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output ", "Output ", "Output ", "Output ", "itertools.groupby()", "Output ", "Output ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-split-list-into-lists-by-particular-value/"},
{"title": "Python | Convert 1D list to 2D list of variable length - GeeksforGeeks", "h1": ["Python | Convert 1D list to 2D list of variable length"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Method #1: ", "Output:", "Method #2 : ", "Output:", "Approach 3: Using recursion", "Output", "Output", "METHOD 5:Using defaultdict:", "Output", "Approach#5: Using Numpy", "Algorithm", "Output:", "Time Complexity:", "Space Complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-convert-1d-list-to-2d-list-of-variable-length/?ref=next_article"},
{"title": "Python | Count the elements till first tuple - GeeksforGeeks", "h1": ["Python | Count the elements till first tuple"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loop + isinstance() + enumerate()", "Output", "Method #2: Using takewhile() + sum() + isinstance() + lambda", "Output : ", "Method #3 : Using type() method", "Output", "Method #4 : Using next() and isinstance() function", "Output", "Time complexity: O(n)", "Auxiliary Space: O(1)", "METHOD 5:Using slicing", "APPROACH:", "ALGORITHM:", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-count-the-elements-till-first-tuple/"},
{"title": "Python | Substring removal in String list - GeeksforGeeks", "h1": ["Python | Substring removal in String list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension + replace()", "Output : ", "Time Complexity: ", "Auxiliary Space: ", "Method #2 : Using map() + lambda + replace()", "Output : ", "Method#3: Using Regular expression.", "Output", "Time Complexity: O(n)", "Space Complexity: O(n)", "Method #4: Using a loop and string.replace()", "Output", "The time complexity of this algorithm is O(n*m),", "The auxiliary space of this algorithm is also O(n*m)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-substring-removal-in-string-list/"},
{"title": "Python | datetime.timedelta() function - GeeksforGeeks", "h1": ["Python | datetime.timedelta() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Date class", "Time class", "Datetime class", "Timedelta class", "Date class", "Time class", "Datetime class", "Timedelta class", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["timedelta()", "Syntax : ", "Returns : ", "Code #1:", "Output:", "Code #2:", "Output:", "Code #3:", "Output:", "Approach:", "Output", "Time complexity", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-datetime-timedelta-function/"},
{"title": "Python | math.isqrt() method - GeeksforGeeks", "h1": ["Python | math.isqrt() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Math module", "math.isqrt()", "Note:", "Syntax:", "Parameter:", "n", "Returns:", "Code #1:", "Output:", "Code #2:", "Output:", "Code #3:", "Output:", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Master JavaScript - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-math-isqrt-method/?ref=ml_lbp"},
{"title": "Python | Remove unordered duplicate elements from a list - GeeksforGeeks", "h1": ["Python | Remove unordered duplicate elements from a list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples: ", "Input :", "Output :", "Input: ", "Output: ", "Method #1 :", "Output:", "Method #2 :", "Output:", "Method #3:Using Counter() method", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-remove-unordered-duplicate-elements-from-a-list/"},
{"title": "Python math function | copysign() - GeeksforGeeks", "h1": ["Python math function | copysign()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax : ", "Parameters : ", "Returns : ", "Time Complexity: ", "Auxiliary Space:", "Code #1:", "Output : ", "Code #2:", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-math-function-copysign/?ref=ml_lbp"},
{"title": "Python math.sqrt() function | Find Square Root in Python - GeeksforGeeks", "h1": ["Python math.sqrt() function | Find Square Root in Python"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "sqrt() Function", "Python3", "Definition of math.sqrt() Function", "math.sqrt() Method Syntax", "sqrt() Function Examples", "Python3", "Python3", "sqrt() Function Error", "Python3", "What kind of Experience do you want to share?"], "strong": ["sqrt()", "square root of any number", "Output", "math.sqrt(x)", "Parameter", "x:", "Returns: I", "Output", "Output", "sqrt() Function Error", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-math-function-sqrt/"},
{"title": "Python datetime.utcoffset() Method with Example - GeeksforGeeks", "h1": ["Python datetime.utcoffset() Method with Example"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Date class", "Time class", "Datetime class", "Timedelta class", "Date class", "Time class", "Datetime class", "Timedelta class", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["utcoffset() ", "Syntax: ", "Parameters: ", "Return values: ", "Example 1: ", "Output:", "Example 2: ", "Output:", "Example 3: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-datetime-utcoffset-method-with-example/?ref=lbp"},
{"title": "Python | Tensorflow nn.tanh() - GeeksforGeeks", "h1": ["Python | Tensorflow nn.tanh()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["tensorflow.nn", "Syntax", "Parameters:", "x", "name", "Return ", "Code #1:", "Output:", "Code #2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-nn-tanh/?ref=ml_lbp"},
{"title": "Python | PyTorch tan() method - GeeksforGeeks", "h1": ["Python | PyTorch tan() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax", "Parameters", "x", "name", "Return type", "Code #1:", "Output:", "Code #2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-pytorch-tan-method/"},
{"title": "Python PIL | ImageDraw.Draw.rectangle() - GeeksforGeeks", "h1": ["Python PIL | ImageDraw.Draw.rectangle()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["ImageDraw.Draw.rectangle()", "Syntax:", "Parameters:", "xy", "outline", "fill", "Returns:", "Output:", "Another Example:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pil-imagedraw-draw-rectangle/"},
{"title": "uniform() method in Python Random module - GeeksforGeeks", "h1": ["uniform() method in Python Random module"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["uniform()", "random", "uniform(int x, int y)", "Parameters :", "x", "y", "Returns :", "Code #1 :", "Application :", "Code #2 :", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-number-uniform-method/?ref=lbp"},
{"title": "Python | math.fabs() function - GeeksforGeeks", "h1": ["Python | math.fabs() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["math.fabs()", "Syntax:", "Parameter:", "x:", "Returns:", " Time Complexity:", " Auxiliary Space:", "Code #1: ", "Output:", "Code #2: ", "Output:", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Master JavaScript - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-math-fabs-function/?ref=next_article"},
{"title": "Python Convert Html to PDF - GeeksforGeeks", "h1": ["Python Convert Html to PDF"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Convert HTML/webpage to PDF", "What kind of Experience do you want to share?"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-convert-html-pdf/?ref=next_article"},
{"title": "Python - cmath.tanh() function - GeeksforGeeks", "h1": ["Python – cmath.tanh() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["cmath", "Syntax:", "Parameter: ", "Return: ", " ", "Example 1: ", "Output:", "Example 2: ", "Output:", "Example 3: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-cmath-tanh-function/?ref=next_article"},
{"title": "Python IMDbPY - Searching keyword - GeeksforGeeks", "h1": ["Python IMDbPY – Searching keyword"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Keyword :", "Syntax :", "Argument :", "Return :", "Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-imdbpy-searching-keyword/"},
{"title": "Python program to Convert a elements in a list of Tuples to Float - GeeksforGeeks", "h1": ["Python program to Convert a elements in a list of Tuples to Float"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using loop + ", "isalpha()", " + ", "float()", "Output:", "Time complexity: ", "Auxiliary space: ", "Method #2 : Using loop + isalpha() + float() + ", "list comprehension", "Output:", "Method 3: Using map() function and lambda expression", "map() ", "Output", "Time complexity", "Auxiliary space:", "Method 4: Using list comprehension + try-except", "Output", "Method 5 : Using try-except block", "Algorithm:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-convert-a-elements-in-a-list-of-tuples-to-float/?ref=ml_lbp"},
{"title": "Python | Replace rear word in String - GeeksforGeeks", "h1": ["Python | Replace rear word in String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using split() + join()", "Output", "Time Complexity:", "Auxiliary Space:", "Method #2 : Using rfind() + join()", "Output", "Time Complexity:", "Auxiliary Space:", "Method #3 : Using split(),pop(),append() and join() methods", "Output", "Method #4:Using split(),indexing, list(),join() functions", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method #5 : Using regex", "Output", "Method #6: Using  str.rsplit()", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method 7: Using rpartition() function", "Step-by-step approach:", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-replace-rear-word-in-string/?ref=ml_lbp"},
{"title": "Python set operations (union, intersection, difference and symmetric difference) - GeeksforGeeks", "h1": ["Python set operations (union, intersection, difference and symmetric difference)"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-set-operations-union-intersection-difference-symmetric-difference/?ref=ml_lbp"},
{"title": "Python - Replace duplicate Occurrence in String - GeeksforGeeks", "h1": ["Python – Replace duplicate Occurrence in String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using split() + enumerate() + loop", "Output : ", "Time Complexity:", "Space Complexity:", "Method #2 : Using keys() + index() + list comprehension", "Output : ", "Time Complexity: ", "Space Complexity: ", "Method #3 : Using  list comprehension + set + keys", "Output", "Time complexity: O(n)", "Space complexity: O(n)", "Method #4: Using regular expressions", "step-by-step approach:", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-replace-duplicate-occurrence-in-string/?ref=ml_lbp"},
{"title": "Python program to print k characters then skip k characters in a string - GeeksforGeeks", "h1": ["Python program to print k characters then skip k characters in a string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using loop + slicing ", "Output", "Time Complexity", "Auxiliary Space:", "Method #2 : Using list comprehension + join()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3: Using map and lambda function.", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method #4: Here’s an implementation using the reduce function from the functools module:", "The reduce function applies the lambda function to the elements of the list and accumulates the results. In this case, the lambda function takes two arguments x and y, which are the previous and current elements in the list respectively, and concatenates them. The reduce function starts with the first two elements of the list and the result is the final concatenated string.", "Output", "Method 5 :  using a generator function", "step-by-step approach", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-to-print-k-characters-then-skip-k-characters-in-a-string/"},
{"title": "Python Set pop() Method - GeeksforGeeks", "h1": ["Python Set pop() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Set pop() Syntax", "Set pop() Method in Python", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example", "Input: ", "Output: ", "Explanation: ", "Syntax:", "Parameter:", "Return:", "Example 1", "Output", "Example 2", "Output", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-set-pop-method/"},
{"title": "Python String find() method - GeeksforGeeks", "h1": ["Python String find() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python String find() Method Syntax", "What is the String find() Method?", "How to use the string find() method?", "Python3", "More Examples on String find() Method", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python String find() method", "Example", "Output", "str_obj.find(sub, start, end)", "Parameters", "sub:", "start (optional):", "end (optional):", "Return", "Note:", "Output", "find()", "Output", "find()", "Output", "Output", "4. Check if the Substring Exists using the find() Function", "Output", "Read other ", "Python String Methods", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-string-find/"},
{"title": "Python | Maximum and Minimum in a Set - GeeksforGeeks", "h1": ["Python | Maximum and Minimum in a Set"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["max() in a Set", "min() in a Set", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-maximum-minimum-set/?ref=ml_lbp"},
{"title": "Python any() function - GeeksforGeeks", "h1": ["Python any() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python any() Function Syntax", "Python any() Function Example", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example", "Input: ", "Output:", "Input: ", "Output:", "Syntax: ", "Iterable:", "Returns: ", "Output:", "Python any()  Function Lists", "Output:", "Working of any() Function with Tuples", "Output:", "Working of any() Function with Sets", "Output:", "Working of any() function with Dictionaries", "Output:", "Output:", "Output:", "P", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-any-function/?ref=lbp"},
{"title": "Python dict() Function - GeeksforGeeks", "h1": ["Python dict() Function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python dict() Syntax", "dict() Function in Python", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Parameters:", "kwargs", "iterable", "mapping", "Python dict() Function", "Output:", "Example 1: ", "Syntax:", "Output:", "Example 2", "Syntax:", "Output:", "Example 3:", "Syntax:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-dict-function/?ref=lbp"},
{"title": "Python | Remove Keys from dictionary starting with K - GeeksforGeeks", "h1": ["Python | Remove Keys from dictionary starting with K"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using Naive method + startswith() + pop()", "Output", "Method #2: Using list comprehension + dict() + startswith() + items()", "Output", "Method #3 : Using keys() and find() methods", "Output", "Method #4 : Using keys(),len() methods and slicing", "Output", "Method #2: Using Regular Expression", "Output", "Time complexity: ", "Auxiliary Space: ", "Method #6: Using filter and lambda function:", "K", " filter()", "K, ", "K", "Output", "Time complexity: ", "Auxiliary Space: ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-remove-keys-from-dictionary-starting-with-k/?ref=ml_lbp"},
{"title": "Python | Convert list of nested dictionary into Pandas dataframe - GeeksforGeeks", "h1": ["Python | Convert list of nested dictionary into Pandas dataframe"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Pandas DataFrame Practice Exercises", "Pandas Dataframe Rows Practice Exercise", "Pandas Dataframe Columns Practice Exercise", "Pandas Series Practice Exercise", "Pandas Date and Time Practice Exercise", "DataFrame String Manipulation", "Accessing and Manipulating Data in DataFrame", "DataFrame Visualization and Exporting", "Data Aggregation and Grouping", "Merging and Joining", "Filtering and Selecting Data", "Select Rows With Multiple Filters in Pandas", "Selection and Slicing", "Miscellaneous DataFrame Operations", "Data Cleaning and Manipulation", "Concatenation and Manipulation", "DataFrame Sorting and Reordering", "DataFrame Transformation and Conversion", "DataFrame Filtering and Selection", "DataFrame Conversion and Reshaping", "Pandas DataFrame Practice Exercises", "Pandas Dataframe Rows Practice Exercise", "Pandas Dataframe Columns Practice Exercise", "Pandas Series Practice Exercise", "Pandas Date and Time Practice Exercise", "DataFrame String Manipulation", "Accessing and Manipulating Data in DataFrame", "DataFrame Visualization and Exporting", "Data Aggregation and Grouping", "Merging and Joining", "Filtering and Selecting Data", "Select Rows With Multiple Filters in Pandas", "Selection and Slicing", "Miscellaneous DataFrame Operations", "Data Cleaning and Manipulation", "Concatenation and Manipulation", "DataFrame Sorting and Reordering", "DataFrame Transformation and Conversion", "DataFrame Filtering and Selection", "DataFrame Conversion and Reshaping", "Convert Nested List of Dictionary into Pandas Dataframe", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output:", "Step 1:", "Output:", "Step 2:", "Output:", "Step 3:", "Output:", "complete code", "Output:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-convert-list-of-nested-dictionary-into-pandas-dataframe/"},
{"title": "Python | Pandas dataframe.max() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.max()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.max()", "Syntax:", "Parameters : ", "axis : ", "skipna : ", "level : ", "numeric_only : ", "Returns :", "Example #1: ", "Output : ", "Example #2: ", "Output : ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-max/?ref=ml_lbp"},
{"title": "Python | Pandas Dataframe/Series.tail() method - GeeksforGeeks", "h1": ["Python | Pandas Dataframe/Series.tail() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "What kind of Experience do you want to share?"], "strong": ["Pandas", "tail()", "Syntax: ", "n: ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Complete Test Series for Service-Based Companies ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-series-tail-method/?ref=ml_lbp"},
{"title": "Python - Scoring Matrix using Dictionary - GeeksforGeeks", "h1": ["Python – Scoring Matrix using Dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Input", "Output", "Method #1 : Using loop", "Output : ", "Method #2 : Using list comprehension + sum()", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-scoring-matrix-using-dictionary/?ref=ml_lbp"},
{"title": "Python program to extract N largest dictionaries keys - GeeksforGeeks", "h1": ["Python program to extract N largest dictionaries keys"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using sorted() + lambda + reverse", "Output", "Method #2 : Using nlargest() + lambda", "Output", "Method#3: Using a loop and max() ", "Approach:", "Algorithm:", "Output", "Method #5: Using heapq.nlargest()", "Output", "Time complexity", "Auxiliary Space", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-extract-n-largest-dictionaries-keys/"},
{"title": "Python None Keyword - GeeksforGeeks", "h1": ["Python None Keyword"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "None in Python", "Python3", "Null Vs None in Python", "Python3", "Referring to the null object in Python", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["null value or Null object in Python", "It is a data type of the class NoneType object. ", "None in Python", "Output:", "None – ", "Null –", "Note:", "Example:", "Output:", "Example 1:", "Output:", "Example 2:", "Output:", "Note:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-none-keyword/?ref=ml_lbp"},
{"title": "Python | Joining only adjacent words in list - GeeksforGeeks", "h1": ["Python | Joining only adjacent words in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension + “*” operator", "Output:", "Method #2 : Using itertools.chain.from_iterable() + groupby() + join()", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-joining-only-adjacent-words-in-list/?ref=next_article"},
{"title": "Python - Group records by Kth column in List - GeeksforGeeks", "h1": ["Python – Group records by Kth column in List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loop + defaultdict()", "Output : ", "Time Complexity: ", "Auxiliary Space: ", "Method #2 : Using itemgetter() + groupby() + list comprehension", "Output : ", "Method #3 : Using numpy", "Method #4: Using a list comprehension with enumerate() function and a set:", "Output", "Method #5: Using setdefault on a dictionary", "Step-by-step algorithm:", "Output", "Time Complexity:", "Auxiliary Space:", "Method #6: Using itertools.groupby()", "Output", "Time complexity:", "Auxiliary space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-group-records-by-kth-column-in-list/"},
{"title": "Python Dictionary update() method - GeeksforGeeks", "h1": ["Python Dictionary update() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Syntax of Python Dictionary Update Method", "Python Dictionary update() Example", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python Dictionary update() method", "Example:", "Original dictionary : ", "Updated dictionary :", "Original dictionary :", "Updated dictionary : ", "Syntax:", "Parameters:", "Returns:", "Output:", "Output", "Output:", "Python Dictionary Update Value if the Key doesn’t Exist", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-dictionary-update-method/"},
{"title": "Python | Initialize dictionary with None values - GeeksforGeeks", "h1": ["Python | Initialize dictionary with None values"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Initialize dictionary with None values Using zip() + repeat()", "Output", "Initialize dictionary with None values Using fromkeys()", "Output", "Initialize dictionary with None values Using dict() and enumerate", "Output", "Time complexity: ", "Auxiliary Space:", "Initialize dictionary with None values Using a loop and update ()", "Output", "Time complexity: O(n)", "Auxiliary Space: O(n)", "Initialize dictionary with None values Using a dictionary comprehension", "res", "10", "range()", "res", "print()", "Output", "Time complexity: ", "Auxiliary space: ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-initialize-dictionary-with-none-values/"},
{"title": "Python | Convert dictionary object into string - GeeksforGeeks", "h1": ["Python | Convert dictionary object into string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Dictionary object into string Conversation", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input: ", "Output:", "Explanation:", " using json.dumps() method", "Output:", "Space complexity : ", "Time complexity :", "Dictionary  into string conversion using str() function", "Output:", "Space complexity : ", "Time complexity :", "Convert dictionary into string using print method", "Output", "Space complexity : ", "Time complexity :", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-convert-dictionary-object-into-string/?ref=ml_lbp"},
{"title": "Python - Sort Records by Kth Index List - GeeksforGeeks", "h1": ["Python – Sort Records by Kth Index List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Input", "Output", "Method 1: Using sort() + lambda", "Output : ", "Method #2: Using itemgetter() from the operator module", "Output", "Time complexity:", "Auxiliary space:", "Method #3: Using a custom function to sort the list", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-sort-records-by-kth-index-list/"},
{"title": "Python Program to Sort A List Of Names By Last Name - GeeksforGeeks", "h1": ["Python Program to Sort A List Of Names By Last Name"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input: ", "Output: ", "Explanation: ", "Input: ", "Output: ", "Explanation: ", "Method #1: ", "Output:", "Time Complexity: ", "Space Complexity: ", "Method #2: ", "Output:", "Time Complexity: ", "Space Complexity: ", "Method #3: Using itemgetter", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-program-to-sort-a-list-of-names-by-last-name/?ref=ml_lbp"},
{"title": "Find common elements in three sorted arrays by dictionary intersection - GeeksforGeeks", "h1": ["Find common elements in three sorted arrays by dictionary intersection"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input: ", "Output:", "Input: ", "Output: ", "intersection", "Output:", "Output:", "Time complexity:", "Space complexity: ", "Output:", "Time Complexity:", "Space Complexity:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-dictionary-intersection-find-common-elements-three-sorted-arrays/?ref=ml_lbp"},
{"title": "Access Dictionary Values | Python Tutorial - GeeksforGeeks", "h1": ["Access Dictionary Values | Python Tutorial"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Python3", "How to Access Values in Dictionary", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example", "Output", "Output :", "access keys", "key-specific operations", "Example", " ", "Output :", "Time Complexity", "Space Complexity", "Example", "Output :", "Time complexity", "Space Compexity", "in", "Example:", "Output:", "Time Complexity:", "Auxiliary Space:", "Example:", "Output:", "Time Complexity:", "Auxiliary Space:", " ", "Example: ", "Output:", "Time Complexity:", "Auxiliary Space:", " u", "Example: ", "Output:", "Time Complexity:", "Auxiliary Space:", "using For loop and Items() Method", "Example", "Output:", "Time complexity", "Space Complexity", "Also Read:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-accessing-key-value-in-dictionary/?ref=ml_lbp"},
{"title": "Python | Convert a list of Tuples into Dictionary - GeeksforGeeks", "h1": ["Python | Convert a list of Tuples into Dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Method 1 : Use of ", "setdefault()", "Example 1:", "Example 2:", "Method 2 : Use of dict() method", "Example 1:", "Example 2:", "Time complexity: ", "Auxiliary space: ", "Method 3:", "Output", "Time complexity: ", "Auxiliary space: ", "Method 4: Using the setdefault() method", "Output", "Time complexity: O(n", "Auxiliary Space: O(n),", "Method 5: Using a loop to add tuples to the dictionary", "Output", "Time complexity: ", "Auxiliary space: ", "Method 6 : use the dict() constructor and a list comprehension.", "Output", "Time complexity: O(n)", "Auxiliary space: O(n)", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-convert-a-list-of-tuples-into-dictionary/"},
{"title": "Python | Subtraction of dictionaries - GeeksforGeeks", "h1": ["Python | Subtraction of dictionaries"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "How to Subtract Two Dictionaries", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example", "Input: ", "Output: ", "Explanantion: ", " using dictionary comprehension + keys()", "Output:", " using Counter() + “-” operator", "Output", "Output", "Time complexity: ", "Auxiliary space: ", " using a for loop and dict.get()", "Output", "Time Complexity: ", "Auxiliary Space:  ", " using items() Method", "Output", "Time Complexity:", "Auxiliary Space:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-subtraction-of-dictionaries/"},
{"title": "Python List Comprehension and Slicing - GeeksforGeeks", "h1": ["Python List Comprehension and Slicing"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example 1:", "Output:", "[start : stop : steps] ", "stop", "step", "[: stop] ", "[start : ]", "[: : -1]", "Example 2:", "Output: ", "filter", "lambda expression", "Example 3:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-list-comprehension-and-slicing/?ref=lbp"},
{"title": "Python | Convert a nested list into a flat list - GeeksforGeeks", "h1": ["Python | Convert a nested list into a flat list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What are nested lists?", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["how to Flatten a List of Lists in python.", "Example:", "onvert a nested list into a flat list u", "“flatList” ", "Output:", "“flatList” ", "Output:", "Output:", "Output:", "Output:", "Example 6: Using the Python functools module", "Output:", "Example 7: Using the Python itertools module", "Output:", "Output", "DevOps Engineering - Planning to Production ", "GATE Data Science and Artificial Intelligence 2025 ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-convert-a-nested-list-into-a-flat-list/?ref=lbp"},
{"title": "Python program to insert an element into sorted list - GeeksforGeeks", "h1": ["Python program to insert an element into sorted list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Approach #1 : ", "Output:", "Approach #2 : ", "Output:", " Approach #3 : ", "Output", "Output", "Time complexity", "Auxiliary Space", "Approach #5: Using heapq.heappush() function", "Output", "METHOD 6:Using Quicksort method", "APPROACH:", "ALGORITHM:", "Output", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-insert-an-element-into-sorted-list/"},
{"title": "Python | Split given list and insert in excel file - GeeksforGeeks", "h1": ["Python | Split given list and insert in excel file"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["df.to_excel()", "Output :", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-split-given-list-and-insert-in-excel-file/"},
{"title": "Python - Keys associated with value list in dictionary - GeeksforGeeks", "h1": ["Python – Keys associated with value list in dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Get", "Keys associated with Values in the Dictionary in ", "Python", ".", "Example", "Input", "list", "Output:", "Explanation: ", "Get Keys Associated with Value List in Python", "Keys associated with Value list using loop + items()", "Output", "Keys associated with Value list using list comprehension + any()", "Output", "Keys associated with Value list using filter() function", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-keys-associated-with-value-list-in-dictionary/?ref=ml_lbp"},
{"title": "Initializing dictionary with Empty Lists in Python - GeeksforGeeks", "h1": ["Initializing dictionary with Empty Lists in Python"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "How to Initialize a Dictionary with an Empty List", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" Dictionary Comprehension", "Output", "fromkeys()", "Output", " defaultdict", "Output", " setdefault ", "Output", " built-ins: dict and zip", "Output", "Output", "Explanation:", "Also Read:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-initializing-dictionary-with-empty-lists/?ref=ml_lbp"},
{"title": "Python - Maximum record value key in dictionary - GeeksforGeeks", "h1": ["Python – Maximum record value key in dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using loop", "Output", "Time complexity: ", "Auxiliary space:", "Method #2: Using max() + lambda function", "Output", "Time Complexity:", "Auxiliary Space:", "Method 3: Use the built-in function reduce from the functools module", "Output", "Time complexity: ", "Auxiliary space: ", "Method #4: Using list comprehension and max() function", "Output", "Time complexity: O(n)", "Auxiliary space: O(n)", "Method #5: Using heapq:", "Algorithm:", "Output", "Time Complexity: O(n log n) ", "Auxiliary Space: O(n) ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-maximum-record-value-key-in-dictionary/"},
{"title": "Python | Convert dictionary to list of tuples - GeeksforGeeks", "h1": ["Python | Convert dictionary to list of tuples"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples: ", "Input:", "Output :", "Input:", "Output :", "Method #1: ", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Method #2 :", "Output:", "Time complexity: ", "Auxiliary space:", "Method #3:", "Output:", "Method #4:", "Output:", "Method #5 :", "Output", "Method #6 : ", "Output", "Method 7: Using a loop and the items() method of the dictionary object. ", "list1", "items() ", "list1", "list1", "Output", "Time complexity: ", "Auxiliary space: ", "Method 8: Using a for loop and the sorted() function", "Steps:", "Output", "Time complexity: O(nlogn)", "Auxiliary space: O(n) ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-convert-dictionary-to-list-of-tuples/"},
{"title": "Python | Convert a nested list into a flat list - GeeksforGeeks", "h1": ["Python | Convert a nested list into a flat list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What are nested lists?", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["how to Flatten a List of Lists in python.", "Example:", "onvert a nested list into a flat list u", "“flatList” ", "Output:", "“flatList” ", "Output:", "Output:", "Output:", "Output:", "Example 6: Using the Python functools module", "Output:", "Example 7: Using the Python itertools module", "Output:", "Output", "DevOps Engineering - Planning to Production ", "GATE Data Science and Artificial Intelligence 2025 ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-convert-a-nested-list-into-a-flat-list/?ref=next_article"},
{"title": "Python - Remove K valued key from Nested Dictionary - GeeksforGeeks", "h1": ["Python – Remove K valued key from Nested Dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Input", "Output", "Method #1: Using loop + isinstance() + filter()", "Output : ", "Time Complexity:", "Auxiliary Space: ", "Method #2: Using dictionary comprehension + isinstance() + lamda", "Output : ", "Time complexity: ", "Auxiliary space: ", "Method #3: Using recursion and a helper function", "Time complexity: ", "Auxiliary space:", "Method 4: Using the json module", "Algorithm-", "Output", "Time complexity: ", "Auxiliary space:", "Method #7: Using recursion and the del statement", "Output", "Time complexity:", "Auxiliary space:", "Method #8:Using re", "Algorithm", "Output", "Time complexity:", "Space complexity:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-remove-k-valued-key-from-nested-dictionary/?ref=ml_lbp"},
{"title": "Python | Convert nested dictionary into flattened dictionary - GeeksforGeeks", "h1": ["Python | Convert nested dictionary into flattened dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using Naive Approach", "Output:", "Time complexity:", "Auxiliary space: ", "Method #2: Using mutableMapping", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Method #3: Using Python ", "Generators ", "Output:", "Time complexity: ", "Auxiliary space: ", "Method #4: Using recursion and a separator", "Output", "The time complexity of this algorithm is O(N),", "The space complexity is also O(N)", "Method 5: Using a stack data structure", "Output", "Time complexity: ", "Auxiliary space: ", "Method 6: Using a recursive function without a separator", "Here’s the step by step approach:", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-convert-nested-dictionary-into-flattened-dictionary/?ref=ml_lbp"},
{"title": "Python | Remove duplicate dictionaries from nested dictionary - GeeksforGeeks", "h1": ["Python | Remove duplicate dictionaries from nested dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using Naive Method", "Output:", "Method #2: Using ", "sorted ", "and ", "set", "Output:", "Method #3: Using OrderedDict", "Output", "Method #4: Using list comprehension and lambda function", "Output", "Time complexity: ", "Auxiliary space: ", "Method #5: Using reduce method:", "Algorithm:", "Output", "Time Complexity:", "Auxiliary Space:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-remove-duplicate-dictionaries-from-nested-dictionary/?ref=ml_lbp"},
{"title": "Python - Convert String to List of dictionaries - GeeksforGeeks", "h1": ["Python – Convert String to List of dictionaries"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1:  Using json.loads() + replace()", "Output", "Method #2: Using eval()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #4: Using regular expression and literal_eval()", "re", "ast", "re.findall() ", " ast.literal_eval()", " ast.literal_eval()", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-convert-string-to-list-of-dictionaries/"},
{"title": "Python | Even values update in dictionary - GeeksforGeeks", "h1": ["Python | Even values update in dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loop", "Output : ", "Method #2 : Using update() + dictionary comprehension", "Output : ", "Method 3: Using the map() function along with a lambda function to check for even values and triple them. ", " map() ", "dict()", "Output", "Time complexity: ", "Auxiliary space: ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-even-values-update-in-dictionary/"},
{"title": "Python-Quizzes | Functions | Question 9 - GeeksforGeeks", "h1": ["Python-Quizzes | Functions | Question 9"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-quizzes-functions-question-9/"},
{"title": "Python String isdigit() Method - GeeksforGeeks", "h1": ["Python String isdigit() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python String isdigit() Method Syntax", "Python String isdigit() Method Example", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python String isdigit() method", "True", "Python String isdigit() Method Syntax", "Syntax: ", "Parameters: ", "Returns:", "Time Complexity: ", "Auxiliary Space: ", "Output:", "Example 1: Basic Usage", "Output: ", "Application: ", "ASCII values", "Algorithm:", "Output: ", "Example 3: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-string-isdigit-method/"},
{"title": "Python List max() Method - GeeksforGeeks", "h1": ["Python List max() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Definition of List max() Function", "Python List max() Method Syntax:", "How to Find Maximum Element in List in Python?", "Python3", "Python List max() Method Example", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python list max() function", "Example:", "Output", "Parameter", "listname :", "Returns : ", "Output", "Code:", "Output", "Output", "Code:", "Output:", "Solution :", "Output", "Note-", "Complexity- ", "O(n) ", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-list-max-method/?ref=lbp"},
{"title": "Python object() method - GeeksforGeeks", "h1": ["Python object() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Syntax of Python object()", "Example of Python", " object() ", "Python3", "Understanding the ", "properties of an object() function in Python", "Python3", "What kind of Experience do you want to share?"], "strong": [" object() function", "Syntax :", "Parameters : ", "Returns :", "Example of Python", "Output:", "Understanding the ", "Example:", "obj1.a ", "a.", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-object-method/?ref=ml_lbp"},
{"title": "Python - Divide String into Equal K chunks - GeeksforGeeks", "h1": ["Python – Divide String into Equal K chunks"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1: Using len() + loop", "Output", "Time Complexity:", "Auxiliary Space: ", "Method #2: Using list comprehension", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3: Using the string slicing technique in a loop", "Output", "Time complexity: ", "Auxiliary space:", "Method 4: Using itertools.islice()", "Output", "Method #5: Using regular expression", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-divide-string-into-equal-k-chunks/?ref=ml_lbp"},
{"title": "Python - Get the object with the max attribute value in a list of objects - GeeksforGeeks", "h1": ["Python – Get the object with the max attribute value in a list of objects"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Example 1: ", " ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Example 2: ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-get-the-object-with-the-max-attribute-value-in-a-list-of-objects/"},
{"title": "Python - Consecutive Alphabetic Occurrence - GeeksforGeeks", "h1": ["Python – Consecutive Alphabetic Occurrence"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loop + ascii_letters + zip()", "Output : ", "Method #2 : Using list comprehension + ascii_letters + zip()", "Output : ", "Time Complexity: ", "Space Complexity: ", "Output", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-consecutive-alphabetic-occurrence/?ref=ml_lbp"},
{"title": "Python - Unique Values of Key in Dictionary - GeeksforGeeks", "h1": ["Python – Unique Values of Key in Dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Input", "Output", "Method #1 : Using loop + set()", "Output : ", "Method #2: Using list comprehension", "Output : ", "Method #3:Using Counter() function", "Output", "Auxiliary Space: O(N)", "Time Complexity:O(N)", "Method 4: Using the map() function and the set() function. ", "Approach:", "Output", "Method #6: Using itertools.chain.from_iterable() and set()", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-unique-values-of-key-in-dictionary/"},
{"title": "Python | Count number of items in a dictionary value that is a list - GeeksforGeeks", "h1": ["Python | Count number of items in a dictionary value that is a list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["object -", "classinfo -", "Method #1", "Output", "Method #2: ", "Output", "Method #3:", "Output", "Method #4: ", "Output", "Method#5: Using values(),find() and type().", "Output", "Method #6: Using Recursive method.", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-count-number-of-items-in-a-dictionary-value-that-is-a-list/?ref=ml_lbp"},
{"title": "Python Dictionary get() Method - GeeksforGeeks", "h1": ["Python Dictionary get() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Dictionary get() Method Syntax:", "Python Dictionary get() Method Example:", "Python3", "Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python Dictionary get() Method", "Syntax : ", "Parameters: ", "key:", "Value: ", "Returns:", "Output:", "Output: ", "Output:", "Time complexity:", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-dictionary-get-method/"},
{"title": "Python | os._exit() method - GeeksforGeeks", "h1": ["Python | os._exit() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Python3", "What kind of Experience do you want to share?"], "strong": ["OS module", "os._exit()", "Note:", "sys.exit(n)", "Syntax:", "Parameter:", "status:", "Return type:", "Code:", "os._exit()", "Output:", "References:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-_exit-method/"},
{"title": "Python - Call function from another function - GeeksforGeeks", "h1": ["Python – Call function from another function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What is Calling a Function and a Called Function? ", "Examples of a Function Call from Another Function", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisite:", "Calling Function", "Called Function.", "How does Function Execution Work in Python? ", "Main function", "Function1", " Function2", "Example 1:", "SumOfSquares()", "Square()", "Output :", "Example 2:", "Function1()", "Function2()", "Main class", "Output : ", "Example 3:", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-call-function-from-another-function/"},
{"title": "Python String isnumeric() Method - GeeksforGeeks", "h1": ["Python String isnumeric() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python String isnumeric() Method Syntax", "Ways to Implement the isnumeric() Method in Python", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["True", "False", "Example", "Output:", "Python String isnumeric() Method Syntax", "Syntax:  ", "Parameters: ", "Returns :", "Ways to Implement the isnumeric() Method in Python", "Output: ", "Counting and Removing numeric characters", "Output: ", "Errors and Exceptions", "Output", "Output", "Output", "Combining isnumeric() with conditions", "Output: ", "String isnumeric() with another numeric type", "Output: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-string-isnumeric-method/?ref=ml_lbp"},
{"title": "Python - Read blob object in python using wand library - GeeksforGeeks", "h1": ["Python – Read blob object in python using wand library"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["To get blob file from image :", "To read image from blob in Wand :", "Input Image :", "Code :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-read-blob-object-in-python-using-wand-library/"},
{"title": "Python 3.6 Dictionary Implementation using Hash Tables - GeeksforGeeks", "h1": ["Python 3.6 Dictionary Implementation using Hash Tables"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["less memory usage", "order-preserving", "Example:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-3-6-dictionary-implementation-using-hash-tables/"},
{"title": "Python | Pandas dataframe.max() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.max()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.max()", "Syntax:", "Parameters : ", "axis : ", "skipna : ", "level : ", "numeric_only : ", "Returns :", "Example #1: ", "Output : ", "Example #2: ", "Output : ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-max/"},
{"title": "Python | Check if a given object is list or not - GeeksforGeeks", "h1": ["Python | Check if a given object is list or not"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using ", "isinstance", "Output:", "Method #2: Using type(x)", "Output:", "Method #3: Using __class__", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-check-if-a-given-object-is-list-or-not/"},
{"title": "Python - Non-None elements indices - GeeksforGeeks", "h1": ["Python – Non-None elements indices"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using list comprehension + range()", "Output : ", "Time complexity: ", "Auxiliary space: ", "Method #2: Using list comprehension + enumerate()", "Output : ", "Time complexity: ", "Auxiliary space: ", "Method #3: Using the built-in functions zip, range, filter, and lambda", "Output", "Time complexity: ", "Auxiliary Space: ", "Method 4: Using numpy", "Output:", "Time complexity: ", "Auxiliary Space: ", "Method 5 : Using a for loop", "step by step approach :", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-non-none-elements-indices/?ref=ml_lbp"},
{"title": "Python | os.system() method - GeeksforGeeks", "h1": ["Python | os.system() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "os.system() Syntax in Python", "Interact with Operating System using Python Examples", "Python3", "Python3", "FAQ’s ", "What kind of Experience do you want to share?"], "strong": ["os.system()", "Standard C function system()", "Syntax:", "Parameter: ", "command: ", "Return Value: ", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-system-method/?ref=previous_article"},
{"title": "Python - Check whether the given List forms Contiguous Distinct Sub-Array or Not - GeeksforGeeks", "h1": ["Python – Check whether the given List forms Contiguous Distinct Sub-Array or Not"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Contiguous Distinct Sub Array", "Example:", "Input:", "[ ", "Output: ", "Explanation:", "Input:", "Output:", "Explanation:", "Input", ":", "Output:", "Explanation:", "Solution:", "Output:", "Input:", "Output:", "Explanation:", "key:value", "2", "1", "3", "2,1 and 3", "Output", "Time Complexity – O(n), where n is the size of the list", "Space Complexity – O(n), space used to create dictionary", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-check-whether-the-given-list-forms-contiguous-distinct-sub-array-or-not/"},
{"title": "Python - noise() function in Wand - GeeksforGeeks", "h1": ["Python – noise() function in Wand"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Image noise", "noise()", "Syntax :", "Parameters :", "Source Image:", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-noise-function-in-wand/?ref=ml_lbp"},
{"title": "Python - Distance between occurrences - GeeksforGeeks", "h1": ["Python – Distance between occurrences"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using index():", "Output : ", "Method #2: Using find() + rfind():", "Output : ", "Method #3: ", "Output", "Time Complexity: ", "Space Complexity: ", "Approach 4: Using re module", "Output", "Explanation:", "Method 4 :  use a loop and keep track of the indices of the character. ", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-distance-between-occurrences/"},
{"title": "Python | sympy.combinatoric.Polyhedron() method - GeeksforGeeks", "h1": ["Python | sympy.combinatoric.Polyhedron() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["sympy.combinatoric.Polyhedron()", "Syntax: ", "Return: ", "Example #1:", "Output:", "Example #2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sympy-combinatoric-polyhedron-method/?ref=ml_lbp"},
{"title": "Python - Uppercase Nth character - GeeksforGeeks", "h1": ["Python – Uppercase Nth character"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using string slicing + upper()", "Output : ", "Method #2: Using lambda + string slicing + upper()", "Output : ", "Method #3 : Using replace() and upper()  methods", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #4 : Without upper() method", "Output", "Method #5 : Using maketrans() and translate()", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method #6: using list comprehension ", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method#7:using re module ", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method#7:using string concatenation", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-uppercase-nth-character/"},
{"title": "Python loop-programs Archives - GeeksforGeeks", "h1": ["Python loop-programs"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Complete Machine Learning & Data Science Program ", "Master C++ Programming - Complete Beginner to Advanced ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/tag/python-loop-programs/"},
{"title": "Python | Test if String contains Alphabets and Spaces - GeeksforGeeks", "h1": ["Python | Test if String contains Alphabets and Spaces"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using all() + isspace() + isalpha()", "Output : ", "Method #1 : Using regex", "Output : ", "Time Complexity: ", "Auxiliary Space: ", "Method #3: Using operator.countOf() method", "Output", "Method #4:  ", "Output", "Time Complexity:", "Auxiliary Space:", "Method #5: Using filter() and lambda function:", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method #6: Using reduce() method and lambda function:", "Algorithm :", "Output", "The time complexity : O(n), ", "The auxiliary space : O(1),", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-test-if-string-contains-alphabets-and-spaces/"},
{"title": "Python - Get the indices of Uppercase characters in given string - GeeksforGeeks", "h1": ["Python – Get the indices of Uppercase characters in given string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using list comprehension  + range() + isupper()", "Output", "Method #2 : Using enumerate() + isupper()", "Output", "Method #3 : ", "Output", "Method #4 : Using ord() function ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #4 : Using operator.countOf() method", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method#5: Using Recursive method.", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method#6: Using re and finditer function", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method#7:numpy():", "Algorithm:", "Output:", "Time complexity: O(n)", "Space complexity: O(n)", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-get-the-indices-of-uppercase-characters-in-given-string/"},
{"title": "Python program to Sort a List of Tuples in Increasing Order by the Last Element in Each Tuple - GeeksforGeeks", "h1": ["Python program to Sort a List of Tuples in Increasing Order by the Last Element in Each Tuple"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input:", "Output:", "Explanation:", "Methods #1: ", "Approach:", "Output:", "Time Complexity:", "Auxiliary Space: ", "Methods #2: ", "Output:", "Time complexity: ", "Auxiliary space: ", "Methods #3:", "Output:", "Time complexity: ", "Auxiliary space:", "Method #4: Using Insertion Sort.", "Output", "Method #5: Using Merge Sort", "Output", "Time Complexity: O(n log n)", "Auxiliary Space: O(n)", "Method #6: Using ", "Selection Sort", "0", "Output", "Time Complexity:", "Auxiliary Space:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-sort-a-list-of-tuples-in-increasing-order-by-the-last-element-in-each-tuple/?ref=previous_article"},
{"title": "Python-Quizzes | Python Sets Quiz | Question 1 - GeeksforGeeks", "h1": ["Python-Quizzes | Python Sets Quiz | Question 1"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Question 1:", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures and Algorithms - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/python-quizzes-python-sets-quiz-question-1/?ref=ml_lbp"},
{"title": "Python - Unique values count of each Key - GeeksforGeeks", "h1": ["Python – Unique values count of each Key"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Method #1 : Using", " len()", " + ", "set()", " + loop", "Output", "Method #2 : Using dictionary comprehension + len() + ", "set()", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method #3:Using Counter() method", "Output", "Time Complexity:O(N*N)", "Auxiliary Space: O(N*N)", "Method #4: Using for loop", "Output", "Time Complexity:O(N*N)", "Auxiliary Space: O(N*N)", "Method #5: Using numpy", "Algorithm:", "Output", "Time complexity: O(K)", "Auxiliary Space: O(nk + m)", "Method 6:  use the pandas library", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-unique-values-count-of-each-key/"},
{"title": "Python - Call function from another file - GeeksforGeeks", "h1": ["Python – Call function from another file"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Approach:", "Example 1:", "Output:", "Example 2:", "Output:", "Syntax:", "Syntax:", "Example 3:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-call-function-from-another-file/"},
{"title": "Python Program to Find the Sum of Natural Numbers Using While Loop - GeeksforGeeks", "h1": ["Python Program to Find the Sum of Natural Numbers Using While Loop"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Calculate Sum of Natural Numbers in Python Using While Loop", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-find-the-sum-of-natural-numbers-using-while-loop/"},
{"title": "Python - Getting all the Wifi Devices the system has connected - GeeksforGeeks", "h1": ["Python – Getting all the Wifi Devices the system has connected"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output :", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-getting-all-the-wifi-devices-the-system-has-connected/"},
{"title": "Python | os.wait() method - GeeksforGeeks", "h1": ["Python | os.wait() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Parameter:", "Return type:", "Code:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-wait-method/?ref=next_article"},
{"title": "Python - Constant Multiplication to Nth Column - GeeksforGeeks", "h1": ["Python – Constant Multiplication to Nth Column"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loop", "Output : ", "Method #2: Using list comprehension", "Output : ", "Method #3: Using map()", "Output", "Time complexity: O(n)", "Auxiliary Space: O(n)", "Method 4: Using list slicing and unpacking.", "K", "Output", "Method 5: Using the numpy library. ", "Output:", "Time complexity: O(NM)", "Auxiliary space: O(NM)", "Method 6: Using pandas library", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-constant-multiplication-to-nth-column/?ref=ml_lbp"},
{"title": "Python | Pandas dataframe.min() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.min()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.min()", "Syntax:", "Parameters : ", "axis : ", "skipna : ", "level : ", "numeric_only : ", "Returns :", "Example #1: ", "Output : ", "Example #2: ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-min/"},
{"title": "Python Program to Sort the matrix row-wise and column-wise - GeeksforGeeks", "h1": ["Python Program to Sort the matrix row-wise and column-wise"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python 3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Approach:", "Algorithm for getting transpose of the matrix:", "Output:", "Time Complexity:", "Approach 2: Using NumPy", "np.sort()", "mat.transpose() ", "sortMatRowAndColWise ", "sortByRow ", "printMat ", "print the matrix", "pip install numpy", "Output: ", "Time Complexity: ", "Auxiliary Space: ", "copy of the transposed matrix.", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "DSA for Interview Preparation "], "link": "https://www.geeksforgeeks.org/python-program-to-sort-the-matrix-row-wise-and-column-wise/"},
{"title": "Python - List XOR - GeeksforGeeks", "h1": ["Python – List XOR"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "Python", "Note: Install numpy module using command “pip install numpy”", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using reduce() + lambda + “^” operator", "Output : ", "Method #2 : Using reduce() + operator.ixor", "Output : ", "Method #3 : Using numpy", "Note: Install numpy module using command “pip install numpy”", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-list-xor/?ref=next_article"},
{"title": "Python - Constant Multiplication over List - GeeksforGeeks", "h1": ["Python – Constant Multiplication over List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Note: Install numpy module using command “pip install numpy”", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using List Comprehension", "Output", "Method #2 : Using map() + operator.mul", "Output", "Method #3 : Using numpy", "Note: Install numpy module using command “pip install numpy”", "Output:", "Time complexity:", " Auxiliary Space: ", "Method 4 : using a for loop to iterate through each element in the list and multiplying it by the constant K.", "Output", "Time complexity: O(n)", "Auxiliary space: O(n)", "Method 8: Using a generator expression and the map() function", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-constant-multiplication-over-list/"},
{"title": "Python | os.dup2() method - GeeksforGeeks", "h1": ["Python | os.dup2() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Python3", "What kind of Experience do you want to share?"], "strong": ["OS module", "For Example:", "os.dup2()", "Syntax:", "Parameter:", "fd", "fd2", "inheritable", "Return Type:", "Code:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-dup2-method/?ref=next_article"},
{"title": "Python | Records list XOR - GeeksforGeeks", "h1": ["Python | Records list XOR"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using reduce() + lambda + “^” operator + loop", "Output : ", "Method #2 : Using reduce() + operator.ixor + chain()", "Output : ", "Method #3: Using reduce() + lambda", "Output", "Time complexity: ", "Auxiliary Space:", "Method #4: Using list comprehension + bitwise XOR operator", " Approach:", "test_list", "XOR ", "res ", " print()", "XOR ", "test_list", "Output", "Time complexity: ", "Auxiliary space:", "Method #5: Using itertools.chain.from_iterable() + reduce() + operator.ixor()", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-records-list-xor/"},
{"title": "Python | Schedule Library - GeeksforGeeks", "h1": ["Python | Schedule Library"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "What kind of Experience do you want to share?"], "strong": ["Schedule ", "Installation", "schedule.every(interval=1) : ", "schedule.run_pending() : ", "schedule.run_all(delay_seconds=0) : ", "schedule.idle_seconds() : ", "schedule.next_run() : ", "schedule.cancel_job(job) : ", "Parameters:", "interval:", "scheduler:", "Basic methods for Schedule.job", "at(time_str) : ", "Parameters:", "Returns: ", "do(job_func, *args, **kwargs) : ", "Parameters:", "Returns:", "run() : ", "Returns:", "to(latest) : ", "Reference:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-schedule-library/?ref=next_article"},
{"title": "Python | Min/Max value in float string list - GeeksforGeeks", "h1": ["Python | Min/Max value in float string list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method 1: Using min()/max() + float() ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 2: Using the built-in reduce() function along with the lambda function to find the minimum and maximum values.", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(1)", "Method #3:  Use a for loop and convert each element to float before comparing them.", "float()", "Output", "Time complexity: ", "Auxiliary space: ", "Method 5: Using numpy library", "step-by-step approach :", "Import the numpy library using the statement import numpy as np.", "Define the input list test_list with string elements as [‘4.5’, ‘7.8’, ‘9.8’, ‘10.3’].", "Convert the input list to a numpy array of float elements using the np.array() method and assign it to a variable float_arr. The dtype parameter is set to float to ensure that the elements are of float data type.", "Use the np.min() function to get the minimum value from the float_arr array and assign it to a variable min_val.", "Use the np.max() function to get the maximum value from the float_arr array and assign it to a variable max_val.", "Print the result using the print() function. The minimum value and maximum value are printed using the variables min_val and max_val respectively.", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-min-max-value-in-float-string-list/"},
{"title": "Python - Remove after substring in String - GeeksforGeeks", "h1": ["Python  – Remove after substring in String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using index() + len() + slicing", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #2: Using regex() ( for stripping off after numeric occurrence)", "Output", "Method #3: Using split() method", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method#4:Using str.find() and str.slice()", "Output", "The time complexity of the algorithm is O(N),", "The Auxiliary space of the algorithm is O(N), ", "Method#5: reduce() function from the functools module:", "Algorithm:", "Output", "The time complexity: O(nm),", "Auxiliary space:O(n),", "Method#6: Using replace method:", "Algorithm :", "Output", "Time complexity:  O(n),", "Auxiliary Space:  O(n),", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-remove-after-substring-in-string/?ref=ml_lbp"},
{"title": "Python - Consecutive Missing elements Sum - GeeksforGeeks", "h1": ["Python – Consecutive Missing elements Sum"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension + sum()", "Output : ", "Time complexity:", "Auxiliary Space:", "Method #2: Using set() + sum()", "Output : ", "Method 3: Using for loop and range function", "Output", "Time Complexity: O(n), where n is the length of the list", "Auxiliary Space: O(1)", "Method  4: Using itertools and reduce() function", "Steps:", "Output", "Time complexity: O(n)", "Auxiliary space: O(n)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-consecutive-missing-elements-sum/"},
{"title": "tuple() Function in Python - GeeksforGeeks", "h1": ["tuple() Function in Python"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python tuple() Syntax", "tuple() in Python Function Examples", "Python3", "Python3", "Python3", "Python3", "Python3", "Tuple() Built-In Functions", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python tuple() function", "Example:", "Output:", "Python tuple() Syntax", "Syntax:", "iterable (optional): ", "Return:", "TypeError", "Output :", "Output :", "Output ", "Output :", "Output :", "Output :", "Output :", "Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tuple-function/?ref=lbp"},
{"title": "Python - Convert list of dictionaries to JSON - GeeksforGeeks", "h1": ["Python – Convert list of dictionaries to JSON"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Convert List of Dictionaries to Json", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output", "Output:", "Python ", " Using ", "json.JSONEncoder", "Output:", "Handling Non-Serializable Types with ", "default", " Parameter", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-convert-list-of-dictionaries-to-json/?ref=ml_lbp"},
{"title": "Python str() function - GeeksforGeeks", "h1": ["Python str() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python str() Function Syntax", "str() function in Python Example", "Python3", "Python3", "Python3", "Exceptions of str() in Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Output:", "Syntax: ", "Parameters:", "object: ", "encoding: ", "errors:", "Returns: ", " ", "Output:", "Output:", "Output :", "strict (default):", "ignore:", "replace:", "xmlcharrefreplace:", "backslashreplace:", "namereplace:", "Example:", "Output:", "Ž ", "ignore", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-str-function/?ref=lbp"},
{"title": "Python List pop() Method - GeeksforGeeks", "h1": ["Python List pop() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "Python List pop() Syntax", "What is the List pop method()?", "How to Use List pop() Method in Python?", "Python", "More List pop() Examples ", "Python", "Python", "Python", "What kind of Experience do you want to share?"], "strong": ["Python list pop() ", "Example", "Output:", "Parameter", "index ", "Return", " ", " r", "IndexError ", "pop() function", "Output", "Output", "2. Pop the Item at a Specific Index from the List", "Output", "Output", "Note", "Read More ", "Python List Methods", "Also Read:", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-list-pop-method/?ref=lbp"},
{"title": "Python any() function - GeeksforGeeks", "h1": ["Python any() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python any() Function Syntax", "Python any() Function Example", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example", "Input: ", "Output:", "Input: ", "Output:", "Syntax: ", "Iterable:", "Returns: ", "Output:", "Python any()  Function Lists", "Output:", "Working of any() Function with Tuples", "Output:", "Working of any() Function with Sets", "Output:", "Working of any() function with Dictionaries", "Output:", "Output:", "Output:", "P", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-any-function/?ref=ml_lbp"},
{"title": "Python object - GeeksforGeeks", "h1": ["Python object"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Understanding of Python Object", "Creating a Python Object", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Object", "Note:", "Syntax:", "Instance", "Working of the Program: ", "Output:", "Accessing Class Member Using Object:", "Syntax:", "Example 1:", "Output:", "Example 2:", "Output:", "Self Variable:", "Example:", "Output:", "Note:", "Deleting an Object in Python:", "Syntax:", "Syntax:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/python-object/?ref=ml_lbp"},
{"title": "Python - Remove first element of list - GeeksforGeeks", "h1": ["Python – Remove first element of list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Using numpy.delete():", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method 1: Remove Elements From Lists in Python using pop()", "Output :", "Method 2: Remove Elements From Lists in Python using del list[]", "Output :", "Method 3: Remove Elements From Lists in Python using Slicing", "Output :", "Method 4: Remove Elements From Lists in Python using", " deque()", " +", " popleft()", "Output :", "Remove Elements From Lists in Python using remove()", "Output :", "Method:6 using List comprehension", " step-by-step algorithm for implementing the approach ", "Output", "Time complexity:", "Auxiliary space:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-removing-first-element-of-list/"},
{"title": "Python Tuple - max() Method - GeeksforGeeks", "h1": ["Python Tuple – max() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python tuple max() Method", "Example 1: Using tuple max() Method", "Python3", "Example 2: Using tuple max() Method for string elements", "Python3", "Example 3: Using max for equal-length elements", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example", "Input:", "Output:", "Explanation: ", "Syntax:", "Parameters:", "object: ", "Return type:", "Example 1: Using tuple max() Method", "Output:", "Example 2: Using tuple max() Method for string elements", "Output:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-tuple-max-method/?ref=lbp"},
{"title": "Python List append() Method", "h1": ["Python List append() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "Python List Append() Syntax", "What is List Append() in Python?", "More Python List append() Examples of", "Python", "Python", "What kind of Experience do you want to share?"], "strong": ["Python", "list append() method", "Example", "Output", "List_name.append(element)", "Parameter", "element: ", " ", "parameter is mandatory", " append()", "Example", "Python list append()", "Output :", "Add List to the List using Python List Append() Method", "Example", "Output:", "Note", "Time complexity: ", "Read Other ", "Python List Methods", "Similar Reads:", "Master C Programming with Data Structures ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-list-append-method/?ref=lbp"},
{"title": "Python pow() Function - GeeksforGeeks", "h1": ["Python pow() Function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Syntax of pow() Function in Python", "Python pow() Function Example", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python pow() function", "Syntax: ", "Parameters : ", "x :", "y :", "mod [optional]: ", "Return Value :  ", "Output:", "Power Function in Python with Modulus ", "Output:", "Implementation Cases in pow() Function in Python ", "Example:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pow-function/?ref=lbp"},
{"title": "Python next() method - GeeksforGeeks", "h1": ["Python next() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python next() Method Syntax", "Python next() Method Examples", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python’s next() function ", "Example ", "Output", "Note:", ".next()", "next()", "next() ", "Syntax :", "Parameters : ", "iter : ", "stopdef : ", "Return : ", "Iterating a List using the next() Function", "Output", "Output", "Output", "Output:", "Output", "Conclusion:", " Python For loop", "Applications: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-next-method/?ref=lbp"},
{"title": "Python | Sort a tuple by its float element - GeeksforGeeks", "h1": ["Python | Sort a tuple by its float element"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Method 1 : Use of ", "sorted()", " method", "Iterable : ", "Key(optional) : ", "Reverse(optional) :", "Method 2 : In-place way of sorting using sort():", "sorted() in Python", "lambda in Python", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sort-tuple-float-element/?ref=previous_article"},
{"title": "Python dict() Function - GeeksforGeeks", "h1": ["Python dict() Function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python dict() Syntax", "dict() Function in Python", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Parameters:", "kwargs", "iterable", "mapping", "Python dict() Function", "Output:", "Example 1: ", "Syntax:", "Output:", "Example 2", "Syntax:", "Output:", "Example 3:", "Syntax:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-dict-function/"},
{"title": "Python - Get next key in Dictionary - GeeksforGeeks", "h1": ["Python – Get next key in Dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using index() + loop", "Output : ", "Method #2 : Using iter() + next()", "Output : ", "Method #3 :  If you have lots of queries, they should be fast -> (O (1))", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-get-next-key-in-dictionary/"},
{"title": "Python | Pandas dataframe.pow() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.pow()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.pow()", "Syntax:", "Parameters : ", "other : ", "axis : ", "level : ", "fill_value : ", "**kwargs :", "Returns :", "Example #1: ", "Output : ", "Example #2: ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-pow/"},
{"title": "Python - Next N elements from K value - GeeksforGeeks", "h1": ["Python – Next N elements from K value"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using list comprehension + slicing ", "Output", "Method #2 : Using filter() + lambda + loop", "Output", "Output", "Method 4: Using a generator function", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-next-n-elements-from-k-value/"},
{"title": "Python String format() Method - GeeksforGeeks", "h1": ["Python String format() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python String Format() Syntax", "String Format() in Python Example", "Python3", "Python3", "Python3", "String format() with multiple placeholders", "Python3", "Python3", "Formatting Strings using Escape Sequences", "Formatters with Positional and Keyword Arguments", "Python3", "Type Specifying In Python", "Python3", "Python3", "Python3", "Another useful Type Specifying ", "Python3", "Type Specifying Errors", "Python3", "Padding Substitutions or Generating Spaces", "Python3", "Applications ", "Python3", "Using a dictionary for string formatting ", "Python3", "Python format() with list", "Python3", "What kind of Experience do you want to share?"], "strong": [" ", "Python ", "string format() function ", "Syntax:", "Parameters: ", "value :", "Returntype:", "String Format() in Python Example", "Output", "Output", "Using a Single Formatter", "string bracket notation", "{ } ", "Output ", "order. ", "Syntax :", "Parameters :", "(value1, value2) :", "Errors and Exceptions :", "IndexError : ", "Output ", "Output", "Formatting Strings using Escape Sequences", "{ } ", "tuple", " data types ", "Syntax :", "Parameters :", "Positional_argument", "Keyword_argument", "Example:", "Output ", "{field_name:", "conversion}", "Using %s ", "Output", "Using %c", "  prior to formatting", "Output", "Using %i", "%d ", "Output", "%u", "%o ", "f", "b", "o", "%x", "%X", "e", "Syntax :", "Errors and Exceptions :", "ValueError : ", "Output ", "Output ", "<", "^", ">", "Output :", "Output :", "Using a dictionary for string formatting ", "** ", "Output:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-string-format-method/"},
{"title": "Python - Replace vowels by next vowel - GeeksforGeeks", "h1": ["Python – Replace vowels by next vowel"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using zip() + list comprehension", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #2 : Using dictionary comprehension + list comprehension", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3 : Using index() method", "Output", "Time Complexity:", "Auxiliary Space:", "Method #4 : Using translate() method", "Output", "Time Complexity:", "Auxiliary Space: ", "Method#5: Without using built-in functions", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method#6:  using re.sub() function:", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Approach#6:Using list comprehension", ".", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-replace-vowels-by-next-vowel/?ref=next_article"},
{"title": "Python | Functions | Question 7 - GeeksforGeeks", "h1": ["Python | Functions | Question 7"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-functions-question-7/"},
{"title": "Python | Functions | Question 2 - GeeksforGeeks", "h1": ["Python | Functions | Question 2"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-functions-question-2/"},
{"title": "Python List Extend vs Append - GeeksforGeeks", "h1": ["Python List Extend vs Append"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What is Python List Extend?", "Python3", "Python3", "Whats is Python List Append?", "Python3", "Python3", "Differences Between List Extend vs Append", "What kind of Experience do you want to share?"], "strong": ["l", "Example 1:", "Example 2 : ", "Efficient Concatenation: ", "Flexibility:", "Enhanced Readability:", "Example 1:", "Example 2: ", "Simplicity in Single Additions:", "Readability in Singular Operations:", "Ease of Use with Dynamic Data:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-list-extend-vs-append/"},
{"title": "Python - Validate String date format - GeeksforGeeks", "h1": ["Python – Validate String date format"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Explanation :", "Input :", "Output :", "Explanation :", "Method #1 : Using strptime()", "Output:", "Method #2 : Using dateutil.parser.parse()", "Output:", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-validate-string-date-format/"},
{"title": "Python | Check if one dictionary is subset of other - GeeksforGeeks", "h1": ["Python | Check if one dictionary is subset of other"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using all() + items()", "Output", "Time complexity: ", "Auxiliary space: ", "Method #2: Using items() + <= operator", "Output", "Method #3 : Using set() + issubset()", "Output", "Time complexity: ", "Auxiliary Space:", "Method#4: Using the Recursive method", "Algorithm:", "Example:", "Output", "Time Complexity:", "Auxiliary Space: ", "Method #5: Using set() intersection method", "Here is the step-by-step approach:", "Output", "Time complexity: O(m+n)", "Auxiliary space: O(min(m,n)),", "Method #6: Using dictionary comprehension and all() method", "Output", "Time complexity: O(n),", "Auxiliary space: O(n)", "Method #7: Using reduce:", "Algorithm:", "Output", "Time Complexity:", "Auxiliary Space:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-check-if-one-dictionary-is-subset-of-other/"},
{"title": "Python | Functions | Question 3 - GeeksforGeeks", "h1": ["Python | Functions | Question 3"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-functions-question-3/?ref=next_article"},
{"title": "Python program to convert integer to roman - GeeksforGeeks", "h1": ["Python program to convert integer to roman"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Method 1:", "Python3", "Method 2:", "Python3", "Method 3:  ", "Python3", "Method – 4 –", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:  ", "Input: ", "Output:", "Input:", "Output:", "Input:", "Output:", "Input:", "Output:", "Below table shows the list of Roman symbols including their corresponding integer values also:", "Symbols", "Values", "Algorithm to convert an Integer value to Roman Numeral  ", "Method 1:", "Below example shows the implementation of the above algorithm: ", "Output:", "Method 2:", "MMMDXLIX", "The below example shows the implementation of the above approach:", "Output:", "Method 3:  ", "The below example shows the implementation of the above algorithm:", "Output:", "roman", "toRoman()", "Output – ", "Time Complexity – O(1)", "Auxiliary Space – O(1)", "fromRoman()", "Output – ", "Time Complexity – O(1)", "Auxiliary Space – O(1)", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-convert-integer-to-roman/?ref=ml_lbp"},
{"title": "Python - Convert Flat dictionaries to Nested dictionary - GeeksforGeeks", "h1": ["Python – Convert Flat dictionaries to Nested dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Convert Flat Dictionaries to Nested dictionary in Python", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" Using dict() + key access", "Output:", "Time complexity: ", "Auxiliary Space: ", "Python ", "Using zip()", "Output", "Using a for loop and dictionary comprehension", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Output:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-convert-flat-dictionaries-to-nested-dictionary/?ref=ml_lbp"},
{"title": "Python - Replace vowels by next vowel - GeeksforGeeks", "h1": ["Python – Replace vowels by next vowel"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using zip() + list comprehension", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #2 : Using dictionary comprehension + list comprehension", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3 : Using index() method", "Output", "Time Complexity:", "Auxiliary Space:", "Method #4 : Using translate() method", "Output", "Time Complexity:", "Auxiliary Space: ", "Method#5: Without using built-in functions", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method#6:  using re.sub() function:", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Approach#6:Using list comprehension", ".", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-replace-vowels-by-next-vowel/?type=article&id=482584"},
{"title": "Python-Quizzes | Miscellaneous | Question 10 - GeeksforGeeks", "h1": ["Python-Quizzes | Miscellaneous | Question 10"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "DevOps Engineering - Planning to Production "], "link": "https://www.geeksforgeeks.org/python-quizzes-miscellaneous-question-10/?ref=ml_lbp"},
{"title": "Python - Accessing Items in Lists Within Dictionary - GeeksforGeeks", "h1": ["Python – Accessing Items in Lists Within Dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Method ", "1", ": Manually accessing the items in the list", "Python3", "Method ", "2", ": Using Loop ", "Python3", "Method ", "3", ":  Accessing a particular list of the key", "Python3", "Method ", "4", ": Using list slicing", "Python3", "Method 5 : Using for loop and f-string", "Python3", "What kind of Experience do you want to share?"], "strong": ["1", "Syntax:", "Example:", "Output :", "2", "Example:", "Output :", "3", "Example: ", "Output:", "4", "Syntax:", "Example:", "Output :", "Step – 1 : ", ".items()", "Step – 2: ", "Step – 3 :", "Output", "Time Complexity – ", "Space Complexity – ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-accessing-items-in-lists-within-dictionary/?ref=next_article"},
{"title": "Python | Find all elements count in list - GeeksforGeeks", "h1": ["Python | Find all elements count in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using list comprehension + len()", "Output", "Time Complexity: ", "Auxiliary Space:", "Method #2 : Using chain() + len()", "Output", "Time complexity:", "Auxiliary space:", "Method #3: Using reduce() ", "Output", "Method #4 : Using extend() and len() methods", "Output", "Time Complexity : O(N)", "Auxiliary Space : O(1)", "Method #5: Using itertools.flatten() function", "Output", "Using numpy:", "Algorithm:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-find-all-elements-count-in-list/?ref=next_article"},
{"title": "Ways to remove particular List element in Python - GeeksforGeeks", "h1": ["Ways to remove particular List element in Python"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using ", "remove()", "remove()", "Method #2 : Using ", "set.disard()", "set.disard()", "Output :", "Method #3 : Using Lambda Function + filter()", "Output:", "Method #4: Using List Comprehension", "Output :", "Method #5: Using pop()", "Approach:", "Output :", "Method #6: Using Recursion ", "Output ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-ways-to-remove-particular-list-element/?ref=lbp"},
{"title": "Python-Quizzes | Miscellaneous | Question 10 - GeeksforGeeks", "h1": ["Python-Quizzes | Miscellaneous | Question 10"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "DevOps Engineering - Planning to Production "], "link": "https://www.geeksforgeeks.org/python-quizzes-miscellaneous-question-10/?ref=next_article"},
{"title": "Python - Count elements in tuple list - GeeksforGeeks", "h1": ["Python – Count elements in tuple list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using len() + generator expression", "Output : ", "Time Complexity: O(n)", "Auxiliary Space: O(1)", "Method #2 : Using len() + map() + chain.from_iterable()", "Output : ", "Method #3:", "Output", "Method #4:", "Output", "Method #5 : Using sum() + list comprehension", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #6:Using reduce", "Algorithm:", "Output", "Time Complexity:", "Space Complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-count-elements-in-tuple-list/"},
{"title": "Python | Pandas Dataframe/Series.head() method - GeeksforGeeks", "h1": ["Python | Pandas Dataframe/Series.head() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "What kind of Experience do you want to share?"], "strong": ["Pandas", "head()", "Syntax: ", "n: ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Complete Test Series for Service-Based Companies ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-series-head-method/?ref=previous_article"},
{"title": "Python Dictionary keys() method - GeeksforGeeks", "h1": ["Python Dictionary keys() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["keys()", "Syntax:", "Parameters:", "Returns:", "Method 1:", "Output:", "Method 2: Python access dictionary by key", "Output:", "Note: ", "dict_keys ", "Method 3: Accessing key using keys() indexing", "Output:", "Method 4: Python Dictionary update() function", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-dictionary-keys-method/"},
{"title": "Python - Ranged Maximum Element in String List - GeeksforGeeks", "h1": ["Python – Ranged Maximum Element in String List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Input", "Output", "Method #1 : Using max() + split() + list comprehension", "Output : ", "Method #2 : Using generator expression + max()", "Output : ", "Method #3: Using nested for loops", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-ranged-maximum-element-in-string-list/"},
{"title": "Python | Pandas dataframe.kurt() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.kurt()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.kurt()", "Syntax:", "Parameters : ", "axis : ", "skipna : ", "level :", "numeric_only :", "Returns :", "Example #1: ", "Output : ", "Example #2: ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-kurt/?ref=ml_lbp"},
{"title": "Python | Tuple key dictionary conversion - GeeksforGeeks", "h1": ["Python | Tuple key dictionary conversion"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using dictionary comprehension", "Output : ", "Time complexity: ", "Auxiliary space:", "Method #2: Using dict() + dictionary comprehension", "Output : ", "Method #3: Using the zip() function", " zip()", "dict()", "Output", "Time complexity: ", "Auxiliary space:", "Method #4: Using a for loop and the setdefault() method", "A list of tuples test_list is initialized with three tuples ", "An empty dictionary res is initialized to store the converted values.", "A for loop is used to iterate through each tuple in the test_list.", "In each iteration, a new key is created by extracting the first two elements of the tuple using (sub[0], sub[1]).", "The remaining elements of the tuple are extracted into a value variable using slicing.", "The setdefault() method is used to add the key to the dictionary with an empty list as its value if it doesn’t already exist. The method then returns the value associated with the key.", "The extend() method is used to append the value to the list associated with the ", "Output", "Time complexity: O(n), where n is the length of the input list test_list.", "Auxiliary space: O(n), where n is the length of the input list test_list. ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-tuple-key-dictionary-conversion/"},
{"title": "Python | Pandas dataframe.mad() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.mad()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.mad()", "Syntax:", "Parameters : ", "axis : ", "skipna : ", "level :", "numeric_only :", "Returns :", "Example #1: ", "Output : ", "Example #2: ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-mad/?ref=ml_lbp"},
{"title": "Pandas DataFrame mean() Method - GeeksforGeeks", "h1": ["Pandas DataFrame mean() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Pandas DataFrame mean() ", "Pandas DataFrame.mean() Examples", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas", " ", " dataframe.mean()", "Syntax:", "Parameters :", "axis : ", "skipna :", "level :", "numeric_only :", "Returns :", "Example 1:", "Output:", "Example 2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-mean/?ref=ml_lbp"},
{"title": "Python map() function", "h1": ["Python map() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python map() Function Syntax", "map() in Python Examples", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["map()", "Syntax", "Parameters:", "fun:", "iter:", "NOTE:", "Returns:", "NOTE :", "Output", "map() with Lambda Expressions", "Output", "Output", "Output", "Time complexity", "Auxiliary space", "Output", "Time complexity", "Auxiliary complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-map-function/?ref=lbp"},
{"title": "Python | Get first element with maximum value in list of tuples - GeeksforGeeks", "h1": ["Python | Get first element with maximum value in list of tuples"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using max() + operator.itemgetter()", "Output:", "Method #2 : Using max() + lambda", "Output:", "Method #3 : Using sorted() + lambda", "Output:", " Method #4 : Using heapq module", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-get-first-element-with-maximum-value-in-list-of-tuples/"},
{"title": "Python - Create nested list containing values as the count of list items - GeeksforGeeks", "h1": ["Python – Create nested list containing values as the count of list items"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input: ", "Output: ", "Input: ", "Output: ", "Method 1: Using nested ", "list comprehension", "Output:", "Time Complexity :  ", "Space Complexity : ", "Method 2:", "Output:", "Time Complexity : ", "Space Complexity :  ", "Method 3: Using *", "Output", "Time Complexity :", "Space Complexity : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-create-nested-list-containing-values-as-the-count-of-list-items/?ref=ml_lbp"},
{"title": "Pandas isnull() and notnull() Method - GeeksforGeeks", "h1": ["Pandas isnull() and notnull() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Pandas DataFrame isnull() Method ", "Python3", "Python3", "Pandas DataFrame notnull() Method ", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax", "Parameters", "Return Type", "Output", "Count NaN values in Pandas DataFrame", "Output", "Syntax", "Parameters:", "Return Type:", "Output", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-isnull-and-notnull/"},
{"title": "Python | Pandas Dataframe.sample() - GeeksforGeeks", "h1": ["Python | Pandas Dataframe.sample()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["sample()", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-sample/?ref=previous_article"},
{"title": "Python program to print the binary value of the numbers from 1 to N - GeeksforGeeks", "h1": ["Python program to print the binary value of the numbers from 1 to N"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method 1: ", "Approach", "Program:", "Output", "Method 2: ", "Approach", "Program:", "Output", "Method 3: ", "Syntax:", "Program", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-print-the-binary-value-of-the-numbers-from-1-to-n/?ref=ml_lbp"},
{"title": "Python | Sort a Dictionary - GeeksforGeeks", "h1": ["Python | Sort a Dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Case 1 : Sort by Keys", "Output", "Case 2 : Sort by Values ", "Output", "Output", "Method 4 :  use the sorted() method with a lambda function as the key parameter. ", "Here are the steps:", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-sort-a-dictionary/?ref=ml_lbp"},
{"title": "Extracting rows using Pandas .iloc[] in Python - GeeksforGeeks", "h1": ["Extracting rows using Pandas .iloc[] in Python"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Pandas .iloc[]  Syntax ", "What is Pandas .iloc[] in Python?", "Extracting Rows using Pandas .iloc[] in Python ", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas", " ", "Syntax: ", "Parameters:  ", "Return type: ", "Dataset Used:", "Dataframe.iloc[]", "Selecting ", " using Pandas .iloc[] in Python", "Pandas .iloc[] in Python", "Selecting ", "Output:", " using Pandas .iloc[] in Python", "Output:", "Pandas .iloc[] in Python", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-extracting-rows-using-pandas-iloc/?ref=ml_lbp"},
{"title": "Python Set issubset() Method - GeeksforGeeks", "h1": ["Python Set issubset() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Set issubset() Method Syntax", "Python set issubset() Method Example", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python set issubset() method ", "Python Set issubset() Method Syntax", "Syntax:", "Parameter:", "Return:", "Output:", "Output", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-set-issubset-method/?ref=next_article"},
{"title": "Convert String Dictionary to Dictionary Python - GeeksforGeeks", "h1": ["Convert String Dictionary to Dictionary Python"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Convert String Dictionary to Dictionary Using json.loads()", "json", "Output : ", "Time complexity: ", "Auxiliary space:", "Using ast.literal_eval()", "Output : ", "Time complexity: ", "Auxiliary space: ", "Convert String Dictionary to Dictionary Using eval()", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Convert String Dictionary to Dictionary Using the split() method and a dictionary comprehension", "Output", "Time Complexity:", "Auxiliary space: ", "Convert String Dictionary to Dictionary Using the eval() function along with a replace() function", "replace() ", "eval() ", "Output", "Time complexity:", "Auxiliary space: ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-convert-string-dictionary-to-dictionary/?ref=ml_lbp"},
{"title": "Python | Intersection in Tuple Records Data - GeeksforGeeks", "h1": ["Python | Intersection in Tuple Records Data"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension", "Output : ", "Method #2: Using set.intersection()", "Output : ", "Time complexity: ", "Auxiliary space: ", "Output", "Time complexity: O(n)", "Auxiliary Space: O(n)", "Method #4 : Using List Comprehension and filter() function:", "Algorithm:", "Output", "Time Complexity:", "Auxiliary Space:", "Method 5 : using a loop to iterate through one of the lists and check if each element exists in the other list.", " Here is a step-by-step approach for this method:", "Output", "Method 6: Using the itertools module", "Output", "Time complexity: O(n)", "Auxiliary space: O(n)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-intersection-in-tuple-records-data/?ref=ml_lbp"},
{"title": "Python program to convert binary to ASCII - GeeksforGeeks", "h1": ["Python program to convert binary to ASCII"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Program to Print ASCII Conversion", "Program for Binary to ASCII Conversion", "Problem Related to ASCCI", "Program to Print ASCII Conversion", "Program for Binary to ASCII Conversion", "Problem Related to ASCCI", "Method 1:", " By using", " binascii ", "module ", "Python3", "Method 2: Using ", "Built-in Types.", "Python3", "Method 3 : Using chr() and join() methods", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method 1:", " binascii ", "b2a_uu() function:", " b2a_uu() ", "Syntax: ", "Parameter: ", "Text: ", "Return Values: ", "Example: Convert binary to ASCII.", "Output:", "Method 2: Using ", "int(binary_sting, base)", "int.to_bytes(byte_number, byte_order)", "binary_int.bit_length() + 7 // 8. ", "Example: Convert binary to ASCII", "Output:", "Time Complexity: ", "Space Complexity: ", "chr()", "join()", "chr()", "chr() method", "int(i, 2)", "chr()", "Output", "Time Complexity – ", "Space Complexity –", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-convert-binary-to-ascii/?ref=ml_lbp"},
{"title": "Python | Convert list of numerical string to list of Integers - GeeksforGeeks", "h1": ["Python | Convert list of numerical string to list of Integers"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Convert list of numerical string to list of Integers using list comprehension", "Output", "Convert list of numerical string to list of Integers using map() + list comprehension", "Output", "Convert list of numerical string to list of Integers using lambda expression", "Output", "Convert list of numerical string to list of Integers using the reduce() function", "Output", "Convert list of numerical string to list of Integers using Heapq method", "Output", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-convert-list-of-numerical-string-to-list-of-integers/"},
{"title": "Python | Convert numeric String to integers in mixed List - GeeksforGeeks", "h1": ["Python | Convert numeric String to integers in mixed List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension + isdigit()", "Output : ", "Time Complexity : ", "Auxiliary Space :", "Method #2 : Using map() + lambda + isdigit()", "Output : ", "Time complexity:", "Auxiliary space", "Method #3 : Using isnumeric() method", "Output", "Time Complexity : ", "Auxiliary Space : ", "Method #4 : Using try-except", "res", "test_list", "int()", "res", "res.append(int(i)).", "res", "res.append(i).", "result", "Output", "Time Complexity : ", "Auxiliary Space : ", "Method#5: Using a for loop", "Output", "Time complexity:", "The time complexity of this algorithm is O(n", "Auxiliary Space:", "The space complexity of this algorithm is also O(n)", "Method #6: Using a dictionary", "Output", "Time complexity: ", "Auxiliary space: ", "Method#7: Using Recursive method.", "Output", "time complexity", "auxiliary space ", "Method#8: reduce function from the ", "functools module", ":", "Algorithm:", "test_list", "Output", "Time complexity:", "Space Complexity:", "Method#9: Using ", "numpy", ":", "Algorithm:", "int_list", "ele", "test_list", "int_list", "int_list", "int_list", "Output:", "Time Complexity:", "Space Complexity:", "Method #10 : Using re.match()", "Approach", "Output", "Time Complexity : O(N)", "Auxiliary Space : O(N)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-convert-numeric-string-to-integers-in-mixed-list/"},
{"title": "Python program to convert ASCII to Binary - GeeksforGeeks", "h1": ["Python program to convert ASCII to Binary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Method 1: U", "sing binascii module", "Python3", "Method 2: Using ", "Built-in Types", "Python3", "Method #3 – using ord(), zfill() and bin() method –", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method 1: U", "a2b_uu() function:", "a2b_uu() ", "Syntax: ", "Parameter:", "Text:", "Return Values: ", "Example: Convert  ASCII to binary using Python", "Output:", "Method 2: Using ", "Example: Convert  ASCII to binary using Python", "Output:", "Time Complexity: ", "Space Complexity: ", "ord()", "bin()", "Step – 1 : ", "Step – 2 :", "ord()", "bin()", "Step – 3: ", "zfill()", "Step – 4 :", "join()", "Below is the Implementation –", "Output", "Time Complexity – O(n) # n is the length of the string", "Auxiliary Space – O(n) #n is the length of the list that will form", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-convert-ascii-to-binary/"},
{"title": "Python program to Sort Strings by Punctuation count - GeeksforGeeks", "h1": ["Python program to Sort Strings by Punctuation count"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using ", "string.punctuation", " + ", "sort()", "Output:", "Method #2 : Using ", "sorted()", " + punctuation + ", "lambda", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Method #3: Using re", "This approach uses a regular expression pattern r'[^\\w\\s]’ to match any character that is not a word character (letters, digits, and underscores) or whitespace. The re.findall() function returns a list of all non-overlapping matches as strings.", "Output", "Time complexity: ", "Auxiliary space: ", "Method 4: Use the Counter module from collections. ", "Step-by-step approach:", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-sort-strings-by-punctuation-count/?ref=ml_lbp"},
{"title": "Python | Check if suffix matches with any string in given list - GeeksforGeeks", "h1": ["Python | Check if suffix matches with any string in given list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Note: Install numpy module using command “pip install numpy”", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples: ", "Input:", "Output: ", "Input:", "Output: ", "Method #1: Using any()", "Output", "Method #2: Using filter() and lambda", "Output", "Method #3 :", "find() ", "Output", "Time Complexity: ", "Auxiliary Space:", "Method #4 : Using the index method and a try/except block:", "Output", "Time complexity: ", "Space complexity: ", "Method#5: Using list comprehension", "Output", "Time  Complexity: O(n)", "Auxiliary Space: O(n)", "Method#6: Using regular expressions (regex)", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method#7: Using Recursive method.", "Algorithm:", "Output", "Approach using NumPy library:", "Note: Install numpy module using command “pip install numpy”", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-check-if-suffix-matches-with-any-string-in-given-list/?ref=ml_lbp"},
{"title": "Python program to convert binary to ASCII - GeeksforGeeks", "h1": ["Python program to convert binary to ASCII"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Program to Print ASCII Conversion", "Program for Binary to ASCII Conversion", "Problem Related to ASCCI", "Program to Print ASCII Conversion", "Program for Binary to ASCII Conversion", "Problem Related to ASCCI", "Method 1:", " By using", " binascii ", "module ", "Python3", "Method 2: Using ", "Built-in Types.", "Python3", "Method 3 : Using chr() and join() methods", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method 1:", " binascii ", "b2a_uu() function:", " b2a_uu() ", "Syntax: ", "Parameter: ", "Text: ", "Return Values: ", "Example: Convert binary to ASCII.", "Output:", "Method 2: Using ", "int(binary_sting, base)", "int.to_bytes(byte_number, byte_order)", "binary_int.bit_length() + 7 // 8. ", "Example: Convert binary to ASCII", "Output:", "Time Complexity: ", "Space Complexity: ", "chr()", "join()", "chr()", "chr() method", "int(i, 2)", "chr()", "Output", "Time Complexity – ", "Space Complexity –", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-convert-binary-to-ascii/?ref=lbp"},
{"title": "Python Set issubset() Method - GeeksforGeeks", "h1": ["Python Set issubset() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Set issubset() Method Syntax", "Python set issubset() Method Example", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python set issubset() method ", "Python Set issubset() Method Syntax", "Syntax:", "Parameter:", "Return:", "Output:", "Output", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-set-issubset-method/"},
{"title": "Python | Lexicographically smallest string in mixed list - GeeksforGeeks", "h1": ["Python | Lexicographically smallest string in mixed list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using min() + isinstance() + list comprehension", "Output : ", "Method #2 : Using min() + lambda + filter()", "Output : ", "Method#3: Using Recursive method.", "Output", "Time Complexity:", "Auxiliary Space:", "Method#4: Using heapq:", "Algorithm:", "Output", "Time Complexity:", "Space Complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-lexicographically-smallest-string-in-mixed-list/"},
{"title": "Python | Extract length of longest string in list - GeeksforGeeks", "h1": ["Python | Extract length of longest string in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using max() + generator expression,", "Output : ", "Method #2 : Using len() + key argument + max()", "Output : ", "Method 3: Alternative method", "Output", "Method 4: Using the enumerate function", "Output", "Method 5: Using the reduce function", "Output", "Method 6: Using the list comprehension:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-extract-length-of-longest-string-in-list/?ref=next_article"},
{"title": "Python - Split Numeric String into K digit integers - GeeksforGeeks", "h1": ["Python – Split Numeric String into K digit integers"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using int() + slice + loop", "Output", "Method #2 : Using list comprehension + int() + slicing", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3 : Using regex:", "Output", "The time complexity : O(n/K), ", "The auxiliary space :O(n/K)", "Method 4: Using recursion", "Output", "Time complexity:", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-split-numeric-string-into-k-digit-integers/"},
{"title": "Python Set | difference_update() - GeeksforGeeks", "h1": ["Python Set | difference_update()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "A.difference_update(B)", "B.difference_update(A)", "returns ", "None", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-set-difference_update/?ref=ml_lbp"},
{"title": "Python - Retain Numbers in String - GeeksforGeeks", "h1": ["Python – Retain Numbers in String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Input", "Output", "Method #1 : Using list comprehension + join() + isdigit()", "Output", "Time Complexity:", "Auxiliary Space: ", "Method #2 : Using regex()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3 : ", "Output", "Time complexity: ", "Auxiliary space:", "Method #4 : Using ord() method", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method #5: Using re.findall() method. ", "Output", "Method#6: Using enumerate() + join() + isdigit() ", "Output", "Time complexity:", "The time complexity of the algorithm is O(n)", "Auxiliary Space:", "The auxiliary space of the algorithm is also O(n)", "Method #7: Using filter() and lambda function", "Output", "Time Complexity:", "Auxiliary Space: ", "Method #8: Using a list comprehension and isnumeric() method.", "Output", "Method #9: Using map() and filter() functions", "Output", "Method #10: reduce() function from the functools module", "Algorithm:", "test_str", "Output", "Time Complexity:", "Space Complexity:", "Method #11:  Using numpy:", "Algorithm:", "Output", "Time complexity: O(n),", "Space complexity: O(n), ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-retain-numbers-in-string/?ref=ml_lbp"},
{"title": "Python - Bigrams Frequency in String - GeeksforGeeks", "h1": ["Python – Bigrams Frequency in String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using Counter() + generator expression", "Output : ", "Method #2 : Using Counter() + zip() + map() + join", "Output : ", "Time Complexity: ", "Auxiliary Space: ", "Method 3: use a loop and a dictionary to keep track of the bigram frequencies.", "Output", "Time complexity:", "Auxiliary space: ", "Method #4 : Using count() method", "Approach", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-bigrams-frequency-in-string/?ref=ml_lbp"},
{"title": "Python - Unique Tuple Frequency (Order Irrespective) - GeeksforGeeks", "h1": ["Python – Unique Tuple Frequency (Order Irrespective)"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using tuple() + generator expression + sorted() + len()", "Output : ", "Method #2: Using map() + sorted() + tuple() + set() + len()", "Output : ", "Method#3: Using Recursive method.", "Output", "Time Complexity: O(N * MlogM)", "Auxiliary Space: O(N * M)", "Method #4: Using dictionary and loop", "Steps:", "Output", "Time complexity: O(nlogn)", "Auxiliary space: O(n)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-unique-tuple-frequency-order-irrespective/?ref=ml_lbp"},
{"title": "Python Set | Check whether a given string is Heterogram or not - GeeksforGeeks", "h1": ["Python Set | Check whether a given string is Heterogram or not"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python program to check whether a given string is Heterogram or not", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input1:", "Output1:", "Explanation: ", "Input2:", "Output2:", "Explanation: ", "Output", "Time Complexity:", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-set-check-whether-given-string-heterogram-not/?ref=ml_lbp"},
{"title": "Python - Maximum column values in mixed length 2D List - GeeksforGeeks", "h1": ["Python – Maximum column values in mixed length 2D List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using max() + filter() + map() + list comprehension", "Output : ", "Method #2: Using list comprehension + max() + zip_longest()", "Output : ", "Method#3: Using Recursive method", "Output", "Time Complexity: O(mn log n)", "Auxiliary Space: O(mn)", "Method #4: Using numpy library", "Output:", "Time Complexity: O(NM),", "Space Complexity: O(NM), ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-maximum-column-values-in-mixed-length-2d-list/"},
{"title": "Python Main Function - GeeksforGeeks", "h1": ["Python Main Function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Example:", "Output:", "Example: ", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Master C++ Programming - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-main-function/"},
{"title": "Python DateTime - time.replace() Method with Example - GeeksforGeeks", "h1": ["Python DateTime – time.replace() Method with Example"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Parameters:", "Year: ", "month: ", "day: ", "Returns: ", "Python program to get time and display:", "Output:", "Output:", "Output:", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-datetime-time-replace-method-with-example/"},
{"title": "Python Set Exercise - GeeksforGeeks", "h1": ["Python Set Exercise"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Set Programs", "Conversion of Set Programs ", "Advance Set Programs", "What kind of Experience do you want to share?"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-set-exercise/?ref=ml_lbp"},
{"title": "Python - Multi-Line Statements - GeeksforGeeks", "h1": ["Python – Multi-Line Statements"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Multi-line Statement in Python:", "Python3", "Using “\\”(Explicit line continuation):", "Python3", "Using parenthesis (Implicit line continuation):", "Python3", "Using triple quote(line break)", "Python3", "What kind of Experience do you want to share?"], "strong": ["Code:", "Output:", "Example:", "Output:", "Example:", "Output:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-multi-line-statements/?ref=ml_lbp"},
{"title": "Python | sympy.tan() method - GeeksforGeeks", "h1": ["Python | sympy.tan() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Code #1: ", "Output: ", "Code #2: ", "Output: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sympy-tan-method/"},
{"title": "Python - Timedelta object with negative values - GeeksforGeeks", "h1": ["Python – Timedelta object with negative values"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Date class", "Time class", "Datetime class", "Timedelta class", "Date class", "Time class", "Datetime class", "Timedelta class", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["timedelta()", "Syntax:", "Example 1: Finding estimate date by using timedelta object with negative values.", "Output:", "Example 2: Finding estimate time by using timedelta object with negative values.", "Output:", "Example 3: Another way of finding estimate time by using timedelta object with negative values.", "Output:", "Example 4: Finding estimate date and time by using timedelta object with negative values.", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-timedelta-object-with-negative-values/?ref=ml_lbp"},
{"title": "Python DateTime - strptime() Function - GeeksforGeeks", "h1": ["Python DateTime – strptime() Function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Date class", "Time class", "Datetime class", "Timedelta class", "Date class", "Time class", "Datetime class", "Timedelta class", "How strptime() works?", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["strptime()", "Syntax", "Parameter:", "How strptime() works?", "Format codes", "format code", "meaning", "example", "Example 1: ", "Output:", "Example 2:", "Output:", "Syntax", "Example", "Output:", "Syntax: ", "Parameter:", "Example 1", "Output:", "Example 2:", "Output:", "“%d/%m/%Y %H:%M:%S”", "Syntax: ", "Parameter:", "Example 3:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-datetime-strptime-function/?ref=lbp"},
{"title": "Python | sympy.sin() method - GeeksforGeeks", "h1": ["Python | sympy.sin() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Code #1: ", "Output: ", "Code #2: ", "Output: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sympy-sin-method/?ref=next_article"},
{"title": "Python | sympy.tan() method - GeeksforGeeks", "h1": ["Python | sympy.tan() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Code #1: ", "Output: ", "Code #2: ", "Output: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sympy-tan-method/?type=article&id=323503"},
{"title": "Python math function | modf() - GeeksforGeeks", "h1": ["Python math function | modf()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["modf()", "Syntax :", "Time Complexity: ", "Auxiliary Space: ", "Parameter :", "Returns : ", "Exception :", "modf()", "Code #1", "Output :", "Code #2 : ", "TypeError", "Output : ", "Code #3", "Practical Application : ", "Code #4 :", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-modf-function/"},
{"title": "Python - cmath.asinh() function - GeeksforGeeks", "h1": ["Python – cmath.asinh() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["cMath module", "cmath.asinh()", "int, float, ", "complex", "Syntax:", "Parameter:", "x :", "Returns:", "Example #1 : ", "Output:", "Example 2:", "Output:", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-cmath-asinh-function/"},
{"title": "Python | Counter Objects | elements() - GeeksforGeeks", "h1": ["Python | Counter Objects | elements()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Counter ", "collections", "Counter", "elements()", "Parameters :", "Return type : ", "Errors and Exceptions :", "-> ", "-> ", "Code #1:", "Output:", "Output:", "Code #2:", "Output:", "Code #3:", "Output:", "Code #4:", "Output:", "Note:", "Applications:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-counter-objects-elements/?ref=ml_lbp"},
{"title": "Python | time.time() method - GeeksforGeeks", "h1": ["Python | time.time() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Parameter:", "Return type:", "Code #1:", "Output:", "Code #2:", "Output:", "Reference:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-time-time-method/?ref=next_article"},
{"title": "Python - cmath.cos() function - GeeksforGeeks", "h1": ["Python – cmath.cos() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["cMath module", "cmath.cos()", "int, float, ", "complex", "Syntax:", "Parameter:", "x :", "Returns:", "Example #1 : ", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-cmath-cos-function/?ref=ml_lbp"},
{"title": "Python | math.fabs() function - GeeksforGeeks", "h1": ["Python | math.fabs() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["math.fabs()", "Syntax:", "Parameter:", "x:", "Returns:", " Time Complexity:", " Auxiliary Space:", "Code #1: ", "Output:", "Code #2: ", "Output:", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Master JavaScript - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-math-fabs-function/?ref=ml_lbp"},
{"title": "Python | Tensorflow asinh() method - GeeksforGeeks", "h1": ["Python | Tensorflow asinh() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["tensorflow.math", "Syntax", "Parameters", "x", "name", "Return type", "Code #1:", "Output:", "Code #2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-asinh-method/"},
{"title": "Python math library | isclose() method - GeeksforGeeks", "h1": ["Python math library | isclose() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["math.isclose()  the ", "math", "Syntax:", "Parameters: rel_tol: ", "abs_tol: ", "rel_tol", "abs_tol", "Return Value : ", "Without Using any Tolerance", "Output:", "Using Absolute Tolerance", "abs_tol", "False", "True", "Output:", "Using Relative Tolerance", "Output:", "Combining both tolerances", "abs_to", "abs_tol", "True", "abs_tol,", "rel_tol", "rel_tol", "True", "False", "Output:", "False", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-math-library-isclose-method/"},
{"title": "Python | remove() and discard() in Sets - GeeksforGeeks", "h1": ["Python | remove() and discard() in Sets"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Set discard() method", "Python3", "Python3", "Python remove() Method in Set", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example", "Input", "Output", "Input", "Output", "Python Set discard() method", "Output:", "Output:", "Python remove() Method in Set", "Output:", "Output", "Error", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-remove-discard-sets/"},
{"title": "Python - math.acos() function - GeeksforGeeks", "h1": ["Python – math.acos() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Math module", "math.acos()", "-1 to 1", "Syntax:", "Parameter:", "x :", "Returns:", "Example 1:", "Output:", "Example 2:", "Output:", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Master JavaScript - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-math-acos-function/"},
{"title": "Python String endswith() Method - GeeksforGeeks", "h1": ["Python String endswith() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python String endswith() Method Syntax", "Python String endswith() Method Example", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python String endswith() method", "Syntax: ", "Parameters:", "suffix:", "start: ", "end:", "Return: ", "Note:", "Output:", "Output:", "Time complexity: O(n)", "Auxiliary space: O(1)", "Output: ", "Real-World Example where endswith() is widely used", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-string-endswith-method/?ref=lbp"},
{"title": "Python - Elements Maximum till current index in List - GeeksforGeeks", "h1": ["Python – Elements Maximum till current index in List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input ", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using loop", "Output", "Method #2 : Using max() + list comprehension + list slicing", "Output", "Method #3: Using a for loop and an additional list to keep track of maximum elements", "Output", "Time complexity: ", "Auxiliary space: ", "Method#4: Using Recursive method.", "Output", "Method #5: Using the reduce() function from the functools module", "Step by step approach:", "Output", "Method #6: Using numpy:", "Algorithm:", "Output:", "Time Complexity: O(n)", "Space Complexity: O(n)", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-elements-maximum-till-current-index-in-list/"},
{"title": "Python | fsum() function - GeeksforGeeks", "h1": ["Python | fsum() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["fsum()", "Syntax :", "Parameter :", "iterable :", "Use :", "Return Type :", "Time Complexity:", "Auxiliary Space: ", "fsum()", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-fsum-function/"},
{"title": "Python Math Module - GeeksforGeeks", "h1": ["Python Math Module"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What is a Math Module in Python?", "Python", "Constants in Math Module", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "List of Mathematical function in Math Module", "Numeric Functions in Math Module", "Python3", "Python3", "Python3", "Python3", "Logarithmic and Power Functions", "Python3", "Python3", "Python3", "Python3", "Trigonometric and Angular Functions", "Python3", "Python3", "Special Functions", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example: ", "pi", "tau", "1. Euler’s Number ", "math.e", "Syntax:", "Example:", "Output:", "math.pi", "Syntax of Python math PI", "Example 1:", "pi", "Output:", "Example 2: ", "‘ ", "A = pi * r * r'", "Output:", "Tau", "math.tau", "Syntax:", "Example:", "‘", "tau'", "Output:", "math.inf", "-math.inf", "Syntax:", "Example 1:", "Output:", "Example 2: ", "Output:", "math.nan", "Example:", "Output:", "ceil()", "floor()", "Example:", "Output:", "factorial()", " ", "Example:", "Output:", "gcd()", " ", "Example:", "Output:", "fabs()", "Example:", "Output:", "Example: ", "Output:", "pow()", "Example:", "“The value of 3**4 is : ” ", "pow()", " ", "Output:", "log()", "log2(a) ", "log10(a)", "Output:", "sqrt()", "Example:", "sqrt()", "Output:", "sin(), cos(), and tan()", "radians", "Example: ", "Output:", "degrees()", "radians()", "Example:", "Output:", "gamma()", "Example:", " ", "gamma()", " ", "Output:", "isinf()", "Example:", "float('inf'", "math.isinf()", " ", "math.isinf()", " ", "Output:", "isnan()", "Example:", "float('nan')", " ", "math.isnan()", " ", ".", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-math-module/?ref=lbp"},
{"title": "Python | Classify Handwritten Digits with Tensorflow - GeeksforGeeks", "h1": ["Python | Classify Handwritten Digits with Tensorflow"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Classification Projects", "Regression Projects", "Computer Vision Projects", "Natural Language Processing Projects", "Clustering Projects", "Recommender System Project", "Classification Projects", "Regression Projects", "Computer Vision Projects", "Natural Language Processing Projects", "Clustering Projects", "Recommender System Project", "Steps to follow", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Steps to follow", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "saving and testing model ", " ", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Using a Linear Classifier Algorithm with tf.contrib.learn ", "Modules required :", "Steps to follow", "Step 1 :", "Step 2 :", "output :", "Step 3 : ", "Step 4 : ", "display(0)", "output : ", "Step 5 : ", "Step 6 : ", "Output :", "Step 7 : ", "Output :", "Full Code for classifying handwritten ", "Using Deep learning with tf.keras", "Modules required :", "Steps to follow", "Step 1 :", "Step 2 :", "Step 3 :", "Step 4 :", "Step 5 :", "Step 6 :", "saving and testing model ", "saving the model ", "loading the saved model", "prediction using new model", "GATE Data Science and Artificial Intelligence 2025 ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-classifying-handwritten-digits-with-tensorflow/?ref=lbp"},
{"title": "Python | fabs() vs abs() - GeeksforGeeks", "h1": ["Python | fabs() vs abs()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax of abs():", "Syntax of fabs():", "Output: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-fabs-vs-abs/?ref=ml_lbp"},
{"title": "Python | Count overlapping substring in a given string - GeeksforGeeks", "h1": ["Python | Count overlapping substring in a given string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output:", "Output:", "Time complexity:", "Auxiliary Space:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-count-overlapping-substring-in-a-given-string/"},
{"title": "Python | Tensorflow nn.sigmoid() - GeeksforGeeks", "h1": ["Python | Tensorflow nn.sigmoid()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["tensorflow.nn", "Syntax", "Parameters", "x", "name", "Return type", "Code #1:", "Output:", "Code #2: ", "Output:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-nn-sigmoid/?ref=ml_lbp"},
{"title": "Python program for sum of consecutive numbers with overlapping in lists - GeeksforGeeks", "h1": ["Python program for sum of consecutive numbers with overlapping in lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method 1 : Using list comprehension + zip()", "Output", "Method #2 : Using sum() + list comprehension + zip()", "Output", "Method 3 :  using a for loop ", "Output", "time complexity", "auxiliary space", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-for-sum-of-consecutive-numbers-with-overlapping-in-lists/"},
{"title": "Python - tensorflow.math.cos() - GeeksforGeeks", "h1": ["Python – tensorflow.math.cos()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["cos()", "Syntax: ", "Parameters:", "x:", "name(optional): ", "Returns:", "Example 1:", "Output:", "Example 2: ", "Output:", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tensorflow-math-cos/"},
{"title": "Python program to compute arithmetic operation from String - GeeksforGeeks", "h1": ["Python program to compute arithmetic operation from String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method 1 : Using map() + mul + sum() + split()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 2 : Using eval() + replace()", "*", "+", "Output", "Time Complexity: ", "Auxiliary Space: ", "Approach#3: Using ", "split()", ":", "Output", "Approach 4 : Using List Comprehension and reduce() function", "step-by-step approach", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-to-compute-arithmetic-operation-from-string/?ref=next_article"},
{"title": "Python - tensorflow.IndexedSlices.indices Attribute - GeeksforGeeks", "h1": ["Python – tensorflow.IndexedSlices.indices Attribute"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["indices ", "Syntax: ", "Returns: ", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tensorflow-indexedslices-indices-attribute/"},
{"title": "Python - Dictionary values String Length Summation - GeeksforGeeks", "h1": ["Python – Dictionary values String Length Summation"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using sum() + generator expression + len()", "Output : ", "Time complexity: ", "Auxiliary Space: ", "Method #2 : Using map() + len() + sum()", "Output : ", "Method 3 : using a for loop:", "step-by-step approach :", "Output", "Time complexity", "Auxiliary space", "Method #4: Using reduce() from functools module", "Step-by-Step Approach:", "Output", "Time complexity", "Auxiliary space", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-dictionary-values-string-length-summation/"},
{"title": "Python - Cross tuple summation grouping - GeeksforGeeks", "h1": ["Python – Cross tuple summation grouping"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Input", "Output", "Method #1: Using loop", "Output : ", "Time complexity:", "Auxiliary space: ", "Method #2: Using groupby() + sum() + zip() + list comprehension", "Output : ", "Method 3: Using defaultdict", "defaultdict ", "0", "Output", "Time complexity: ", "Auxiliary space: ", "Method #3: Using defaultdict and list comprehension", "Output", "time complexity ", "auxiliary space ", "Method 5:  using the Pandas library.", " Time complexity: ", "Auxiliary space", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-cross-tuple-summation-grouping/"},
{"title": "Python - String Matrix Concatenation - GeeksforGeeks", "h1": ["Python – String Matrix Concatenation"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension + join()", "Output", "Method #2: Using chain() + join()", "Output", "Method #3 : Using  extend() and join() methods", "Output", "Method #4 : Using  reduce()", "Output", "Time complexity: O(n)", "Auxiliary Space: O(1)", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-string-matrix-concatenation/?ref=ml_lbp"},
{"title": "Python - tensorflow.math.negative() - GeeksforGeeks", "h1": ["Python – tensorflow.math.negative()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["negative()", "Syntax: ", "Parameter:", "x:", "name(optional): ", "Returns:", "Example 1:", "Output:", "Example 2: ", "Output:", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tensorflow-math-negative/"},
{"title": "Python - Dictionary value lists lengths product - GeeksforGeeks", "h1": ["Python – Dictionary value lists lengths product"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Method #1 : Using loop + len()", "Python3", "Method #2 : Using map() + lambda + reduce() ", "Python3", "Method #3: Using list comprehension and reduce()", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using loop + len()", "Output", "Time complexity: ", "Auxiliary space: ", "Method #2 : Using map() + lambda + reduce() ", "Output", "Time complexity: ", "Auxiliary space: ", "Method #3: Using list comprehension and reduce()", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-dictionary-value-lists-lengths-product/?ref=next_article"},
{"title": "Python - Check if all values are K in dictionary - GeeksforGeeks", "h1": ["Python – Check if all values are K in dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using all() + dictionary comprehension", "Output", "Time complexity: ", "Auxiliary space:", "Method #2: Using loop", "Output", "Time complexity: ", "Auxiliary space: ", "Method #3 : Using values() and len() method", "Output", "Method #4: Using set() and len()", "Output", "Time complexity: O(n)", " ", "Auxiliary Space ", "Method #5: Using collections.counter():", "Output", "Time complexity: O(n)", "Auxiliary Space: O(n) ", "Method #6: Using reduce() ", "Output", "Time complexity: O(n)", "Auxiliary Space: O(n) ", "Method #7 : Using count() method", "Approach", "Output", "Time Complexity : O(N)", "Auxiliary Space : O(1)", "Method #8: Using map() and all() functions", "Output", "Time Complexity: O(N)", "Auxiliary Space: O(N)", "Method#9: Using Recursive method.", "Output", "Method #10: Using list comprehension and len() function", "True/False", "K", "yes", "K", "True/False", "K", "yes", "K", "Output", "Time complexity:", "Auxiliary space:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-check-if-all-values-are-k-in-dictionary/?ref=previous_article"},
{"title": "Python String Concatenation - GeeksforGeeks", "h1": ["Python String Concatenation"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "How to Concatenate Strings in Python", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" + operator", "str.join() ", ".", "“1”", " [ ]", "how to concatenate strings in Python ", "Example", "Input", "Output", "Explanation:", "combining two ", "strings", ",", "Note:", "Example: ", "+", "var1", "var2 ", "var3", "Output", "list size", "Example: ", "var1 ", "var2", "var3.", "Output", "%", "Example: ", "Output", "Explanation: ", "Example:", "Output", "Explanation", ",", "Output", "Example:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-string-concatenation/"},
{"title": "Python - Check if all values are K in dictionary - GeeksforGeeks", "h1": ["Python – Check if all values are K in dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using all() + dictionary comprehension", "Output", "Time complexity: ", "Auxiliary space:", "Method #2: Using loop", "Output", "Time complexity: ", "Auxiliary space: ", "Method #3 : Using values() and len() method", "Output", "Method #4: Using set() and len()", "Output", "Time complexity: O(n)", " ", "Auxiliary Space ", "Method #5: Using collections.counter():", "Output", "Time complexity: O(n)", "Auxiliary Space: O(n) ", "Method #6: Using reduce() ", "Output", "Time complexity: O(n)", "Auxiliary Space: O(n) ", "Method #7 : Using count() method", "Approach", "Output", "Time Complexity : O(N)", "Auxiliary Space : O(1)", "Method #8: Using map() and all() functions", "Output", "Time Complexity: O(N)", "Auxiliary Space: O(N)", "Method#9: Using Recursive method.", "Output", "Method #10: Using list comprehension and len() function", "True/False", "K", "yes", "K", "True/False", "K", "yes", "K", "Output", "Time complexity:", "Auxiliary space:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-check-if-all-values-are-k-in-dictionary/?ref=ml_lbp"},
{"title": "Python - Index Directory of Elements - GeeksforGeeks", "h1": ["Python – Index Directory of Elements"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input:", "Output:", "Explanation:", "Input: ", "Output:", "Explanation:", "Method #1: ", "Output:", "Method #2 : ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-index-directory-of-elements/?ref=ml_lbp"},
{"title": "Python | Pandas Series.ravel() - GeeksforGeeks", "h1": ["Python | Pandas Series.ravel()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": [" Series.ravel()", "Syntax:", "Parameter : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-series-ravel/"},
{"title": "Python | Difference in keys of two dictionaries - GeeksforGeeks", "h1": ["Python | Difference in keys of two dictionaries"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Difference in keys of two dictionaries", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example", "Input: ", "Output: ", "Explanation:", "Output", "Time complexity:", "Auxiliary space:", "Output", "Time complexity:", "Auxiliary space:", "Output", "Time complexity:", "Auxiliary space:", "Output", "Time complexity:", "Auxiliary space:", "Finding Keys Difference Using re module", "Output", "Time complexity:", "Auxiliary space:", "Output", "Time complexity:", "Auxiliary space:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-difference-in-keys-of-two-dictionaries/"},
{"title": "Python | Unique dictionary filter in list - GeeksforGeeks", "h1": ["Python | Unique dictionary filter in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method : Using map() + set() + items() + sorted() + tuple()", "Output", "Method #2 : Using list comprehension + dict()", "Output", "Time complexity: O(n)", "Auxiliary Space: O(n)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-unique-dictionary-filter-in-list/?ref=next_article"},
{"title": "Python - Find the Common Keys from two Dictionaries - GeeksforGeeks", "h1": ["Python – Find the Common Keys from two Dictionaries"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["m", "n ", "Output", "&", "Output", "Output", "Output", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "GATE Data Science and Artificial Intelligence 2025 "], "link": "https://www.geeksforgeeks.org/python-find-the-common-keys-from-two-dictionaries/"},
{"title": "Python: Check if a directory is empty - GeeksforGeeks", "h1": ["Python: Check if a directory is empty"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["os module", "OS module", "Syntax:", "Parameters:", "path (optional):", "Return Type:", "Example #1:", "Output:", "Example #2:", "Output:", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-check-if-a-directory-is-empty/"},
{"title": "Python - Extracting Kth Key in Dictionary - GeeksforGeeks", "h1": ["Python – Extracting Kth Key in Dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list() + keys()", "Output : ", "Method #2 : Using next() + iter()", "Output : ", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-extracting-kth-key-in-dictionary/"},
{"title": "Python program to sort Dictionary by Key Lengths - GeeksforGeeks", "h1": ["Python program to sort Dictionary by Key Lengths"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using len() + sort() + dictionary comprehension + items()", "Output:", "Time complexity:", "Space complexity: ", "Method #2 : Using sorted() + lambda function + items() + dictionary comprehension", "Output:", "Method #5: Using zip() + sorted() + dictionary constructor", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-sort-dictionary-by-key-lengths/"},
{"title": "Python: Check if a File or Directory Exists - GeeksforGeeks", "h1": ["Python: Check if a File or Directory Exists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Method 1: Check if a File or Directory Exists in Python using os.path.exists()", "Python3", "Python3", "Method 3: Check if a File or Directory Exists in Python using os.path.isdir()", "Python3", "Python3", "Method 4: Check if a File or Directory Exists in Python using pathlib.Path.exists()", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["how to check if a Directory Exists without exceptions", "OS module", "os.path", "Syntax:", "Parameter:", "path:", "Return Type:", "Example:", "Output", "Syntax:", "Parameter:", "path:", "Return Type:", "Example:", "Output:", "Syntax:", "Parameter:", "path:", "Return Type:", "Example 1:", "Output:", "Example 2:", "Output:", "Pathlib module", "pure paths", "concrete paths", "Syntax:", "Parameter:", "path:", "Return Type:", "Example:", "Output:", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-check-if-a-file-or-directory-exists-2/"},
{"title": "Python - Value list lengths - GeeksforGeeks", "h1": ["Python – Value list lengths"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension + len()", "Time Complexity: ", "Auxiliary Space: ", "Method #2 : Using map + lambda + len()", "Time complexity:", "Auxiliary Space:", "Here is an approach to solve this problem using reduce():", "Output", "Method #3: Using min()and for loop:", "Output", "time complexity: O(n)", "space complexity :O(n)", "Method #4:Using enumeration", "Output", "Time complexity: O(n)", "Auxiliary Space: O(n)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-value-list-lengths/"},
{"title": "Python - How to Check if a file or directory exists - GeeksforGeeks", "h1": ["Python – How to Check if a file or directory exists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Using os.path.exists() to Check if a File or Directory Exists", "Python3", "Using os.path.isfile() Method to Check if the File Exists", "Python3", "Using os.path.isdir() Method to Check if Directory Exists", "Python3", "Python3", "Using pathlib.Path.exists() to Check if the File or Directory Exists", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Parameter:", "path:", "Return:", "Example:", "Output:", "os.path.isfile()", "Syntax:", "Parameter:", "path:", "Return Type:", "Example: ", "Output:", "os.path.isdir()", "Syntax:", "Parameter:", "path:", "Return Type:", "Example:", "Output:", "Example: ", "Output:", "pathlib module in Python", " ", "pathlib module", "pure paths", "concrete paths", "pathlib.Path.exists()", "Syntax:", "Parameter:", "path:", "Return Type:", "Example:", "Output:", "Master C Programming with Data Structures ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-check-if-a-file-or-directory-exists/?ref=ml_lbp"},
{"title": "Python - How to Check if a file or directory exists - GeeksforGeeks", "h1": ["Python – How to Check if a file or directory exists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Using os.path.exists() to Check if a File or Directory Exists", "Python3", "Using os.path.isfile() Method to Check if the File Exists", "Python3", "Using os.path.isdir() Method to Check if Directory Exists", "Python3", "Python3", "Using pathlib.Path.exists() to Check if the File or Directory Exists", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Parameter:", "path:", "Return:", "Example:", "Output:", "os.path.isfile()", "Syntax:", "Parameter:", "path:", "Return Type:", "Example: ", "Output:", "os.path.isdir()", "Syntax:", "Parameter:", "path:", "Return Type:", "Example:", "Output:", "Example: ", "Output:", "pathlib module in Python", " ", "pathlib module", "pure paths", "concrete paths", "pathlib.Path.exists()", "Syntax:", "Parameter:", "path:", "Return Type:", "Example:", "Output:", "Master C Programming with Data Structures ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-check-if-a-file-or-directory-exists/"},
{"title": "Python - Sort dictionaries list by Key's Value list index - GeeksforGeeks", "h1": ["Python – Sort dictionaries list by Key’s Value list index"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using sorted() + lambda", "idx", "2", "sorted() ", "test_list", "idx", "K", "idx", "res", "print()", "res", "Output", "Time complexity:", "Auxiliary space: ", "Method #2 : Using sorted() + lambda (Additional parameter in case of tie)", "STEP BY STEP ALGORITHM:", "test_list ", "Gfg ", "K", "Gfg", "Gfg ", "2", "2", "Gfg ", "K2 ", "best", "sorted() ", "res", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3: Using itemgetter from operator module", "itemgetter", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #4: Using a list comprehension and the built-in sorted() function", "Output", "Time complexity: ", "Auxiliary space: ", "Method #5: Using a loop to append empty dictionaries to the list", "Time complexity: ", "Auxiliary space:", "Method 6: Using heapq.nsmallest()", "step-by-step approach for the program:", "Output", "Method #7: Using functools.cmp_to_key() and custom comparison function", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-sort-dictionaries-list-by-keys-value-list-index/?ref=ml_lbp"},
{"title": "Python | Create Archives and Find Files by Name - GeeksforGeeks", "h1": ["Python | Create Archives and Find Files by Name"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["shutil ", "make_archive()", "unpack_archive()", "Code #1 :", "Output : ", "Code #2 : ", "Output : ", "os.walk()", "Code #3 : Function that finds a specific filename and prints out the full path of all matches.", "How it works ? ", "Code #4 : Function that prints out all of the files that have a recent modification time", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-create-archives-and-find-files-by-name/?ref=ml_lbp"},
{"title": "Python - Split a String by Custom Lengths - GeeksforGeeks", "h1": ["Python – Split a String by Custom Lengths"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using slicing + loop", "Output", "Method #2 : Using join() + list comprehension + next()", "Output", "Time Complexity: ", "Space Complexity: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-split-a-string-by-custom-lengths/"},
{"title": "Python | Product of Prefix in list - GeeksforGeeks", "h1": ["Python | Product of Prefix in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method 1: Using list comprehension + list slicing", "Output : ", "Method 2: Using numpy", "Note", "Output : ", "Method 3: Use a loop and create an output list to store the prefix products. ", "steps", "Output", "Method 4 :  using the accumulate function from the itertools module. ", "step-by-step approach:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-product-of-prefix-in-list/"},
{"title": "Python | os.path.exists() method - GeeksforGeeks", "h1": ["Python | os.path.exists() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "os.path.exists() Syntax in Python", "Check if a File Exists in Python Examples", "Python3", "Python3", "FAQ’s ", "What kind of Experience do you want to share?"], "strong": ["os.path.exists()", "Syntax:", "Parameter:", "path", "Return Type:", "Output", "Output:", "Note:", "os.path.exists()", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-path-exists-method/"},
{"title": "Python: Check if a File or Directory Exists - GeeksforGeeks", "h1": ["Python: Check if a File or Directory Exists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Method 1: Check if a File or Directory Exists in Python using os.path.exists()", "Python3", "Python3", "Method 3: Check if a File or Directory Exists in Python using os.path.isdir()", "Python3", "Python3", "Method 4: Check if a File or Directory Exists in Python using pathlib.Path.exists()", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["how to check if a Directory Exists without exceptions", "OS module", "os.path", "Syntax:", "Parameter:", "path:", "Return Type:", "Example:", "Output", "Syntax:", "Parameter:", "path:", "Return Type:", "Example:", "Output:", "Syntax:", "Parameter:", "path:", "Return Type:", "Example 1:", "Output:", "Example 2:", "Output:", "Pathlib module", "pure paths", "concrete paths", "Syntax:", "Parameter:", "path:", "Return Type:", "Example:", "Output:", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-check-if-a-file-or-directory-exists-2/?ref=ml_lbp"},
{"title": "Python - Elements Lengths in List - GeeksforGeeks", "h1": ["Python – Elements Lengths in List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loop", "Output : ", "Method #2 : Using list comprehension + len()", "Output : ", "Time Complexity:", "Auxiliary Space:", "Output", "Method #4 : Using numpy:", "Algorithm:", "Output:", "Time complexity:", "Auxiliary Space: ", "Method #5: Using map() function", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-elements-lengths-in-list/"},
{"title": "Python - Get number of characters, words, spaces and lines in a file - GeeksforGeeks", "h1": ["Python – Get number of characters, words, spaces and lines in a file"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Get the number of characters, words, spaces, and lines in a file", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Count the Number of Lines, Words, and Characters using the Native Method", "Output:", "Time complexity: ", "Space complexity:", "Find the number of characters in a file using Python", "Output:", "Time complexity:", "Space complexity:", "Master C Programming with Data Structures ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-get-number-of-characters-words-spaces-and-lines-in-a-file/?ref=ml_lbp"},
{"title": "Python | os.path.splitext() method - GeeksforGeeks", "h1": ["Python | os.path.splitext() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Code:", "Output:", "Reference:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-path-splitext-method/"},
{"title": "Python - Append items at beginning of dictionary - GeeksforGeeks", "h1": ["Python – Append items at beginning of dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using update()", "Output", "Method #2 : Using ** operator", "Output", "Method #3 : Using for loop", "Approach", "Output", "Time Complexity : O(N)", "Auxiliary Space : O(N) ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-append-items-at-beginning-of-dictionary/?ref=next_article"},
{"title": "Python | Row lengths in Matrix - GeeksforGeeks", "h1": ["Python | Row lengths in Matrix"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using max() + map() + sum() + list comprehension", "Output : ", "Method #2 : Using sum() + filter() + zip_longest()", "Output : ", "Method #3: Using for loop and append()", "Output", "Time Complexity: ", "Auxiliary Space:", "Method #4: Using List Comprehension and len()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-row-lengths-in-matrix/"},
{"title": "Python | os.path.getatime() method - GeeksforGeeks", "h1": ["Python | os.path.getatime() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Note:", "Code #1:", "Output:", "Code #2:", "Output:", "Reference:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-path-getatime-method/"},
{"title": "Python - Conditional Prefix in List - GeeksforGeeks", "h1": ["Python – Conditional Prefix in List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1: Using loop", "Output", "Time complexity: ", "Auxiliary space: ", "Method #2: Using list comprehension", "Here are the steps involved:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3: Using map and lambda functions", "Steps:", "Output", "Time complexity: ", "Auxiliary space: ", "Method #4: Using a for loop and ternary operator", "Output", "Time complexity:", "Auxiliary space: ", "Method #5: Using a dictionary", "Output", "Time complexity: ", "Auxiliary space: ", "Method 6:  By adding conditional prefix to the elements in a list is-", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-conditional-prefix-in-list/"},
{"title": "Python - Filter list elements starting with given Prefix - GeeksforGeeks", "h1": ["Python – Filter list elements starting with given Prefix"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension + startswith()", "Output : ", "Method #2 : Using filter() + lambda + startswith()", "Output : ", "Method #3 : Without using startswith() ", "Output", "Method #4 : Using find() method", "Output", "Method #5 : Using re.findall() and re.compile()", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-filter-list-elements-starting-with-given-prefix/"},
{"title": "Python | Valid Ranges Product - GeeksforGeeks", "h1": ["Python | Valid Ranges Product"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loops", "Output : ", "Method #2 : Using itertools.groupby() + loop", "Output : ", "Output", "Time complexity: O(n)", "Auxiliary Space: O(m)", "Method #4 :Using list comprehension and reduce():", "Output", "The time complexity: O(n)", "The space complexity: O(n),", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-valid-ranges-product/?ref=next_article"},
{"title": "Python | os.path.isdir() method - GeeksforGeeks", "h1": ["Python | os.path.isdir() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Code #1:", "Output:", "Code #2:", "Output:", "Reference:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-path-isdir-method/?ref=lbp"},
{"title": "Python - Custom Split Comma Separated Words - GeeksforGeeks", "h1": ["Python – Custom Split Comma Separated Words"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using replace()", "Output", "Time complexity: ", "Auxiliary space:", "Method #2 : Using re.findall()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 3 –", "Output", "Time complexity: ", "Auxiliary space:", "Method #4: Using list comprehension", "Output", "Time complexity:", "Auxiliary space:", "Method #5: Using the string.split() method", "Output", "Time complexity: ", "Auxiliary space: ", "Method #6: Using the re.split() method from the re module", "re", "module", "test_str", "(“,\\s*”).", "re.split() ", "Output", "Time complexity:", "Auxiliary space: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-custom-split-comma-separated-words/"},
{"title": "Python | os.path.isfile() method - GeeksforGeeks", "h1": ["Python | os.path.isfile() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Code #1:", "Output:", "Reference:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-path-isfile-method/?ref=lbp"},
{"title": "Python | os.path.getatime() method - GeeksforGeeks", "h1": ["Python | os.path.getatime() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Note:", "Code #1:", "Output:", "Code #2:", "Output:", "Reference:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-path-getatime-method/?ref=lbp"},
{"title": "Python | os.path.size() method - GeeksforGeeks", "h1": ["Python | os.path.size() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python os.path.getsize() method Syntax", "os.path.getsize() method in Python", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["OS module", "the ", "os.path", "os.path.getsize()", "raises", "OSError", "Syntax:", "Parameter:", "path", "Return Type:", "Output", "Output", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-path-size-method/?ref=lbp"},
{"title": "Python | os.path.exists() method - GeeksforGeeks", "h1": ["Python | os.path.exists() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "os.path.exists() Syntax in Python", "Check if a File Exists in Python Examples", "Python3", "Python3", "FAQ’s ", "What kind of Experience do you want to share?"], "strong": ["os.path.exists()", "Syntax:", "Parameter:", "path", "Return Type:", "Output", "Output:", "Note:", "os.path.exists()", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-path-exists-method/?ref=lbp"},
{"title": "Python: os.path.abspath() method with example - GeeksforGeeks", "h1": ["Python: os.path.abspath() method with example"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["OS module ", "os.path", "Syntax:", "Parameter: ", "Path:", "Return Type:", "Example 1:", "Output:", "Example 2:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-path-abspath-method-with-example/?ref=lbp"},
{"title": "Python | os.path.islink() method - GeeksforGeeks", "h1": ["Python | os.path.islink() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Note:", "Create a soft link or symbolic link", "Code:", "Output:", "Reference:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-path-islink-method/?ref=lbp"},
{"title": "Python | os.path.dirname() method - GeeksforGeeks", "h1": ["Python | os.path.dirname() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Code:", "Output:", "Reference:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-path-dirname-method/?ref=lbp"},
{"title": "Python - Conditional Join Dictionary List - GeeksforGeeks", "h1": ["Python – Conditional Join Dictionary List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input :", "Output :", "Explanation :", "Input : ", "Output :", "Explanation :", "Method 1: Using ", "next()", " + ", "update()", "Output", "Time Complexity: O(n*m),", "Auxiliary Space: O(1)", "Output", "Method 3:Using list comprehension and dictionary comprehension", "Output", "Method 4: Using the set intersection of common keys of each dictionary in both lists. ", "Step-by-step approach:", "Output", "Time complexity: ", "Auxiliary space: ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-conditional-join-dictionary-list/"},
{"title": "Python | Find the list elements starting with specific letter - GeeksforGeeks", "h1": ["Python | Find the list elements starting with specific letter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using list comprehension + lower()", "Output", "Method #2: Using list comprehension + startswith() + lower()", "Output", "Time complexity: ", "Auxiliary Space: ", "Method #3 : Using find() and lower() methods", "Output", "Method #4 : Using filter(),lambda function and lower() methods", "Output", "Method #5: Using  re (regular expression)", "Output", "Method #6: Using numpy.array() and numpy.char.startswith()", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-find-the-list-elements-starting-with-specific-letter/"},
{"title": "Python | os.path.splitdrive() method - GeeksforGeeks", "h1": ["Python | os.path.splitdrive() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["For example:", "Code #1:", "Output:", "Code #2:", "Output:", "Reference:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-path-splitdrive-method/?ref=previous_article"},
{"title": "Python | os.path.basename() method - GeeksforGeeks", "h1": ["Python | os.path.basename() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["OS module", "os.path", "OS module", "os.path.basename()", "os.path.split()", "os.path.basename()", "Syntax:", "Parameter:", "path", "Return Type:", "Code:", "os.path.basename()", "Output:", "Reference:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-path-basename-method/?ref=next_article"},
{"title": "Python | os.path.getctime() method - GeeksforGeeks", "h1": ["Python | os.path.getctime() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Note:", "Code #1:", "Output:", "Code #2:", "Output:", "Reference:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-path-getctime-method/?ref=previous_article"},
{"title": "Python - Length Conditional Concatenation - GeeksforGeeks", "h1": ["Python – Length Conditional Concatenation"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1: Using loop + len():", "Output", "Method #2 : Using join() + filter() + lambda + len():", "Output", "Method#3: Using list comprehension + join():", "join", "Output", "Time Complexity: ", "Space Complexity: ", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-length-conditional-concatenation/"},
{"title": "Python | Add comma between numbers - GeeksforGeeks", "h1": ["Python | Add comma between numbers"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using str.format()", "Output", "Method #2 : Using format()", "Output", "Method #3: Using re.sub()", "Output", "Time Complexity and Auxiliary space of this approach is O(n)", "Method#4: Using f-string", "Output", "Time Complexity: O(n)", "Auxiliary space : O(1)", "Method#5: Using insert_commas():", "Output", "Time Complexity : O(n)", "Auxiliary space : O(n)", "Method 6 : use recursion. ", " step-by-step approach:", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-add-comma-between-numbers/"},
{"title": "Python | os.path.splitext() method - GeeksforGeeks", "h1": ["Python | os.path.splitext() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Code:", "Output:", "Reference:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-path-splitext-method/?ref=lbp"},
{"title": "Python - Extract elements from Ranges in List - GeeksforGeeks", "h1": ["Python – Extract elements from Ranges in List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using loop + list slicing ", "Output", "me Complexity:", "Auxiliary Space: ", "Method #2: Using list comprehension", "Output", "Method 3 : Using map() and lambda function", "Output", "Time Complexity: ", "Auxiliary Space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-extract-elements-from-ranges-in-list/"},
{"title": "Python | Convert String ranges to list - GeeksforGeeks", "h1": ["Python | Convert String ranges to list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using sum() + split() + list comprehension + enumerate()", "Output : ", "Time complexity:", "Auxiliary space:", "Method #2 : Using map() + split() + lambda", "Output : ", "Method #3: Using re", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #4: Using split(),find() methods and for loops", "Output", "Time Complexity : O(N)", "Auxiliary Space : O(N)", "Method #5: Using a for loop and string manipulation.", "res", "test_str", " ‘-‘ ", "-‘", "int()", "res", "start+1", "res", "-‘ ", "int()", "res", "res", "Output", "Time complexity: ", "Auxiliary space: ", "Method #6: Using the itertools module", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-convert-string-ranges-to-list/"},
{"title": "Python program to input a comma separated string - GeeksforGeeks", "h1": ["Python program to input a comma separated string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Using List comprehension and split()", "Using map() and split()", "Method 1:", "Example:", "Output:", "Method 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-program-to-input-a-comma-separated-string/"},
{"title": "Python | os.path.splitdrive() method - GeeksforGeeks", "h1": ["Python | os.path.splitdrive() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["For example:", "Code #1:", "Output:", "Code #2:", "Output:", "Reference:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-path-splitdrive-method/?ref=lbp"},
{"title": "Python - Consecutive Ranges of K greater than N - GeeksforGeeks", "h1": ["Python – Consecutive Ranges of K greater than N"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input :", "Output :", "Explanation :", "Input :", "Output :", "Explanation :", "Method #1: Using ", "loop", "Output:", "Method #2 : Using ", "enumerate()", " + ", "zip()", " + ", "list slicing", " + ", "list comprehension", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-consecutive-ranges-of-k-greater-than-n/"},
{"title": "Python | Get a set of places according to search query using Google Places API - GeeksforGeeks", "h1": ["Python | Get a set of places according to search query using Google Places API"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Google Places API Web Service ", "Output :", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-get-set-places-according-search-query-using-google-places-api/?ref=ml_lbp"},
{"title": "Python | Find smallest element greater than K - GeeksforGeeks", "h1": ["Python | Find smallest element greater than K"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Naive Method ", "Output", "Time complexity:", "Auxiliary space:", "Method #2 : Using min() + generator expression ", "Output", "Time complexity:", "Auxiliary space: ", "Method #3 : min() + filter()", "Output", "Time complexity: ", "Auxiliary space: ", "Method #4 : Using sort() + bisect_right()", "Output", "Method #5 : Using sort() and for loop", "Output", "Method #6 : Using heapq module", "Output", "Time complexity:", "Auxiliary space:", "Method#7:Using recursion", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(1)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-find-smallest-element-greater-than-k/"},
{"title": "Python - Get Matrix Mean - GeeksforGeeks", "h1": ["Python – Get Matrix Mean"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using list comprehension + sum() + len() + zip()", "Output", "Method #2 : Using mean() + zip() + list comprehension", "Output", "Method #3 : Using extend() and mean() method of statistics module", "Output", "Method #4: Using numpy", "Output", "Time complexity: O(n^2). ", "Auxilairy space: O(n^2)", "Method 5: Using nested loops", "Output", "Time complexity: O(n^2)", "Auxiliary space: O(1)", "Method #7: Using the reduce() function from the functools module", "Approach:", "Output", "Time complexity: O(n^2)", "Auxiliary space: O(1)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-get-matrix-mean/?ref=next_article"},
{"title": "Python | os.path.split() method - GeeksforGeeks", "h1": ["Python | os.path.split() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "os.path.split() Method Syntax in Python ", "Python os.path.split() Method Examples ", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["os.path.split()", "‘file.txt’", "For example:", "path", "head", "tail", "Syntax:", "Parameter:", " ", "Return Type:", "Split Path Name Using os.path.split() Function in Python", "os.path.split() ", "‘/home/User/Desktop/file.txt", "/home/User/Desktop/", "file.txt", "Output:", "Split Path Name If Path is Empty Using os.path.split()", "os.path.split()", "os.path.split()", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-path-split-method/"},
{"title": "Python | os.path.sameopenfile() method - GeeksforGeeks", "h1": ["Python | os.path.sameopenfile() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["OS module", "os.path", "OS module", "os.path.sameopenfile()", "For Example:", "Syntax:", "Parameter:", "fd1", "fd2", "Return Type:", "Code :", "Output:", "Reference:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-path-sameopenfile-method/?ref=lbp"},
{"title": "Python | os.path.splitdrive() method - GeeksforGeeks", "h1": ["Python | os.path.splitdrive() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["For example:", "Code #1:", "Output:", "Code #2:", "Output:", "Reference:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-path-splitdrive-method/?ref=next_article"},
{"title": "Python - Sort Matrix by Number of elements greater than its previous element - GeeksforGeeks", "h1": ["Python – Sort Matrix by Number of elements greater than its previous element"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using sort() + len() ", "Output:", "Method #2 : Using sorted() + len() + lambda", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-sort-matrix-by-number-of-elements-greater-than-its-previous-element/"},
{"title": "Python - Storing Elements Greater than K as Dictionary - GeeksforGeeks", "h1": ["Python – Storing Elements Greater than K as Dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loop", "Output : ", "Method #2 : Using dictionary comprehension", "Output : ", "Method #3 : Using filter()", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-storing-elements-greater-than-k-as-dictionary/"},
{"title": "Python | os.path.splitext() method - GeeksforGeeks", "h1": ["Python | os.path.splitext() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Code:", "Output:", "Reference:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-path-splitext-method/?ref=next_article"},
{"title": "Python 3 - input() function - GeeksforGeeks", "h1": ["Python 3 – input() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python input() Function Syntax", "Python3", "input() Function in Python Examples", "Python3", "Python", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" the input() ", "Syntax:", "Parameter:", "Prompt:", "Return: ", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Also, check:", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-3-input-function/?ref=ml_lbp"},
{"title": "Python - Count of Words with specific letter - GeeksforGeeks", "h1": ["Python – Count of Words with specific letter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using list comprehension + len() + split()", "Output", "Method #2 : Using filter() + lambda + len() + split()", "Output", "Method #3 : Using len() + for loop", "Output", "Method #4 : Using split() and find()", "Output", "Method #5 : Using split(),replace() and len() methods", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #6: Using Counter() function", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method #7: Using operator.countOf() method", "Output", "Time Complexity: O(N)", "Auxiliary Space : O(N)", "Method #8 : Using split() and set(): ", "Output", "Time Complexity: O(N)", "Space Complexity : O(1)", "Method#9: Using Recursion method.", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(1)", "Method #10 : Using re module", "Output", "Method #11 : Using operator.contains() method", "Approach ", "operator.contains()", "Output", "Time Complexity : O(N)", "Auxiliary Space : O(1)", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-count-of-words-with-specific-letter/"},
{"title": "Python - Move Word to Rear end - GeeksforGeeks", "h1": ["Python – Move Word to Rear end"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using replace() + “+” operator,", "Output", "Time Complexity: O(n),", "Space Complexity: O(n)", "Method #2 : Using string slicing and find()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3 : Using split(), remove(), append() and join() methods", "Output", "Method #4:  Using the re module ", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method #5: Using String concatenation:", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method #6: Using a list comprehension", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method #7: Using regular expressions and re.sub()", "re.sub()", "\\b(best)\\b", "best", "Output", "Time complexity: ", "Auxiliary space: ", "Method # 8: Using string.partition() and string.replace()", "Output", "Time complexity: ", "Auxiliary space: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-move-word-to-rear-end/?ref=next_article"},
{"title": "Python | os.path.basename() method - GeeksforGeeks", "h1": ["Python | os.path.basename() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["OS module", "os.path", "OS module", "os.path.basename()", "os.path.split()", "os.path.basename()", "Syntax:", "Parameter:", "path", "Return Type:", "Code:", "os.path.basename()", "Output:", "Reference:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-path-basename-method/?ref=lbp"},
{"title": "Python | os.path.relpath() method - GeeksforGeeks", "h1": ["Python | os.path.relpath() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Note:", "Code :", "Output:", "Reference:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-path-relpath-method/?ref=lbp"},
{"title": "Python | os.path.join() method - GeeksforGeeks", "h1": ["Python | os.path.join() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python os.path.join() Method Syntax", "os.path.join() method in Python", "os.path.join() Function Examples and Uses Cases", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Parameter:", "path", "*path", "Note:", "Return Type:", "os.path.join()", "Output", "example.txt", "Output:", "Output", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-path-join-method/?ref=lbp"},
{"title": "Python | os.path.ismount() method - GeeksforGeeks", "h1": ["Python | os.path.ismount() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "os.path.ismount() Syntax in Python", "Python os.path.ismount() Method Example ", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["os.path", "OS Module", "os.path.ismount()", "Syntax:", "Parameter:", "path", "Return Type:", "df", " For example: ", "Output", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Test Series for Service-Based Companies ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-os-path-ismount-method/?ref=lbp"},
{"title": "Python | Slice String from Tuple ranges - GeeksforGeeks", "h1": ["Python | Slice String from Tuple ranges"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using loop + list slicing: ", "Output : ", "Time Complexity: ", "Auxiliary Space: ", "Method #2: Using join() + any() + generator expression: ", "Output : ", "Time Complexity: ", "Auxiliary Space: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-slice-string-from-tuple-ranges/"},
{"title": "Python 3 Tutorial - Learn Python 3", "h1": ["Python 3 Tutorial"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Learn the basics of ", "Python 3 ", "programming, with its key features, and provide you with hands-on examples to help you become proficient in Python 3 Language. ", "Whether you are a beginner or an experienced programmer, this tutorial will help build a solid foundation in Python programming, empowering you to create impressive applications and projects.", "Chapters", "Tutorial Overview:", "Reason to Learn Python 3", "Projects Included", "Reviews", "FAQ's"], "strong": [], "link": "https://www.geeksforgeeks.org/python3-tutorial/"},
{"title": "Python | Find the closest Key in dictionary - GeeksforGeeks", "h1": ["Python | Find the closest Key in dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension + keys() + lambda", "Output : ", "Method #2 : Using bisect_left() + OrderedDict()", "Output : ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-find-the-closest-key-in-dictionary/"},
{"title": "Python | Move or Copy Files and Directories - GeeksforGeeks", "h1": ["Python | Move or Copy Files and Directories"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["shutil module", "Code #1 : Using shutil module", "Code #2 : ", "Code #3 : ", "Code #4 : ", "How it works? ", "shutil", "copy2()", "shutil.copytree()", "Code #5 : Example", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-move-or-copy-files-and-directories/?ref=ml_lbp"},
{"title": "Python | os.path.ismount() method - GeeksforGeeks", "h1": ["Python | os.path.ismount() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "os.path.ismount() Syntax in Python", "Python os.path.ismount() Method Example ", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["os.path", "OS Module", "os.path.ismount()", "Syntax:", "Parameter:", "path", "Return Type:", "df", " For example: ", "Output", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Test Series for Service-Based Companies ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-os-path-ismount-method/?ref=previous_article"},
{"title": "Python - Append items at beginning of dictionary - GeeksforGeeks", "h1": ["Python – Append items at beginning of dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using update()", "Output", "Method #2 : Using ** operator", "Output", "Method #3 : Using for loop", "Approach", "Output", "Time Complexity : O(N)", "Auxiliary Space : O(N) ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-append-items-at-beginning-of-dictionary/?ref=ml_lbp"},
{"title": "Python | Alternate element summation in list - GeeksforGeeks", "h1": ["Python | Alternate element summation in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension + list slicing + sum()", "Output : ", "Time complexity:", "Auxiliary space:", "Method #2 : Using loop", "Output : ", "Time complexity:", "Auxiliary space: ", "Method #3 : ", "Output", "Time complexity:", "Auxiliary space:", "Method 4 :  use numpy library.", " steps:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-alternate-element-summation-in-list/?ref=ml_lbp"},
{"title": "Python - Divide date range to N equal duration - GeeksforGeeks", "h1": ["Python – Divide date range to N equal duration"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input :", "Output :", "Explanation :", "Input :", "Output :", "Explanation :", "Method #1: Using loop", "Output:", "Method #2: Using ", "generator function", "Output:", "Method #3: Using list comprehension", "Output", "Time complexity: ", "Auxiliary space: ", "Method #4: Using numpy.linspace()", "Method #5: Using pandas.date_range()", "step-by-step approach:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-divide-date-range-to-n-equal-duration/"},
{"title": "Python - Summation of Custom nested keys in Dictionary - GeeksforGeeks", "h1": ["Python – Summation of Custom nested keys in Dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1: loop", "Output", "Time complexity: ", "Auxiliary space: ", "Method #2 : Using list comprehension + sum()", "Output", "time complexity", " auxiliary space ", "METHOD 3: use the built-in function reduce() from the functools module ", "Output", "time complexity", "auxiliary space", "Method #4: use the map comprehension", "Output", "Method #4: Using reduce() and lambda function", "Step by step Algorithm:", "Output", "Time Complexity: ", "Auxiliary Space:", "Method 5: Use a recursive function that traverses the nested dictionary.", "sum_key", "sum_nested_keys()", "sum_nested_keys()", "sum_val", "0", "items() ", " isinstance() ", "sum_nested_keys()", "sum_val", "sum_key", "sum_val", "sum_val", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #6: Using a ", "stack", "-based iterative approach", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-summation-of-custom-nested-keys-in-dictionary/?ref=ml_lbp"},
{"title": "Python - Test String in Character List and vice-versa - GeeksforGeeks", "h1": ["Python – Test String in Character List and vice-versa"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1: Using ", "in operator", " + ", "join()", " [ String in character list ]", "Output", "Method #2 : Using in operator + join() [ Character List in String ]", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 3 :  using the set() function and intersection() method", "Step-by-step approach:", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-test-string-in-character-list-and-vice-versa/?ref=ml_lbp"},
{"title": "Python calendar module | itermonthdays2() method - GeeksforGeeks", "h1": ["Python calendar module | itermonthdays2() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Python Calendar", "Working with Dates in Python Calendar", "Calendar.Calendar Functions", "Calendar.TextCalendar Functions", "Calendar.HTMLCalendar Functions", "Simple TextCalendar Functions", "Introduction to Python Calendar", "Working with Dates in Python Calendar", "Calendar.Calendar Functions", "Calendar.TextCalendar Functions", "Calendar.HTMLCalendar Functions", "Simple TextCalendar Functions", "What kind of Experience do you want to share?"], "strong": ["itermonthdays2()", "Syntax:", "Parameter:", "year:", "month:", "Returns:", "Code #1: ", "Output:", "Code #2 : ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-calendar-module-itermonthdays2-method/"},
{"title": "Python - Segregate elements by delimiter - GeeksforGeeks", "h1": ["Python – Segregate elements by delimiter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using list comprehension + split()", "Output", "Time Complexity:", "Auxiliary Space: ", "Method #2 : Using map() + list + zip() + generator expression", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3 : Using index() method and slicing", "Output", "Time Complexity:", "Auxiliary Space:", "Method #4: Using slicing", "Output", "Time complexity:", "Auxiliary space:", "Method #5: Using a dictionary and a loop", "Output", "Time complexity: ", "Auxiliary space: ", "Method #6: Using a defaultdict", "Output", "Time complexity: ", "Auxiliary space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-segregate-elements-by-delimiter/?ref=ml_lbp"},
{"title": "Python pandas-indexing Archives - GeeksforGeeks", "h1": ["Python pandas-indexing"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/tag/python-pandas-indexing/"},
{"title": "Python | Pandas Panel.cumsum() - GeeksforGeeks", "h1": ["Python | Pandas Panel.cumsum()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Panel.cumsum() ", "Syntax:", "Parameters:", "axis :", "skipna :", "Returns:", "Code #1:", "Output:", "Code #2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-panel-cumsum/?ref=next_article"},
{"title": "Python | Pandas Dataframe/Series.tail() method - GeeksforGeeks", "h1": ["Python | Pandas Dataframe/Series.tail() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "What kind of Experience do you want to share?"], "strong": ["Pandas", "tail()", "Syntax: ", "n: ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Complete Test Series for Service-Based Companies ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-series-tail-method/?ref=previous_article"},
{"title": "Python - Remove rear element from list - GeeksforGeeks", "h1": ["Python – Remove rear element from list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using pop(-1) ", "Approach:", "Output : ", "Time complexity: ", "Auxiliary space", "Method #2: Using del list[-1]", "Output : ", "Time complexity: ", "Auxiliary space: ", "Method #3 : Using slicing + len() method", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #4: Using a list comprehension method.", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #4: Using a list comprehension method.", "list.remove() ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 5: Using pop() with index", " len()", " 1", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-remove-rear-element-from-list/"},
{"title": "Python For Loops - GeeksforGeeks", "h1": ["Python For Loops"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "For Loops in Python", "Flowchart of for loop", "Examples of Python For Loop", "Python", "Python", "Python", "Python", "Python", "Python", "Python", "Loop Control Statements", "Python", "Python", "Python", "Python", "Python", "Python for-loops Exercise Questions", "Python", "Python", "What kind of Experience do you want to share?"], "strong": ["“for” loop", "Note: ", "Output :", "Output:", "Output:", "Output :", "Output :", "Output :", "Output :", "Output:", "Output:", "Output:", "start:", "stop:", "step:", "Output:", "Output:", "Python for-loops Exercise Questions", "Q1. ", "Output", "Q2. ", "Output", "Master Java Programming - Complete Beginner to Advanced ", "Complete Machine Learning & Data Science Program ", "Master C++ Programming - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-for-loops/?ref=roadmap"},
{"title": "Python Bitwise Operators - GeeksforGeeks", "h1": ["Python Bitwise Operators"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Easy Problems on Bit Manipulations and Bitwise Algorithms", "Medium Problems on Bit Manipulations and Bitwise Algorithms", "Hard Problems on Bit Manipulations and Bitwise Algorithms", "Easy Problems on Bit Manipulations and Bitwise Algorithms", "Medium Problems on Bit Manipulations and Bitwise Algorithms", "Hard Problems on Bit Manipulations and Bitwise Algorithms", "Bitwise operators", "Python3", "Shift Operators", "Python3", "Bitwise Operator Overloading", "Python3", "What kind of Experience do you want to share?"], "strong": ["Table of Content:", "Note:", "Bitwise AND operator", "Example:", "Bitwise or operator", "Example:", "Bitwise not operator:", "Example:", "Bitwise xor operator:", "Example:", "Output:", "Bitwise right shift:", "Example:", "Bitwise left shift:", "Example:", "Output:", "Operator Overloading", "Output:", "Note:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-bitwise-operators/?ref=roadmap"},
{"title": "Python Scope of Variables - GeeksforGeeks", "h1": ["Python Scope of Variables"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Scope variable", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["scope of a variable", "Output", "Output:", "Example:", "Output:", "Global and Local Variables with the Same Name", "Output:", "Output:", "global", "Example:", "Output:", "Output:", "Example:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-scope-of-variables/?ref=roadmap"},
{"title": "Python String - GeeksforGeeks", "h1": ["Python String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "What is a String in Python?", "Python3", "Creating a String in Python", "Python3", "Accessing characters in Python String", "Python3", "String Slicing", "Python3", "Reversing a Python String", "Python3", "Python3", "Deleting/Updating from a String", "Python3", "Python3", "Python3", "Python3", "Python3", "Escape Sequencing in Python", "Python3", "Python3", "Formatting of Strings", "Python3", "Python3", "Python3", "Python3", "Useful Python String Operations", "  ", "Python String constants ", "Deprecated string functions", "What kind of Experience do you want to share?"], "strong": ["What is a String in Python?", "Example:", "Output:", "Strings in Python", "Example:", "Output:", "IndexError", "TypeError", "Example:", "Output:", "Example:", "Output:", "Example:", "Output:", "Example:", "Output:", "Example:", "Output:", "Example:", "Output:", "del", "Output:", "Example:", "Output:", "Error:", "SyntaxError", "Example:", "Output:", "Example:", "r", "R", "Output:", "Example 1:", "Output:", "Example 2:", "Output:", "Example 3:", "Output:", "Example 4:", " ", " % ", "Output:", "Useful Python String Operations", "Advantages of String in Python:", "Drawbacks of String in Python:", "1. what is a Python string?", "2. How can I create a string in Python?", "3. How can I access characters in a string?", "4. Can I concatenate strings in Python?", "5. How can I get the length of a string?", "More Videos on Python Strings", "Programs of Python Strings", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-string/?ref=roadmap"},
{"title": "Python While Loop - GeeksforGeeks", "h1": ["Python While Loop"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Flowchart of Python While Loop", "Python While Loop", "Python", "Python", "Control Statements in Python with Examples", "Python", "Python", "Python", "Python", "Python", "Python", "Python while loop with Python list", "Python", "Single statement while block", "Python", "Python While Loop Exercise Questions", "Python", "Python", "What kind of Experience do you want to share?"], "strong": ["Python", "While Loop ", "Syntax of while loop in Python", "while", "Flowchart of Python While Loop", "indefinite iteration", "Difference between ", "Python For Loop", " and Python While Loop", "known", "unknown", "Output", "Python while loop with continue statement", "Output", "Python while loop with a break statement", "Output", "Python while loop with a pass statement", "Output", "Note:", "Output", "Sentinel Controlled Statement", "Python while loop with user input", "Output:", "Example", "Output", "Output", "Output", "Q1. ", "Output", "Q2. ", "Output", "Master Java Programming - Complete Beginner to Advanced ", "Complete Machine Learning & Data Science Program ", "Master C++ Programming - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-while-loop/?ref=roadmap"},
{"title": "Dictionaries in Python - GeeksforGeeks", "h1": ["Dictionaries in Python"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Python3", "Python Dictionary Syntax", "What is a Python Dictionary?", "Python3", "Dictionary Example", "Python3", "Nested Dictionaries", "Python3", "Adding Elements to a Dictionary", "Python3", "Accessing Elements of a Dictionary", "Python3", "Python3", "Accessing an Element of a Nested Dictionary", "Python3", "Deleting Elements using ‘del’ Keyword", "Python3", "Dictionary Methods", "Python3", "What kind of Experience do you want to share?"], "strong": ["A dictionary in Python", "Example:", ".", "Output:", "Note:", "{}", "Key:value", "Note – ", "Output", "dict() ", "Output:", "Time complexity:", "Space complexity:", "Example", "‘Dict’", "Output:", "More on ", "Python Nested Dictionary", "update()", "Note-", "Example: Add Items to a Python Dictionary with Different DataTypes", "Output:", "Time complexity:", "Space complexity:", "Access a Value in Python Dictionary", "Output:", "get()", "Time complexity:", "Space complexity:", "Example: Access a Value in Dictionary using get() in Python", "get()", "‘Dict’", "Output:", "Example", "‘Dict1’", " ‘Name’", "‘Dict2’", "Output:", "Deleting Elements using ‘del’ Keyword", "Example", "‘del’", "Output", "Dictionary Methods", "Method", "Description", "For Detailed Explanations: ", "Python Dictionary Methods", "‘dict1’", "‘dict2’", "‘dict1’", "Output:", "Read More ", "Data Structures", " in Python", "Also Read:", "How to create a Dictionary in Python", "Difference between List and Dictionary in Python", "Python | Merging two Dictionaries", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Master Java Programming - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-dictionary/?ref=roadmap"},
{"title": "Python | Pandas Index.value_counts() - GeeksforGeeks", "h1": ["Python | Pandas Index.value_counts()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " Index.value_counts()", "Syntax:", "Parameters : ", "normalize : ", "sort : ", "ascending : ", "bins : ", "dropna : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-index-value_counts/"},
{"title": "Python - Move and overwrite files and folders - GeeksforGeeks", "h1": ["Python – Move and overwrite files and folders"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" ", "shutil.move()", " ", "os.path.isfile()", "os.path.isdir()", " ", "os.remove()", "shutil.rmtree()", "Syntax:", "Parameters:", "source:", "destination: ", "copy_function (optional): ", "Return Value:", "Example 1:", "Output:", "Example 2:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-move-and-overwrite-files-and-folders/"},
{"title": "Python Tuples - GeeksforGeeks", "h1": ["Python Tuples"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Creating a Tuple", "Python3", "Python3", "Accessing of Tuples", "Python3", "Concatenation of Tuples", "Python3", "Slicing of Tuple", "Python3", "Deleting a Tuple", "Python", "What kind of Experience do you want to share?"], "strong": ["Tuple ", "Note: ", "Output:", "Tuples ", "Output:", "Time complexity:", "Auxiliary Space :", "Tuples", "Note: ", "Output:", "Time complexity: ", "Space complexity: ", "Note-", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Note-", "Output:", "Time complexity:", "Space complexity:", "Note-", "Built-in-Method", "Description", "index( )", "count( )", "tuple()", "Similarities", "Differences", "Tuples Programs", "Useful Links:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tuples/?ref=roadmap"},
{"title": "Python Set Methods - GeeksforGeeks", "h1": ["Python Set Methods"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Adding and Removing elements", "Python3", "Table of Python Set Methods", "What kind of Experience do you want to share?"], "strong": ["Set", "add():", "clear():", "discard(): ", "pop():", "remove(): ", "Example: ", "Output", "Note: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-set-methods/?ref=roadmap"},
{"title": "Python - Change List Item - GeeksforGeeks", "h1": ["Python – Change List Item"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Let’s understand first how to access  elements in python:", "Output:", "Now we can change the item list with a different method:", "Example 1: ", "Approach:", "Code:", "Output:", "Example 2: ", "Output:", "Example 3: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-change-list-item/?ref=roadmap"},
{"title": "Python List Slicing - GeeksforGeeks", "h1": ["Python List Slicing"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python List Slicing Syntax", "Indexing in Python List", "Python3", "Python3", "Python3", "Examples of List Slicing in Python", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python List Slicing Syntax", "[", ":", ":", "]", "Positive Indexes", "Example:", "Output:", "Negative Indexes", "Example:", "Output:", "Slicing", "Example:", "Output:", "Example 1:", "Output:", "Example 2:", "Output:", "Example 3:", "Output:", "Example 4:", "Output:", "Example 5:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-list-slicing/?ref=roadmap"},
{"title": "Python - List Comprehension - GeeksforGeeks", "h1": ["Python – List Comprehension"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "Python List Comprehension Syntax", "List Comprehension in Python Example", "Python", "Python", "Python", "Python", "List Comprehensions vs For Loop", "Python", "Python", "Time Analysis in List Comprehensions and Loop", "Python", "Nested List Comprehensions", "Python", "Python", "List Comprehensions and Lambda", "Python", "Python", "Python", "Conditionals in List Comprehension", "Python", "Python", "Python", "Python", "Python", "Python", "Python", "Python", "Advantages of List Comprehension", "Python List Comprehension Exercise Questions", "Python", "Python", "What kind of Experience do you want to share?"], "strong": ["Output", "Syntax:", "=", "[", "for", "in", "if", "]", "Parameter:", "expression", "element", "iterable", "condition", "Return:", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Key Points", "Even Number", "Odd Number", "Output", "Output", "Output", "Output", "Output", "Output", "names and ages. ", "zip() ", "Output:", "Output", "Advantages of List Comprehension", "Q1. ", "Output", "Q2.", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-list-comprehension/?ref=roadmap"},
{"title": "Python Exception Handling - GeeksforGeeks", "h1": ["Python Exception Handling"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Difference between Syntax Error and Exceptions", "Python3", "Python3", "Python3", "Python3", "Try and Except Statement – Catching Exceptions", "Python3", "Catching Specific Exception", "Python3", "Try with Else Clause", "Python3", "Finally Keyword in Python", "Python3", "Raising Exception", "Python3", "What kind of Experience do you want to share?"], "strong": ["SyntaxError:", "TypeError", "NameError", "IndexError", "KeyError", "ValueError", "AttributeError", "IOError", "ZeroDivisionError", "ImportError", "Syntax Error:", "Example:", "‘", "if'", "‘", "print'", "‘", "if'", "Output:", "Exceptions:", "Example:", "‘marks’", "‘ZeroDivisionError’ ", "Output:", "Note:", "‘TypeError’", "‘", "x'", "‘", "y'", "‘", "TypeError'", "‘", "try'", " ", "‘", "except'", "Output", "Example: ", "Output", "Example: ", "‘", "fun(a)'", "‘", "ZeroDivisionError'", "“ZeroDivisionError Occurred and Handled.” ", "‘", "NameError'", "‘", "NameError'", "Output", " Try with else clause", "AbyB(a, b)", " ", "AbyB(2.0, 3.0)", " ", "AbyB(3.0, 3.0)", "ZeroDivisionError", "“a/b results in 0” ", "Output:", "Syntax:", "Example:", " ", "ZeroDivisionError", " “Can’t divide by zero.”", "“This is always executed.”", "Output:", "“Hi there” ", "“An exception,” ", "Improved program reliability", "Simplified error handling", "Cleaner code:", "Easier debugging", "Performance overhead:", "Increased code complexity", "Possible security risks:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-exception-handling/?ref=roadmap"},
{"title": "Python calendar module : monthdays2calendar() method - GeeksforGeeks", "h1": ["Python calendar module : monthdays2calendar() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Python Calendar", "Working with Dates in Python Calendar", "Calendar.Calendar Functions", "Calendar.TextCalendar Functions", "Calendar.HTMLCalendar Functions", "Simple TextCalendar Functions", "Introduction to Python Calendar", "Working with Dates in Python Calendar", "Calendar.Calendar Functions", "Calendar.TextCalendar Functions", "Calendar.HTMLCalendar Functions", "Simple TextCalendar Functions", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["monthdays2calendar()", "Syntax:", "Parameter:", "year:", "month:", "Returns:", "Code #1: ", "Output:", "Code #2:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-calendar-module-monthdays2calendar-method/"},
{"title": "Python List Comprehension | Sort even-placed elements in increasing and odd-placed in decreasing order - GeeksforGeeks", "h1": ["Python List Comprehension | Sort even-placed elements in increasing and odd-placed in decreasing order"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-list-comprehension-sort-even-placed-elements-increasing-odd-placed-decreasing-order/"},
{"title": "Python | Implementing 3D Vectors using dunder methods - GeeksforGeeks", "h1": ["Python | Implementing 3D Vectors using dunder methods"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Commonly used Vector operations:", "vec1", "vec2", "Magnitude:", "Addition:", "Subtraction:", "Dot Product:", "Cross Product:", "Output:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures ", "Master Java Programming - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-implementing-3d-vectors-using-dunder-methods/"},
{"title": "Python | os.remove() method - GeeksforGeeks", "h1": ["Python | os.remove() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "What kind of Experience do you want to share?"], "strong": ["Note:", "Code #1:", "Output:", "Code #2:", "Output:", "Code #3:", "Output:", "Reference:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-remove-method/"},
{"title": "Python - os.pardir() method with example - GeeksforGeeks", "h1": ["Python – os.pardir() method with example"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["OS module", "Note: ", "Syntax:", "Return type:", "Example 1:", "Output:", "Example 2:", "Output:", "Example 3:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-pardir-method-with-example/?ref=ml_lbp"},
{"title": "Python Data Structures - GeeksforGeeks", "h1": ["Python Data Structures"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Lists", "Python3", "Python3", "Dictionary", "Python3", "Tuple", "Python3", "Set", "Python3", "Frozen Sets", "Python3", "String", "Python3", "Bytearray", "Python3", "Collections Module", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "UserDict", "Python3", "Python3", "Python3", "Linked List", "Python3", "Python3", "Python3", "Stack", "Python3", "Python3", "Python3", "Queue", "Python3", "Python3", "Python3", "Priority Queue", "Python3", "Heap queue (or heapq)", "Python3", "Binary Tree", "Python3", "Python3", "Python3", "Python3", "Graph", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Data Structures", "Example: Creating Python List", "Output", "Example: Python List Operations", "Output", "Example: Python Dictionary Operations", "Output", "Note: ", "Output", "Set Implementation:", "Sets with Numerous operations on a single HashTable:", "Output", "Output", "Note: ", "Output", "Output", "Output", "Output", "Note: ", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "empty() – ", "size() –", "top() –", "push(a) – ", "pop() –", "Implementation using List", "Output", "Implementation using collections.deque:", "Output", "Implementation using queue module", "Output", "Enqueue: ", "Dequeue:", "Front: ", "Rear: ", "Implementation using list", "Output", "Implementation using collections.deque", "Output", "Implementation using the queue.Queue", "Output", "Output", "Output", "Depth First Traversals:", "Algorithm Inorder(tree)", "Algorithm Preorder(tree)", "Algorithm Postorder(tree)", "Output", "Breadth-First or Level Order Traversal", "Output", "Output", "Output", "Breadth-First Search or BFS", "Output", "Depth First Search or DFS", "Algorithm:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-data-structures/"},
{"title": "Python | Creating a 3D List - GeeksforGeeks", "h1": ["Python | Creating a 3D List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input :", "Output :", "Input :", "Output :", "Output", "Output", "Approach:", "Output", "Time Complexity: O(n^3)", "Space Complexity: O(n^3)", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-creating-3d-list/?ref=ml_lbp"},
{"title": "Python Variables - GeeksforGeeks", "h1": ["Python Variables"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Example of Variable in Python", "Python3", "Python3", "Variables Assignment in Python", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Global and Local Python Variables", "Python3", "Python3", "Global keyword in Python", "Python3", "Variable Types in Python", "Python3", "Object Reference in Python", "Python3", "Frequently Asked Questions", "Python3", "What kind of Experience do you want to share?"], "strong": ["Geeksforgeeks", " ", "var", "Output:", "Notes:", "Rules for Python variables", " ", "Example ", "Output:", "Variables Assignment in Python", "Output:", "Declaration and Initialization of Variables", "Output:", "Redeclaring variables in Python", "Output:", "Python Assign Values to Multiple Variables ", "Output:", "Assigning different values to multiple variables", "Output:", "Can We Use ", "ame Name for Different Types?", "Output:", "How does + operator work with variables?", "Output", "Can we use + for different Datatypes also?", "Output : ", "Local variables", "Output:", "Global variables", "Output:", "Rules of global keyword", "Example:", "Output:", "Example:", "Output:", "Object Reference in Python", "y", "x.", "Shared Reference", "Y, ", "Creating objects (or variables of a class type)", "Output", "Are there naming conventions for Python variables?", "Can I change the type of a Python variable?", "Data Structures & Algorithms in Python - Self Paced ", "Master Java Programming - Complete Beginner to Advanced ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-variables/"},
{"title": "Python List Comprehension | Segregate 0's and 1's in an array list - GeeksforGeeks", "h1": ["Python List Comprehension | Segregate 0’s and 1’s in an array list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Output", "Time complexity:", "Auxiliary space: ", "Method : Using count() method", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-list-comprehension-segregate-0s-1s-array-list/?ref=ml_lbp"},
{"title": "Python | os.cpu_count() method - GeeksforGeeks", "h1": ["Python | os.cpu_count() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Python os.cpu_count() Method Syntax", "os.cpu_count() Method in Python Examples", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Parameter:", "Return Type:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-cpu_count-method/?ref=ml_lbp"},
{"title": "Python | os.environ object - GeeksforGeeks", "h1": ["Python | os.environ object"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "os.environ Object Syntax in Python", "Python os.environ Object Examples", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Frequently Asked Questions ( FAQs )", "What kind of Experience do you want to share?"], "strong": ["os.environ", "os.environ", "os.environ", "Syntax:", "Parameter:", "Return Type:", "Access User Environment Variables Using os.environ Object", "Output:", "Retrieving Specific Environment Variables Using os.environ Object", "Output:", "Output:", "Object", "Output:", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-environ-object/?ref=ml_lbp"},
{"title": "Python : __delete__ vs __del__ - GeeksforGeeks", "h1": ["Python : __delete__ vs __del__"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Syntax: ", "Example:", "Note :", "Note:", "Syntax: ", "Example:", "Example:", "Data Structures & Algorithms in Python - Self Paced ", "Master Java Programming - Complete Beginner to Advanced ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-__delete__-vs-__del__/?ref=ml_lbp"},
{"title": "Python timedelta total_seconds() Method with Example - GeeksforGeeks", "h1": ["Python timedelta total_seconds() Method with Example"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Date class", "Time class", "Datetime class", "Timedelta class", "Date class", "Time class", "Datetime class", "Timedelta class", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" total_seconds()", "Syntax: ", "Parameters:", "Return values:", "Example 1: ", "Output:", "Example 2:", "Output:", "Example 3:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-timedelta-total_seconds-method-with-example/"},
{"title": "Python - os.replace() method - GeeksforGeeks", "h1": ["Python – os.replace()  method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Python3", "Python", "What kind of Experience do you want to share?"], "strong": ["Prerequisite:", "os.replace()", "OSError", "Syntax:", "Parameter:", "source: ", "destination: ", "src_dir_id : ", "dst_dir_fd: ", "Return Type:", "Code #1", "Output:", "Code #2", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-replace-method/?ref=ml_lbp"},
{"title": "Python - Group single item dictionaries into List values - GeeksforGeeks", "h1": ["Python – Group single item dictionaries into List values"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "E", "Explanation", " Method #1 : Using setdefault() + loop", "Output", "Time complexity: ", "Auxiliary Space:", "Method #2 : Using defaultdict() + * operator + loop", "Output", "Time complexity: ", "Auxiliary space: ", "Method #3 : Using extend(),keys(),list() and set() methods", "Output", "Time Complexity : O(N*N)", "Auxiliary Space : O(N)", "Method 4: Using itertools.groupby() + lambda function", "Output", "Method 5: Using list comprehension and dictionary comprehension", "Output", "Time complexity:", "Auxiliary space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-group-single-item-dictionaries-into-list-values/"},
{"title": "Python set symmetric_difference_update() - GeeksforGeeks", "h1": ["Python set symmetric_difference_update()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python set symmetric_difference_update() Syntax", "Python set symmetric_difference_update() Examples", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Symmetric Difference is marked in Green", "Syntax:", "Parameters:", "Returns:", "A.symmetric_difference_update(B)", "set", "Output ", "Output :", "symmetric_difference_update()", "Output", " symmetric_difference_update()", "Output ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-set-symmetric-difference-update/"},
{"title": "Python OOPs Concepts - GeeksforGeeks", "h1": ["Python OOPs Concepts"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "OOPs Concepts in Python", "Python Class ", "Python", "Python Objects", "Python3", "Python3", "Python3", "Python Inheritance", "Python3", "Python Polymorphism", "Python3", "Python Encapsulation", "Python3", "Data Abstraction ", "What kind of Experience do you want to share?"], "strong": ["Some points on Python class:", "Class Definition Syntax:", "An object consists of:", "State:", "Behavior:", "Identity:", "The Python self", "Note:", "The Python __init__ Method", "Output", "Output", "Note:", "Types of Inheritance", "Single Inheritance", "Multilevel Inheritance: ", "Hierarchical Inheritance: ", "Multiple Inheritance: ", "Output", "Note:", "Output", "Note: ", "Output", "Note: ", "Data Abstraction ", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures and Algorithms - Self Paced ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-oops-concepts/?ref=ml_lbp"},
{"title": "Python | Set Difference in list of dictionaries - GeeksforGeeks", "h1": ["Python | Set Difference in list of dictionaries"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension", "Output :", "Method #2 : Using itertools.filterfalse()", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-set-difference-in-list-of-dictionaries/"},
{"title": "Python | os.mkfifo() method - GeeksforGeeks", "h1": ["Python | os.mkfifo() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Parameters:", "path:", "mode", "dir_fd", "Note:", "Return type:", "Code:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-mkfifo-method/?ref=ml_lbp"},
{"title": "Python | os.ctermid() method - GeeksforGeeks", "h1": ["Python | os.ctermid() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "What kind of Experience do you want to share?"], "strong": ["Code :", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-ctermid-method/?ref=previous_article"},
{"title": "Python | Implementing Dynamic programming using Dictionary - GeeksforGeeks", "h1": ["Python | Implementing Dynamic programming using Dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input:", "Output:", "Explanation:", "Input:", "Output:", "Explanation:", "Output:", "Approach:", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Master C++ Programming - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-implementing-dynamic-programming-using-dictionary/"},
{"title": "Python List Comprehensions vs Generator Expressions - GeeksforGeeks", "h1": ["Python List Comprehensions vs Generator Expressions"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["What is List Comprehension?", "What are Generator Expressions?", "Syntax Difference:", "So what’s the difference between Generator Expressions and List Comprehensions?", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-list-comprehensions-vs-generator-expressions/?ref=ml_lbp"},
{"title": "Python | Find all elements count in list - GeeksforGeeks", "h1": ["Python | Find all elements count in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using list comprehension + len()", "Output", "Time Complexity: ", "Auxiliary Space:", "Method #2 : Using chain() + len()", "Output", "Time complexity:", "Auxiliary space:", "Method #3: Using reduce() ", "Output", "Method #4 : Using extend() and len() methods", "Output", "Time Complexity : O(N)", "Auxiliary Space : O(1)", "Method #5: Using itertools.flatten() function", "Output", "Using numpy:", "Algorithm:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-find-all-elements-count-in-list/?ref=previous_article"},
{"title": "Python Tuple Exercise - GeeksforGeeks", "h1": ["Python Tuple Exercise"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Tuple Programs", "List of Tuples Programs", "Conversion of Tuple Programs", "Advance Tuple Programs", "What kind of Experience do you want to share?"], "strong": ["Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-tuple-exercise/?ref=roadmap"},
{"title": "Python Match-Case Statement - GeeksforGeeks", "h1": ["Python Match-Case Statement"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What is a ‘match-case’ statement?", "Pseudocode for Python match-case Statement", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python Match Case Statement FAQ:", "What kind of Experience do you want to share?"], "strong": ["Switch Case.", "Match-Case", "match", "Python match case statement", "Output:", "Use of Python OR in match statement", "or ", "Output:", "Use of Python If in match statement", "Output:", "Match the Sequence Pattern", "Output:", "Use of Python Class in match statement", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "GATE Data Science and Artificial Intelligence 2025 ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-match-case-statement/?ref=roadmap"},
{"title": "Python in Keyword - GeeksforGeeks", "h1": ["Python in Keyword"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python in Keyword", "Python ‘in’ keyword in Expression", "Python in Keyword Usage", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["reserved word", "Python ‘in’ keyword in Expression", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-in-keyword/?ref=roadmap"},
{"title": "Python | Sort list of list by specified index - GeeksforGeeks", "h1": ["Python | Sort list of list by specified index"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method 1: Using the bubble sort algorithm", "n", "n", " 0", " n-2", "Output", "Time complexity:", "Auxiliary space:", "Method 2: Sort list of lists using sort() + ", "lambda", "test_list", "print()", "test_list", "test_list", "sort() ", "print()", "test_list", "Output", "Time complexity: ", "Auxiliary space: ", "Method 3: Sort a list of lists using sorted() + itemgetter()", "Output", "Time complexity: ", "Auxiliary space: ", " Method 4: use the heapq module’s heapify() and heappop() functions.", "Output", "Time complexity ", "Auxiliary space: ", " Method 5:  Using a custom function", "sort_list_of_lists", "test_list", "Output", "Time complexity: ", "Auxiliary space: ", "Method 6 : using the numpy library.", "Here is the step-by-step approach using numpy:", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sort-list-of-list-by-specified-index/"},
{"title": "Python | Pandas Series.mean() - GeeksforGeeks", "h1": ["Python | Pandas Series.mean()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "What kind of Experience do you want to share?"], "strong": [" Series.mean()", "Syntax:", "Parameter : ", "axis : ", "skipna : ", "level : ", "numeric_only : ", "**kwargs : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-series-mean/?ref=ml_lbp"},
{"title": "Python | Substring Key match in dictionary - GeeksforGeeks", "h1": ["Python | Substring Key match in dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using items() + list comprehension", "Output : ", "Time Complexity:", "Auxiliary Space:", "Method #2 : Using dict() + filter() + lambda", "Output : ", "Method #3: Using keys() and find() methods", "Output", "Method #4: Using re.search()", "Output", "Time complexity: O(n)", "Auxiliary space:", "Method #5: Using a dictionary comprehension", "Algorithm:", "Output", "Time Complexity:", "Auxiliary Space:", "Method #6 : Using operator.contains() method", "Approach", "operator.contains()", "Output", "Time Complexity : O(N)", "Auxiliary Space : O(N)", "Method #7: Using a for loop and string slicing", "Output", "Time complexity: ", "Auxiliary space: ", "Method #8:Using a reduce function:", "Output", "Time Complexity:", "Space Complexity:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-substring-key-match-in-dictionary/"},
{"title": "Python | Convert List of lists to list of Strings - GeeksforGeeks", "h1": ["Python | Convert List of lists to list of Strings"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Method #1 : Using list comprehension + join()", " ", "Python3", "Method #2: Using map() + join()", " ", "Python3", "Method #3: Without any builtin methods", "Python3", "Method #4: Using reduce() function", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension + join()", "Output : ", "Time Complexity:", "Auxiliary Space:", "Method #2: Using map() + join()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3: Without any builtin methods", "Output", "Time Complexity: ", "Auxiliary Space:", "Method #4: Using reduce() function", "Output", "Time complexity:", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-convert-list-of-lists-to-list-of-strings/"},
{"title": "Python Program to Convert a list of multiple integers into a single integer - GeeksforGeeks", "h1": ["Python Program to Convert a list of multiple integers into a single integer"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output ", "Input :", "Output :", "Approach #1 :", "Output:", "Approach #2 :", "Output:", "Approach #3 : ", "Output:", "Approach #4 :", "Output:", "Output", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-convert-a-list-of-multiple-integers-into-a-single-integer/?ref=previous_article"},
{"title": "Python | All occurrences of substring in string - GeeksforGeeks", "h1": ["Python | All occurrences of substring in string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Occurrences of Substring in the String", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Output", "Time Complexity: O(n*m),", "Auxiliary Space: O(k),", " using re.finditer function", "Output", "Space complexity:", "Time complexity:", " using find()", "Output", "Time Complexity:", "Auxiliary Space: ", "Output", "Time complexity: ", "Auxiliary space: ", "Output", "Time Complexity: O(n), ", "Auxiliary Space: O(m),", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-all-occurrences-of-substring-in-string/"},
{"title": "Python | Convert numeric String to integers in mixed List - GeeksforGeeks", "h1": ["Python | Convert numeric String to integers in mixed List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension + isdigit()", "Output : ", "Time Complexity : ", "Auxiliary Space :", "Method #2 : Using map() + lambda + isdigit()", "Output : ", "Time complexity:", "Auxiliary space", "Method #3 : Using isnumeric() method", "Output", "Time Complexity : ", "Auxiliary Space : ", "Method #4 : Using try-except", "res", "test_list", "int()", "res", "res.append(int(i)).", "res", "res.append(i).", "result", "Output", "Time Complexity : ", "Auxiliary Space : ", "Method#5: Using a for loop", "Output", "Time complexity:", "The time complexity of this algorithm is O(n", "Auxiliary Space:", "The space complexity of this algorithm is also O(n)", "Method #6: Using a dictionary", "Output", "Time complexity: ", "Auxiliary space: ", "Method#7: Using Recursive method.", "Output", "time complexity", "auxiliary space ", "Method#8: reduce function from the ", "functools module", ":", "Algorithm:", "test_list", "Output", "Time complexity:", "Space Complexity:", "Method#9: Using ", "numpy", ":", "Algorithm:", "int_list", "ele", "test_list", "int_list", "int_list", "int_list", "Output:", "Time Complexity:", "Space Complexity:", "Method #10 : Using re.match()", "Approach", "Output", "Time Complexity : O(N)", "Auxiliary Space : O(N)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-convert-numeric-string-to-integers-in-mixed-list/?ref=next_article"},
{"title": "Python | Grouping similar substrings in list - GeeksforGeeks", "h1": ["Python | Grouping similar substrings in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using lambda + itertools.groupby() + split()", "groupby", "itertools", "test_list", "test_list", "sort() ", "test_list", "test_list", "_", "groupby() ", "test_list", "lambda a: a.split(‘_’)[0] ", "_ ", "res", "res", "Output", "Time complexity:", "Auxiliary space: ", "Method #2 : Using lambda + itertools.groupby() + partition()", "Output", "Time complexity:", "Auxiliary space: ", "Method #3 : Using index() and find() methods", "Output", "Time complexity:", "Auxiliary space:", "Method #4 : Using startswith()", "Output", "Time Complexity:", "Auxiliary Space:", "Method #5: Using a dictionary to group similar substrings", "Output", "Time complexity: ", "Auxiliary space:", "Method #6: Using a loop and a dictionary", "Step-by-step approach:", "Output", "Method #7: Using numpy method:", " Algorithm :", "Output:", "Time complexity:", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-grouping-similar-substrings-in-list/?ref=ml_lbp"},
{"title": "Python | Pandas tseries.offsets.BusinessHour.rollback - GeeksforGeeks", "h1": ["Python | Pandas tseries.offsets.BusinessHour.rollback"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" tseries.offsets.BusinessHour.rollback()", "Syntax:", "Parameter : dt : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-tseries-offsets-businesshour-rollback/?ref=next_article"},
{"title": "Python - All occurrences of Substring from the list of strings - GeeksforGeeks", "h1": ["Python – All occurrences of Substring from the list of strings"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using loop + in operator", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Method #2 : Using all() + list comprehension", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Method #3: Using Counter() function", "Output", "Method #4: Using set() and intersection() function", "Step by step Algorithm:", "Output", "Time Complexity: ", "Space Complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-all-occurrences-of-substring-from-the-list-of-strings/?ref=ml_lbp"},
{"title": "Python - Find all the strings that are substrings to the given list of strings - GeeksforGeeks", "h1": ["Python – Find all the strings that are substrings to the given list of strings"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input : ", "Output :", "Explanation :", "Input :", "Output :", "Explanation :", "Method #1: Using list comprehension", "Output", "Method #2: Using any() + generator expression", "Output", "Time Complexity: ", "Space Complexity: ", "Method #3: Using find() method", "Output", "Method#4: Using Recursive method.", "Output", "Method 5 :  use is the set intersection method. ", " steps for this approach:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-find-all-the-strings-that-are-substrings-to-the-given-list-of-strings/?ref=ml_lbp"},
{"title": "Python - Alternate Strings Concatenation - GeeksforGeeks", "h1": ["Python – Alternate Strings Concatenation"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using list comprehension + list slicing + join()", "Output : ", "Method #2: Using loop", "Output : ", "Time Complexity: ", "Auxiliary Space: ", "Method 3: use the zip() function with tuple unpacking and string concatenation.", "Output", "Time complexity: O(n)", "Auxiliary space: O(n)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-alternate-strings-concatenation/?ref=ml_lbp"},
{"title": "Python - Selective consecutive Suffix Join - GeeksforGeeks", "h1": ["Python – Selective consecutive Suffix Join"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Approach : Using ", "loop", " + ", "endswith()", " + ", "join()", "Output:", "Time Complexity: ", "Space Complexity: ", "Approach : Using re", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-selective-consecutive-suffix-join/?ref=ml_lbp"},
{"title": "Python | Key index in Dictionary - GeeksforGeeks", "h1": ["Python | Key index in Dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension + enumerate()", "Output : ", "Method #2 : Using list() + keys() + index()", "Output : ", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-key-index-in-dictionary/"},
{"title": "Python - Conditional Prefix in List - GeeksforGeeks", "h1": ["Python – Conditional Prefix in List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1: Using loop", "Output", "Time complexity: ", "Auxiliary space: ", "Method #2: Using list comprehension", "Here are the steps involved:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3: Using map and lambda functions", "Steps:", "Output", "Time complexity: ", "Auxiliary space: ", "Method #4: Using a for loop and ternary operator", "Output", "Time complexity:", "Auxiliary space: ", "Method #5: Using a dictionary", "Output", "Time complexity: ", "Auxiliary space: ", "Method 6:  By adding conditional prefix to the elements in a list is-", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-conditional-prefix-in-list/?ref=ml_lbp"},
{"title": "Python program to extract characters in given range from a string list - GeeksforGeeks", "h1": ["Python program to extract characters in given range from a string list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method 1 : Using join() + list comprehension", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 2: Using chain.from_iterable() + join()", "Output", "Time Complexity: ", "Space Complexity: ", "Approach 3: Using reduce() + join()", "Output", "Time complexity: ", "Auxiliary space:", "Approach 4: use a simple for loop to iterate through the strings and concatenate them.", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-extract-characters-in-given-range-from-a-string-list/?ref=ml_lbp"},
{"title": "Python | Remove Redundant Substrings from Strings List - GeeksforGeeks", "h1": ["Python | Remove Redundant Substrings from Strings List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using enumerate() + join() + sort() ", "Output", "Method #2 : Using list comprehension + join() + enumerate()", "Output", "Time Complexity: ", "Space Complexity: ", "Method#3: Using Recursive method.", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-remove-redundant-substrings-from-strings-list/"},
{"title": "Python - Last business day of every month in year - GeeksforGeeks", "h1": ["Python – Last business day of every month in year"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input :", "Output : ", "Explanation :", "Input :", "Output :", "Explanation : ", "Method #1 : Using loop + ", "max()", " + calendar.monthcalendar", "Output:", "Method #2: Using ", "list comprehension", "Output:", "Method #3: Using pandas library", "Time complexity: ", "Auxiliary space: ", "Method #4: Using datetime and timedelta from datetime module", " step-by-step approach :", "Output", "Method #5: Using dateutil library", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-last-business-day-of-every-month-in-year/"},
{"title": "Python - Sort rows by Frequency of K - GeeksforGeeks", "h1": ["Python – Sort rows by Frequency of K"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using ", "sort()", " + ", "count()", "Output:", "Method #2 : Using ", "sorted()", " + ", "lambda", " + ", "count()", "Output:", "Method #3 : Using operator.countOf()", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-sort-rows-by-frequency-of-k/?ref=next_article"},
{"title": "Python | Pandas tseries.offsets.CustomBusinessDay.rule_code - GeeksforGeeks", "h1": ["Python | Pandas tseries.offsets.CustomBusinessDay.rule_code"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" tseries.offsets.CustomBusinessDay.rule_code", "Syntax:", "Parameter : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-tseries-offsets-custombusinessday-rule_code/?ref=ml_lbp"},
{"title": "Python | Pandas tseries.offsets.CustomBusinessDay.freqstr - GeeksforGeeks", "h1": ["Python | Pandas tseries.offsets.CustomBusinessDay.freqstr"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" tseries.offsets.CustomBusinessDay.freqstr", "Syntax:", "Parameter : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-tseries-offsets-custombusinessday-freqstr/?ref=ml_lbp"},
{"title": "Python Program that prints elements common at specified index of list elements - GeeksforGeeks", "h1": ["Python Program that prints elements common at specified index of list elements"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Illustration:", "Method 1 : ", "Output", "Method 2 : ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 3: Using set comprehension + zip() function", "Output", "Time Complexity: O(n2)", "Auxiliary Space: O(n)", "Method 4: Using set intersection and loop", "Example:", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(m),", "Method 5: Using Counter from collections module", "Output", "Time complexity: O(n*m)", "Auxiliary space: O(K)", "Method 6: Using reduce() from functools module", "Output", "Time complexity: O(n * m) ", "Auxiliary space: O(k)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-that-prints-elements-common-at-specified-index-of-list-elements/?ref=next_article"},
{"title": "Python | Pandas tseries.offsets.CustomBusinessHour.rule_code - GeeksforGeeks", "h1": ["Python | Pandas tseries.offsets.CustomBusinessHour.rule_code"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" tseries.offsets.CustomBusinessHour.rule_code", "Syntax:", "Parameter : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-tseries-offsets-custombusinesshour-rule_code/"},
{"title": "Python | Pandas tseries.offsets.DateOffset.rule_code - GeeksforGeeks", "h1": ["Python | Pandas tseries.offsets.DateOffset.rule_code"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" tseries.offsets.DateOffset.rule_code", "Syntax:", "Parameter : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-tseries-offsets-dateoffset-rule_code/"},
{"title": "Python | Pandas tseries.offsets.BusinessHour.name - GeeksforGeeks", "h1": ["Python | Pandas tseries.offsets.BusinessHour.name"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" tseries.offsets.BusinessHour.name", "Syntax:", "Parameter : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-tseries-offsets-businesshour-name/?ref=next_article"},
{"title": "Python | Pandas tseries.offsets.CustomBusinessDay.freqstr - GeeksforGeeks", "h1": ["Python | Pandas tseries.offsets.CustomBusinessDay.freqstr"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" tseries.offsets.CustomBusinessDay.freqstr", "Syntax:", "Parameter : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-tseries-offsets-custombusinessday-freqstr/"},
{"title": "Python | Pandas tseries.offsets.BusinessDay.freqstr - GeeksforGeeks", "h1": ["Python | Pandas tseries.offsets.BusinessDay.freqstr"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" tseries.offsets.BusinessDay.freqstr", "Syntax:", "Parameter : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2 : ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-tseries-offsets-businessday-freqstr/"},
{"title": "Python | Pandas tseries.offsets.DateOffset.onOffset - GeeksforGeeks", "h1": ["Python | Pandas tseries.offsets.DateOffset.onOffset"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" tseries.offsets.DateOffset.onOffset()", "Syntax:", "Parameter : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-tseries-offsets-dateoffset-onoffset/"},
{"title": "Python | Remove trailing/leading special characters from strings list - GeeksforGeeks", "h1": ["Python | Remove trailing/leading special characters from strings list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method 1: Using map() + str.strip()", "Output", "Method 2: Using split() and join() methods", "Output", "Method 3: Using regex", "Output", "Time complexity: ", "Auxiliary Space", "Method 3: Using list comprehension:", "Output", "Time Complexity: O(N)", "Auxiliary Space:  O(N)", "Method#4: Using Recursive method.", "Output", "Time complexity:", "Auxiliary Space:", "Method#5: Using a lambda function with the replace() method", "Output", "Time complexity: ", "Auxiliary Space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-remove-trailing-leading-special-characters-from-strings-list/"},
{"title": "Python | Pandas tseries.offsets.CustomBusinessHour.rule_code - GeeksforGeeks", "h1": ["Python | Pandas tseries.offsets.CustomBusinessHour.rule_code"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" tseries.offsets.CustomBusinessHour.rule_code", "Syntax:", "Parameter : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-tseries-offsets-custombusinesshour-rule_code/?type=article&id=295883"},
{"title": "Python | Pandas tseries.offsets.BusinessHour.name - GeeksforGeeks", "h1": ["Python | Pandas tseries.offsets.BusinessHour.name"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" tseries.offsets.BusinessHour.name", "Syntax:", "Parameter : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-tseries-offsets-businesshour-name/"},
{"title": "Python | Pandas tseries.offsets.BusinessHour.rollback - GeeksforGeeks", "h1": ["Python | Pandas tseries.offsets.BusinessHour.rollback"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" tseries.offsets.BusinessHour.rollback()", "Syntax:", "Parameter : dt : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-tseries-offsets-businesshour-rollback/"},
{"title": "Python | Standard deviation of list - GeeksforGeeks", "h1": ["Python | Standard deviation of list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Note: Install numpy module using command “pip install numpy”", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using sum() + list comprehension", "Output", "Method #2 : Using pstdev()", "Output", "Method #3 : Using numpy library", "Note: Install numpy module using command “pip install numpy”", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-standard-deviation-of-list/"},
{"title": "Python | Pandas tseries.offsets.CustomBusinessDay - GeeksforGeeks", "h1": ["Python | Pandas tseries.offsets.CustomBusinessDay"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" tseries.offsets.CustomBusinessDay()", "Syntax:", "Parameter : n : ", "normalize : ", "weekmask : ", "holidays : ", "calendar : ", "offset : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-tseries-offsets-custombusinessday/?ref=ml_lbp"},
{"title": "Python - Get Month from year and weekday - GeeksforGeeks", "h1": ["Python – Get Month from year and weekday"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input :", "Output :", "Explanation :", "Input :", "Output :", "Explanation :", "Method #1 : Using %W, %w", "Output", "Method #2: Using relativedelta()", "Output:", "Output", "Time complexity: O(1)", "Auxiliary Space: O(1)", "Approach#4: Using timedelta", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-get-month-from-year-and-weekday/"},
{"title": "Python - Find consecutive dates in a list of dates - GeeksforGeeks", "h1": ["Python – Find consecutive dates in a list of dates"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input :", "Output :", "Explanation : ", "Input :", "Output : ", "Explanation :", "Method #1 : Using days() + ", "loop", "Output:", "Time Complexity :", "Space Complexity :", "Method #2 : Using ", "all()", " + days()", "Output:", "Time Complexity :", "Space Complexity :", "Method #3: Using ", "set()", "date_range", "test_list", "test_list", "date_range", "test_list", "test_list", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-find-consecutive-dates-in-a-list-of-dates/?ref=previous_article"},
{"title": "Python program to Get Month Name from Month Number - GeeksforGeeks", "h1": ["Python program to Get Month Name from Month Number"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Explanation :", "Input :", "Output :", "Explanation :", "Method #1 : Using ", "strftime()", " + %B", "Output", "Method #2: Using ", "calendar library", " and month number", "Output", "Output", "Time complexity: O(1)", "Auxiliary Space: O(1)", "METHOD 4:Using re module ", "APPROACH:", "ALGORITHM:", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-get-month-name-from-month-number/"},
{"title": "Python program to Get Month Name from Month Number - GeeksforGeeks", "h1": ["Python program to Get Month Name from Month Number"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Explanation :", "Input :", "Output :", "Explanation :", "Method #1 : Using ", "strftime()", " + %B", "Output", "Method #2: Using ", "calendar library", " and month number", "Output", "Output", "Time complexity: O(1)", "Auxiliary Space: O(1)", "METHOD 4:Using re module ", "APPROACH:", "ALGORITHM:", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-get-month-name-from-month-number/?ref=ml_lbp"},
{"title": "Python - Get Month from year and weekday - GeeksforGeeks", "h1": ["Python – Get Month from year and weekday"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input :", "Output :", "Explanation :", "Input :", "Output :", "Explanation :", "Method #1 : Using %W, %w", "Output", "Method #2: Using relativedelta()", "Output:", "Output", "Time complexity: O(1)", "Auxiliary Space: O(1)", "Approach#4: Using timedelta", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-get-month-from-year-and-weekday/?ref=ml_lbp"},
{"title": "Python | Pandas Series.max() - GeeksforGeeks", "h1": ["Python | Pandas Series.max()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": [" Series.max()", "Syntax:", "Parameter : ", "axis : ", "skipna : ", "level : ", "numeric_only : ", "**kwargs : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-series-max/?ref=ml_lbp"},
{"title": "Python program to convert seconds into hours, minutes and seconds - GeeksforGeeks", "h1": ["Python program to convert seconds into hours, minutes and seconds"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Approach #1 : ", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Approach #2 : ", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Approach #3 : ", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Approach #4 : ", "Output:", "Time Complexity: ", "Auxiliary Space: ", " Approach #5 :", "Output", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-convert-seconds-into-hours-minutes-and-seconds/?ref=ml_lbp"},
{"title": "Python Program to Get total Business days between two dates - GeeksforGeeks", "h1": ["Python Program to Get total Business days between two dates"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input :", "Output :", "Explanation :", "Input :", "Output :", "Explanation :", "Method 1: Using ", "timedelta()", " + ", "sum()", " + weekday()", "Output:", "Time complexity :", "Space Complexity :", "Method #2 : Using np.busday_count()", "Output:", "Time complexity ", "Space Complexity : ", "Method #3 : Using ", "pandas.bdate_range()", "Output : ", "Time complexity :", "Space Complexity :", "Method #4: Using a loop and weekday() function", "Output", "Method #5: Using numpy:", " Algorithm:", "Output:", "Time complexity:", "Space complexity:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-get-total-business-days-between-two-dates/"},
{"title": "Python | All Permutations of a string in lexicographical order without using recursion - GeeksforGeeks", "h1": ["Python | All Permutations of a string in lexicographical order without using recursion"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input  : ", "Output : ", "Input  : ", "Output : ", "Method 1:", "Output :", "Method 2:", "Output : ", "Time Complexity:", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-all-permutations-of-a-string-in-lexicographical-order-without-using-recursion/?ref=next_article"},
{"title": "Python | Pandas DatetimeIndex.weekday - GeeksforGeeks", "h1": ["Python | Pandas DatetimeIndex.weekday"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " DatetimeIndex.weekday", "Syntax:", "Return: ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-datetimeindex-weekday/"},
{"title": "Python | Difference between two dates (in minutes) using datetime.timedelta() method - GeeksforGeeks", "h1": ["Python | Difference between two dates (in minutes) using datetime.timedelta() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Date class", "Time class", "Datetime class", "Timedelta class", "Date class", "Time class", "Datetime class", "Timedelta class", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["timedelta", "datetime", "seconds", "Example 1:", "Output:", "Time Complexity : ", "Space Complexity :", "Example 2:", "Output:", "Time Complexity :", "Space Complexity :", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-difference-between-two-dates-in-minutes-using-datetime-timedelta-method/"},
{"title": "Python | Perform Sentence Segmentation Using Spacy - GeeksforGeeks", "h1": ["Python | Perform Sentence Segmentation Using Spacy"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Sentence Segmentation", " spacy ", "Example: ", "Code: ", "Output: ", "Code: To overcome this error we first need to convert this generator into a list using list function.", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-perform-sentence-segmentation-using-spacy/"},
{"title": "Python | Named Entity Recognition (NER) using spaCy - GeeksforGeeks", "h1": ["Python | Named Entity Recognition (NER) using spaCy"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Named Entity Recognition (NER)", "NER with spaCy", "Installation : ", "Code for NER using spaCy.", "Output", "Output", "References", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-named-entity-recognition-ner-using-spacy/"},
{"title": "Python | All possible permutations of N lists - GeeksforGeeks", "h1": ["Python | All possible permutations of N lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension ", "Output", "Time Complexity:", "Space Complexity:", "Method #2 : Using itertools.product()", "Output", "Time Complexity: O(n", "k", ")", "Auxiliary Space: O(n", "k", ")", "Method #3: Using numpy", "np.meshgrid()", "Output: ", "Time Complexity: ", "Space Complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-all-possible-permutations-of-n-lists/"},
{"title": "Python Convert Set To List Without Changing Order - GeeksforGeeks", "h1": ["Python Convert Set To List Without Changing Order"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Convert Set To List Without Changing Order in Python", "Python3", "Python3", "Python3", "Python3", "Conclusion", "What kind of Experience do you want to share?"], "strong": ["Output", "Output", "Output", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-convert-set-to-list-without-changing-order/"},
{"title": "Python | Build a REST API using Flask - GeeksforGeeks", "h1": ["Python | Build a REST API using Flask"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Getting Started with Machine Learning", "Data Preprocessing", "Classification & Regression", "K-Nearest Neighbors (KNN)", "Support Vector Machines", "Decision Tree", "Ensemble Learning", "Generative Model", "Time Series Forecasting", "Clustering Algorithm", "Convolutional Neural Networks", "Recurrent Neural Networks", "Reinforcement Learning", "Model Deployment and Productionization", "Advanced Topics", "Getting Started with Machine Learning", "Data Preprocessing", "Classification & Regression", "K-Nearest Neighbors (KNN)", "Support Vector Machines", "Decision Tree", "Ensemble Learning", "Generative Model", "Time Series Forecasting", "Clustering Algorithm", "Convolutional Neural Networks", "Recurrent Neural Networks", "Reinforcement Learning", "Model Deployment and Productionization", "Advanced Topics", "Libraries required:", "Method 1: using only Flask", "Method 2: Using flask-restful", "What kind of Experience do you want to share?"], "strong": ["Output:", "Output:", "GATE Computer Science & Information Technology 2025 ", "Complete Machine Learning & Data Science Program ", "Complete Guide to Software Testing and Automation: Master Java, Selenium and Cucumber "], "link": "https://www.geeksforgeeks.org/python-build-a-rest-api-using-flask/?ref=next_article"},
{"title": "Python | PoS Tagging and Lemmatization using spaCy - GeeksforGeeks", "h1": ["Python | PoS Tagging and Lemmatization using spaCy"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["spaCy", "How to Install ? ", "Top Features of spaCy:", "Import and Load Library:", "POS-Tagging for Reviews: ", "Output:", "Lemmatization:", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Master Java Programming - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-pos-tagging-and-lemmatization-using-spacy/?ref=ml_lbp"},
{"title": "Python | Difference between two lists - GeeksforGeeks", "h1": ["Python | Difference between two lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Ways to Compare Two Lists in Python", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example", "Input:", "Output:", "Explanation:", " Note: ", "Python “in” keyword to Compare Two Lists in Python", "Output", "Difference Between Two Lists in Python Using a List comprehension", "Output ", "Find the Difference Between Two Lists in Python using set()", "Output", "Use Numpy to ", "numpy.concatenate()", "Output", "Output ", "Output ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures and Algorithms - Self Paced "], "link": "https://www.geeksforgeeks.org/python-difference-two-lists/?ref=ml_lbp"},
{"title": "Python - Lemmatization Approaches with Examples - GeeksforGeeks", "h1": ["Python – Lemmatization Approaches with Examples"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["What is Lemmatization?", "morphological analysis", "lemma", "TIP: Always convert your text to lowercase before performing any NLP task including lemmatizing.", "Various Approaches to Lemmatization: ", "9 different approaches", "1. Wordnet Lemmatizer ", "nltk library", "synsets", "synsets", " ", "How to use: ", "Download nltk package", "Download Wordnet from nltk", "Code: ", "Code: ", "2. Wordnet Lemmatizer (with POS tag)", "Code: ", "3. TextBlob", "Download TextBlob package :", "Code: ", "4. TextBlob (with POS tag)", "Code: ", "5. spaCy", "Download spaCy package", "Linking successful", "Code: ", " Pro-nouns", "-PRON-", "best", "good. ", "6. TreeTagger", "How to use: ", "1. Download TreeTagger package", "2. Download TreeTagger Software: ", "Code: ", "7. Pattern", "How to use: ", "Download Pattern package:", "Code: ", "NOTE", "‘generator raised StopIteration’", " ", "8. Gensim", "pattern", "gensim.utils.lemmatize() ", "UTF8-encoded tokens", "nouns", "verbs", "adjectives", "adverbs", "e", "How to use: ", "1. Download Pattern package", "2. Download Gensim package:", "Code: ", "NOTE", "generator raised StopIteration", "‘the’", "‘with’", "‘by’ ", "9. Stanford CoreNLP", "How to use: ", "1. Get JAVA 8 :", "2. Get Stanford_coreNLP package : ", " ", "Stanford_CoreNLP", " ", "cd C:\\Users\\...\\stanford-corenlp-4.1.0", "java -mx4g -cp \"*\" edu.stanford.nlp.pipeline.StanfordCoreNLPServer -annotators \"tokenize, ssplit, pos, lemma, parse, sentiment\" -port 9000 -timeout 30000", "3. Download Stanford CoreNLP package:", "Code: ", "Code: ", "Conclusion:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-lemmatization-approaches-with-examples/?ref=ml_lbp"},
{"title": "Python program to remove last element from set - GeeksforGeeks", "h1": ["Python program to remove last element from set"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input: {", "}", "Remove 4", "Output: {", "}", "Input: {", "}", "Remove Geeks", "Output: {", "}", "Explanation: ", "Note: ", "Remove the last element from the set Using ", "discard()", " method", "Output", "Remove the last element from set  Using ", "remove()", "Output", "Note: ", "Remove the last element from the set Using", " pop()", " ", "Output", "Note: ", "Remove the last element from the set using list", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-to-remove-last-element-from-set/?ref=ml_lbp"},
{"title": "Python | Pandas Series.mean() - GeeksforGeeks", "h1": ["Python | Pandas Series.mean()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "What kind of Experience do you want to share?"], "strong": [" Series.mean()", "Syntax:", "Parameter : ", "axis : ", "skipna : ", "level : ", "numeric_only : ", "**kwargs : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-series-mean/"},
{"title": "Python - Interleave two lists of different length - GeeksforGeeks", "h1": ["Python – Interleave two lists of different length"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Method #1 : Using", " zip() ", "+ ", "cycle()", " +", " list comprehension ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #2 : Using", " chain()", " + zip() + cycle()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 3: using the built-in function map(). ", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-interleave-two-lists-of-different-length/"},
{"title": "Python program to Remove the last item from array - GeeksforGeeks", "h1": ["Python program to Remove the last item from array"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Remove the last item from array Using ", "Slicing", " Technique", "Python3", "Remove the last item from array Using ", "pop()", " method", "Python3", "Remove the last item from array Using ", "del()", " method", "Python3", "Remove the last item from array Using ", "remove()", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input:", "Output:", "Input:", "Output:", "Explanation:", "Note: ", "Remove the last item from array Using ", "Slicing", " Technique", "Output:", "Explanation:", "Output:", "Explanation:", "Remove the last item from array Using ", "del()", " method", "Output:", "Note:", "Remove the last item from array Using ", "remove()", "Output:", "Note: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-to-remove-the-last-item-from-array/"},
{"title": "Python program to remove last N characters from a string - GeeksforGeeks", "h1": ["Python program to remove last N characters from a string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["S", "N", "N", "S", "Input:", "Output: ", "Explanation: ", "Input: ", "Output: ", "Approach 1: ", "res, ", "S", "len", "(S) – N", "res", "Time Complexity:", "Auxiliary Space:", "Approach 2: ", "res, ", "S", "N ", "S ", "res", "res", "Time Complexity:", "Auxiliary Space:", "String slicing", "-based Approach:", "res", "res", "S[:len(S) – N], ", "N", "S", "Time Complexity:", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures and Algorithms - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-remove-last-n-characters-from-a-string/"},
{"title": "Python | Stemming words with NLTK - GeeksforGeeks", "h1": ["Python | Stemming words with NLTK"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Stemming ", "Errors in Stemming:", "Overstemming ", "Understemming", "Applications of stemming are:", "Code #1:", "Output:", "Code #2: ", "Output : ", "Code #3: Using reduce():", "Algorithm :", "Output:", "Time complexity:", "Space complexity:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-stemming-words-with-nltk/"},
{"title": "Python | Word Similarity using spaCy - GeeksforGeeks", "h1": ["Python | Word Similarity using spaCy"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Word similarity", "spaCy’s Model – ", "Output:", "Using Custom Language Models – ", "Output:", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Master Java Programming - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-word-similarity-using-spacy/?ref=ml_lbp"},
{"title": "Python | Part of Speech Tagging using TextBlob - GeeksforGeeks", "h1": ["Python | Part of Speech Tagging using TextBlob"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Corpus :", "Lexicon :", "Token :", "Grammatical tagging", "Word-category disambiguation.", "Input:", "Output:", "Output :", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-part-of-speech-tagging-using-textblob/?ref=rp"},
{"title": "Python | Numpy ndarray.__array__() - GeeksforGeeks", "h1": ["Python | Numpy ndarray.__array__()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["ndarray.__array__()", "dtype", "Syntax :", "Return :", "Example #1 :", "dtype", "Example #2 :", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-numpy-ndarray-__array__/"},
{"title": "Python | Lemmatization with TextBlob - GeeksforGeeks", "h1": ["Python | Lemmatization with TextBlob"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Applications of lemmatization are:", "Output :", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-lemmatization-with-textblob/"},
{"title": "Python - tensorflow.math.reduce_mean() - GeeksforGeeks", "h1": ["Python – tensorflow.math.reduce_mean()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["reduce_mean() ", "Syntax: ", "Parameters:", "input_tensor: ", "axis(optional): ", "keepdims(optional): ", "name(optional): ", "Returns:", "Example 1:", "Output:", "Example 2:", "Output:", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tensorflow-math-reduce_mean/"},
{"title": "Python - tensorflow.math.l2_normalize() - GeeksforGeeks", "h1": ["Python – tensorflow.math.l2_normalize()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["l2_normalize() ", "Syntax: ", "Parameters:", "x: ", "axis: ", "epsilon: ", "name:", "Returns:", "Example 1:", "Output:", "Example 2: ", "Output:", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tensorflow-math-l2_normalize/"},
{"title": "Python Arrays - GeeksforGeeks", "h1": ["Python Arrays"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What is an Array in Python?", "Creating an Array", "Python3", "Adding Elements to a Array", "Python3", "Accessing Elements from the Array", "Python3", "Removing Elements from the Array", "Python3", "Slicing of an Array", "Python3", "Searching Element in an Array", "Python3", "Updating Elements in a Array", "Python3", "Different Operations on Python Arrays", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["array(", "data_type", ", ", "value_list", ")", " integers", "doubles", "Output", "Complexities for Creation of Arrays:", "Time Complexity: ", "Auxiliary Space: ", "`array`", "`arr`", " `a` ", "`[1, 2, 3]`", " `4`", "`[2.5, 3.2, 3.3]`", "4.4` ", "Output", "Time Complexity:", "Auxiliary Space:", "Output :", "Time Complexity:", "Auxiliary Space:", "Note – ", "Output", "Time Complexity:", "Auxiliary Space:", "Output", "Example:", "Output", "Time Complexity:", "Auxiliary Space: ", "Example:", "Output", "Time Complexity:", "Auxiliary Space:", "Example:", "Output", "Time Complexity:", "Auxiliary Space:", "Example:", "reverse()", "Output", "Time Complexity:", "Auxiiary Space:", "Extend Element from Array", "extend() ", " Python list extend().", "What is extend element from array?", "extend()", "extend()", " ", "Example 1: ", "extend()", "Output", "Example 2: ", "extend()", "Output", "Time Complexity", "Auxiliary Space: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-arrays/?ref=ml_lbp"},
{"title": "Python - tensorflow.get_logger() - GeeksforGeeks", "h1": ["Python – tensorflow.get_logger()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["get_logger() ", "Syntax: ", "Parameters: ", "Returns: ", "Example 1:", "Output:", "Example 2:", "Output:", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tensorflow-get_logger/"},
{"title": "Python | Tokenize text using TextBlob - GeeksforGeeks", "h1": ["Python | Tokenize text using TextBlob"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["TextBlob ", "Corpus", "Lexicon", "Token", "So basically tokenizing involves splitting sentences and words from the body of the text.", " Output :", "GATE Computer Science & Information Technology 2025 ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-tokenize-text-using-textblob/"},
{"title": "Python | Interleave multiple lists of same length - GeeksforGeeks", "h1": ["Python | Interleave multiple lists of same length"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Interleave Multiple Lists of Same Length using Map() and list comprehension", "Output", "Time Complexity:", "Auxiliary Space:", "Interleave Multiple Lists of Same Length using List slicing", "Output", "Time complexity:", "Auxiliary space:", "Interleave Multiple Lists of Same length using itertools.chain() + zip()", "Output", "Time Complexity:", "Auxiliary Space:", "Interleave Multiple Lists of Same Length using While loop", "Output", "Time Complexity:", "Auxiliary Space:", "Interleave Multiple Lists of Same Length using For Loop", "Output", "Time Complexity:", "Auxiliary Space:", "Interleave Multiple Lists of Same Length using List Comprehension ", " ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Interleave Multiple Lists of Same Length using Transpose() function", "Output:", "Time complexity: ", "Auxiliary space: ", "Interleave Multiple Lists of Same Length using F", " ", "Output", "Time complexity:", "Space complexity: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-interleave-multiple-lists-of-same-length/"},
{"title": "Python - tensorflow.math.lbeta() - GeeksforGeeks", "h1": ["Python – tensorflow.math.lbeta()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["lbeta() ", "Syntax: ", "Parameters:", "x: ", "name(optional): ", "Returns:", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tensorflow-math-lbeta/?ref=next_article"},
{"title": "Python | Extending and customizing django-allauth - GeeksforGeeks", "h1": ["Python | Extending and customizing django-allauth"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Django Basics", "Django view", "Django Model", "Django Forms", "Django URLS", "More topics on Django", "Projects", "Django Interview Questions and Answers", "Django Basics", "Django view", "Django Model", "Django Forms", "Django URLS", "More topics on Django", "Projects", "Django Interview Questions and Answers", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Extending Signup Form or adding custom fields in django-allauth:", " forms.py . ", "User Intervention and Custom validations:", "Example #1: Restricted List of email’s", "Example #2: Add a Maximum length to a username", "References: ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-extending-and-customizing-django-allauth/?ref=ml_lbp"},
{"title": "Python Remove Item from Dictionary by Key - GeeksforGeeks", "h1": ["Python Remove Item from Dictionary by Key"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Remove Item from Dictionary by Key in Python", "Python3", "Python3", "Python3", "Conclusion", "What kind of Experience do you want to share?"], "strong": ["Using del keyword", "Output", "Using pop() Method", "Output", "Using popitem() Method", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-remove-item-from-dictionary-by-key/"},
{"title": "Python | Smile detection using OpenCV - GeeksforGeeks", "h1": ["Python | Smile detection using OpenCV"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Step # 1:", "Step #2:", "Step #3:", "Explanations –", "Step #4:", "Output: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-smile-detection-using-opencv/?ref=next_article"},
{"title": "Python Program to find the profit or loss when CP of N items is equal to SP of M items - GeeksforGeeks", "h1": ["Python Program to find the profit or loss when CP of N items is equal to SP of M items"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Cost Price of N articles", "Selling Price of M articles", "Examples:", "Input: ", "Output:", "Input: ", "Output:", "Formula:-", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-to-find-the-profit-or-loss-when-cp-of-n-items-is-equal-to-sp-of-m-items/?ref=ml_lbp"},
{"title": "Python - Create a string made of the first and last two characters from a given string - GeeksforGeeks", "h1": ["Python – Create a string made of the first and last two characters from a given string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input:", "Output: ", "Input:", "Output:", "Method #1: ", "Output", "Time Complexity:", "Auxiliary Space:", "Methods #2: ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Approach 3: Using formatted string", "Algorithm to create a string made of the first and last two characters from a given string using formatted string approach:", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-create-a-string-made-of-the-first-and-last-two-characters-from-a-given-string/"},
{"title": "Python Lists VS Numpy Arrays - GeeksforGeeks", "h1": ["Python Lists VS Numpy Arrays"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What is a Numpy array?", "Python3", "Python3", "What is Python List?", "Python3", "Comparison between Numpy array and Python List", "Python3", "Python3", "Python3", "Conclusion", "What kind of Experience do you want to share?"], "strong": ["NumPy", "Some important points about Numpy arrays:", "Representation of Numpy array", "O", "Output:", "Python ", "list", "Some important points about Python Lists:", "Representation of Python List", "Output:", "Element Overhead:", "Datatype: ", "Memory Fragmentation:", "Performance: ", "Functionality: ", "Homogeneous Data:", "Fixed Data Type:", "Contiguous Memory:", "Array Metadata:", "Performance:", "Memory consumption between Numpy array and lists", "Output:", "Time comparison between Numpy array and Python lists", "Output:", "Effect of operations on Numpy array and Python Lists", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-lists-vs-numpy-arrays/"},
{"title": "Python program to find uncommon words from two Strings - GeeksforGeeks", "h1": ["Python program to find uncommon words from two Strings"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["A", "B", "uncommon words", "exactly once", "Note:", "Examples", "Input : ", "Output : ", "Input : ", "Output : ", "Approach 1:", "Output", "Time Complexity:", "Auxiliary Space: ", "Approach 2:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Approach #3: Using Counter() function", "Output", "Approach 4:  using operator.countOf() method", "Output", "Time Complexity: O(N)", "Auxiliary Space : O(N)", "Method 5: Using the set() and difference() method to find the difference of two sets.", "setA", "setB", "A ", "B", "split()", "difference()", "setA", "setB", "union() ", "list()", "A", "B.", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "DSA for Interview Preparation ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-program-to-find-uncommon-words-from-two-strings/?ref=ml_lbp"},
{"title": "Python - Get Last N characters of a string - GeeksforGeeks", "h1": ["Python – Get Last N characters of a string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Get the last N Characters of a String", "Python3", "Python", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example", "Input:", "Output:", "Explanation:", "Input:", "Output:", "Explanation:", "Output", "Using string slicing with positive indexing ", "Output:", "Using string slicing with negative indexing", "Output:", "Get the last characters of a string in Python", "Output:", " Using Recursion", "Output", "Output", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-get-last-n-characters-of-a-string/"},
{"title": "Python - Add item after given Key in dictionary - GeeksforGeeks", "h1": ["Python – Add item after given Key in dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method 1: Using loop + update()", "Output", "Method 2: Using keys(),values(),items(),insert(),index() methods", "Approach", "Output", "Time Complexity : O(N)", "Auxiliary Space : O(N)", "Method 3: Using dictionary comprehension and the get() method", "Output", "Time complexity: ", "Auxiliary space: ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-add-item-after-given-key-in-dictionary/"},
{"title": "Python Remove Item from Dictionary by Value - GeeksforGeeks", "h1": ["Python Remove Item from Dictionary by Value"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Remove Item from Dictionary by Value in Python", "Python3", "Python3", "Python3", "Conclusion", "What kind of Experience do you want to share?"], "strong": ["remove_items_by_value", "value_to_remove", "new_dict", "Output", "Time Complexity: ", "Space Complexity:", "remove_items_by_value", " ", "value_to_remove", "new_dict", "Output", "Time Complexity: ", "Space Complexity:", "remove_items_by_value", " ", "value_to_remove", "Output", "Time Complexity:", "Space Complexity:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-remove-item-from-dictionary-by-value/"},
{"title": "Python: Operations on Numpy Arrays - GeeksforGeeks", "h1": ["Python: Operations on Numpy Arrays"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating NumPy Array", "NumPy Array Manipulation", "Matrix in NumPy", "Operations on NumPy Array", "Reshaping NumPy Array", "Indexing NumPy Array", "Arithmetic operations on NumPyArray", "Linear Algebra in NumPy Array", "NumPy and Random Data", "Sorting and Searching in NumPy Array", "Universal Functions", "Working With Images", "Projects and Applications with NumPy", "Introduction", "Creating NumPy Array", "NumPy Array Manipulation", "Matrix in NumPy", "Operations on NumPy Array", "Reshaping NumPy Array", "Indexing NumPy Array", "Arithmetic operations on NumPyArray", "Linear Algebra in NumPy Array", "NumPy and Random Data", "Sorting and Searching in NumPy Array", "Universal Functions", "Working With Images", "Projects and Applications with NumPy", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["NumPy Array:", "NumPy arrays", "Data ", "Data type", "dtype", "shape", "strides", "Arithmetic Operations:", "Output:", "numpy.reciprocal()", "Example:", "Output ", "numpy.power()", "Output:", "numpy.mod()", "Output:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-operations-on-numpy-arrays/"},
{"title": "Python | Pandas TimedeltaIndex.get_level_values - GeeksforGeeks", "h1": ["Python | Pandas TimedeltaIndex.get_level_values"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " TimedeltaIndex.get_level_values()", "Syntax :", "Parameters : ", "level : ", "Return : ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-timedeltaindex-get_level_values/"},
{"title": "Python - tensorflow.GradientTape.gradient() - GeeksforGeeks", "h1": ["Python – tensorflow.GradientTape.gradient()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["gradient() ", "Syntax: ", "Parameters:", "target: ", "sources: ", "output_gradients: ", "unconnected_gradients: ", "Returns: ", "Example 1:", "Output:", "Example 2:", "Output:", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tensorflow-gradienttape-gradient/"},
{"title": "Python | Convert List of lists to list of Strings - GeeksforGeeks", "h1": ["Python | Convert List of lists to list of Strings"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Method #1 : Using list comprehension + join()", " ", "Python3", "Method #2: Using map() + join()", " ", "Python3", "Method #3: Without any builtin methods", "Python3", "Method #4: Using reduce() function", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension + join()", "Output : ", "Time Complexity:", "Auxiliary Space:", "Method #2: Using map() + join()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3: Without any builtin methods", "Output", "Time Complexity: ", "Auxiliary Space:", "Method #4: Using reduce() function", "Output", "Time complexity:", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-convert-list-of-lists-to-list-of-strings/?ref=ml_lbp"},
{"title": "Python | Find minimum of each index in list of lists - GeeksforGeeks", "h1": ["Python | Find minimum of each index in list of lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["minimum of each column in a matrix", "Examples:", "Input : ", "Output : ", "Input : ", "Output : ", "Method #1: Using min() + list comprehension + zip()", "Output : ", "Time Complexity: ", "Auxiliary Space: ", "Method #2 : Using map() + min() + zip()", "Output : ", "Time complexity:", "Auxiliary space: ", "Method #3 : Using enumerate()", "Output", "Time complexity: ", "Auxiliary Space: ", "Method #4 : Using min()+for loops", "Output", "Time complexity: ", "Auxiliary Space: ", "Using NumPy() library", "Output:", "Time complexity: O(n*n), where n is the number of elements in all lists", "Auxiliary Space: O(n), to store result", "Method  : Using  map() and lambda function:", "Output", "Time Complexity:", "Space Complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-find-minimum-of-each-index-in-list-of-lists/?ref=previous_article"},
{"title": "Python | Consecutive Maximum Occurrence in list - GeeksforGeeks", "h1": ["Python | Consecutive Maximum Occurrence in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using groupby() + max() + lambda", "Output : ", "Time Complexity:", "Auxiliary Space:", "Method #2: Using a sliding window", "Output", "Method #3: Using a dictionary", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-consecutive-maximum-occurrence-in-list/"},
{"title": "Python - tensorflow.GradientTape.watch() - GeeksforGeeks", "h1": ["Python – tensorflow.GradientTape.watch()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["watch() ", "Syntax: ", "Parameter:", "tensor: ", "Returns: ", "Raise:", "ValueError: ", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-gradienttape-watch/"},
{"title": "Python | Foreground Extraction in an Image using Grabcut Algorithm - GeeksforGeeks", "h1": ["Python | Foreground Extraction in an Image using Grabcut Algorithm"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "GrabCut Algorithm for Image Segmentation", "How does GrabCut Algorithm work for Image Segmentation ?", "GrabCut in OpenCV", "Python3", "Conclusion", "GrabCut Algorithm for Image Segmentation – FAQs", "What kind of Experience do you want to share?"], "strong": ["Foreground extract", "Region Drawing", "Region of Interest (ROI) Selection: ", "Gaussian Mixture Model (GMM):", "Graph Generation:", "Graph Segmentation Algorithm:", "Foreground-Background Labeling:", "Syntax: ", "Parameters:", "image: ", "mask: ", "GC_BGD", "GC_FGD", "GC_PR_BGD", "GC_PR_FGD", "rectangle: ", "backgroundModel: ", "foregroundModel: ", "iterationCount: ", "mode: ", "GC_INIT_WITH_RECT", "GC_INIT_WITH_MASK", "GC_EVAL", "Output:", "Accurate segmentation of characters:", "Partial segmentation of some objects:", "Potential for further refinement:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-foreground-extraction-in-an-image-using-grabcut-algorithm/"},
{"title": "Python | Multiply all numbers in the list - GeeksforGeeks", "h1": ["Python | Multiply all numbers in the list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Multiply all Numbers in the List in Python ", "Python", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input : ", "Output :", "Explanation", "Input : ", "Output :", "Multiply all numbers in the list using ", "Example", "Output :", "Time complexity: ", "Auxiliary space: ", "Multiply all numbers in the list u", "Example :", "Output :", "Time complexity:", "Auxiliary space: ", "Multiply all numbers in the list u", "“return”", "reduce()", "ew reduced result is returned", "Example : ", "Output :", "Time complexity: ", "Auxiliary space: ", "Multiply all numbers in the list u", "Example :", "Output:", "Time complexity", "Auxiliary space: ", "Multiply all numbers in the list u", "Output :", "Time complexity:", "O(n),", "                                                                                                                         Auxiliary space:", "O(1),", "Example", "Output :", "Time complexity", "Auxiliary space", "Multiply all numbers in the list", "Output :", "Time complexity", "Auxiliary space", "Multiply all numbers in the list u", "Example :", "Output:", "6", "24", " Time complexity :", "                                                                                                                      Auxiliary space :", "Multiply all numbers in the list using the recursive function ", "Example ", "Output :", "Time complexity : ", "Space complexity", "Example :", "Output :", "Time complexity", "Auxiliary space: ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-multiply-numbers-list-3-different-ways/?ref=ml_lbp"},
{"title": "Python Tensorflow - tf.keras.layers.Conv2D() Function - GeeksforGeeks", "h1": ["Python Tensorflow – tf.keras.layers.Conv2D() Function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Convolution Neural Network: CNN", "Application Of CNN:", "CNN Implementation In Keras: tk.keras.layers.Conv2D()", "Convolution Neural Network Using Tensorflow:", "Python3", "Python3", "Implementing keras.layers.Conv2D() Model:", "Python3", "What kind of Experience do you want to share?"], "strong": ["      Arguments            ", "Meaning", "Example:", "Output: ", "Output:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-tf-keras-layers-conv2d-function/"},
{"title": "Python | Numpy matrix.diagonal() - GeeksforGeeks", "h1": ["Python | Numpy matrix.diagonal()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Numpy matrix.diagonal()", "Syntax :", "Return :", "Example #1 :", "Example #2 :", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-numpy-matrix-diagonal/?ref=next_article"},
{"title": "Python | Morphological Operations in Image Processing (Opening) | Set-1 - GeeksforGeeks", "h1": ["Python | Morphological Operations in Image Processing (Opening) | Set-1"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Python3", "What kind of Experience do you want to share?"], "strong": ["input image", "structuring component", "Opening ", "Opening is erosion operation followed by dilation operation.", "Syntax:", "Parameters: ", "image", "cv2.MORPH_OPEN", "kernel", "Input Frame:", "Mask:", "Output Frame:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-morphological-operations-in-image-processing-opening-set-1/?ref=next_article"},
{"title": "Python - Find the index of Minimum element in list - GeeksforGeeks", "h1": ["Python – Find the index of Minimum element in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using min() + enumerate() + list comprehension", "Output : ", "Time Complexity:", "Auxiliary Space:", "Method #2: Using loop + min()", "Output : ", "Approach 3: Using numpy", "Note: ", "Output:", "Time complexity: ", "Auxiliary Space: ", "Method 4:  Use a dictionary to store the indices of each unique value in the list. ", "Output", "Time complexity: ", "Auxiliary space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-find-the-index-of-minimum-element-in-list/"},
{"title": "Python | Generate successive element difference list - GeeksforGeeks", "h1": ["Python | Generate successive element difference list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension ", "Output : ", "Method #2 : Using zip() ", "Method #3 : Using map() + operator.sub", "Output :", "Method #4 : ", "Method#5: Using Recursive method.", "Output", "Method: Using an iterative approach:", "Algorithm:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-generate-successive-element-difference-list/?ref=ml_lbp"},
{"title": "Python | Bitwise OR among List elements - GeeksforGeeks", "h1": ["Python | Bitwise OR among List elements"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using reduce() + lambda + “|” operator", "Output : ", "Time complexity: ", "Auxiliary space: ", "Method #2: Using reduce() + operator.ior", "Output : ", "Time complexity: ", "Auxiliary space: ", "Method #3: Using a loop to perform a bitwise OR among the elements of a list", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-bitwise-or-among-list-elements/"},
{"title": "Python Program for Mirror of matrix across diagonal - GeeksforGeeks", "h1": ["Python Program for Mirror of matrix across diagonal"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Method 3: Using List Comprehension", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "simple solution", "Output", "Time complexity:", "Output:", "Time complexity:", "Auxiliary space", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "DSA for Interview Preparation "], "link": "https://www.geeksforgeeks.org/python-program-for-mirror-of-matrix-across-diagonal/"},
{"title": "Python | Print list after removing element at given index - GeeksforGeeks", "h1": ["Python | Print list after removing element at given index"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Print list after removing element at given index", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example", "Input1:", "Output1:", "Input2: ", "Output2: ", "Remove and Display List Element at Position", "Output", "Output", "Output", "Output", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-print-list-removing-element-given-index/"},
{"title": "Python | Pandas Panel.add() - GeeksforGeeks", "h1": ["Python | Pandas Panel.add()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": [" Panel.add() ", "Syntax:", "Parameters:", "other :", "axis :", "Returns:", "Code #1:", "Output:", "Code #2:", "Output:", "Code #3:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-panel-add/"},
{"title": "Python | Pandas dataframe.clip() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.clip()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.clip()", "Syntax:", "Parameters: ", "lower :", "upper :", "axis : ", "inplace :", "*args, **kwargs :", "Example #1: ", "Output :", "Example #2: ", "Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-clip/?ref=lbp"},
{"title": "Python | Pandas Series.isnull() - GeeksforGeeks", "h1": ["Python | Pandas Series.isnull()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": [" Series.isnull()", "Syntax:", "Parameter : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2 : ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-series-isnull/?ref=lbp"},
{"title": "Python - Concatenation of two String Tuples - GeeksforGeeks", "h1": ["Python – Concatenation of two String Tuples"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using zip() + generator expression", "Output : ", "Method #2 : Using map() + concat", "Output : ", "Method #3: Use a for loop to iterate over the indices of the tuples and concatenate the corresponding elements.", "Output", "Time complexity:", "Auxiliary space:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-concatenation-of-two-string-tuples/"},
{"title": "Python String join() Method - GeeksforGeeks", "h1": ["Python String join() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python String join() Syntax", "String join() in Python Examples", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python join()", "Example:", "Output:", "Syntax:", "Parameters:", "List, Tuple, String, Dictionary", " and Set", "Return Value:", "Type Error", "Output: ", "Output: ", "Note: ", "4 ", "Output: ", "Output:", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-string-join-method/"},
{"title": "Python - Itertools.zip_longest() - GeeksforGeeks", "h1": ["Python – Itertools.zip_longest()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Itertools.zip_longest()", "What kind of Experience do you want to share?"], "strong": ["sequence data types", "list, tuple, str", "Note:", "Syntax:", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-itertools-zip_longest/"},
{"title": "Python | Pattern Generation using time() module - GeeksforGeeks", "h1": ["Python | Pattern Generation using time() module"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["time() module", "Examples:", "Input  :", "Output :", "Input  :", "Output :", "Code : Python program to generate patterns", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pattern-generation-using-time-module/"},
{"title": "Python | Check if key has Non-None value in dictionary - GeeksforGeeks", "h1": ["Python | Check if key has Non-None value in dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using if", "Output", "Time Complexity: O(1)", "Auxiliary Space: O(1)", "Method #2: Using bool() + get()", "Output", "Method 3: using the in keyword and a ternary operator:", "Output", "Time complexity: O(1)", "Auxiliary Space: O(1)", "Method 4: using the “try-except” block to check if the key has a non-None value in the dictionary:", "Approach:", "Output", "Time complexity: O(1) ", "Auxiliary space: O(1) ", "Method #5: Using the dictionary’s get() method with a default value", "Output", "Time complexity: O(1)", "Auxiliary space: O(1)", "Method #6: Using the “in” keyword with a direct comparison to None value.", "Approach:", "Example:", "Output", "Time complexity: O(1)", "Auxiliary space: O(1)", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-check-if-key-has-non-none-value-in-dictionary/?ref=ml_lbp"},
{"title": "Python Program to Print the Natural Numbers Summation Pattern - GeeksforGeeks", "h1": ["Python Program to Print the Natural Numbers Summation Pattern"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input:", "Output:", "Input: ", "Output:", "Approach:", "Program:", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-program-to-print-the-natural-numbers-summation-pattern/?ref=ml_lbp"},
{"title": "Python | Initialize dictionary with None values - GeeksforGeeks", "h1": ["Python | Initialize dictionary with None values"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Initialize dictionary with None values Using zip() + repeat()", "Output", "Initialize dictionary with None values Using fromkeys()", "Output", "Initialize dictionary with None values Using dict() and enumerate", "Output", "Time complexity: ", "Auxiliary Space:", "Initialize dictionary with None values Using a loop and update ()", "Output", "Time complexity: O(n)", "Auxiliary Space: O(n)", "Initialize dictionary with None values Using a dictionary comprehension", "res", "10", "range()", "res", "print()", "Output", "Time complexity: ", "Auxiliary space: ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-initialize-dictionary-with-none-values/?ref=ml_lbp"},
{"title": "Python | Reversed Order keys in dictionary - GeeksforGeeks", "h1": ["Python | Reversed Order keys in dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using reversed() + sorted() + keys() + loop", "Output : ", "Time Complexity: O(N), where N is the length of the input string.", "Auxiliary Space: O(N)", "Method #2 : Using list() + keys() + sorted() + reversed()", "Output : ", "Method #3 : Using list comprehension + keys() + sorted() + reversed()", "Output", "Method #4: Using the heapq module", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-reversed-order-keys-in-dictionary/?ref=ml_lbp"},
{"title": "Python | Priority key assignment in dictionary - GeeksforGeeks", "h1": ["Python | Priority key assignment in dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loop", "Output : ", "Method #2 : Using nested get()", "Output", "Method #3 : Using next()", "Output", "Time complexity", "Auxiliary space ", "Method #4: Using list comprehension and get()", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-priority-key-assignment-in-dictionary/?ref=ml_lbp"},
{"title": "Python | Alternate element summation in list - GeeksforGeeks", "h1": ["Python | Alternate element summation in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension + list slicing + sum()", "Output : ", "Time complexity:", "Auxiliary space:", "Method #2 : Using loop", "Output : ", "Time complexity:", "Auxiliary space: ", "Method #3 : ", "Output", "Time complexity:", "Auxiliary space:", "Method 4 :  use numpy library.", " steps:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-alternate-element-summation-in-list/"},
{"title": "Python | Index of Non-Zero elements in Python list - GeeksforGeeks", "h1": ["Python | Index of Non-Zero elements in Python list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Note: Install numpy module using command “pip install numpy”", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method : Using enumerate() + list comprehension", "Output : ", "Using numpy:", "Output :", "Method: Using a for loop", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method 4: Using filter() function", "Output", "Time complexity: ", "Auxiliary space: ", "Method 5: Using the Itertools Module:", "Output", "Time Complexity:", "Auxiliary Space:", "Method 6:  Using a lambda function with the map() function", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-index-of-non-zero-elements-in-python-list/"},
{"title": "Python | Rearrange Positive and Negative Elements - GeeksforGeeks", "h1": ["Python | Rearrange Positive and Negative Elements"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method 1: Using sorted() + lambda", "Output", "Time complexity: O(nlog(n))", "Auxiliary Space: O(n)", "Method 2: Using sort() and extend() methods", "Output", "Time complexity: O(n log n)", "Auxiliary Space: O(n)", "Method 3: Using the built-in filter() function along with a lambda function", "Output", "Time Complexity: O(n log n)", "Auxiliary Space: O(n)", "Method 4: Using List comprehension", "Output", "Time Complexity: O(n log n)", "Auxiliary Space: O(n)", "Method 5: Using two pointers and swapping", "Approach:", "Output", "Time complexity: O(n)", "Auxiliary space: O(1)", "Method 6:   Using itertools:", "Algorithm:", "Output", "Time Complexity: O(n log n)", "Auxiliary Space: O(N)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-rearrange-positive-and-negative-elements/?ref=ml_lbp"},
{"title": "Python - Filter list elements starting with given Prefix - GeeksforGeeks", "h1": ["Python – Filter list elements starting with given Prefix"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension + startswith()", "Output : ", "Method #2 : Using filter() + lambda + startswith()", "Output : ", "Method #3 : Without using startswith() ", "Output", "Method #4 : Using find() method", "Output", "Method #5 : Using re.findall() and re.compile()", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-filter-list-elements-starting-with-given-prefix/?ref=ml_lbp"},
{"title": "Python | Reversed Split Strings - GeeksforGeeks", "h1": ["Python | Reversed Split Strings"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using join() + reversed() + split()", "Output : ", "Method #2 : Using join() + split() + list slicing", "Output : ", "Time Complexity: ", "Auxiliary Space: ", "Output", "Method #4: Using reduce():", "Output", "The time complexity :O(n),", "The space complexity :O(n),", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-reversed-split-strings/"},
{"title": "Python Program to Print Alphabetic Triangle Pattern - GeeksforGeeks", "h1": ["Python Program to Print Alphabetic Triangle Pattern"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python", "What kind of Experience do you want to share?"], "strong": ["Print an Alphabetic Triangle Pattern using  Loops", "Output:", "Time Complexity: ", "Space Complexity: ", "Print Alphabetic Triangle Pattern using Recursion", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-print-alphabetic-triangle-pattern/?ref=ml_lbp"},
{"title": "Python - K elements Reversed Slice - GeeksforGeeks", "h1": ["Python – K elements Reversed Slice"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using list slicing", "Output", "Method #2 : Using islice() + reversed() ", "Output", "Method 3 :  using the deque data structure from the collections module", "Explanation:", "Output", "Time complexity: O(K)", "Auxiliary space: O(K)", "METHOD 4:Using loop and reverse.", "APPROACH:", "ALGORITHM:", "Output", "Time Complexity:", "Space Complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-k-elements-reversed-slice/"},
{"title": "Python - Find minimum of non zero groups - GeeksforGeeks", "h1": ["Python – Find minimum of non zero groups"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loops", "Output : ", "Method #2: Using itertools.groupby() + min()", "Output : ", "Method #3: ", "Output", "Time complexity", "Auxiliary space: ", "Method 4: Using the numpy library. ", "Output:", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-find-minimum-of-non-zero-groups/"},
{"title": "Python - Concatenate values with same keys in a list of dictionaries - GeeksforGeeks", "h1": ["Python – Concatenate values with same keys in a list of dictionaries"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method 1: Using loop", "Output", "Time complexity: ", "Auxiliary space: ", "Method 2: Using defaultdict", "defaultdict", "test_list", " print() ", "defaultdict", "test_list", " i ", "dict()", "defaultdict", " print() ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3: Using a dictionary comprehension.", "res", "test_list", " items()", "res", "res", "+", "res", "res", "Output", "Time complexity:", "Auxiliary space:", "Method 4: using the reduce() function from the functools module.", "Output", "Time complexity: ", "Auxiliary space: ", "Method 5: Using the itertools module.", "itertools", "chain.from_iterable()", "set()", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-concatenate-values-with-same-keys-in-a-list-of-dictionaries/?ref=ml_lbp"},
{"title": "Python | Pandas dataframe.asfreq() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.asfreq()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.asfreq()", "Syntax :", "Parameters :", "freq :", "method : ", "how :", "normalize :", "fill_value :", "Returns : ", "Example #1: ", "fill_value", "Output :", "Note :", "Example #2: ", "Output :", "Note :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-asfreq/?ref=ml_lbp"},
{"title": "Python Program to print hollow half diamond hash pattern - GeeksforGeeks", "h1": ["Python Program to print hollow half diamond hash pattern"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["N", "Examples:", "Input :", "Output :", "Input :", "Output :", "Approach:", "Upper part:", "Lower part:", "Below is the implementation:", "Output:", "Time Complexity:", "Space Complexity", "METHOD 2:Using string formatting and list comprehension", "APPROACH:", "ALGORITHM:", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-print-hollow-half-diamond-hash-pattern/?ref=ml_lbp"},
{"title": "Python | Replace sublist with other in list - GeeksforGeeks", "h1": ["Python | Replace sublist with other in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loop ( When sublist is given )", "Output : ", "Method #2 : Using list slicing ( When sublist index is given )", "Output : ", "Method #3 : Using re.sub() (Regular Expression)", "Output", "Method#4 using list comprehension", "Step-by-step algorithm:", "Output", "Time complexity:", "Auxiliary space:", "Method #5: Using built-in list methods", "Output", "Time complexity: ", "Auxiliary space: ", "Method #6:Using reduce", "Output", "Time Complexity: ", "Auxiliary Space:", "Method #7: Using itertools:", "Algorithm:", "Output", "Time complexity:", "Auxiliary Space: ", "Method#8: Using Recursive method.", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-replace-sublist-with-other-in-list/?ref=ml_lbp"},
{"title": "Python | Pandas dataframe.first_valid_index() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.first_valid_index()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.first_valid_index()", "Note :", "Syntax:", "Returns :", "Example #1: ", "Output :", "Example #2: ", "Output :", "Example #3: ", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-first_valid_index/?ref=ml_lbp"},
{"title": "Python | Pandas dataframe.idxmin() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.idxmin()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.idxmin()", "Syntax:", "Parameters :", "axis :", "skipna :", "Returns :", "Example #1: ", "Output :", "Example #2: ", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-idxmin/?ref=ml_lbp"},
{"title": "Python | Pandas dataframe.clip() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.clip()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.clip()", "Syntax:", "Parameters: ", "lower :", "upper :", "axis : ", "inplace :", "*args, **kwargs :", "Example #1: ", "Output :", "Example #2: ", "Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-clip/?ref=ml_lbp"},
{"title": "Python | Pandas Series.skew() - GeeksforGeeks", "h1": ["Python | Pandas Series.skew()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": [" Series.skew()", "Syntax:", "Parameter : ", "axis : ", "skipna : ", "level : ", "numeric_only : ", "**kwargs : ", "Returns :", "Example #1 : ", "Output : ", "Output : ", "Example #2 : ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-series-skew/?ref=next_article"},
{"title": "Python - Get Random Range Average - GeeksforGeeks", "h1": ["Python – Get Random Range Average"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using loop + uniform()", "Output : ", "Method #2 : Using sum() + uniform() + generator expression", "Output : ", "Output", "Method #3 : Using numpy():", "Algorithm :", "Output:", "The time complexity : O(num),", "The space complexity : O(num),", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-get-random-range-average/?ref=previous_article"},
{"title": "Python | Convert list of strings to space separated string - GeeksforGeeks", "h1": ["Python | Convert list of strings to space separated string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Approach #1 : ", "Output:", "Time complexity", "Auxiliary space:", "Approach #2 : ", "Output:", "Time complexity:", "Auxiliary space:", "Approach #3: Using for loop", "convert", "x", "lst", "x", "x", "strip()", "x", "lst", "convert", "lst", "Output", "Time complexity:", "Auxiliary space: ", "Approach #4 : Using reduce()", "Output", "Time Complexity", "Auxiliary Space:", " Method 5: Use the map() function along with the join() method.", "Output", "Time complexity: ", "Auxiliary space: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-convert-list-of-strings-to-space-separated-string/?ref=ml_lbp"},
{"title": "Python | Reversed Order keys in dictionary - GeeksforGeeks", "h1": ["Python | Reversed Order keys in dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using reversed() + sorted() + keys() + loop", "Output : ", "Time Complexity: O(N), where N is the length of the input string.", "Auxiliary Space: O(N)", "Method #2 : Using list() + keys() + sorted() + reversed()", "Output : ", "Method #3 : Using list comprehension + keys() + sorted() + reversed()", "Output", "Method #4: Using the heapq module", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-reversed-order-keys-in-dictionary/"},
{"title": "Python | Pattern Generation using time() module - GeeksforGeeks", "h1": ["Python | Pattern Generation using time() module"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["time() module", "Examples:", "Input  :", "Output :", "Input  :", "Output :", "Code : Python program to generate patterns", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pattern-generation-using-time-module/?ref=ml_lbp"},
{"title": "Python Program to Calculate Gross Salary of a Person - GeeksforGeeks", "h1": ["Python Program to Calculate Gross Salary of a Person"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Program to Calculate Gross Salary of a Person", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["basic ", "grade ", "Gross Salary:", "Examples:", "Input: ", "Output: ", "Input: ", "Output: ", "{IDE}", "Approach: ", "HRA:", "DA:", "PF:", "Output", "Time Complexity:", "Auxiliary Space:", "Output", " Time complexity: ", "Auxiliary space ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-to-calculate-gross-salary-of-a-person/?ref=next_article"},
{"title": "Python Slicing | Reverse an array in groups of given size - GeeksforGeeks", "h1": ["Python Slicing | Reverse an array in groups of given size"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example: ", "Output:", "Using Direct Function", "Output:", "Output", "Approach#3: Using list comprehension", "Algorithm:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-slicing-reverse-array-groups-given-size/"},
{"title": "Python - Skew-Normal Distribution in Statistics - GeeksforGeeks", "h1": ["Python – Skew-Normal Distribution in Statistics"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["scipy.stats.skewnorm()", "rv_continuous class", "Parameters : ", "q :", "x :", "loc :", "scale :", "size :", "moments :", "Results :", "Code #1 : Creating skew-normal continuous random variable", "Code #2 : skew-normal continuous variates and probability distribution", "Code #3 : Graphical Representation.", "Code #4 : Varying Positional Arguments", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-skew-normal-distribution-in-statistics/"},
{"title": "Python | Pandas dataframe.first_valid_index() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.first_valid_index()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.first_valid_index()", "Note :", "Syntax:", "Returns :", "Example #1: ", "Output :", "Example #2: ", "Output :", "Example #3: ", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-first_valid_index/?ref=next_article"},
{"title": "Python | Pandas dataframe.clip_upper() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.clip_upper()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.clip_upper()", "Syntax:", "Parameters: ", "threshold : ", "axis :", "inplace :", "Returns: ", "Example #1: ", "Output :", "Example #2: ", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-clip_upper/?ref=previous_article"},
{"title": "Python | Printing list vertically - GeeksforGeeks", "h1": ["Python | Printing list vertically"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using Naive Method", "Output :", "Method #2 : Using zip()", "Output :", "Method #3 : Using a list comprehension:", "Output", "Method #4 : Using Numpy", "Output:", "Time complexity: O(n*m)", "Auxiliary Space: O(n*m)", "Method#5: Using Pandas", "Output", "Time complexity: O(n*m)", "Auxiliary Space: O(n*m)", "Method#6: Using reduce():", "Algorithm:", "Output", "Time complexity:", "Space complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-printing-list-vertically/?ref=previous_article"},
{"title": "Python | Reverse Slicing of given string - GeeksforGeeks", "h1": ["Python | Reverse Slicing of given string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using join() + reversed()", "Output : ", "Method #2 : Using string slicing", "Output : ", "Method#3: Using another way of slicing ", "Output:", "Method#4: using a list comprehension and join()", "step-by-step algorithm for the approach:", "Output", "Time complexity:", "Auxiliary space:", "Method #5: Using a for loop and concatenation", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-reverse-slicing-of-given-string/"},
{"title": "Python | Pandas dataframe.eq() - GeeksforGeeks", "h1": ["Python | Pandas dataframe.eq()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " dataframe.eq()", "Syntax:", "Parameters: ", "other : ", "axis : ", "level :", "Returns: ", "Example #1: ", "Output :", "Example #2: ", "Note: ", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-eq/"},
{"title": "Python - Power Normal Distribution in Statistics - GeeksforGeeks", "h1": ["Python – Power Normal Distribution in Statistics"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["scipy.stats.powernorm()", "rv_continuous class", "Parameters : ", "q :", "x :", "loc :", "scale :", "size :", "moments :", "Results :", "Code #1 : Creating power normal continuous random variable", "Code #2 : power normal continuous variates and probability distribution", "Code #3 : Graphical Representation.", "Code #4 : Varying Positional Arguments", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-power-normal-distribution-in-statistics/"},
{"title": "Python - Construct Grades List - GeeksforGeeks", "h1": ["Python – Construct Grades List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using list comprehension + ord()", "Output : ", "Time complexity:", "Auxiliary space:", "Method #2 : Using join() + map() + product() + ascii_uppercase", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3: Using loop and list methods", "Output", "Time Complexity:", "Auxiliary Space:", "Method #4: Using itertools.product()", "Step-by-step approach:", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-construct-grades-list/?ref=next_article"},
{"title": "Python - Truncated Normal Distribution in Statistics - GeeksforGeeks", "h1": ["Python – Truncated Normal Distribution in Statistics"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["scipy.stats.truncnorm()", "rv_continuous class", "Parameters : ", "q :", "x :", "loc :", "scale :", "size :", "moments :", "Results :", "Code #1 : Creating Truncated Normal continuous random variable", "Code #2 : Truncated Normal continuous variates and probability distribution", "Code #3 : Graphical Representation.", "Code #4 : Varying Positional Arguments", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-truncated-normal-distribution-in-statistics/"},
{"title": "Python - Log Normal Distribution in Statistics - GeeksforGeeks", "h1": ["Python – Log Normal Distribution in Statistics"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["scipy.stats.lognorm()", "rv_continuous class", "Parameters : ", "q :", "x :", "loc :", "scale :", "size :", "moments :", "Results :", "Code #1 : Creating log-Normal continuous random variable", "\r\nCode #2 : log-Normal continuous variates and probability distribution", "Code #3 : Graphical Representation.", "Code #4 : Varying Positional Arguments", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-log-normal-distribution-in-statistics/?ref=ml_lbp"},
{"title": "Python Program to Construct n*m Matrix from List - GeeksforGeeks", "h1": ["Python Program to Construct n*m Matrix from List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method : ", "Example 1:", "Output:", "Time Complexity:", "Auxiliary Space:", "Example 2 :", "Output:", "Time Complexity:", "Auxiliary Space:", "Output", "Approach#4: Using numpy:", "Output:", "Time Complexity:", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-construct-nm-matrix-from-list/"},
{"title": "Python Program to Construct dictionary using random values - GeeksforGeeks", "h1": ["Python Program to Construct dictionary using random values"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Explanation :", "Input :", "Output :", "Explanation :", "Method #1 : Using ", "randint()", " + ", "loop", "Output:", "Method #2 : Using ", "dictionary comprehension", " + ", "randint()", "Output:", "Method #3: Using zip() and map()", "Step-by-step approach:", "Output", "Time complexity: ", "Auxiliary Space: ", "Method #4: Using ", "randrange() function", ":", "randrange() function", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-construct-dictionary-using-random-values/"},
{"title": "Python - Construct Grades List - GeeksforGeeks", "h1": ["Python – Construct Grades List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using list comprehension + ord()", "Output : ", "Time complexity:", "Auxiliary space:", "Method #2 : Using join() + map() + product() + ascii_uppercase", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3: Using loop and list methods", "Output", "Time Complexity:", "Auxiliary Space:", "Method #4: Using itertools.product()", "Step-by-step approach:", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-construct-grades-list/"},
{"title": "Python - Normal Distribution in Statistics - GeeksforGeeks", "h1": ["Python – Normal Distribution in Statistics"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What is Normal Distribution", "Normal Distribution Using Python ", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Symmetric distribution ", "Bell-Shaped curve", "Empirical Rule", "Additive Rule", "Central Limit Theoram", "Numpy", "Pandas ", "–", "Matplotlib", " – ", "Scipy", "Calculating the Probability distribution of single data points using Python ", "Output:", "Output:", "scipy.stats.norm()", "rv_continuous class", "q :", "x :", "loc :", "scale :", "size :", "Results :", "Output:", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-normal-distribution-in-statistics/?ref=ml_lbp"},
{"title": "Python | Shift zeroes at end of list - GeeksforGeeks", "h1": ["Python | Shift zeroes at end of list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension + isinstance()", "Output : ", "Time Complexity:", "Space Complexity: ", " Method #2 :", "Output : ", "Time complexity: ", "Space complexity: ", "Method #3 : Using counting 0’s and appending at end", "Output", "Method #4: Using two pointers", "Algorithm:", "Output", "Using numpy:", "Algorithm:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-shift-zeroes-at-end-of-list/"},
{"title": "Python | Merging duplicates to list of list - GeeksforGeeks", "h1": ["Python | Merging duplicates to list of list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using collections.Counter()", "Output", "Time complexity: ", "Auxiliary space: ", "Method #2 : Using itertools.groupby()", "Output", "Time complexity:", "Auxiliary space:", "Method #3 : Using count() and * operator", "Output", "Time complexity:", "Auxiliary space:", "Method #4 : Using set() and * operator", "Output", "Time complexity", "Auxiliary Space:", "Method 5:  using operator.countOf() method", "Output", "Time Complexity", "Auxiliary Space:", "Method #6: Using a dictionary", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-merging-duplicates-to-list-of-list/?ref=ml_lbp"},
{"title": "Python | Check if a nested list is a subset of another nested list - GeeksforGeeks", "h1": ["Python | Check if a nested list is a subset of another nested list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Approach #1 : Naive Approach", "Output:", "Time complexity:", "Auxiliary space: ", "Approach #2 : Using Python set", "Output:", "Approach #3 : Using ", "all", " and for loop", "Output:", "Time complexity: ", "Auxiliary space: ", "Approach #4: Using map() and __contains__", "Output:", "Time complexity: ", "Auxiliary space: ", "Approach #5: Using issubset() method:", "Output", "Approach #6:  Using the ‘itertools.product’ function", "Output", "Time Complexity:  O(n^2) ", "Auxiliary Space:  O(n^2) ", "Approach #7:Using enumerate", "Output", "Time Complexity:  O(n^2) ", "Auxiliary Space:  O(n^2) ", "Method#8: Using Recursive method.", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-check-if-a-nested-list-is-a-subset-of-another-nested-list/?ref=ml_lbp"},
{"title": "Python IMDbPY – Getting the countries of the series - GeeksforGeeks", "h1": ["Python IMDbPY – Getting the countries of the series"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-imdbpy-getting-the-countries-of-the-series/?ref=next_article"},
{"title": "Python Program for Common Divisors of Two Numbers - GeeksforGeeks", "h1": ["Python Program for Common Divisors of Two Numbers"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input ", "Output", "Explanation", "Input", "Output", "Explanation", "Output", "Time Complexity:", "a", "b", "Auxiliary Space:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-for-common-divisors-of-two-numbers/"},
{"title": "Python | Ways to create a dictionary of Lists - GeeksforGeeks", "h1": ["Python | Ways to create a dictionary of Lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Ways to Create a Dictionary of Lists", "Python3", "Python3", "Python3", "Python", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example", "Input: ", "Output: ", "Explanation:", "Problem Statement", "Output:", "Output:", "Time complexity:", "Auxiliary space: ", "Output:", "Time complexity:", "Auxiliary space complexity:", "Output:", "Time complexity :", "Space complexity : ", "Output:", "Time complexity:", "Auxiliary space complexity: ", "Note", "Output:", "Time complexity: O(n).", "Auxiliary space: O(n). ", "Output:", "Time complexity:", "Auxiliary space:", " itertools", "Output", "Time complexity: ", "Auxiliary space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-ways-to-create-a-dictionary-of-lists/"},
{"title": "Python next() method - GeeksforGeeks", "h1": ["Python next() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python next() Method Syntax", "Python next() Method Examples", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python’s next() function ", "Example ", "Output", "Note:", ".next()", "next()", "next() ", "Syntax :", "Parameters : ", "iter : ", "stopdef : ", "Return : ", "Iterating a List using the next() Function", "Output", "Output", "Output", "Output:", "Output", "Conclusion:", " Python For loop", "Applications: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-next-method/"},
{"title": "Python OpenCV - resizeWindow() Function - GeeksforGeeks", "h1": ["Python OpenCV – resizeWindow() Function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["resizeWindow() method in Python OpenCV", "CV_WINDOW_AUTOSIZE.", "Syntax: ", "Parameters:", "window_name: ", "width: ", " ", "height: ", "Return Value: ", "Image used for below examples:", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-opencv-resizewindow-function/"},
{"title": "Python: Update Nested Dictionary - GeeksforGeeks", "h1": ["Python: Update Nested Dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Refer to the below article to get the idea about dictionaries:", "Nested Dictionary:", "employees", "emp1, emp2", "d={'a':1, 'b':2, 'c':3}", "‘b’", "7", "d['b']=7", "name        age      Designation", "emp1 ", "emp2 ", "‘salary’", "An alternative approach", "package ", "flatten-dict", "flatten()", " method:", "dict ", "reducer", "unflatten()", " method:", "dict ", "splitter", "inverse", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-update-nested-dictionary/?ref=ml_lbp"},
{"title": "Python Dictionary keys() method - GeeksforGeeks", "h1": ["Python Dictionary keys() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["keys()", "Syntax:", "Parameters:", "Returns:", "Method 1:", "Output:", "Method 2: Python access dictionary by key", "Output:", "Note: ", "dict_keys ", "Method 3: Accessing key using keys() indexing", "Output:", "Method 4: Python Dictionary update() function", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-dictionary-keys-method/?ref=ml_lbp"},
{"title": "Python | sympy.StrictGreaterThan() method - GeeksforGeeks", "h1": ["Python | sympy.StrictGreaterThan() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["sympy.StrictGreaterThan()", "Syntax :", "Return :", "Example #1 :", "Output :", "Example #2 :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sympy-strictgreaterthan-method/"},
{"title": "Python | Convert two lists into a dictionary - GeeksforGeeks", "h1": ["Python | Convert two lists into a dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Converting Two Lists into a Dictionary", "Python3", "Python3", "Python", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Output:", "Time complexity: ", "Auxiliary Space: ", "{key: value for (key, value) in iterable}.", "Example:", "Output:", "Time complexity: ", "Auxiliary space: ", "Example:", "Output:", "Time complexity: O(n)", "Auxiliary space: O(n)", " using enumerate()", "Example:", "Output:", "Time complexity:", "Auxiliary space:", "Convert two lists into a dictionary using dict() and zip()", "Example:", " ", " ", "Output:", "Time complexity: O(n)", "Auxiliary space: O(n)", "Use the fromkeys() method of the dictionary object", "Example:", "Output:", "Time complexity:", "Auxiliary space:", "Convert two lists into a dictionary using the Itertools module and the groupby() function", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-convert-two-lists-into-a-dictionary/?ref=ml_lbp"},
{"title": "Python OpenCV: Optical Flow with Lucas-Kanade method - GeeksforGeeks", "h1": ["Python OpenCV: Optical Flow with Lucas-Kanade method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Prerequisites:", "Syntax:", "Parameters:", "prevImg", "nextImg", "prevPts", "winSize", "maxLevel", "criteria", "Return: ", "nextPts", "status", "err", "Example: ", "Output: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-opencv-optical-flow-with-lucas-kanade-method/?ref=lbp"},
{"title": "Python OpenCV - getRotationMatrix2D() Function - GeeksforGeeks", "h1": ["Python OpenCV – getRotationMatrix2D() Function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["cv2.getRotationMatrix2D() ", "Syntax: ", "Parameters: ", "center: ", "angle(θ): ", "scale: ", "Return: ", "affine transformation. ", "Image Used:", "Example 1:", "Output-", "Example 2:", "Output-", "Output-", "Example 4:", "Output – ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-opencv-getrotationmatrix2d-function/?ref=lbp"},
{"title": "Python OpenCV - getTrackbarPos() Function - GeeksforGeeks", "h1": ["Python OpenCV – getTrackbarPos() Function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["getTrackbarPos() is Function in Python OpenCV ", "Syntax : ", "Parameters :", "trackbarname:", "winname:", "Return :", "Note: ", "Below is the implementation:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-opencv-gettrackbarpos-function/?ref=lbp"},
{"title": "Python OpenCV - setWindowProperty() Function - GeeksforGeeks", "h1": ["Python OpenCV – setWindowProperty() Function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Stepwise Implementation:", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Parameters:", "windowsName:", "prop_id:", "prop_value:", "Step 1: ", "Syntax:", "Step 2:", "Step 3: ", "shape :", "dtype : ", "Step 4: ", "Step 5:", "Step 6:", "Step 7:", "Step 8: ", "Step 8.1: ", "Step 8.2: ", "Step 8.3:", "Step 8.4: ", "Step 9: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-opencv-setwindowproperty-function/?ref=ml_lbp"},
{"title": "Python - Convert list of dictionaries to dictionary of lists - GeeksforGeeks", "h1": ["Python – Convert list of dictionaries to dictionary of lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Method 1: Using for loop", "Python3", "Python3", "Method 2: Using ", "dictionary comprehension", "Python3", "Method 3: Using ", "pandas DataFrame", "Python3", "Method 4: Using NumPy", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output:", "Example:", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Syntax", "where", "Example:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Syntax", "Where:", "Example", "Output", "Time Complexity: ", "Auxiliary Space: ", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-convert-list-of-dictionaries-to-dictionary-of-lists/?ref=ml_lbp"},
{"title": "Python | Select random value from a list - GeeksforGeeks", "h1": ["Python | Select random value from a list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Select the Random Value from a List", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example", "Input:", "Output: ", "Explaination:", "Python", "Output:", "Output:", "Output:", "Select the random value from a list using random.random()", "Output:", "Output:", "random.choices", "Output:", "Note:", "Output:", "Time Complexity: ", "Space Complexity:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-select-random-value-from-a-list/?ref=ml_lbp"},
{"title": "Python OpenCV - Dense optical flow - GeeksforGeeks", "h1": ["Python OpenCV – Dense optical flow"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Dense Optical flow", " Franeback Method", "What kind of Experience do you want to share?"], "strong": ["Prerequisites:", "Optical flow", "Output ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-opencv-dense-optical-flow/"},
{"title": "Python OpenCV | cv2.imread() method - GeeksforGeeks", "h1": ["Python OpenCV | cv2.imread() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Examples of OpenCV cv2.imread() Method ", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["OpenCV-Python", "Example:", "Output:", "Syntax:", "cv2.IMREAD_COLOR – ", "1", "cv2.IMREAD_GRAYSCALE – ", "0", "cv2.IMREAD_UNCHANGED – ", "-1", "Output:", "Output:", "Output:", "image", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-opencv-cv2-imread-method/?ref=lbp"},
{"title": "Python | sympy.is_positive() method - GeeksforGeeks", "h1": ["Python | sympy.is_positive() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax: ", "Parameter: ", "Return: ", "Code #1: ", "Code #2: ", "Code #3:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sympy-is_positive-method/?ref=ml_lbp"},
{"title": "Python | sympy.combinatoric.Polyhedron() method - GeeksforGeeks", "h1": ["Python | sympy.combinatoric.Polyhedron() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["sympy.combinatoric.Polyhedron()", "Syntax: ", "Return: ", "Example #1:", "Output:", "Example #2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sympy-combinatoric-polyhedron-method/"},
{"title": "Python | Pandas Series.truncate() - GeeksforGeeks", "h1": ["Python | Pandas Series.truncate()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "What kind of Experience do you want to share?"], "strong": [" Series.truncate()", "Syntax:", "Parameter : ", "before : ", "after : ", "axis : ", "copy : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-series-truncate/?ref=ml_lbp"},
{"title": "Python OpenCV | cv2.imwrite() method - GeeksforGeeks", "h1": ["Python OpenCV | cv2.imwrite() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "What kind of Experience do you want to share?"], "strong": ["OpenCV-Python", "Syntax:", "Parameters:", "filename:", "image:", "Return Value:", "Example #1:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-opencv-cv2-imwrite-method/"},
{"title": "Python | Create video using multiple images using OpenCV - GeeksforGeeks", "h1": ["Python | Create video using multiple images using OpenCV"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "What kind of Experience do you want to share?"], "strong": ["Install the following libraries:", "How it works ?", "Output: ", "Better alternatives: ", "ffmpeg python library", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-create-video-using-multiple-images-using-opencv/?ref=lbp"},
{"title": "Python OpenCv: Write text on video - GeeksforGeeks", "h1": ["Python OpenCv: Write text on video"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "What kind of Experience do you want to share?"], "strong": [" Syntax ", "Parameters", "frame:", "Text:", "org:", "font:", "color:", "thickness:", "Example:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-opencv-write-text-on-video/?ref=ml_lbp"},
{"title": "Python string | capwords() method - GeeksforGeeks", "h1": ["Python string | capwords() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["capwords()", "Syntax:", "Return Value:", "sep", "None", "sep", "Code #1:", "sep", "None", "Output:", "Code #2:", "sep", "None.", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-string-capwords-method/?ref=ml_lbp"},
{"title": "Python String rjust() Method - GeeksforGeeks", "h1": ["Python String rjust() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python String rjust() Method Syntax", "Python String rjust() Method Example", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python String rjust() method", "Syntax: ", "Parameters:", "length", "fillchar", "Return: ", "Output:", "*", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-string-rjust-method/?ref=previous_article"},
{"title": "Python String Methods - GeeksforGeeks", "h1": ["Python String Methods"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Case Changing of Strings", "Python3", "List of Python String Methods", "What kind of Experience do you want to share?"], "strong": ["Python string methods ", "Note: ", "Python string", "lower():", "upper():", "title():", "swapcase():", " ", "capitalize()", ":", "Example: ", "Output", "Time complexity: ", "Auxiliary space: ", "Note: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-string-methods/?ref=ml_lbp"},
{"title": "Python String ljust() Method - GeeksforGeeks", "h1": ["Python String ljust() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python String ljust() Method Syntax:", "Python String ljust() Method Example:", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python String ljust() method ", "Syntax: ", "Parameters:", "Return: ", "Output:", "Output:", "Explanation:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-string-ljust-method/?ref=ml_lbp"},
{"title": "Python | Pandas PeriodIndex.month - GeeksforGeeks", "h1": ["Python | Pandas PeriodIndex.month"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " PeriodIndex.month", "Syntax :", "Parameters : ", "Return : ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-periodindex-month/?ref=ml_lbp"},
{"title": "Python | Pandas Series.is_monotonic_decreasing - GeeksforGeeks", "h1": ["Python | Pandas Series.is_monotonic_decreasing"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " Series.is_monotonic_decreasing", "Syntax:", "Parameter : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2 : ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-series-is_monotonic_decreasing/"},
{"title": "Python String islower() method - GeeksforGeeks", "h1": ["Python String islower() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python String islower() Method Syntax", "Python String islower() Method Example", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python String islower()", "True ", "False", "Syntax:  ", "Returns: ", "Output:", "Example 1: ", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-string-islower-method/?ref=ml_lbp"},
{"title": "Python | Corner detection with Harris Corner Detection method using OpenCV - GeeksforGeeks", "h1": ["Python | Corner detection with Harris Corner Detection method using OpenCV"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Python3", "What kind of Experience do you want to share?"], "strong": ["Harris Corner detection", "About the function used: ", "Syntax:", "Parameters:", "src", "dest", "blockSize", "ksize", "freeParameter", "borderType", "Input:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-corner-detection-with-harris-corner-detection-method-using-opencv/"},
{"title": "Python OpenCV - Morphological Operations - GeeksforGeeks", "h1": ["Python OpenCV – Morphological Operations"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Computer Vision", "Image Processing & Transformation", "Feature Extraction and Description", "Deep Learning for Computer Vision", "Object Detection and Recognition", "Image Segmentation", "3D Reconstruction", "Introduction to Computer Vision", "Image Processing & Transformation", "Feature Extraction and Description", "Deep Learning for Computer Vision", "Object Detection and Recognition", "Image Segmentation", "3D Reconstruction", "Images used for demonstration:", "Erosion", "Python3", "Dilation", "Python3", "Opening", "Python3", "Closing", "Python3", "Morphological Gradient", "Python3", "Top Hat", "Python3", "Black Hat", "Python3", "What kind of Experience do you want to share?"], "strong": ["Morphological operations based on OpenCV are as follows:", "binary image", "kernel structuring element", "Erosion", "Erosion ", "Code:", "Output:", "Dilation ", "Code:", "Output:", "Opening", "Opening", "Code:", "Output:", "Closing ", "Code:", "Output:", "Code:", "Output:", "Code:", "Output:", "Code:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-opencv-morphological-operations/"},
{"title": "Python IMDbPY – Searching movies matching with keyword - GeeksforGeeks", "h1": ["Python IMDbPY – Searching movies matching with keyword"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax :", "Argument :", "Return :", "Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-imdbpy-searching-movies-matching-with-keyword/?ref=next_article"},
{"title": "Python | Pandas Series.duplicated() - GeeksforGeeks", "h1": ["Python | Pandas Series.duplicated()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": [" Series.duplicated()", "Syntax:", "Parameter : ", "keep : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2 : ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-series-duplicated/"},
{"title": "Python | Pandas DatetimeIndex.month - GeeksforGeeks", "h1": ["Python | Pandas DatetimeIndex.month"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " DatetimeIndex.month", "Syntax:", "Return: ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-datetimeindex-month/"},
{"title": "Python String islower() method - GeeksforGeeks", "h1": ["Python String islower() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python String islower() Method Syntax", "Python String islower() Method Example", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python String islower()", "True ", "False", "Syntax:  ", "Returns: ", "Output:", "Example 1: ", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-string-islower-method/"},
{"title": "Python | Pandas Timestamp.to_julian_date - GeeksforGeeks", "h1": ["Python | Pandas Timestamp.to_julian_date"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " Timestamp.to_julian_date()", "Syntax :", "Parameters : ", "Return : ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-timestamp-to_julian_date/"},
{"title": "Python | Pandas Series.kurtosis() - GeeksforGeeks", "h1": ["Python | Pandas Series.kurtosis()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": [" Series.kurtosis()", "Syntax:", "Parameter : ", "axis : ", "skipna : ", "level : ", "numeric_only : ", "**kwargs : ", "Returns :", "Example #1: ", "Output : ", "Output : ", "Example #2 : ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-series-kurtosis/"},
{"title": "Python SQLite - Working with Date and DateTime - GeeksforGeeks", "h1": ["Python SQLite – Working with Date and DateTime"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "SQLite in Python - Getting Started", "SQLite Queries", "SQLite Clause", "SQLite Working with Data", "Working with Images", "Python SQLite - Exercise", "Python SQLite Additional", "SQLite in Python - Getting Started", "SQLite Queries", "SQLite Clause", "SQLite Working with Data", "Working with Images", "Python SQLite - Exercise", "Python SQLite Additional", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["SQLite", "detect_types", "PARSE_DECLTYPES", "PARSE_COLNAMES", "Syntax: ", "sqlite3.PARSE_DECLTYPES: ", "sqlite3.PARSE_COLNAMES:", "now() ", "Output:", "detect_types", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sqlite-working-with-date-and-datetime/"},
{"title": "Python | pandas.to_markdown() in Pandas - GeeksforGeeks", "h1": ["Python | pandas.to_markdown() in Pandas"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["pandas.to_markdown()", "Syntax : ", "Return : ", "Example #1 :", "Output :", "Example #2 :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-to_markdown-in-pandas/"},
{"title": "Python | Pandas Series.tolist() - GeeksforGeeks", "h1": ["Python | Pandas Series.tolist()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas", "tolist()", "Data Structures & Algorithms in JavaScript - Self Paced ", "Complete Test Series for Service-Based Companies ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-series-tolist/"},
{"title": "Python | Pandas Index.astype() - GeeksforGeeks", "h1": ["Python | Pandas Index.astype()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " Index.astype()", "Syntax:", "Parameters : ", "dtype : ", "copy : ", "Example #1: ", "Output : ", "Example #2: ", "Output : ", "Example #3: ", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-index-astype/"},
{"title": "Python | Difference between Pandas.copy() and copying through variables - GeeksforGeeks", "h1": ["Python | Difference between Pandas.copy() and copying through variables"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas .copy()", "Data Structures & Algorithms in JavaScript - Self Paced ", "Complete Test Series for Service-Based Companies ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-difference-between-pandas-copy-and-copying-through-variables/"},
{"title": "Pandas DataFrame mean() Method - GeeksforGeeks", "h1": ["Pandas DataFrame mean() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Pandas DataFrame mean() ", "Pandas DataFrame.mean() Examples", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas", " ", " dataframe.mean()", "Syntax:", "Parameters :", "axis : ", "skipna :", "level :", "numeric_only :", "Returns :", "Example 1:", "Output:", "Example 2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-mean/"},
{"title": "Python | Pandas Timestamp.dayofyear - GeeksforGeeks", "h1": ["Python | Pandas Timestamp.dayofyear"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " Timestamp.dayofyear", "Syntax :", "Parameters : ", "Return : ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-timestamp-dayofyear/?ref=ml_lbp"},
{"title": "Python | Pandas DatetimeIndex.hour - GeeksforGeeks", "h1": ["Python | Pandas DatetimeIndex.hour"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " DatetimeIndex.hour", "Syntax:", "Return: ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-datetimeindex-hour/"},
{"title": "Python | Pandas Timestamp.weekday - GeeksforGeeks", "h1": ["Python | Pandas Timestamp.weekday"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " Timestamp.weekday()", "Syntax :", "Parameters : ", "Return : ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "GATE Data Science and Artificial Intelligence 2025 "], "link": "https://www.geeksforgeeks.org/python-pandas-timestamp-weekday/?ref=ml_lbp"},
{"title": "Python | Pandas DatetimeIndex.strftime() - GeeksforGeeks", "h1": ["Python | Pandas DatetimeIndex.strftime()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " DatetimeIndex.strftime()", "Syntax:", "Parameters : ", "date_format : ", "Return : ", "Example #1: ", "Output : ", "Output : ", "Example #2: ", "Output : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-datetimeindex-strftime/?ref=next_article"},
{"title": "Python | Pandas DataFrame.where() - GeeksforGeeks", "h1": ["Python | Pandas DataFrame.where()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Pandas DataFrame.where() Function Syntax", "Python Pandas DataFrame.where() Examples", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Pandas ", "where()", "Syntax:", "Parameters", "cond", "other", "inplace", "axis", "Output", "Pandas DataFrame.", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pandas-dataframe-where/"},
{"title": "Python SQLite - CRUD Operations - GeeksforGeeks", "h1": ["Python SQLite – CRUD Operations"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "SQLite in Python - Getting Started", "SQLite Queries", "SQLite Clause", "SQLite Working with Data", "Working with Images", "Python SQLite - Exercise", "Python SQLite Additional", "SQLite in Python - Getting Started", "SQLite Queries", "SQLite Clause", "SQLite Working with Data", "Working with Images", "Python SQLite - Exercise", "Python SQLite Additional", "CRUD Operations", "Python", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["CRUD Operations", "Syntax: ", "Output:", "Syntax: INSERT", "INTO", "VALUES ", ".", "INSERT", "INTO", "VALUES ", "Output:", "SELECT: ", "* ", "FROM: ", "WHERE: ", "Example: SELECT ", "FROM", "WHERE", "Output:", "Syntax: UPDATE ", "SET ", "WHERE ", "EXAMPLE: UPDATE ", "SET ", "WHERE ", "Output:", "SYNTAX: DELETE FROM ", "WHERE ", "EXAMPLE: DELETE FROM ", "WHERE ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sqlite-crud-operations/?ref=previous_article"},
{"title": "Python | Pandas Series.mul() - GeeksforGeeks", "h1": ["Python | Pandas Series.mul()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas", "Series.mul()", "other: ", "fill_value: ", "level: ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/python-pandas-series-mul/"},
{"title": "Python | Reverse Slicing of given string - GeeksforGeeks", "h1": ["Python | Reverse Slicing of given string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using join() + reversed()", "Output : ", "Method #2 : Using string slicing", "Output : ", "Method#3: Using another way of slicing ", "Output:", "Method#4: using a list comprehension and join()", "step-by-step algorithm for the approach:", "Output", "Time complexity:", "Auxiliary space:", "Method #5: Using a for loop and concatenation", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-reverse-slicing-of-given-string/?ref=ml_lbp"},
{"title": "Python IMDbPY - Checking if person is part of movie or not - GeeksforGeeks", "h1": ["Python IMDbPY – Checking if person is part of movie or not"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-imdbpy-checking-if-person-is-part-of-movie-or-not/?ref=next_article"},
{"title": "Python PIL | ImagePath.Path.tolist() method - GeeksforGeeks", "h1": ["Python PIL | ImagePath.Path.tolist() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Pillow", "Installation and setup", "Loading and Saving Images", "Image Manipulation Basics", "Adjusting Image Properties", "Image Filtering and Effects", "Drawing on Images", "Image Transformations", "Working with Image Metadata", "Image Analysis and Processing", "Image Compositing and Blending", "Image Formats and Conversion", "Batch Processing and Automation", "Image Enhancement Techniques", "Working with Animated Images", "OCR and Text Extraction from Images", "Pillow function", "Introduction to Pillow", "Installation and setup", "Loading and Saving Images", "Image Manipulation Basics", "Adjusting Image Properties", "Image Filtering and Effects", "Drawing on Images", "Image Transformations", "Working with Image Metadata", "Image Analysis and Processing", "Image Compositing and Blending", "Image Formats and Conversion", "Batch Processing and Automation", "Image Enhancement Techniques", "Working with Animated Images", "OCR and Text Extraction from Images", "Pillow function", "What kind of Experience do you want to share?"], "strong": ["ImagePath", "ImagePath.Path.tolist()", "Syntax:", "Parameters:", "flat", "Returns:", "Output:", "Another Example:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pil-imagepath-path-tolist-method/"},
{"title": "Python | Pandas series.str.get() - GeeksforGeeks", "h1": ["Python | Pandas series.str.get()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", "str.get()", " at the passed position.", ".str", " ", "str.get()", "str.split()", "Data Structures & Algorithms in JavaScript - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/python-pandas-series-str-get/?ref=ml_lbp"},
{"title": "Python IMDbPY – Getting plot outline of the series - GeeksforGeeks", "h1": ["Python IMDbPY – Getting plot outline of the series"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Output :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-imdbpy-getting-plot-outline-of-the-series/?ref=ml_lbp"},
{"title": "Python | Pandas Series.le() - GeeksforGeeks", "h1": ["Python | Pandas Series.le()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", " ", "series.le()", "series <= other series.", "Data Structures & Algorithms in JavaScript - Self Paced ", "Complete Test Series for Service-Based Companies ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-series-le/?ref=ml_lbp"},
{"title": "Python Program to Filter Rows with a specific Pair Sum - GeeksforGeeks", "h1": ["Python Program to Filter Rows with a specific Pair Sum"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method 1: ", "Output", "Method 2 : ", "Output:", "Method #3:Using itertools.filterfalse() method", "Output", "Time Complexity: O(N*N)", "Auxiliary Space: O(N*N)", "Method #4: Using sets", "Approach:", "Output", "Time complexity: O(n^2)", "Auxiliary space: O(n) ", "Method 5: Using the two-pointer technique.", "Output", "Time complexity: ", "Auxiliary Space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-filter-rows-with-a-specific-pair-sum/?ref=ml_lbp"},
{"title": "Python - seaborn.swarmplot() method - GeeksforGeeks", "h1": ["Python – seaborn.swarmplot() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Styling Plots", "Multiple Plots", "Scatter Plot", "Line Plot", "Bar Plot", "Count Plot", "Box Plot", "Violin Plot", "Strip Plot", "Swarm Plot", "Factor Plot", "Histogram", "Pairplot", "KDE Plot", "Heatmap", "Catplot", "Introduction", "Styling Plots", "Multiple Plots", "Scatter Plot", "Line Plot", "Bar Plot", "Count Plot", "Box Plot", "Violin Plot", "Strip Plot", "Swarm Plot", "Factor Plot", "Histogram", "Pairplot", "KDE Plot", "Heatmap", "Catplot", "seaborn.swarmplot()", "What kind of Experience do you want to share?"], "strong": ["Syntax : ", "Parameters : ", "x, y, hue : ", "data : ", "order, hue_order : ", "dodge : To separate the strips for different hue levels along the categorical axis", "orient : ", "color : ", "palette : ", "size : ", "edgecolor : ", "linewidth : ", "ax : ", "kwargs : ", "Returns : ", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-seaborn-swarmplot-method/?ref=lbp"},
{"title": "Python Program to Check if a given matrix is sparse or not - GeeksforGeeks", "h1": ["Python Program to Check if a given matrix is sparse or not"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Method #2:Using count() function", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Output", "Time complexity", "Auxiliary Space: ", "Output", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "DSA for Interview Preparation "], "link": "https://www.geeksforgeeks.org/python-program-to-check-if-a-given-matrix-is-sparse-or-not/?ref=ml_lbp"},
{"title": "Python Program to Convert any Positive Real Number to Binary string - GeeksforGeeks", "h1": ["Python Program to Convert any Positive Real Number to Binary string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input:", "Output:", "Input:", "Output:", "Mathematical Logic along with steps done in programming:", "The integer part and the Fraction part", "Integer Part:", "Step 1:", "Step 2:", "Step 3:", "Programming steps:", "Fractional Part:", "Step 1:", "Step 2:", "Programming Steps:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-convert-any-positive-real-number-to-binary-string/"},
{"title": "Python | Working with Pandas and XlsxWriter | Set – 2 - GeeksforGeeks", "h1": ["Python | Working with Pandas and XlsxWriter | Set – 2"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "What kind of Experience do you want to share?"], "strong": [" Prerequisite: :", "Pandas", " Code #1 :", " Output :", " Code #2 :", " Output :", " Code #3 :", " Output :", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-working-with-pandas-and-xlsxwriter-set-2/?ref=lbp"},
{"title": "Python program to read character by character from a file - GeeksforGeeks", "h1": ["Python program to read character by character from a file"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Read a file character by character in Python ", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example", "Input: ", "Output: ", "Explanation: ", "Read character by character from a file", "Code Explanation: ", "Output ", "Time complexity:", "Auxiliary space:", "Reading more than one character", "Output ", "Master C Programming with Data Structures ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-read-character-by-character-from-a-file/?ref=ml_lbp"},
{"title": "Python | Find closest number to k in given list - GeeksforGeeks", "h1": ["Python  | Find closest number to k in given list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Method #1 : ", "Output:", "Method #2 : ", "Output:", "Method #3:", "Output", "Output", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-find-closest-number-to-k-in-given-list/?ref=ml_lbp"},
{"title": "Python | Play a video using OpenCV - GeeksforGeeks", "h1": ["Python | Play a video using OpenCV"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["OpenCV ", "Syntax", "Step 1: ", "Step 2: ", "Step 3:", "Step 4:", "Output:", "Note : ", "Explanation:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-play-a-video-using-opencv/?ref=next_article"},
{"title": "Python Pandas Series - GeeksforGeeks", "h1": ["Python Pandas Series"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Pandas Series Examples", "Python3", "Python Pandas Series", "Creating a Pandas Series", "Python3", "Accessing element of Series", "Indexing and Selecting Data in Series", "Binary Operation on Series", "Conversion Operation on Series"], "strong": ["Output :", "Creating a series from array:", "Output :", "Creating a series from Lists", ":", "Output :", "Accessing Element from Series with Position :", "Output :", "Accessing Element Using Label (index) :", "Output :", "Subset Selection", "Indexing a Series using indexing operator ", "[]", " :", "Output:", "Output :", "Indexing a Series using ", ".loc[ ]", " :", "Output:", "Output :", "Indexing a Series using ", ".iloc[ ]", " :", "Output:", "Output :", "Code #1:", "Output", "Output :", "Code #2:", "Output:", "Output :", "Code #1:", "Output :", "Code #2:", "Output :", "Binary operation methods on series:", "add()", "sub()", "mul()", "div()", "sum()", "prod()", "mean()", "pow()", "abs()", "cov()", "Pandas series method:", "Series()", "combine_first()", "count()", "size()", "name()", "is_unique()", "idxmax()", "idxmin()", "sort_values()", "sort_index()", "head()", "tail()", "le()", "ne()", "ge()", "eq()", "gt()", "lt()", "clip()", "clip_lower()", "clip_upper()", "astype()", "tolist()", "get()", "unique()", "nunique()", "value_counts()", "factorize()", "map()", "between()", "apply()", "Data Structures & Algorithms in JavaScript - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/python-pandas-series/?ref=lbp"},
{"title": "Python - Count occurrences of each word in given text file - GeeksforGeeks", "h1": ["Python – Count occurrences of each word in given text file"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Consider the files with punctuation", "Python3", "What kind of Experience do you want to share?"], "strong": ["File sample.txt", "sample.txt", "Example 1:", "Output:", "Example", "Output:", "Example", "Output:", "Sample.txt:", "Code:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-count-occurrences-of-each-word-in-given-text-file/"},
{"title": "Python program to count the number of spaces in string - GeeksforGeeks", "h1": ["Python program to count the number of spaces in string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input:", "Output:", "Input:", "Output:", "Approach:", "Example 1:", "Output:", "Example 2:", "Output:", "Example 3: Using the count() function.", "Output: ", "Time Complexity: ", "Auxiliary Space: ", "Example 4: Using isspace() function in python3", "Output", "Example 5: Using Counter() function", "Output", "Example #6: Using operator.countOf() method:", "Output", "Time complexity: O(n)", "Auxiliary Space: O(1)", "Example #7: Using Recursion", "Output", "Time complexity: O(n)", "Auxiliary Space: O(n)", "Example #8: Using  reduce(): ", "Output", "The time complexity : O(n)", "The space complexity : O(1),", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-program-to-count-the-number-of-spaces-in-string/?ref=ml_lbp"},
{"title": "Python Program for N Queen Problem | Backtracking-3 - GeeksforGeeks", "h1": ["Python Program for N Queen Problem | Backtracking-3"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "N-Queen in Different languages", "N-Queen in Different languages", "Python3", "What kind of Experience do you want to share?"], "strong": ["PRACTICE", "Output:", "Time Complexity", "Auxiliary Space", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-for-n-queen-problem-backtracking-3/"},
{"title": "Python | Sorting string using order defined by another string - GeeksforGeeks", "h1": ["Python | Sorting string using order defined by another string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input : pat = \"asbcklfdmegnot\", str = \"eksge\"", "Output : str = \"geeks\"", "Input : pat = \"mgewqnasibkldjxruohypzcftv\", str = \"niocgd\"", "Output : str = \"coding\"", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master Java Programming - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-sorting-string-using-order-defined-by-another-string/"},
{"title": "Python | numpy.assert_allclose() method - GeeksforGeeks", "h1": ["Python | numpy.assert_allclose() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["numpy.assert_allclose()", "Syntax :", "Return :", "Example #1 :", "Output :", "Example #2 :", "Output :", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-numpy-assert_allclose-method/?ref=ml_lbp"},
{"title": "Python String Methods | Set 3 (strip, lstrip, rstrip, min, max, maketrans, translate, replace & expandtabs()) - GeeksforGeeks", "h1": ["Python String Methods | Set 3 (strip, lstrip, rstrip, min, max, maketrans, translate, replace &  expandtabs())"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "Python", "Python", "Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["1. strip()", " delete all the leading and trailing ", "2. lstrip()", "delete all the leading", "3. rstrip()", "delete all the trailing", "4. min(“string”)", "minimum value alphabet", "5. max(“string”)", "maximum value alphabet", "6. maketrans()", "map the contents of string 1 with string 2", "7. translate()", "swap the string elements mapped", "8.replace()", "replace the substring with a new substring", "The string to replace, new string which would replace and max value denoting the limit to replace action ( by default unlimited ). ", "9. expandtabs()", "replace all tab characters(“\\t”) with whitespace", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-string-methods-set-3-strip-lstrip-rstrip-min-max-maketrans-translate-replace-expandtabs/"},
{"title": "Python | String Split including spaces - GeeksforGeeks", "h1": ["Python | String Split including spaces"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using split() + list comprehension", "Output", "Time complexity: ", "Auxiliary space complexity:", "Method #2 : Using zip() + chain() + cycle()", "Output : ", "Time complexity: O(n)", "Auxiliary space complexity: O(n)", "Method #3: Using replace() and split() methods", "Output", "Time complexity:", "Auxiliary space:", "Method #4: Using re", "Algorithm:", "Output", "Time complexity:", "Auxiliary space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-string-split-including-spaces/"},
{"title": "Python String zfill() - GeeksforGeeks", "h1": ["Python String zfill()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python String zfill() method ", "Syntax: ", "Parameters:", "Return:", "Output: ", "Output: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-string-zfill/"},
{"title": "Python - __lt__ magic method - GeeksforGeeks", "h1": ["Python – __lt__  magic method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python __lt__ magic method Syntax", "Python3", "Python __lt__ magic method Example", "Python3", "Python3", "Conclusion:", "What kind of Experience do you want to share?"], "strong": ["Python  __lt__  magic method ", " ", "Syntax: __lt__(self, obj)", "self: ", "obj:", "Returns: ", "Note: ", "Output:", "Output:", "Explanation:", "Output:", "Conclusion:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-__lt__-magic-method/?ref=previous_article"},
{"title": "Python - Read file from sibling directory - GeeksforGeeks", "h1": ["Python – Read file from sibling directory"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "Python", "Python", "Python", "What kind of Experience do you want to share?"], "strong": ["Directory Tree:", "file.txt:", "Output:", "Output:", "Output:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-read-file-from-sibling-directory/"},
{"title": "Python Program for Subset Sum Problem | DP-25 - GeeksforGeeks", "h1": ["Python Program for Subset Sum Problem | DP-25"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Subset sum in Different languages", "Subset sum in Different languages", "                                                ", "Recommended: Please solve it on “", "PRACTICE", " ” first, before moving on to the solution.", "                                            ", "Python Program for Subset Sum Problem using ", "Recursion", ":", "Python3", "Python Program for Subset Sum Problem using ", "Memoization", ":", "Python3", "Python Program for Subset Sum Problem using ", "Dynamic Programming", ":", "Python3", "Python Program for Subset Sum Problem using ", "Dynamic Programming", " with space optimization to linear:", "Python3", "What kind of Experience do you want to share?"], "strong": ["sum", "sum. ", "Examples:", "Input: ", "Output:", "Explanation: ", "Input:", "Output: ", "Explanation: ", "new required sum = required sum – value of ‘last’ element", "new required sum = old required sum", "Step-by-step approach:", "Output", "Time Complexity:", "Auxiliary space", "Output", "Time Complexity", "Auxiliary space", "boolean", "dp[i][j]", " true", "set[0 . . . i] ", "sum value = ‘j’.", "Output", "Time Complexity", "Auxiliary Space", "sum*n", "Step-by-step approach:", "prev", "curr", "Sum+1", "curr", "curr", "prev", "prev", "Output", "Time Complexity: ", "Auxiliary Space", "sum+1", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-for-subset-sum-problem-dp-25/"},
{"title": "Python | Reversed Split Strings - GeeksforGeeks", "h1": ["Python | Reversed Split Strings"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using join() + reversed() + split()", "Output : ", "Method #2 : Using join() + split() + list slicing", "Output : ", "Time Complexity: ", "Auxiliary Space: ", "Output", "Method #4: Using reduce():", "Output", "The time complexity :O(n),", "The space complexity :O(n),", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-reversed-split-strings/?ref=next_article"},
{"title": "Python Program for Rat in a Maze | Backtracking-2 - GeeksforGeeks", "h1": ["Python Program for Rat in a Maze | Backtracking-2"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Recommended: Please solve it on “", "PRACTICE", "” first, before moving on to the solution.", "Python Program for Rat in a Maze using ", "Backtracking", ":", "Python3", "What kind of Experience do you want to share?"], "strong": ["(0, 0)", " ", "N * N", "(N – 1, N – 1)", "‘U'(up)", "‘D'(down)", "‘L’ (left)", "‘R’ (right)", "Note", "Backtracking Algorithm", ":", "Approach: ", "all possible paths", "directions ", "bottom right cell", "Step-by-step approach:", "blocked ", "isValid(r, c) ", "bottom right", "currentPath ", "ans ", "unblocked", "Output", "Time Complexity: ", "Auxiliary Space:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-for-rat-in-a-maze-backtracking-2/"},
{"title": "Python Program for N Queen Problem | Backtracking-3 - GeeksforGeeks", "h1": ["Python Program for N Queen Problem | Backtracking-3"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "N-Queen in Different languages", "N-Queen in Different languages", "Python3", "What kind of Experience do you want to share?"], "strong": ["PRACTICE", "Output:", "Time Complexity", "Auxiliary Space", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-for-n-queen-problem-backtracking-3/?ref=lbp"},
{"title": "Python | Pandas Series.combine_first() - GeeksforGeeks", "h1": ["Python | Pandas Series.combine_first()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Pandas ", "combine_first()", "Data Structures & Algorithms in JavaScript - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Test Series for Service-Based Companies "], "link": "https://www.geeksforgeeks.org/python-pandas-series-combine_first/"},
{"title": "Python - Import module outside directory - GeeksforGeeks", "h1": ["Python – Import module outside directory"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "Python", "Python", "Python", "Python", "What kind of Experience do you want to share?"], "strong": ["Our directory tree will be as follows:", "mod.py:", "Method 1: Using sys.path.append()", "Output:", "Output:", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-import-module-outside-directory/"},
{"title": "Python Program To Delete Middle Of Linked List - GeeksforGeeks", "h1": ["Python Program To Delete Middle Of Linked List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["PRACTICE", "Simple solution:", "Output:", "Complexity Analysis:", "Time Complexity:", "Auxiliary Space:", "Efficient solution:", "Approach:", "Output:", "Complexity Analysis:", "Time Complexity:", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-delete-middle-of-linked-list/?ref=ml_lbp"},
{"title": "Python String Methods - GeeksforGeeks", "h1": ["Python String Methods"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Case Changing of Strings", "Python3", "List of Python String Methods", "What kind of Experience do you want to share?"], "strong": ["Python string methods ", "Note: ", "Python string", "lower():", "upper():", "title():", "swapcase():", " ", "capitalize()", ":", "Example: ", "Output", "Time complexity: ", "Auxiliary space: ", "Note: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-string-methods/"},
{"title": "Python | Ways to flatten a 2D list - GeeksforGeeks", "h1": ["Python | Ways to flatten a 2D list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["2D", "Method #1: Using chain.iterable()", "Output:", "Output:", "Method #3: Using functools.reduce", "Output:", "time complexity", "space complexity", "Method #4: Using sum", "Output:", "Method #5: Using lambda", "Output:", "Method #6: Using numpy", "Output:", "Method #7: Using extend() method", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-ways-to-flatten-a-2d-list/"},
{"title": "Python Script to Logout Computer - GeeksforGeeks", "h1": ["Python Script to Logout Computer"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["shutdown -l", "Note:", "Causion:", "Output: ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-script-to-logout-computer/"},
{"title": "Python program to convert any base to decimal by using int() method - GeeksforGeeks", "h1": ["Python program to convert any base to decimal by using int() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "base", "Output :", "Input :", "base", "Output :", "Input :", "base =", "Output :", "Approach –", "Output:", "Master C Programming with Data Structures ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-convert-any-base-to-decimal-by-using-int-method/"},
{"title": "Python Tkinter-exercises Archives - Page 7 of 7 - GeeksforGeeks", "h1": ["Python Tkinter-exercises"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/tag/python-tkinter-exercises/page/7/?type=popular"},
{"title": "Python String rfind() Method - GeeksforGeeks", "h1": ["Python String rfind() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python String rfind() Method Syntax", "Python String rfind() Method Example", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python String rfind() method", "Syntax:", "Parameters:", "sub:", "start:", "end:", "Note:", "Return:", "Output:", "Output: ", "Output: ", "Practical Application", "Output: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-string-rfind-method/?ref=lbp"},
{"title": "Python program to validate an IP Address - GeeksforGeeks", "h1": ["Python program to validate an IP Address"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisite:", "What is an IP (Internet Protocol) Address?", "Examples:", "Input:", "Output:", "Input:", "Output:", "Input:", "Output:", "Input:", "Output: ", "search()", "re.search() :", "Output:", "Using the ipaddress module:", "Output", "Time complexity: O(1)", "Auxiliary Space : O(1)", "METHOD 3: Using the ", "socket module", ":", "Steps:", "validate_ip_address", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-validate-an-ip-address/"},
{"title": "Python | Using variable outside and inside the class and method - GeeksforGeeks", "h1": ["Python | Using variable outside and inside the class and method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Variable defined outside the class: ", "Variable defined inside the class: ", "Variable defined inside the method: ", "Summary: ", "Data Structures & Algorithms in Python - Self Paced ", "Master Java Programming - Complete Beginner to Advanced ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-using-variable-outside-and-inside-the-class-and-method/"},
{"title": "Python | Numpy fromrecords() method - GeeksforGeeks", "h1": ["Python | Numpy fromrecords() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating NumPy Array", "NumPy Array Manipulation", "Matrix in NumPy", "Operations on NumPy Array", "Reshaping NumPy Array", "Indexing NumPy Array", "Arithmetic operations on NumPyArray", "Linear Algebra in NumPy Array", "NumPy and Random Data", "Sorting and Searching in NumPy Array", "Universal Functions", "Working With Images", "Projects and Applications with NumPy", "Introduction", "Creating NumPy Array", "NumPy Array Manipulation", "Matrix in NumPy", "Operations on NumPy Array", "Reshaping NumPy Array", "Indexing NumPy Array", "Arithmetic operations on NumPyArray", "Linear Algebra in NumPy Array", "NumPy and Random Data", "Sorting and Searching in NumPy Array", "Universal Functions", "Working With Images", "Projects and Applications with NumPy", "What kind of Experience do you want to share?"], "strong": ["numpy.core.fromrecords()", "Syntax :", "Return :", "Example #1 :", "Output :", "Example #2 :", "Output :", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-numpy-fromrecords-method/?ref=lbp"},
{"title": "Python | Numpy matrix.resize() - GeeksforGeeks", "h1": ["Python | Numpy matrix.resize()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating NumPy Array", "NumPy Array Manipulation", "Matrix in NumPy", "Operations on NumPy Array", "Reshaping NumPy Array", "Indexing NumPy Array", "Arithmetic operations on NumPyArray", "Linear Algebra in NumPy Array", "NumPy and Random Data", "Sorting and Searching in NumPy Array", "Universal Functions", "Working With Images", "Projects and Applications with NumPy", "Introduction", "Creating NumPy Array", "NumPy Array Manipulation", "Matrix in NumPy", "Operations on NumPy Array", "Reshaping NumPy Array", "Indexing NumPy Array", "Arithmetic operations on NumPyArray", "Linear Algebra in NumPy Array", "NumPy and Random Data", "Sorting and Searching in NumPy Array", "Universal Functions", "Working With Images", "Projects and Applications with NumPy", "What kind of Experience do you want to share?"], "strong": ["Numpy matrix.resize()", "resize", "Syntax :", "Return: ", "Example #1 :", "Example #2 :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-numpy-matrix-resize/?ref=lbp"},
{"title": "Python String rfind() Method - GeeksforGeeks", "h1": ["Python String rfind() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python String rfind() Method Syntax", "Python String rfind() Method Example", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python String rfind() method", "Syntax:", "Parameters:", "sub:", "start:", "end:", "Note:", "Return:", "Output:", "Output: ", "Output: ", "Practical Application", "Output: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-string-rfind-method/?ref=next_article"},
{"title": "Python - Retain Numbers in String - GeeksforGeeks", "h1": ["Python – Retain Numbers in String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Input", "Output", "Method #1 : Using list comprehension + join() + isdigit()", "Output", "Time Complexity:", "Auxiliary Space: ", "Method #2 : Using regex()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3 : ", "Output", "Time complexity: ", "Auxiliary space:", "Method #4 : Using ord() method", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method #5: Using re.findall() method. ", "Output", "Method#6: Using enumerate() + join() + isdigit() ", "Output", "Time complexity:", "The time complexity of the algorithm is O(n)", "Auxiliary Space:", "The auxiliary space of the algorithm is also O(n)", "Method #7: Using filter() and lambda function", "Output", "Time Complexity:", "Auxiliary Space: ", "Method #8: Using a list comprehension and isnumeric() method.", "Output", "Method #9: Using map() and filter() functions", "Output", "Method #10: reduce() function from the functools module", "Algorithm:", "test_str", "Output", "Time Complexity:", "Space Complexity:", "Method #11:  Using numpy:", "Algorithm:", "Output", "Time complexity: O(n),", "Space complexity: O(n), ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-retain-numbers-in-string/?ref=next_article"},
{"title": "Python | Multiple indices Replace in String - GeeksforGeeks", "h1": ["Python | Multiple indices Replace in String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loop + join()", "Output : ", "Method #2 : Using list comprehension + join()", "Output : ", "Time Complexity: ", "Space Complexity: ", "Method #3:  Using map() + join() + enumerate() methods and lambda to replace characters in string", "Step by step Algorithm:", "Output", "Time complexity:", "Auxiliary Space: ", "Method #4: Using replace() method inside a loop", "Output", "Time complexity: ", "Auxiliary space: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-multiple-indices-replace-in-string/"},
{"title": "Python | Replace multiple characters at once - GeeksforGeeks", "h1": ["Python | Replace multiple characters at once"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method 1: Replace multiple characters using nested ", "replace()", "Output:", "Time Complexity: O(n)", "Auxiliary Space: O(1)", "Method 2: Replace multiple characters using ", "translate()", " + ", "maketrans()", "Output:", "Time complexity: ", "Auxiliary space", "Output:", "Method 4: Using List comprehension:", "Output", "Time complexity: ", "Auxiliary space: ", "Method #5: Using a dictionary to map characters to their replacements", "Output", "Time complexity: ", "Auxiliary space: ", "Method 6: using a regular expression with the re.sub() method.", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-replace-multiple-characters-at-once/"},
{"title": "Python String rfind() Method - GeeksforGeeks", "h1": ["Python String rfind() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python String rfind() Method Syntax", "Python String rfind() Method Example", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python String rfind() method", "Syntax:", "Parameters:", "sub:", "start:", "end:", "Note:", "Return:", "Output:", "Output: ", "Output: ", "Practical Application", "Output: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-string-rfind-method/"},
{"title": "Python | numpy.array_split() method - GeeksforGeeks", "h1": ["Python | numpy.array_split() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["numpy.array_split()", "Syntax :", "Return :", "Example #1 :", "Output :", "Example #2 :", "Output :", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-numpy-array_split-method/?ref=ml_lbp"},
{"title": "Python string | printable() - GeeksforGeeks", "h1": ["Python string | printable()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["string.printable", "Syntax :", "Parameters :", "Returns :", "Note : ", "Code #1 :", "Output :", "Code #2 :", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-string-printable/?ref=ml_lbp"},
{"title": "Python - Print Heart Pattern - GeeksforGeeks", "h1": ["Python – Print Heart Pattern"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "What kind of Experience do you want to share?"], "strong": ["Note:", "Output:", "Time complexity:", "Auxiliary Space: ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-print-heart-pattern/?ref=previous_article"},
{"title": "Python Program to find if a character is vowel or Consonant - GeeksforGeeks", "h1": ["Python Program to find if a character is vowel or Consonant"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples", "Input", "Output", "Input", "Output", "{IDE}", "Output", "Time Complexity: ", "Auxiliary Space: ", "How to handle capital letters as well?", "Output", "Time Complexity: ", "Auxiliary Space:", "Python Program to find if a character is vowel or Consonant using switch case", "Output", "Time Complexity:", "Auxiliary Space: ", "Another way is to find() the character in a string containing only Vowels.", "Output", "Time Complexity: ", "Auxiliary Space:", "Most efficient way to check Vowel using bit shift :", "Output", "Time Complexity: ", "Auxiliary Space:", "Output", "Time complexity: ", "Auxiliary space:", "Output", "Time Complexity:", "Auxiliary Space:", "Using operator.countOf() method", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(1)", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-find-if-a-character-is-vowel-or-consonant/"},
{"title": "Python program to check if given string is vowel Palindrome - GeeksforGeeks", "h1": ["Python program to check if given string is vowel Palindrome"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Explanation :", "bc", "h", "vmnb", "auua", "Input :", "Output :", "Input :", "Output :", "Approach: ", "Output", "Time Complexity:", "Auxiliary Space:", "Approach : Using for loop", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Approach: Using regular expressions", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Approach: Using reversed function:", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Approach 5: Using two pointers to compare characters from both ends", "Output", "Time complexity: ", "Auxiliary space:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-program-to-check-if-given-string-is-vowel-palindrome/"},
{"title": "Python | Switch widget in Kivy - GeeksforGeeks", "h1": ["Python | Switch widget in Kivy"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Note:", "Basic Approach:", "Implementation of the Approach:", "Output:", "Attaching Callback to Switch:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-switch-widget-in-kivy/?ref=next_article"},
{"title": "Python program to Increment Suffix Number in String - GeeksforGeeks", "h1": ["Python program to Increment Suffix Number in String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using findall() + ", "join()", " + ", "replace()", "Output:", "Method #2 : Using sub() + group() + zfill()", "Output:", "Time Complexity: ", "Space Complexity: ", "Method #3 : Using string slicing and addition", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method #4: Using isalpha(),replace() and slicing", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method#5: Using Recursive method.", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-to-increment-suffix-number-in-string/?ref=ml_lbp"},
{"title": "Python | Checkbox widget in Kivy - GeeksforGeeks", "h1": ["Python | Checkbox widget in Kivy"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Checkbox widget –", "Checkbox", "Checkbox", "Basic Approach to follow while creating Slider :", "Now the program of How to create Checkbox in Kivy:", "Output:", "Now Question is that How can we bind or attach callback to Checkbox?", "Now program to arrange a callback to Checkbox i.e whether checkbox is checked or not.", "Output:", "Video Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-checkbox-widget-in-kivy/"},
{"title": "Python | Textinput widget in kivy - GeeksforGeeks", "h1": ["Python | Textinput widget in kivy"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "What kind of Experience do you want to share?"], "strong": ["Basic Approach:", "Now the implementation of the Approach:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-textinput-widget-in-kivy/?ref=previous_article"},
{"title": "Python | Ellipse (different polygons) in Kivy - GeeksforGeeks", "h1": ["Python | Ellipse (different polygons) in Kivy"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Ellipse:", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Note:", "Program to show how we can make different polygon in kivy by Ellipse.", "main.py file:", "Ellipse.kv file", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-ellipse-different-polygons-in-kivy/?ref=lbp"},
{"title": "Python | Slider widget in Kivy - GeeksforGeeks", "h1": ["Python | Slider widget in Kivy"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Slider:", "kivy.uix.slider", "Below is the code implementing slider:", "Output:", "Output:", "Video to explain how slider works –", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-slider-widget-in-kivy/"},
{"title": "Python | Scrollview widget in kivy - GeeksforGeeks", "h1": ["Python | Scrollview widget in kivy"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Scroll view:", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["scroll_distance", "scroll_timeout", "Note:", "Basic Approach:", "Implementation of the code:", "Output:", "bar_color:", "bar_width: ", "Code For Changing Bar Color and Bar width:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-scrollview-widget-in-kivy/"},
{"title": "Python-kivy Archives - GeeksforGeeks", "h1": ["Python-kivy"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/tag/python-kivy/"},
{"title": "Python | Popup widget in Kivy using .kv file - GeeksforGeeks", "h1": ["Python | Popup widget  in Kivy using .kv file"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Note:", "Basic Approach:", "Implementation of the Approach:", "popup.py file", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-popup-widget-in-kivy-using-kv-file/"},
{"title": "Python | Bubble in kivy - GeeksforGeeks", "h1": ["Python | Bubble in kivy"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "What kind of Experience do you want to share?"], "strong": ["Basic Approach :", "# .py code:", ".kv file:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-bubble-in-kivy/?ref=lbp"},
{"title": "Python | How to use Multiple kv files in kivy - GeeksforGeeks", "h1": ["Python | How to use Multiple kv files in kivy"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "What kind of Experience do you want to share?"], "strong": ["Basic Approach:", "main.py file of the implementation:", "main.kv", "Now the main.kv file:", "box1.kv file –", "box2.kv file –", "box3.kv file – ", " Output :", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-how-to-use-multiple-kv-files-in-kivy/?ref=lbp"},
{"title": "Python | Scrollview widget in kivy - GeeksforGeeks", "h1": ["Python | Scrollview widget in kivy"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Scroll view:", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["scroll_distance", "scroll_timeout", "Note:", "Basic Approach:", "Implementation of the code:", "Output:", "bar_color:", "bar_width: ", "Code For Changing Bar Color and Bar width:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-scrollview-widget-in-kivy/?ref=lbp"},
{"title": "Python | Slider widget in Kivy - GeeksforGeeks", "h1": ["Python | Slider widget in Kivy"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Slider:", "kivy.uix.slider", "Below is the code implementing slider:", "Output:", "Output:", "Video to explain how slider works –", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-slider-widget-in-kivy/?ref=lbp"},
{"title": "Python program to convert time from 12 hour to 24 hour format - GeeksforGeeks", "h1": ["Python program to convert time from 12 hour to 24 hour format"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "How to Convert AM/PM to 24 Hour Time ", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Note :", "Output :", "Time Complexity: ", "Auxiliary Space: ", "Output", "Output", "Time complexity: O(1)", "Space complexity: O(1)", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-convert-time-12-hour-24-hour-format/?ref=ml_lbp"},
{"title": "Python | Float Layout in Kivy - GeeksforGeeks", "h1": ["Python | Float Layout in Kivy"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Floatlayout ", "Note:", "Basic Approach:", "Implementation of the Approach:", "Output:", "Note: ", "Dynamic Placements –", "pos_hint:", "2) ", "size_hint:", " provide hint of size", "Note:", "Code to implement dynamic positioning:", "Output:", "Video Output: ", "Reference:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-float-layout-in-kivy/?ref=lbp"},
{"title": "Python | Layouts in layouts (Multiple Layouts) in Kivy - GeeksforGeeks", "h1": ["Python | Layouts in layouts (Multiple Layouts) in Kivy"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["AnchorLayout:", "BoxLayout:", "FloatLayout:", "RelativeLayout:", "GridLayout:", "PageLayout", ":", "ScatterLayout:", "StackLayout:", "Note:", "Implementation of the Approach –", "main.py file", "Note:", ".kv file", " of the code", "Output:", "Image 1:", "Image 2:", "Image 3:", "Video Output:", "Reference: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-layouts-in-layouts-multiple-layouts-in-kivy/?ref=ml_lbp"},
{"title": "Python | PageLayout in Kivy using .kv file - GeeksforGeeks", "h1": ["Python | PageLayout in Kivy using .kv file"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Note:", "Example:", "border:", "page:", "swipe_threshold:", "Basic Approach to create page layout using .kv file ", "Implementation of the Approach –", "main.py file", "1) .kv file of Simple pages", "Output:", "Page 1 image", "Page 2 image", "2) .kv file with some features on pages", "Output:", "Page 1", "Page 2", "Page 3", "Page 4", "Video Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-pagelayout-in-kivy-using-kv-file/?ref=ml_lbp"},
{"title": "Python - Change kivy button size and position using kv file - GeeksforGeeks", "h1": ["Python – Change kivy button size and position using kv file"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["size", "Syntax:", "pos", "Syntax", "size_hint", "pos_hint", "Basic Approach:", "main.py file implementation of the approach –", "btn.kv file implementation of the approach – ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-change-kivy-button-size-and-position-using-kv-file/?ref=ml_lbp"},
{"title": "Python | Popup widget in Kivy using .kv file - GeeksforGeeks", "h1": ["Python | Popup widget  in Kivy using .kv file"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Note:", "Basic Approach:", "Implementation of the Approach:", "popup.py file", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-popup-widget-in-kivy-using-kv-file/?type=article&id=309958"},
{"title": "Python | Exceptional Split in String - GeeksforGeeks", "h1": ["Python | Exceptional Split in String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using loop + strip()", "Output : ", "Method #2: Using regex()", "Output : ", "Time Complexity: ", "Auxiliary Space: ", "Method #3: Using str.split() and list comprehension", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-exceptional-split-in-string/?ref=ml_lbp"},
{"title": "Python | Splitting Text and Number in string - GeeksforGeeks", "h1": ["Python | Splitting Text and Number in string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using re.compile() + re.match() + re.groups()", "Output", "Method #2 : Using re.findall()", "Output", "Method #3: Using isdigit() method", "Output", "Method #4 : Without any builtin methods", "Output", "Method 5: Using the “isnumeric()” method and list comprehension.", "Output", "Method 6: Using reduce():", "Algorithm:", "Output", "The time complexity :O(n), ", " The space complexity :O(n),", "Method 7: Using heapq:", "Algorithm:", "Output", "Time Complexity: O(n), ", "Space Complexity: O(1), ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-splitting-text-and-number-in-string/?ref=next_article"},
{"title": "Python | Float Layout in Kivy - GeeksforGeeks", "h1": ["Python | Float Layout in Kivy"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Floatlayout ", "Note:", "Basic Approach:", "Implementation of the Approach:", "Output:", "Note: ", "Dynamic Placements –", "pos_hint:", "2) ", "size_hint:", " provide hint of size", "Note:", "Code to implement dynamic positioning:", "Output:", "Video Output: ", "Reference:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-float-layout-in-kivy/"},
{"title": "Python | Switch widget in Kivy using .kv file - GeeksforGeeks", "h1": ["Python | Switch widget in Kivy using .kv file"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Attaching Callback to Switch:", "Basic Approach:", "Below is the Implementation:", "main.py file:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-switch-widget-in-kivy-using-kv-file/?ref=ml_lbp"},
{"title": "Python | FloatLayout in Kivy using .kv file - GeeksforGeeks", "h1": ["Python | FloatLayout in Kivy using .kv file"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Floatlayout ", "2) size_hint: provide hint of size", "Note:", "Basic Approach:", "Implementation of the approach –", "main.py file", ".kv file", " implementation of approach", "Output:", "Video Output:", "Reference:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-floatlayout-in-kivy-using-kv-file/?ref=ml_lbp"},
{"title": "Python | Dropdown list in kivy - GeeksforGeeks", "h1": ["Python | Dropdown list in kivy"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Python3", "What kind of Experience do you want to share?"], "strong": ["Basic Approach:", "Implementation of the Approach –", "Output:", "Image 1:", "Image 2:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-dropdown-list-in-kivy/"},
{"title": "Python | Textinput widget in kivy - GeeksforGeeks", "h1": ["Python | Textinput widget in kivy"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "What kind of Experience do you want to share?"], "strong": ["Basic Approach:", "Now the implementation of the Approach:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-textinput-widget-in-kivy/"},
{"title": "Python | Relative Layout in Kivy - GeeksforGeeks", "h1": ["Python | Relative Layout in Kivy"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["For example:", "Note:", "Note:", "Basic Approach to create Relative Layout:", "Implementation of approach using pos : ", "Output:", "Implementation Approach by using pos_hint ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-relative-layout-in-kivy/?ref=lbp"},
{"title": "Python | Carousel Widget In Kivy - GeeksforGeeks", "h1": ["Python | Carousel Widget In Kivy"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Carousel widget:", "What kind of Experience do you want to share?"], "strong": ["Basic Approach:", "Implementation of the Approach:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-carousel-widget-in-kivy/"},
{"title": "Python | BoxLayout widget in Kivy - GeeksforGeeks", "h1": ["Python | BoxLayout widget in Kivy"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["BoxLayout:", "Basic Approach to follow while creating button :", "Below is the code to use BoxLayout:", "Output:", "Some modification like add colour, fix size in Box layout widget:", "Output:", "Picture1:", "Picture2:", "Note: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-boxlayout-widget-in-kivy/"},
{"title": "Python | FloatLayout in Kivy using .kv file - GeeksforGeeks", "h1": ["Python | FloatLayout in Kivy using .kv file"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Floatlayout ", "2) size_hint: provide hint of size", "Note:", "Basic Approach:", "Implementation of the approach –", "main.py file", ".kv file", " implementation of approach", "Output:", "Video Output:", "Reference:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-floatlayout-in-kivy-using-kv-file/"},
{"title": "Python | StackLayout in Kivy using .kv file - GeeksforGeeks", "h1": ["Python | StackLayout in Kivy using .kv file"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["To use StackLayout first import StackLayout by below command:", "StackLayout ", "StackLayout Orientation (2D):", "Basic Approach to create Stack layout :", "Below is the implementation of row-wise orientations and column-wise orientation:", "main.py file –", ".kv file –", "Output:", "Note:", "Below there are picture output all the orientations above –", "For row wise orientation use:", "Output:", "Output:", "Output:", "Output:", "For column wise orientation use:", "Output:", "Output:", "Output:", "Output: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-stacklayout-in-kivy-using-kv-file/"},
{"title": "Python | Working with buttons in Kivy - GeeksforGeeks", "h1": ["Python | Working with buttons in Kivy"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Button ", "Basic Approach to follow while creating button :", "Code #1: ", "Output:", "Code #2: ", "Output:", "Code #3", "bind()", "Output:", "Video output:", "MDRectangularFlatButton", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-working-with-buttons-in-kivy/"},
{"title": "Python | PageLayout in Kivy using .kv file - GeeksforGeeks", "h1": ["Python | PageLayout in Kivy using .kv file"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Note:", "Example:", "border:", "page:", "swipe_threshold:", "Basic Approach to create page layout using .kv file ", "Implementation of the Approach –", "main.py file", "1) .kv file of Simple pages", "Output:", "Page 1 image", "Page 2 image", "2) .kv file with some features on pages", "Output:", "Page 1", "Page 2", "Page 3", "Page 4", "Video Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-pagelayout-in-kivy-using-kv-file/"},
{"title": "Python| AnchorLayout in Kivy - GeeksforGeeks", "h1": ["Python| AnchorLayout in Kivy"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "What kind of Experience do you want to share?"], "strong": ["anchor_x", "“left”", "“right”", "“center”", "anchor_y", "“top”", " “bottom”", "“center”", "Note:", "Basic Approach:", "Implementation of the Approach (with some Styling):", "1) anchor_x=’right’, anchor_y=’bottom’:", "Output:", "2) anchor_x=’right’, anchor_y=’top’:", "Output:", "3) anchor_x=’center’, anchor_y=’top’:", "Output:", "4) anchor_x=’left’, anchor_y=’top’:", "Output:", "5) anchor_x=’left’, anchor_y=’bottom’:", "Output:", "6) anchor_x=’left’, anchor_y=’center’:", "Output:", "7) anchor_x=’center’, anchor_y=’center’:", "Output:", "8) anchor_x=’center’, anchor_y=’bottom’:", "Output:", "9) anchor_x=’right’, anchor_y=’center’:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-anchorlayout-in-kivy/?ref=previous_article"},
{"title": "Python | Switch widget in Kivy - GeeksforGeeks", "h1": ["Python | Switch widget in Kivy"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Note:", "Basic Approach:", "Implementation of the Approach:", "Output:", "Attaching Callback to Switch:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-switch-widget-in-kivy/"},
{"title": "Python | Add image widget in Kivy - GeeksforGeeks", "h1": ["Python | Add image widget in Kivy"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "What kind of Experience do you want to share?"], "strong": ["kivy.uix.image ", "From system :", "Asynchronous Loading:", "Note:", "Code #1:", "Output:", "Code #2:", "Output:", "Code #3:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-add-image-widget-in-kivy/?ref=lbp"},
{"title": "Python | BoxLayout widget in Kivy - GeeksforGeeks", "h1": ["Python | BoxLayout widget in Kivy"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["BoxLayout:", "Basic Approach to follow while creating button :", "Below is the code to use BoxLayout:", "Output:", "Some modification like add colour, fix size in Box layout widget:", "Output:", "Picture1:", "Picture2:", "Note: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-boxlayout-widget-in-kivy/?type=article&id=300432"},
{"title": "Python | Difference between two dates (in minutes) using datetime.timedelta() method - GeeksforGeeks", "h1": ["Python | Difference between two dates (in minutes) using datetime.timedelta() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Date class", "Time class", "Datetime class", "Timedelta class", "Date class", "Time class", "Datetime class", "Timedelta class", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["timedelta", "datetime", "seconds", "Example 1:", "Output:", "Time Complexity : ", "Space Complexity :", "Example 2:", "Output:", "Time Complexity :", "Space Complexity :", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-difference-between-two-dates-in-minutes-using-datetime-timedelta-method/?ref=ml_lbp"},
{"title": "Python | Carousel Widget In Kivy - GeeksforGeeks", "h1": ["Python | Carousel Widget In Kivy"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Carousel widget:", "What kind of Experience do you want to share?"], "strong": ["Basic Approach:", "Implementation of the Approach:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-carousel-widget-in-kivy/?ref=previous_article"},
{"title": "Python | StackLayout in Kivy - GeeksforGeeks", "h1": ["Python | StackLayout in Kivy"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Introduction to Kivy", "Kivy Widgets", "Buttons", "Layouts", "Graphics and Animation", "User Interfaces and Navigation", "File I/O and Multimedia", "Applications and Projects", "Python3", "What kind of Experience do you want to share?"], "strong": ["To use StackLayout first import StackLayout by below command:", "StackLayout ", "StackLayout Orientation (2D):", "Basic Approach to create Stack layout :", "Implementation of the Approach:", "Output:", "Note:", "For row wise orientation use:", "Output:", "Output:", "Output:", "Output:", "For column wise orientation use:", "Output:", "Output:", "Output:", "Output: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-stacklayout-in-kivy/?ref=previous_article"},
{"title": "Python | os.set_blocking() method - GeeksforGeeks", "h1": ["Python | os.set_blocking() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "What kind of Experience do you want to share?"], "strong": ["Note:", "Code:", "Output:", "Reference:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-set_blocking-method/?ref=lbp"},
{"title": "Python | Using for loop in Flask - GeeksforGeeks", "h1": ["Python | Using for loop in Flask"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["app.py", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-using-for-loop-in-flask/?ref=ml_lbp"},
{"title": "Python | os.system() method - GeeksforGeeks", "h1": ["Python | os.system() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "os.system() Syntax in Python", "Interact with Operating System using Python Examples", "Python3", "Python3", "FAQ’s ", "What kind of Experience do you want to share?"], "strong": ["os.system()", "Standard C function system()", "Syntax:", "Parameter: ", "command: ", "Return Value: ", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-system-method/?ref=lbp"},
{"title": "Python | os.open() method - GeeksforGeeks", "h1": ["Python | os.open() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "What kind of Experience do you want to share?"], "strong": ["Path:", "flags:", "mode", "dir_fd", "Code:", "Output:", "Reference:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-open-method/?ref=lbp"},
{"title": "Python | os.makedirs() method - GeeksforGeeks", "h1": ["Python | os.makedirs() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Python os.makedirs() Function Syntax", "os.makedirs() Method in Python", "Python os.makedirs() Function Examples", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["OSError", "Syntax:", "Parameter:", "path", "mode ", "exist_ok", "Return Type:", "os.makedirs()", "os.makedirs()", "os.makedirs()", "Output:", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-makedirs-method/?ref=lbp"},
{"title": "Python | os.getuid() and os.setuid() method - GeeksforGeeks", "h1": ["Python | os.getuid() and os.setuid() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "What kind of Experience do you want to share?"], "strong": ["Note:", "os.getuid() method", "Code #1:", "Output:", "os.setuid() method", "Code #2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-getuid-and-os-setuid-method/?ref=lbp"},
{"title": "Python program to create a dictionary from a string - GeeksforGeeks", "h1": ["Python program to create a dictionary from a string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method # 1: ", "which completely resembles a dictionary object", "Output:", "Method # 2: ", "Output:", "integers keys are there", "Output:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-create-a-dictionary-from-a-string/?ref=ml_lbp"},
{"title": "Python program to find the power of a number using recursion - GeeksforGeeks", "h1": ["Python program to find the power of a number using recursion"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["N", "P", "N", "P", "Examples: ", "Input:", "Output:", "Input:", "Output:", "Approach:", "‘N’", "‘P’", "N", "P", "1", "N ", "N ", "P-1", "Output", "Time Complexity: ", "Auxiliary Space: ", "Optimized Approach : ", "Output", "Time Complexity: ", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-program-to-find-the-power-of-a-number-using-recursion/?ref=lbp"},
{"title": "Python regex | Check whether the input is Floating point number or not - GeeksforGeeks", "h1": ["Python regex | Check whether the input is Floating point number or not"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisite:", "Examples:", "Input:", "Output:", "Input:", "Output:", "Input:", "Output:", "Input:", "Output:", "search()", "re.search() :", "Output:", "Time complexity", "Auxiliary Space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-regex-check-whether-the-input-is-floating-point-number-or-not/"},
{"title": "Python splitfields() Method - GeeksforGeeks", "h1": ["Python splitfields() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Examples of splitfields() Method", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["splitfields()", "Syntax: ", "Parameters:", "string (required) – ", "delimiter (optional) – ", "Return Value: ", "Type Error: ", "Example 1: Using splitfields() with the wrong type of arguments", "Output:", "Example 2: Using splitfields() with a String", "Output:", "Example 3:", "Using splitfields() with a List", "Output:", "Example 4: Using splitfields() with a Set", "Output:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-splitfields-method/?ref=lbp"},
{"title": "Python | Convert Lists to column tuples - GeeksforGeeks", "h1": ["Python | Convert Lists to column tuples"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using zip() + list comprehension", "Output", "Method #2 : Using zip() + values()", "Output", "Method #3: Using numpy.column_stack()", "Note: ", "numpy.column_stack() ", "numpy", "test_dict", "numpy.column_stack()", "Output:", "Time complexity: ", "Auxiliary space: ", "Method #4: Using pandas.DataFrame", "from_dict() ", "loc[] ", "to_records()", "Output:", "Time complexity: ", "Auxiliary space: ", "Method #5 : Using nested for loop + values() method", "Output", "Time Complexity:", "Auxiliary Space: ", "Method #6 : Using heapq :", " Algorithm :", "Output", "Time complexity:", "Space complexity:", "Method #7: Using itertools:", "Algorithm :", "Output", "The time complexity : O(n*m)", "The space complexity : O(m)", "Method #8: Using  reduce():", "Algorithm:", "Output", "Time complexity:", "Space complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-convert-lists-to-column-tuples/"},
{"title": "Python program to convert Base 4 system to binary number - GeeksforGeeks", "h1": ["Python program to convert Base 4 system to binary number"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Conversion Table:", "Examples:", "Input       :", "Output      :", "Explanation :", "Input :", "Output:", "Method 1:", " resultstr.", "number to string.", "1 or 0", "resultstr ", " integer to binary string", " concatenate the resultant binary string", " ", "resultstr.", "resultstr ", "resultstr.", "Output:", "O(n)", "O(1)", "Method 2:", "Output", "Time complexity: ", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-convert-base-4-system-to-binary-number/"},
{"title": "Python | Build a REST API using Flask - GeeksforGeeks", "h1": ["Python | Build a REST API using Flask"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Getting Started with Machine Learning", "Data Preprocessing", "Classification & Regression", "K-Nearest Neighbors (KNN)", "Support Vector Machines", "Decision Tree", "Ensemble Learning", "Generative Model", "Time Series Forecasting", "Clustering Algorithm", "Convolutional Neural Networks", "Recurrent Neural Networks", "Reinforcement Learning", "Model Deployment and Productionization", "Advanced Topics", "Getting Started with Machine Learning", "Data Preprocessing", "Classification & Regression", "K-Nearest Neighbors (KNN)", "Support Vector Machines", "Decision Tree", "Ensemble Learning", "Generative Model", "Time Series Forecasting", "Clustering Algorithm", "Convolutional Neural Networks", "Recurrent Neural Networks", "Reinforcement Learning", "Model Deployment and Productionization", "Advanced Topics", "Libraries required:", "Method 1: using only Flask", "Method 2: Using flask-restful", "What kind of Experience do you want to share?"], "strong": ["Output:", "Output:", "GATE Computer Science & Information Technology 2025 ", "Complete Machine Learning & Data Science Program ", "Complete Guide to Software Testing and Automation: Master Java, Selenium and Cucumber "], "link": "https://www.geeksforgeeks.org/python-build-a-rest-api-using-flask/"},
{"title": "Python program to Remove Last character from the string - GeeksforGeeks", "h1": ["Python program to Remove Last character from the string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Using list ", "Slicing", " to Remove the Last Element from the string ", "Python3", "Using loops and extra space to Remove the Last Element from the string", "Python3", "Using ", "rstrip()", " function to Remove the Last Element from the string ", "Python3", "Using ", "regex", " to Remove Last Element from string ", "Python3", "Using list(),pop() and join() methods", "Python3", "Using list comprehension and join method", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input:", "Output:", "Input:", "Output: ", "Explanation:", "Note: ", "Using list ", "Slicing", " to Remove the Last Element from the string ", "Output", "Using loops and extra space to Remove the Last Element from the string", "Output", "Time Complexity: ", "Auxiliary Space:", "Using ", "rstrip()", " function to Remove the Last Element from the string ", "Output", "Output", "Output", "Using list comprehension and join method", "Output", "Time Complexity", "Auxiliary Space:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-to-remove-last-character-from-the-string/"},
{"title": "Python - Get maximum of Nth column from tuple list - GeeksforGeeks", "h1": ["Python – Get maximum of Nth column from tuple list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using list comprehension + max()", "Output", "Time Complexity: ", "Auxiliary Space:", "Method #2: Using imap() + max() + itemgetter()", "itemgetter", "imap", "itertools", "test_list", "print()", "N", "e itemgetter() ", "imap()", "itemgetter()", "test_list", " max()", "test_list", "res", "print()", "Output : ", "The time complexity ", "The auxiliary space", "Method #3: Using sort() method", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #4: Using reduce() method", "Output", "Time Complexity:", "Auxiliary Space:", "Method 5 : Using NumPy library", "OUTPUT:", "Maximum of Nth Column of Tuple List : 19", "Time complexity: ", "Auxiliary space:", "Method 6: Using a loop.", "N", "max_val", "max_val", "max_val", "max_val", "Output", "Time complexity:", "Auxiliary space:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-get-maximum-of-nth-column-from-tuple-list/?ref=previous_article"},
{"title": "Python program to find power of a number - GeeksforGeeks", "h1": ["Python program to find power of a number"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Definition:", "Example:", "Output", "Find power of a number Recursive Approach", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Find power of numner Using Recursive Exponentiation by Squaring", "Output", "Time complexity:", "Auxiliary space: ", "Complexity Analysis", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-to-find-power-of-a-number/"},
{"title": "Python Tuple Exercise - GeeksforGeeks", "h1": ["Python Tuple Exercise"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Tuple Programs", "List of Tuples Programs", "Conversion of Tuple Programs", "Advance Tuple Programs", "What kind of Experience do you want to share?"], "strong": ["Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-tuple-exercise/?ref=ml_lbp"},
{"title": "Python 3 - input() function - GeeksforGeeks", "h1": ["Python 3 – input() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python input() Function Syntax", "Python3", "input() Function in Python Examples", "Python3", "Python", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" the input() ", "Syntax:", "Parameter:", "Prompt:", "Return: ", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Also, check:", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-3-input-function/"},
{"title": "Python | Plotting Doughnut charts in excel sheet using XlsxWriter module - GeeksforGeeks", "h1": ["Python | Plotting Doughnut charts in excel sheet using XlsxWriter module"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Prerequisite: ", "Code #1 :", "Output :", "Code #2 :", "Output :", "Code #3 :", "Output :", "Code #4 :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-plotting-doughnut-charts-in-excel-sheet-using-xlsxwriter-module/"},
{"title": "Python | Create and write on excel file using xlsxwriter module - GeeksforGeeks", "h1": ["Python | Create and write on excel file using xlsxwriter module"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["XlsxWriter", "Note: ", "Code #1 :", "Output:", "Code #2 :", "Output:", "Code #3 : ", "Output:", "Advantages:", "Disadvantages:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-create-and-write-on-excel-file-using-xlsxwriter-module/"},
{"title": "Python Functions - GeeksforGeeks", "h1": ["Python Functions"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Python Function Declaration", "Creating a Function in Python", "Python3", "Python3", "Python3", "Python3", "Python Function Arguments", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python Function within Functions", "Python3", "Anonymous Functions in Python", "Python3", "Recursive Functions in Python", "Python3", "Return Statement in Python Function", "Python3", "Pass by Reference and Pass by Value", "Python3", "Python3", "Python3", "Python3", "FAQs- Python Functions", "What kind of Experience do you want to share?"], "strong": ["Python Functions", "Benefits of Using Functions", "Built-in library function:", "User-defined function:", "Creating a Function in Python", "def", "Output:", "Defining and calling a function with parameters", "Output:", "Note: ", "Output:", "Output:", "Default argument", "Keyword arguments (named arguments)", "Positional arguments", "Arbitrary arguments", "Default Arguments", "Output:", "Keyword Arguments", "Output:", "Output:", "Case-1:", "Case-2:", "Example 1:", "Output:", "Example 2: ", "Output:", "Syntax:", "Example: ", "Output:", "inner function", "nested function", "Output:", "Output:", "Recursion ", "Mathematical and Recursive Problems.", "Output", "The syntax for the return statement is:", "Example:", "Output:", "Pass by Reference and Pass by Value", "Output:", "Output:", "Output:", "Exercise:", "Output:", "Quick Links: ", "FAQs- Python Functions", "Q2. What are the 4 types of Functions in Python?", "Q3. How to define function in Python?", "‘:’. ", "def function_name():", "Function code", "Q4. What are the parameters of a function in Python?", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-functions/?ref=previous_article"},
{"title": "Python map() function", "h1": ["Python map() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python map() Function Syntax", "map() in Python Examples", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["map()", "Syntax", "Parameters:", "fun:", "iter:", "NOTE:", "Returns:", "NOTE :", "Output", "map() with Lambda Expressions", "Output", "Output", "Output", "Time complexity", "Auxiliary space", "Output", "Time complexity", "Auxiliary complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-map-function/"},
{"title": "Write", "h1": [], "h2": [], "strong": [], "link": "https://write.geeksforgeeks.org/python-list-comprehensions-vs-generator-expressions/"},
{"title": "Python | Check if list is sorted or not - GeeksforGeeks", "h1": ["Python |  Check if list is sorted or not"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Naive method ", "Output :", "Method #2 : Using sort()", "Output :", "Method #3 : Using sorted()", "Output :", "Method #4 : Using all()", "Output :", "Method #5 : Use the zip() function and the all() function", "Output", "Method #6: Use the numpy library:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-check-if-list-is-sorted-or-not/?ref=ml_lbp"},
{"title": "Convert a List to Dictionary Python - GeeksforGeeks", "h1": ["Convert a List to Dictionary Python"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Convert a List to Dictionary Python", "Python3", "Python3", "Python3", "Python", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example", "Input :   ", "Output:", "Explaination", "Output", "Time complexity: ", "Auxiliary space:", "List to Dictionary Conversation", "Output", "Time complexity: ", "Auxiliary space: ", " u", "Output", "Time complexity: ", "Auxiliary space: ", "List to Dictionary Conversation using Lambda Function", "Output", "Time complexity:", "Auxiliary space:", " using List Comprehension and Slicing", "Output", "Time complexity: ", "Auxiliary space: ", "Convert a List into Dictionary using Itertools", "itertools ", " zip_longest()", "Output", "Time complexity:", "Auxiliary space:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-convert-a-list-to-dictionary/?ref=ml_lbp"},
{"title": "Plotting graphs using Python's plotly and cufflinks module - GeeksforGeeks", "h1": ["Plotting graphs using Python’s plotly and cufflinks module"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["plotly ", "plotly ", "cufflink", "choropleth ", "Command to install plotly:", "Command to install cufflink:", "Code #1:", "Output:", "Code #2:", "Output:", "Code #3:", "Output:", "Code #4:", "Output:", "Code #5:", "Output:", "Code #6:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-plot-different-graphs-using-plotly-and-cufflinks/?ref=ml_lbp"},
{"title": "Python - Convert Integer Matrix to String Matrix - GeeksforGeeks", "h1": ["Python – Convert Integer Matrix to String Matrix"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using str() + list comprehension", "Output", "Method #2 : Using str() + map()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3: Using numpy.char.mod() function.", "Algorithm:", "Output", "Time Complexity:", "Space Complexity:", "Steps:", "Output", "Method 5: Using a nested loop.", "Step-by-step approach:", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-convert-integer-matrix-to-string-matrix/?ref=lbp"},
{"title": "Ways to remove particular List element in Python - GeeksforGeeks", "h1": ["Ways to remove particular List element in Python"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using ", "remove()", "remove()", "Method #2 : Using ", "set.disard()", "set.disard()", "Output :", "Method #3 : Using Lambda Function + filter()", "Output:", "Method #4: Using List Comprehension", "Output :", "Method #5: Using pop()", "Approach:", "Output :", "Method #6: Using Recursion ", "Output ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-ways-to-remove-particular-list-element/?ref=ml_lbp"},
{"title": "Python list() Function - GeeksforGeeks", "h1": ["Python list() Function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python list() Function Syntax", "list() Function in Python", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python list()", "function", "Syntax", "Parameter:", "iterable:", "Note: ", "Output", "Output", "Output", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-list-function/?ref=ml_lbp"},
{"title": "How to add Elements to a List in Python - GeeksforGeeks", "h1": ["How to add Elements to a List in Python"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "How to Add Items to a List in Python?", "Insert Element to List", " Using ", "insert() Method", "Python3", "Add Element to List", " using ", "append() Method", "Python3", "Add Element to a List", " Using Concatenation", "Python3", "Add Element to a List", " Using ", "extend()", " Method", "Python3", "Add Element to a List", " using List Unpacking", "Python3", "Python3", "Add Element to a List", " Using Slicing and Concatenation", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" Using ", "Output", "Time Complexity: ", "Auxiliary Space: ", " using ", "Output", "Time Complexity", "Space", "Complexity", " Using Concatenation", "Output", "Time complexity:", "Auxiliary space:", " Using ", "extend()", " Method", "Output", "Time Complexity", "Space Complexity", " using List Unpacking", "Output", "Time Complexity:", "Space Complexity:", "Output", "Time Complexity", "Space Complexity", " Using Slicing and Concatenation", "Output", "Time Complexity", "Space Complexity", "Python Slice Assignment", "Output", "Time Complexity", "Space Complexity:", "Read More Operations on List:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-add-the-element-in-the-list-with-help-of-indexing/?ref=ml_lbp"},
{"title": "Python - Maximum and Minimum K elements in Tuple - GeeksforGeeks", "h1": ["Python – Maximum and Minimum K elements in Tuple"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Input", "Output", "Method #1 : Using sorted() + loop", "Output", "Time complexity: ", "Auxiliary space:", "Method #2 : Using list slicing + sorted()", "Output", "Time complexity:", "Auxiliary space: ", "Method #3 : Using heapq module:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 4 :  using the built-in functions min() and max() and a loop to extract the K elements.", "step-by-step approach :", "Output", "Algorithm :", "Output", "me Complexity :", "Auxiliary Space  :  ", "Output", "time Space : O(kn)", "Auxiliary Space  :  O(k)", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-maximum-and-minimum-k-elements-in-tuple/?ref=ml_lbp"},
{"title": "Python Program to Convert String Matrix Representation to Matrix - GeeksforGeeks", "h1": ["Python Program to Convert String Matrix Representation to Matrix"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input :", "Output : ", "Explanation :", "Input : ", "Output :", "Explanation :", "Method 1 : Using ", "Example:", "Output", "Method 2 : ", "Example:", "Output", "Method 3: ", "Output", "Time complexity: O(n)", "Space complexity: O(n)", "Method 4: Use a combination of re.findall() and re.split() functions from the re module.", "Output", "Time complexity: ", "Auxiliary space:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-convert-string-matrix-representation-to-matrix/?ref=lbp"},
{"title": "Python return statement - GeeksforGeeks", "h1": ["Python return statement"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Returning Multiple Values", "Python3", "Python3", "Python3", "Python3", "Function returning another function", "Python3", "What kind of Experience do you want to share?"], "strong": [" return statement", "return", "statement", "Note:", "Syntax:", "Example:", "Output:", "Using Object:", "Example", "Output", "Using Tuple:", "Output:", "Using a list:", "Output:", "Using a Dictionary:", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-return-statement/?ref=ml_lbp"},
{"title": "Python | sort list of tuple based on sum - GeeksforGeeks", "h1": ["Python | sort list of tuple based on sum"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input:", "Output: ", "Input:", "Output:", "# Method 1:", "Output:", "# Method 2:", "Output: ", "# Method 3:", "Output:", "Output", "Time Complexity", "Space Complexity", "Data Structures & Algorithms in JavaScript - Self Paced ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sort-list-of-tuple-based-on-sum/?ref=ml_lbp"},
{"title": "Python program to find smallest number in a list - GeeksforGeeks", "h1": ["Python program to find smallest number in a list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Sorting the list to find smallest number in a list", "Python3", "Python3", "Using min() Method to find smallest number in a list", "Python3", "Find minimum list element for a user defined list", "Python3", "Find the smallest element in list comparing every element", "Python3", "Using the lambda function to find smallest number in a list", "Python3", "Using the enumerate function to find smallest number in a list", "Python3", "Using reduce function to find the smallest number in a list", "Python", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example: ", "Output: ", "Output:", "Output: ", "Time Complexity: ", "Auxiliary Space: ", "Output: ", "Input: ", "Output:", "Output:", "Output:", "Using reduce function to find the smallest number in a list", "Output", "Output", "Output", "Time complexity: ", "Auxiliary Space:", "Using numpy module:", "Output", "Time complexity: ", "Auxiliary Space: ", "Output", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-find-smallest-number-in-a-list/?ref=ml_lbp"},
{"title": "Python | Ways to format elements of given list - GeeksforGeeks", "h1": ["Python | Ways to format elements of given list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Format Elements of Given List using List Comprehension ", "Output", "Time Complexity", "Auxiliary Space: ", "Format Elements of Given List using Map()", "Output", "Format Elements of Given List using Format()", "Output", "Format Elements of Given List using Iteration ", "Output", "Format Elements of Given List using Reduce", "Output", "Format Elements of Given List using Math Functions", "Algorithm:", "Output", "Time Complexity:", "Auxiliary Space:", "Format Elements of Given List using Counter Method", "Output", "Time Complexity:", "Space Complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-ways-to-format-elements-of-given-list/"},
{"title": "Convert List of Dictionary to Tuple list Python - GeeksforGeeks", "h1": ["Convert List of Dictionary to Tuple list Python"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input: ", "Output: ", "Convert List of Dictionary to Tuple list Python Using Naive Approach", "Output", "Time Complexity: O(n*n)", "Auxiliary Space: O(n)", "Convert List of Dictionary to Tuple list Python Using list comprehension", "Output:", "Convert List of Dictionary to Tuple list Python Using map() function", "Output", "Time complexity:", "O(N*M)", "Auxiliary space:  O(N*M)", "Using the chain() function from the itertools module with a list comprehension", "Approach:", "Output", "Time complexity: O(n*m),", "Auxiliary space: O(n*m)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-convert-list-of-dictionary-to-tuple-list/"},
{"title": "Python | Sorting URL on basis of Top Level Domain - GeeksforGeeks", "h1": ["Python | Sorting URL on basis of Top Level Domain"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["top-level domain", "Input :", "Output :", "Explanation:", "Method 1: Using sorted", "Initial list is :", "Sorted list according to TLD is :", "Method 2: Using Lambda", "Initial list is :", "Sorted list according to TLD is :", "Method 3: Using reversed", "Initial list is :", "Sorted list according to TLD is :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-sorting-url-on-basis-of-top-level-domain/?ref=ml_lbp"},
{"title": "Python - Add Custom Column to Tuple list - GeeksforGeeks", "h1": ["Python – Add Custom Column to Tuple list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Input", "Output", "Method #1: Using list comprehension + zip()", "Output : ", "Time complexity: O(n),", "Auxiliary space: O(n)", "Method #2: Using map() + lambda", "Output : ", "Time complexity: ", "Auxiliary space:", "Method #3: Add Custom Column to Tuple List using List Comprehension and Zip Function.", "Output", "Time complexity: ", "Auxiliary space:", "Method #4: Using a for loop", "Output", "Time complexity:", "Auxiliary space:", "Method #5: using the pandas library.", "Output:", "Time complexity: ", "Auxiliary space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-add-custom-column-to-tuple-list/"},
{"title": "Python | Add tuple to front of list - GeeksforGeeks", "h1": ["Python | Add tuple to front of list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using insert()", "Output", "Time complexity:", "Auxiliary Space: ", "Method #2 : Using deque() + appendleft()", "Output", "Time complexity: ", "Auxiliary space:", "Method #3 : Using extend() method", "Output", "Time Complexity:", "Auxiliary Space: ", "Method #4: Using the concatenation operator", "Output", "Time Complexity: O(k), Where k is the length of the list that needs to be added.", "Auxiliary Space: O(k)", "Method #5 : Using slicing and unpacking", "Output", "Time complexity: O(n)", "Auxiliary space: O(n+1)", "Method 6: Using list comprehension and the append() method", "Output", "Time complexity: O(n)", "Auxiliary space: O(n)", "Method #7 : Using the unpacking operator (*) and the list() constructor", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-add-tuple-to-front-of-list/"},
{"title": "Python Program to print strings based on the list of prefix - GeeksforGeeks", "h1": ["Python Program to print strings based on the list of prefix"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method 1: ", "Output", "Time Complexity: O(n * m)", "Auxiliary Space: O(n)", "Method 2 :", "Output", "Time Complexity : ", "Auxiliary Space :", "Method 3 : Using find() method", "Output", "Time complexity: ", "Auxiliary space: ", "Method 4 : Using for loop, len() method and slicing", "Output", "Time complexity:", "Auxiliary space:", "Method 7: Using regex", "Step-by-step approach:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-print-strings-based-on-the-list-of-prefix/?ref=ml_lbp"},
{"title": "Python List Index Out of Range - How to Fix IndexError - GeeksforGeeks", "h1": ["Python List Index Out of Range – How to Fix IndexError"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What Causes an IndexError in Python", "Python3", "Python3", "How to Fix IndexError in Python", "How to Fix List Index Out of Range in Python", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Accessing Non-Existent Index: ", "Empty List:", "Example:", "Output", " Indexerror ", "Output", "Check List Length:", "Use Conditional Statements:", "How to Fix List Index Out of Range in Python", "Output", "sing Index()", "Output", "Reason for the error", "Solving this error without using ", "Python len()", " or constant Value: ", "Output", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-list-index-out-of-range-indexerror/?ref=ml_lbp"},
{"title": "Python | TextBlob.sentiment() method - GeeksforGeeks", "h1": ["Python | TextBlob.sentiment() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["TextBlob.sentiment()", "Syntax :", "Return :", "Example #1 :", "Output :", "Example #2 :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-textblob-sentiment-method/?ref=ml_lbp"},
{"title": "Python Program to Convert Matrix to String - GeeksforGeeks", "h1": ["Python Program to Convert Matrix to String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Explanation :", "Input :", "Output :", "Explanation :", "Method #1 : Using ", "join()", " +", " list comprehension", "Output:", "Method #2 : Using ", "map()", " +", " join()", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Approach 3: Using reduce() function and join() method", "Output", "Approach 4 : Using itertools.chain and str.join", " step-by-step algorithm for the approach ", "Output", "Time complexity", "Auxiliary space", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-convert-matrix-to-string/"},
{"title": "Python | Queue using Doubly Linked List - GeeksforGeeks", "h1": ["Python | Queue using Doubly Linked List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Queue Operations:", "Python3", "What kind of Experience do you want to share?"], "strong": ["1. enqueue()     :", "2. dequeue()     :", "3. first()       :", "4. size()        :", "5. isEmpty()     :", "6. printqueue()  :", "Output:", "Time Complexity for operations:", "Auxiliary Space required for operations:", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-queue-using-doubly-linked-list/?ref=next_article"},
{"title": "Python - Extract Tuples with all Numeric Strings - GeeksforGeeks", "h1": ["Python – Extract Tuples with all Numeric Strings"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using list comprehension + all() + isdigit()", "Output", "Method #2 : Using lambda + filter() + isdigit()", "Output", "Method #3 : Using list comprehension + all() + isnumeric()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #4 : Using join(),replace() and len() methods", "Output", "Method #5:Using loop and re", "Output", "Time complexity: ", "Space complexity:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-extract-tuples-with-all-numeric-strings/?ref=ml_lbp"},
{"title": "Python Data Structures and Algorithms - GeeksforGeeks", "h1": ["Python Data Structures and Algorithms"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Lists", "Python3", "Python3", "Tuple", "Python3", "Set", "Python3", "Frozen Sets", "Python3", "String", "Python3", "Dictionary", "Python3", "Matrix", "Python3", "Bytearray", "Python3", "Linked List", "Python3", "Python3", "Python3", "Stack", "Python3", "Queue", "Python3", "Priority Queue", "Python3", "Heap", "Python3", "Binary Tree", "Python3", "Python3", "Tree Traversal", "Python3", "Python3", "Binary Search Tree", "Python3", "Python3", "Graphs", "Python3", "Python3", "Graph Traversal", "Python3", "Python3", "Recursion", "Python3", "Dynamic Programming", "Searching Algorithms", "Python3", "Python3", "Sorting Algorithms", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output", "Output", "Note: ", "Output", "Set Implementation:", "Sets with Numerous operations on a single HashTable:", "Output", "Output", "Note:", "Output", "Output", "Output", "Output", "Output", ">>> More", "The functions associated with stack are:", "empty() –", "size() –", "top() –", "push(a) –", "pop() –", "Output", ">>> More", "Operations associated with queue are:", "Enqueue:", "Dequeue:", "Front: ", "Rear:", "Output", "Output", "Max-Heap:", "Min-Heap: ", "Output", ">>> More", "Depth First Traversals:", "Algorithm Inorder(tree)", "Algorithm Preorder(tree)", "Algorithm Postorder(tree)", "Output", "Breadth-First or Level Order Traversal", "Output", ">>> More", "Binary Search Tree", "Output", ">>> More", "Output", "Output", "Output", "Algorithm:", "Output", ">>> More", "Output", ">>> More", "Dynamic Programming", "Tabulation:", "Memoization:", ">>> More", "Output", "Output", "Output", "Time Complexity:", "Auxiliary Space:", "Illustration : ", "Output", "Time Complexity: ", "Illustration:", "Output", "Time Complexity:", "Output", "Time Complexity:", "Partition Algorithm", "Output", "Time Complexity: ", "Output", "Time Complexity: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-data-structures-and-algorithms/"},
{"title": "Python | Sentiment Analysis using VADER - GeeksforGeeks", "h1": ["Python | Sentiment Analysis using VADER"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Sentiment Analysis", "opinion mining", "Why sentiment analysis?", "Business:", "Politics:", "Public Actions:", "vaderSentiment", "VADER Sentiment Analysis :", "VADER (Valence Aware Dictionary and sEntiment Reasoner)", "VADER", "VADER", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sentiment-analysis-using-vader/"},
{"title": "Python - Index Frequency Alphabet List - GeeksforGeeks", "h1": ["Python – Index Frequency Alphabet List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using ascii_lowercase + ord() + loop", "Output", "Time complexity:", "Auxiliary", "space:", "Method #2 : Using list comprehension + ascii_lowercase + ord()", "Output", "Time complexity: ", "Auxiliary", "space:", "Method#3 : Using map() +ascii lower + enumerate ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #4 : Using for loop", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method #5: Using a dictionary and a for loop", "Output", "Time Complexity:", "Auxiliary Space:", "Method #6: Using zip() function and list comprehension.", "Output", "Time complexity:", "Auxiliary space: ", "Method #7:Using reduce() and a lambda function (requires importing the functools module):", "Output", "Time complexity:", "Space complexity:", "Method #8 : Using for loop+join()+itertools.repeat() methods", "Output", "Time Complexity : O(N) ", "Auxiliary Space : O(N)", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-index-frequency-alphabet-list/?ref=ml_lbp"},
{"title": "Python Program to Convert a List to String - GeeksforGeeks", "h1": ["Python Program to Convert a List to String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Program to Convert a List to a String", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example", "Input:", "Output", "Explanation:", "U", " ", "Output", "Time Complexity:", "Auxiliary Space:", " using join() method", "Output", "Time Complexity:", "Auxiliary Space:", "Convert a List to a String using list comprehension", "Output", "Time complexity", "Space complexity:", " ", "Convert a List to a String using the map() function", "Output", "Time complexity", "t", "Space complexity: ", " using ", "Output", "Time Complexity:", "Auxiliary Space:", "List to a String using", "Output", "Time Complexity:", "Auxiliary Space:", "Convert a List to ", "Output", "Time complexity: ", "Space complexity: ", "Output", "Output", "Time complexity:", "Space complexity:", " using Recursion ", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-convert-a-list-to-string/?ref=ml_lbp"},
{"title": "Python | Convert a list of characters into a string - GeeksforGeeks", "h1": ["Python | Convert a list of characters into a string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "Python", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Implementation:", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method #2: Using join() function", "str = \"\"", "str1 = ( \"geeks\", \"for\", \"geeks\" )", "str.join(str1) ", "Implementation:", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method #3: Using reduce() function", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #4: Using list comprehension ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #5: Using enumerate function ", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "DSA for Interview Preparation "], "link": "https://www.geeksforgeeks.org/python-convert-list-characters-string/?ref=ml_lbp"},
{"title": "Python program to check the validity of a Password - GeeksforGeeks", "h1": ["Python program to check the validity of a Password"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Way 1:", "re", "Output", "Time complexity:", "Auxiliary space:", "Way 2:", "Output", "Time complexity:", "Auxiliary space:", "Way 3: ", "Output", "Time complexity :", "Auxiliary space :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-check-validity-password/?ref=lbp"},
{"title": "Python Regex-programs Archives - GeeksforGeeks", "h1": ["Python Regex-programs"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/tag/python-regex-programs/"},
{"title": "Python Tkinter - SpinBox - GeeksforGeeks", "h1": ["Python Tkinter – SpinBox"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Spinbox widget", "What kind of Experience do you want to share?"], "strong": ["Note:", "Syntax:", "Parameters:", "master", "options", "Options:", "activebackground: ", "bg: ", "bd: ", "command: ", "cursor: ", "disabledforeground: ", "disabledbackground: ", "font: ", "fg: ", "format: ", "from_: ", "justify: ", "relief: ", "repeatdelay: ", "repeatinterval: ", "state: ", "textvariable: ", "to: ", "validate: ", "validatecommand: ", "values: ", "vcmd: ", "width: ", "wrap: ", "xscrollcommand: ", "Methods:", "delete(startindex, endindex): ", "get(startindex, endindex): ", "identify(x, y): ", "index(index): ", "insert(index, string): ", "invoke(element): ", "Example:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tkinter-spinbox/?ref=next_article"},
{"title": "Python Program for Program to Print Matrix in Z form - GeeksforGeeks", "h1": ["Python Program for Program to Print Matrix in Z form"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output:", "Output", "Time complexity:", "Auxiliary Space: ", "Using numpy", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-for-program-to-print-matrix-in-z-form/"},
{"title": "Python Program for Sieve of Eratosthenes - GeeksforGeeks", "h1": ["Python Program for Sieve of Eratosthenes"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python3", "What kind of Experience do you want to share?"], "strong": ["Sieve of Eratosthenes", "Implementation:", "Example", "Output", "Time Complexity", "Auxiliary Space", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-for-sieve-of-eratosthenes/"},
{"title": "Python Program for Triangular Matchstick Number - GeeksforGeeks", "h1": ["Python Program for Triangular Matchstick Number"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-for-triangular-matchstick-number/?ref=ml_lbp"},
{"title": "Python Program for Compound Interest - GeeksforGeeks", "h1": ["Python Program for Compound Interest"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output", "Time Complexity: O(1) ", "Auxiliary Space: O(1) ", ".", "Compound Interest with Input taking from user", "Output:", "Time Complexity:", "Auxiliary Space:", "Output", "Time Complexity: O(1) ", "Auxiliary Space: O(1)", "Compound Interest using for loop", "Output", "Time complexity: O(1)", "Auxiliary Space: O(1) ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-for-compound-interest/?ref=ml_lbp"},
{"title": "Python Program for Maximum height when coins are arranged in a triangle - GeeksforGeeks", "h1": ["Python Program for Maximum height when coins are arranged in a triangle"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input : ", "Output : ", "Explanation: ", "Input :", "Output :", "Explanation: ", "Brute-Force Approach:", "Output", "Time complexity: ", "Auxiliary space: ", "Efficient Approach: ", "Output", "Time complexity: ", "Auxiliary space: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-for-maximum-height-when-coins-are-arranged-in-a-triangle/"},
{"title": "Python Program for Program to find the sum of a Series 1/1! + 2/2! + 3/3! + 4/4! +.......+ n/n! - GeeksforGeeks", "h1": ["Python Program for Program to find the sum of a Series 1/1! + 2/2! + 3/3! + 4/4! +…….+ n/n!"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Output:", "Time Complexity:", "Auxiliary Space: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-for-program-to-find-the-sum-of-a-series-11-22-33-44-nn/"},
{"title": "Python Program to Reverse the Content of a File using Stack - GeeksforGeeks", "h1": ["Python Program to Reverse the Content of a File using Stack"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input:", "Output:", "Approach to Python Program to Reverse a Stack Using Recursion ", "Input File:", "Code Explanation", "Output:", "Time complexity: ", "Auxiliary space", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-reverse-the-content-of-a-file-using-stack/"},
{"title": "Python | Finding Solutions of a Polynomial Equation - GeeksforGeeks", "h1": ["Python | Finding Solutions of a Polynomial Equation"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Algorithm :", "Below is the Python implementation of the above mentioned task.", "Output :", "Explanation :", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-finding-solutions-of-a-polynomial-equation/?ref=ml_lbp"},
{"title": "Python Program to Calculate the Area of a Triangle - GeeksforGeeks", "h1": ["Python Program to Calculate the Area of a Triangle"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Program to Calculate the Area of a Triangle in Python", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example", "Input", "Output", "Heron’s Formula", "Area of Triangle", "Output", "Formula", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Master Java Programming - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-program-to-calculate-the-area-of-a-triangle/"},
{"title": "Python Program to Print the Fibonacci sequence - GeeksforGeeks", "h1": ["Python Program to Print the Fibonacci sequence"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Fibonacci Series", "Variations of Fibonacci number", "Some other problems on Fibonacci Numbers", "Fibonacci Series", "Variations of Fibonacci number", "Some other problems on Fibonacci Numbers", "Fibonacci Numbers using Native Approach", "Python3", "Python Program for Fibonacci numbers using Recursion ", "  ", "Python3", "Fibonacci Sequence using DP (Dynamic Programming)", "Python3", "Optimization of Fibonacci sequence", "Python3", "Fibonacci Sequence using Cache  ", "Python3", "Fibonacci Sequence using Backtracking", "Python3", "What kind of Experience do you want to share?"], "strong": [" F", "n", "F", "0", "F", "1", "Fibonacci Numbers using Native Approach", "Output", "Python Program for Fibonacci numbers using Recursion ", "Output", "Time complexity: ", "Auxiliary Space: ", "Fibonacci Sequence using DP (Dynamic Programming)", "Output", "Time complexity: ", "Auxiliary Space: ", "Optimization of Fibonacci sequence", "Output", "Time complexity:", "Auxiliary Space: ", "Fibonacci Sequence using Cache  ", "Output", "Time complexity:", "Auxiliary Space: ", "Fibonacci Sequence using Backtracking", "Output", "Time complexity:", "Auxiliary Space: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-to-print-the-fibonacci-sequence/?ref=ml_lbp"},
{"title": "Python time.tzset() Function - GeeksforGeeks", "h1": ["Python time.tzset() Function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["std and dst:", "offset: ", " ", "start[/time], end[/time]: ", "Jn: ", "n: ", "Mm.n.d:  ", "time: ", "Syntax:", "Parameters:", "Return Value:", "Note", "Example 1", "Output", "Example 2:", "Output", "Example 3:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-time-tzset-function/?ref=previous_article"},
{"title": "Python - Lists Modulo - GeeksforGeeks", "h1": ["Python – Lists Modulo"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Note: Install numpy module using command “pip install numpy”", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using zip() + list comprehension", "Output", "Method #2 : Using map()", "Output", "Method #3 : Using numpy() ", "Note: Install numpy module using command “pip install numpy”", "output:", "The modulo list is : [3 2 2 0 4]", "Method #4 : Using a for loop:", "Output", "Time complexity: O(n)", "Auxiliary Space: O(n)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-lists-modulo/"},
{"title": "Python Functools - cached_property() - GeeksforGeeks", "h1": ["Python Functools – cached_property()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["@cached_property", "Note:", "Difference between @property and @cached_property: ", "But how does it reduces the execution time and makes the program faster ?", "Example:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-functools-cached_property/?ref=ml_lbp"},
{"title": "Python - Find the Maximum of Similar Indices in two list of Tuples - GeeksforGeeks", "h1": ["Python – Find the Maximum of Similar Indices in two list of Tuples"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Note: Install numpy module using command “pip install numpy”", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension + zip()", "Output : ", "Method #2 : Using max() + zip() + map()", "Output : ", "Method #3: ", " ", "Output", "Method #4: Using numpy()", "Note: Install numpy module using command “pip install numpy”", "Method 5: Using for loop", "Output", "Time complexity:", "Auxiliary space:", "Method 6: Using Recursive method.", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-find-the-maximum-of-similar-indices-in-two-list-of-tuples/?ref=ml_lbp"},
{"title": "Python - Find minimum k records from tuple list - GeeksforGeeks", "h1": ["Python – Find minimum k records from tuple list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using sorted() + lambda", "Output", "Time complexity:", "Auxiliary space:", "Method #2 : Using sorted() + itemgetter()", "Output", "Time complexity: ", "Auxiliary space: ", "Method #3 : Using heapq.nsmallest()", "Output", "Time complexity", " Auxiliary space", "Method #4 : Using a for loop and conditional statements", "Output", "Method #5: Using heapq.nlargest()", "step-by-step approach:", "Output", "Time complexity", "Auxiliary space:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/?ref=next_article"},
{"title": "Python time altzone() Method - GeeksforGeeks", "h1": ["Python time altzone() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python altzone() method", "Syntax:", "Example:", "Output:", "Example: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-time-altzone-method/?ref=lbp"},
{"title": "Python PIL | ImageChops.multiply() method - GeeksforGeeks", "h1": ["Python PIL | ImageChops.multiply() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["ImageChops module", "PIL.ImageChops.multiply()", "Syntax:", "Parameters:", "image1:", "image2:", "Return Type:", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-pil-imagechops-multiply-method/"},
{"title": "Python time.tzname() Function - GeeksforGeeks", "h1": ["Python time.tzname() Function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax", "Return", "Example 1", "Output:", "Example 2", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-time-tzname-function/?ref=lbp"},
{"title": "Python PIL | Image.merge() method - GeeksforGeeks", "h1": ["Python PIL | Image.merge() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Pillow", "Installation and setup", "Loading and Saving Images", "Image Manipulation Basics", "Adjusting Image Properties", "Image Filtering and Effects", "Drawing on Images", "Image Transformations", "Working with Image Metadata", "Image Analysis and Processing", "Image Compositing and Blending", "Image Formats and Conversion", "Batch Processing and Automation", "Image Enhancement Techniques", "Working with Animated Images", "OCR and Text Extraction from Images", "Pillow function", "Introduction to Pillow", "Installation and setup", "Loading and Saving Images", "Image Manipulation Basics", "Adjusting Image Properties", "Image Filtering and Effects", "Drawing on Images", "Image Transformations", "Working with Image Metadata", "Image Analysis and Processing", "Image Compositing and Blending", "Image Formats and Conversion", "Batch Processing and Automation", "Image Enhancement Techniques", "Working with Animated Images", "OCR and Text Extraction from Images", "Pillow function", "What kind of Experience do you want to share?"], "strong": ["Image.merge()", "Syntax:", "Parameters:", "mode", "bands", "Returns:", "Image Used:", "Output:", "Another Example:", "Image Used:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pil-image-merge-method/?ref=ml_lbp"},
{"title": "Python | Set 6 (Command Line and Variable Arguments) - GeeksforGeeks", "h1": ["Python  | Set 6 (Command Line and Variable Arguments)"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Command Line Arguments", "Python3", "What kind of Experience do you want to share?"], "strong": ["NOTE :", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-set-6-arguments/"},
{"title": "Python PIL | UnsharpMask() method - GeeksforGeeks", "h1": ["Python PIL | UnsharpMask() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["PIL.ImageFilter.UnsharpMask()", "Syntax:", "Parameters:", "radius:", "percent:", "threshold:", "Output:", "Output:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pil-unsahrpmask-method/"},
{"title": "Python - Summation of tuple dictionary values - GeeksforGeeks", "h1": ["Python – Summation of tuple dictionary values"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using tuple() + sum() + zip() + values()", "Output : ", "Time complexity: ", "Auxiliary space: ", "Method #2: Using tuple() + map() + values()", "Output : ", "Method #3: Using a for loop and indexing", "test_dict", "print() ", "res", "test_dict", " i-th", "res", "print()", "Output", "Time complexity: ", "Auxiliary space: ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-summation-of-tuple-dictionary-values/?ref=next_article"},
{"title": "Python PIL | Image.crop() method - GeeksforGeeks", "h1": ["Python PIL | Image.crop() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Parameters: ", "box –", "Return type:", "Return:", "Image", "Code #1:", "Original Image", "Output:", "Code #2:", "Original Image:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-pil-image-crop-method/"},
{"title": "Python | time.time() method - GeeksforGeeks", "h1": ["Python | time.time() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Parameter:", "Return type:", "Code #1:", "Output:", "Code #2:", "Output:", "Reference:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-time-time-method/?ref=lbp"},
{"title": "Python PIL | ImageEnhance.Brightness() and ImageEnhance.Sharpness() method - GeeksforGeeks", "h1": ["Python PIL | ImageEnhance.Brightness() and ImageEnhance.Sharpness() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Pillow", "Installation and setup", "Loading and Saving Images", "Image Manipulation Basics", "Adjusting Image Properties", "Image Filtering and Effects", "Drawing on Images", "Image Transformations", "Working with Image Metadata", "Image Analysis and Processing", "Image Compositing and Blending", "Image Formats and Conversion", "Batch Processing and Automation", "Image Enhancement Techniques", "Working with Animated Images", "OCR and Text Extraction from Images", "Pillow function", "Introduction to Pillow", "Installation and setup", "Loading and Saving Images", "Image Manipulation Basics", "Adjusting Image Properties", "Image Filtering and Effects", "Drawing on Images", "Image Transformations", "Working with Image Metadata", "Image Analysis and Processing", "Image Compositing and Blending", "Image Formats and Conversion", "Batch Processing and Automation", "Image Enhancement Techniques", "Working with Animated Images", "OCR and Text Extraction from Images", "Pillow function", "ImageEnhance.Brightness()", " method –", "ImageEnhance.Sharpness()", " method – ", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Output:", "factor is 2.0", "second 5.0", "Syntax:", "Output:", "factor is -2.0", "it is 5.0", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pil-imageenhance-brightness-and-imageenhance-sharpness-method/"},
{"title": "Python PIL | Image.thumbnail() Method - GeeksforGeeks", "h1": ["Python PIL | Image.thumbnail() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Pillow", "Installation and setup", "Loading and Saving Images", "Image Manipulation Basics", "Adjusting Image Properties", "Image Filtering and Effects", "Drawing on Images", "Image Transformations", "Working with Image Metadata", "Image Analysis and Processing", "Image Compositing and Blending", "Image Formats and Conversion", "Batch Processing and Automation", "Image Enhancement Techniques", "Working with Animated Images", "OCR and Text Extraction from Images", "Pillow function", "Introduction to Pillow", "Installation and setup", "Loading and Saving Images", "Image Manipulation Basics", "Adjusting Image Properties", "Image Filtering and Effects", "Drawing on Images", "Image Transformations", "Working with Image Metadata", "Image Analysis and Processing", "Image Compositing and Blending", "Image Formats and Conversion", "Batch Processing and Automation", "Image Enhancement Techniques", "Working with Animated Images", "OCR and Text Extraction from Images", "Pillow function", "What kind of Experience do you want to share?"], "strong": ["Image.thumbnail()", "Syntax:", "Parameters:", "size", "resample", "Returns Type:", "Image Used:", "Output:", "Another Example:", "Image Used:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pil-image-thumbnail-method/?ref=next_article"},
{"title": "Python | Copy and Paste Images onto other Image using Pillow - GeeksforGeeks", "h1": ["Python | Copy and Paste Images onto other Image using Pillow"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input images – ", "Example 1:", "Output:", "Example 2:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-copy-and-paste-images-onto-other-image-using-pillow/"},
{"title": "Python | sympy.expand() method - GeeksforGeeks", "h1": ["Python | sympy.expand() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["sympy.expand()", "Syntax :", "Return :", "Example #1 :", "Output :", "Example #2 :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sympy-expand-method/"},
{"title": "Python PIL | ImageChops.darker() method - GeeksforGeeks", "h1": ["Python PIL | ImageChops.darker() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Parameters:", "image1:", "image2:", "Return Value:", "Note:", "MODE", "Code #1:", "Output:", "Code #2:", "Output:", "Note:", "Data Science Training Program ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pil-imagechops-darker-method/?ref=ml_lbp"},
{"title": "Python | OCR on All the Images present in a Folder Simultaneously - GeeksforGeeks", "h1": ["Python | OCR on All the Images present in a Folder Simultaneously"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Pillow", "Installation and setup", "Loading and Saving Images", "Image Manipulation Basics", "Adjusting Image Properties", "Image Filtering and Effects", "Drawing on Images", "Image Transformations", "Working with Image Metadata", "Image Analysis and Processing", "Image Compositing and Blending", "Image Formats and Conversion", "Batch Processing and Automation", "Image Enhancement Techniques", "Working with Animated Images", "OCR and Text Extraction from Images", "Pillow function", "Introduction to Pillow", "Installation and setup", "Loading and Saving Images", "Image Manipulation Basics", "Adjusting Image Properties", "Image Filtering and Effects", "Drawing on Images", "Image Transformations", "Working with Image Metadata", "Image Analysis and Processing", "Image Compositing and Blending", "Image Formats and Conversion", "Batch Processing and Automation", "Image Enhancement Techniques", "Working with Animated Images", "OCR and Text Extraction from Images", "Pillow function", "What kind of Experience do you want to share?"], "strong": ["OCR (Optical Character Recognition)", "tesseract-oct", "pytesseract", "Input Image :", "Output :", "+a", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-ocr-on-all-the-images-present-in-a-folder-simultaneously/?ref=previous_article"},
{"title": "Python | Duplicate element indices in list - GeeksforGeeks", "h1": ["Python | Duplicate element indices in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loop + set()", "Output : ", "Time complexity: ", "Auxiliary space:", "Method #2: Using list comprehension + list slicing", "Output : ", "Time complexity:", "Auxiliary space: ", "Method #3: Using dictionary", "oc_dict ", "res", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-duplicate-element-indices-in-list/"},
{"title": "Python | Find yesterday's, today's and tomorrow's date - GeeksforGeeks", "h1": ["Python | Find yesterday’s, today’s and tomorrow’s date"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Find yesterday’s, today’s and tomorrow’s date", "Python3", "Find yesterday’s, today’s and tomorrow’s date Using calendar method", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisites:", "datetime", "timedelta", "Syntax for timedelta:", "Syntax to find a present-day date:", "Syntax to find a previous-day and next-day date:", "Find yesterday’s, today’s and tomorrow’s date", "Output", "Find yesterday’s, today’s and tomorrow’s date Using calendar method", "Algorithm:", "Output", "Data Science Training Program ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-find-yesterdays-todays-and-tomorrows-date/"},
{"title": "Python - Combinations of sum with tuples in tuple list - GeeksforGeeks", "h1": ["Python – Combinations of sum with tuples in tuple list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using combinations() + list comprehension", "Output : ", "Time complexity: ", "Auxiliary space: ", "Method #2 : Using list comprehension + zip() + operator.add + combinations()", "Output : ", "Time Complexity: O(n*n)", "Auxiliary Space: O(n)", "Method #3: Using nested for loops", "Output", "Time complexity:", "O(n^2)", "Auxiliary space: O(n^2)", "Method #4: Using itertools.combinations() + map() + lambda function", "Output", "Time complexity: O(n^2)", "Auxiliary space: O(n^2) ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/?ref=ml_lbp"},
{"title": "Python | Unit Test Objects Patching | Set-1 - GeeksforGeeks", "h1": ["Python | Unit Test Objects Patching | Set-1"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["unittest.mock.patch()", "Code #1: Using ", "unittest.mock.patch", " as a decorator", "Code #2: Using ", "unittest.mock.patch", " as a decorator", "Code #3: Using", " unittest.mock.patch", " to patch things manually. ", "Code #4: Stacking decorators and context managers to patch multiple objects", "Code #5 : Example", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-unit-test-objects-patching-set-1/"},
{"title": "Python | Ways to sort list of float values - GeeksforGeeks", "h1": ["Python | Ways to sort list of float values"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input:", "Output:", "Input:", "Output:", "Method #1 :Using lambda ", "Output:", "Time complexity: ", "Auxiliary space: ", "Method #2 : Using sorted", "Output:", "Method #3 : Using sort", "Output:", "METHOD 3:", "Output", "Time complexity:", "Auxiliary space: ", "Method #4: Using numpy.sort", "Algorithm:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-ways-to-sort-list-of-float-values/?ref=ml_lbp"},
{"title": "Python Program for Gnome Sort - GeeksforGeeks", "h1": ["Python Program for Gnome Sort"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "What kind of Experience do you want to share?"], "strong": ["Algorithm Steps:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-for-gnome-sort/"},
{"title": "Python NLTK | nltk.TweetTokenizer() - GeeksforGeeks", "h1": ["Python NLTK | nltk.TweetTokenizer()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["NLTK nltk.TweetTokenizer()", "Syntax :", "Return :", "Return the stream of token", "Example #1 :", "Output :", "Example #2 :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-nltk-nltk-tweettokenizer/"},
{"title": "Python PIL | Image.convert() Method - GeeksforGeeks", "h1": ["Python PIL | Image.convert() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Image.convert()", "Syntax:", "Parameters:", "mode", "matrix", "dither", "palette", "colors", "Returns:", "Image Used:", "Output1:", "Output2:", "Another Example:", "Image Used:", "Output1:", "Output2:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-pil-image-convert-method/?ref=ml_lbp"},
{"title": "Python | Ways to sort a zipped list by values - GeeksforGeeks", "h1": ["Python | Ways to sort a zipped list by values"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: ", "Output:", "Method #2:", "Output:", "Method #3:", "Approach:", "Output", "Time complexity", "Space complexity", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-ways-to-sort-a-zipped-list-by-values/"},
{"title": "Python | Calculate geographic coordinates of places using google geocoding API - GeeksforGeeks", "h1": ["Python | Calculate geographic coordinates of places using google geocoding API"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Modules needed :", "Output :", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-calculate-geographic-coordinates-places-using-google-geocoding-api/?ref=ml_lbp"},
{"title": "Python NLTK | nltk.tokenize.TabTokenizer() - GeeksforGeeks", "h1": ["Python NLTK | nltk.tokenize.TabTokenizer()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["nltk.tokenize.TabTokenizer()", "Syntax :", "Return :", "Example #1 :", "Output :", "Example #2 :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-nltk-nltk-tokenize-tabtokenizer/"},
{"title": "Python Program for QuickSort - GeeksforGeeks", "h1": ["Python Program for QuickSort"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "QuickSort using different languages", "Iterative QuickSort", "Different implementations of QuickSort", " Visualization of QuickSort", "Partitions in QuickSort", "Some problems on QuickSort", "QuickSort using different languages", "Iterative QuickSort", "Different implementations of QuickSort", " Visualization of QuickSort", "Partitions in QuickSort", "Some problems on QuickSort", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["divide and conquer algorithm", "Python ", " ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Python Quicksort using ", "list comprehension", "Algorithm:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-program-for-quicksort/?ref=lbp"},
{"title": "Python - Replace duplicate Occurrence in String - GeeksforGeeks", "h1": ["Python – Replace duplicate Occurrence in String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using split() + enumerate() + loop", "Output : ", "Time Complexity:", "Space Complexity:", "Method #2 : Using keys() + index() + list comprehension", "Output : ", "Time Complexity: ", "Space Complexity: ", "Method #3 : Using  list comprehension + set + keys", "Output", "Time complexity: O(n)", "Space complexity: O(n)", "Method #4: Using regular expressions", "step-by-step approach:", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-replace-duplicate-occurrence-in-string/"},
{"title": "Python Program for Rabin-Karp Algorithm for Pattern Searching - GeeksforGeeks", "h1": ["Python Program for Rabin-Karp Algorithm for Pattern Searching"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Output:", "Time Complexity:", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-for-rabin-karp-algorithm-for-pattern-searching/"},
{"title": "Python | Find dictionary matching value in list - GeeksforGeeks", "h1": ["Python | Find dictionary matching value in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method 1: Get a list of values from a List of Dictionary using a ", "loop", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(1)", "Method 2: Get a list of values from a List of Dictionary using ", "next()", " + ", "dictionary comprehension", "Output", "Get a list of values from a List of Dictionary using a list comprehension", "Output", "Get a list of values from a List of Dictionary using a filter method", "Output", "Method 5: Using the list.index() method", "Output", "METHOD 6:Using defaultdict method.", "APPROACH:", "ALGORITHM:", "Output", "Time complexity:", "Space complexity:", "METHOD 7:Using recursion:", "Algorithm:", "Output", "Time Complexity:", "Space Complexity:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-find-dictionary-matching-value-in-list/?ref=ml_lbp"},
{"title": "Python | Convert 1D list to 2D list of variable length - GeeksforGeeks", "h1": ["Python | Convert 1D list to 2D list of variable length"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Method #1: ", "Output:", "Method #2 : ", "Output:", "Approach 3: Using recursion", "Output", "Output", "METHOD 5:Using defaultdict:", "Output", "Approach#5: Using Numpy", "Algorithm", "Output:", "Time Complexity:", "Space Complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-convert-1d-list-to-2d-list-of-variable-length/"},
{"title": "Python | Find Dissimilar Elements in Tuples - GeeksforGeeks", "h1": ["Python | Find Dissimilar Elements in Tuples"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using set() + “^” operator", "Output", "Time complexity:", "Auxiliary space: ", "Method #2 : Using symmetric_difference() + set()", "Output", "Time complexity:", "Auxiliary space: ", "Method #3: Using in, not in operators and tuple() methods", "test_tup1", "test_tup2", "print() ", "x", "i", "test_tup1", " i", "i", "test_tup2", "i", "test_tup2", "append()", "i ", "test_tup2", "i", "i", "test_tup1", "i", "test_tup1", "append()", " x ", "tuple() ", "print() ", "Output", "Time complexity: ", "Auxiliary space: ", "Method #4 : Using filter() and lambda function ", "Output", "Time complexity:", "Auxiliary space: ", "Method #5 : Using List comprehension ", "Output", "Time complexity:", "Auxiliary space:  ", "Method #6:  Approach that uses the difference method of the set data structure:", "Output", "Time complexity: ", "Auxiliary space:", "Method #7: Using set() + “-” operator", "Output", "Time complexity: ", "Auxiliary space: ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-find-dissimilar-elements-in-tuples/?ref=ml_lbp"},
{"title": "Python - Dictionary value lists lengths product - GeeksforGeeks", "h1": ["Python – Dictionary value lists lengths product"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Method #1 : Using loop + len()", "Python3", "Method #2 : Using map() + lambda + reduce() ", "Python3", "Method #3: Using list comprehension and reduce()", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using loop + len()", "Output", "Time complexity: ", "Auxiliary space: ", "Method #2 : Using map() + lambda + reduce() ", "Output", "Time complexity: ", "Auxiliary space: ", "Method #3: Using list comprehension and reduce()", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-dictionary-value-lists-lengths-product/"},
{"title": "Python - Decrement Dictionary value by K - GeeksforGeeks", "h1": ["Python – Decrement Dictionary value by K"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using get()", "Output : ", "Method #2 : Using defaultdict()", "Output : ", "Method #3: Using the dict.setdefault() method", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-decrement-dictionary-value-by-k/?ref=next_article"},
{"title": "Python program to Extract Mesh matching Strings - GeeksforGeeks", "h1": ["Python program to Extract Mesh matching Strings"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1: Using loop + all() + len() + zip() ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #2: Using list comprehension", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 3: Using the filter() function along with lambda function", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #4: Using a for loop and a helper function", "Output", "Time complexity: ", "Auxiliary space: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-to-extract-mesh-matching-strings/?ref=ml_lbp"},
{"title": "Python | asksaveasfile() function in Tkinter - GeeksforGeeks", "h1": ["Python | asksaveasfile() function in Tkinter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "What kind of Experience do you want to share?"], "strong": ["class filedialog", "Output #1:", "Output #2:", "Output #3:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-asksaveasfile-function-in-tkinter/?ref=previous_article"},
{"title": "Python program to add two matrices - GeeksforGeeks", "h1": ["Python program to add two matrices"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "Python", "What kind of Experience do you want to share?"], "strong": ["Prerequisite :", "Using Nested ", "Loops", "Time Complexity: ", "Auxiliary Space: ", "Explanation :- ", "Using nested ", "list comprehension", "Explanation:- ", "Time Complexity: ", "Auxiliary Space: ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Data Structures and Algorithms - Self Paced ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-add-two-matrices-2/?ref=ml_lbp"},
{"title": "Python Program for Breadth First Search or BFS for a Graph - GeeksforGeeks", "h1": ["Python Program for Breadth First Search or BFS for a Graph"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "BFS on different language", "Variations of BFS implementations", "Easy problems on BFS", "Intermediate problems on BFS", "Hard Problems on BFS", "BFS on different language", "Variations of BFS implementations", "Easy problems on BFS", "Intermediate problems on BFS", "Hard Problems on BFS", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output", "Time Complexity", " : O(V+E) where V is the number of vertices in graph and E is the number of edges\r\n", "Auxiliary Space", ": O(V)\r\nPlease refer complete article on ", "Breadth First Search or BFS for a Graph", " for more details!", "                                 ", "\r\n                                    \r\n                            ", "\r\n                                                                    ", "\r\n                                        ", "Last Updated : ", "\r\n                                        ", "05 Sep, 2023", "\r\n                                    ", "\r\n                                                                ", "\r\n                                    ", "Like Article", "\r\n                                    ", "\r\n                                        ", "\r\n                                        ", "\r\n                                    ", "\r\n                                ", "\r\n                                ", "\r\n                                    ", "Save Article", "\r\n                                    ", "\r\n                                        ", "\r\n                                    ", "\r\n                                ", "\r\n                            ", "\r\n\r\n                            ", "\r\n                                                            ", "\r\n                                    ", "\r\n                                        ", "\r\n                                        ", "Previous", "\r\n                                    ", "\r\n                                    ", "\r\n                                    ", "\r\n                                        ", "Java Program for Breadth First Search or BFS for a Graph", "\r\n                                    ", "\r\n                                ", "\r\n                                                            ", "\r\n                                    ", "\r\n                                        ", "Next", "\r\n                                        ", "\r\n                                    ", "\r\n                                    ", "\r\n                                    ", "\r\n                                        ", "BFS for Disconnected Graph", "\r\n                                    ", "\r\n                                ", "\r\n                                                        ", "\r\n                            \r\n    ", "\r\n        ", "\r\n            ", "Share your thoughts in the comments", "\r\n        ", "\r\n        ", "\r\n                ", "Add Your Comment", "\r\n        ", "\r\n    ", "                            ", "\r\n            ", "\r\n                ", "\r\n                    ", "\r\n                    ", "\r\n                ", " \r\n                ", "    ", " ", "Please ", "Login", " to comment...", "\r\n                            ", "\r\n                                ", "\r\n                            ", "\r\n\r\n                            \r\n", "\r\n            ", "\r\n        ", " \r\n                        ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-for-breadth-first-search-or-bfs-for-a-graph/"},
{"title": "Python - Divide String into Equal K chunks - GeeksforGeeks", "h1": ["Python – Divide String into Equal K chunks"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1: Using len() + loop", "Output", "Time Complexity:", "Auxiliary Space: ", "Method #2: Using list comprehension", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3: Using the string slicing technique in a loop", "Output", "Time complexity: ", "Auxiliary space:", "Method 4: Using itertools.islice()", "Output", "Method #5: Using regular expression", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-divide-string-into-equal-k-chunks/"},
{"title": "Python Program for n-th Fibonacci number - GeeksforGeeks", "h1": ["Python Program for n-th Fibonacci number"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Fibonacci Series", "Variations of Fibonacci number", "Some other problems on Fibonacci Numbers", "Fibonacci Series", "Variations of Fibonacci number", "Some other problems on Fibonacci Numbers", "Python3", "Python3", "Python3", "Python3", "Python3", "Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python Program for n-th Fibonacci number Using recursion", "Output", "Time Complexity: ", "Auxiliary Space: ", "Python Program for n-th Fibonacci number Using Dynamic Programming ", "Output", "Time Complexity: ", "Auxiliary Space: ", "n-th Fibonacci number Using Dynamic Programming with Space Optimization", "Output", "Time Complexity: ", "Auxiliary Space: ", "Python Program for n-th Fibonacci number Using Using Arrays ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Explanation:", "Python Program for n-th Fibonacci number Using Direct Formula ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Python Program for n-th Fibonacci number Using power of the matrix {{1, 1}, {1, 0}}", "Output", "Time Complexity: O(n) ", "Auxiliary Space: O(1)", "Optimization of above methods", "Steps:", "Output", "Time Complexity:", "Auxiliary Space:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-for-n-th-fibonacci-number/"},
{"title": "Python Program for Breadth First Search or BFS for a Graph - GeeksforGeeks", "h1": ["Python Program for Breadth First Search or BFS for a Graph"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "BFS on different language", "Variations of BFS implementations", "Easy problems on BFS", "Intermediate problems on BFS", "Hard Problems on BFS", "BFS on different language", "Variations of BFS implementations", "Easy problems on BFS", "Intermediate problems on BFS", "Hard Problems on BFS", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output", "Time Complexity", " : O(V+E) where V is the number of vertices in graph and E is the number of edges\r\n", "Auxiliary Space", ": O(V)\r\nPlease refer complete article on ", "Breadth First Search or BFS for a Graph", " for more details!", "                                 ", "\r\n                                    \r\n                            ", "\r\n                                                                    ", "\r\n                                        ", "Last Updated : ", "\r\n                                        ", "05 Sep, 2023", "\r\n                                    ", "\r\n                                                                ", "\r\n                                    ", "Like Article", "\r\n                                    ", "\r\n                                        ", "\r\n                                        ", "\r\n                                    ", "\r\n                                ", "\r\n                                ", "\r\n                                    ", "Save Article", "\r\n                                    ", "\r\n                                        ", "\r\n                                    ", "\r\n                                ", "\r\n                            ", "\r\n\r\n                            ", "\r\n                                                            ", "\r\n                                    ", "\r\n                                        ", "\r\n                                        ", "Previous", "\r\n                                    ", "\r\n                                    ", "\r\n                                    ", "\r\n                                        ", "Java Program for Breadth First Search or BFS for a Graph", "\r\n                                    ", "\r\n                                ", "\r\n                                                            ", "\r\n                                    ", "\r\n                                        ", "Next", "\r\n                                        ", "\r\n                                    ", "\r\n                                    ", "\r\n                                    ", "\r\n                                        ", "BFS for Disconnected Graph", "\r\n                                    ", "\r\n                                ", "\r\n                                                        ", "\r\n                            \r\n    ", "\r\n        ", "\r\n            ", "Share your thoughts in the comments", "\r\n        ", "\r\n        ", "\r\n                ", "Add Your Comment", "\r\n        ", "\r\n    ", "                            ", "\r\n            ", "\r\n                ", "\r\n                    ", "\r\n                    ", "\r\n                ", " \r\n                ", "    ", " ", "Please ", "Login", " to comment...", "\r\n                            ", "\r\n                                ", "\r\n                            ", "\r\n\r\n                            \r\n", "\r\n            ", "\r\n        ", " \r\n                        ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-for-breadth-first-search-or-bfs-for-a-graph/?ref=lbp"},
{"title": "python-string Archives - GeeksforGeeks", "h1": ["python-string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/tag/python-string/"},
{"title": "Python Program for Compound Interest - GeeksforGeeks", "h1": ["Python Program for Compound Interest"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output", "Time Complexity: O(1) ", "Auxiliary Space: O(1) ", ".", "Compound Interest with Input taking from user", "Output:", "Time Complexity:", "Auxiliary Space:", "Output", "Time Complexity: O(1) ", "Auxiliary Space: O(1)", "Compound Interest using for loop", "Output", "Time complexity: O(1)", "Auxiliary Space: O(1) ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-for-compound-interest/"},
{"title": "Python | Extract numbers from string - GeeksforGeeks", "h1": ["Python | Extract numbers from string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Extract Numbers from a String in Python", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input:", "Output:", "Explanation:", " and isdigit()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Extract Digit from string using re.findall()", "Output", "Extract Interger from string using isnumeric() method", "Output", "Time Complexity : O(N)", "Auxiliary Space : O(N)", "Extract Digit from string using Filter() function", "Output", "Time complexity: ", "Auxiliary space complexity:", "Extract Interger from string using a loop and isdigit() method", "Output", "Time complexity: ", "Auxiliary space:", "Extract Numbers from string using str.translate() with str.maketrans() ", "str.", "maketrans()", "str.", "translate()", " ", "numeric_string", " str.", "split()", "numeric_string", "str.", "isdigit()", " ", "int()", " ", "Output", "Time complexity: ", "Auxiliary Space: ", "Extract Numbers from string using numpy module", "Output:", "Time complexity:  O(n), ", "Auxiliary Space: O(n), ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-extract-numbers-from-string/"},
{"title": "Python | Extract numbers from list of strings - GeeksforGeeks", "h1": ["Python | Extract numbers from list of strings"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using list comprehension + split()", "Output : ", "Time Complexity: ", "Auxiliary Space:", "Method #2 : Using join() + isnumeric() + list comprehension + map()", "Output : ", "Time Complexity:", "Auxiliary", "Space: ", "Method #3 : Using replace() and int() methods", "Output", "Time Complexity:", "Auxiliary Space: ", "Method #4 : Using index() and int() methods", "Output", "Time Complexity : O(N)", "Auxiliary Space : O(N)", "Method #5: Using re", "Output", "Time Complexity: ", "Auxiliary Space:", "Method 5: Using map() and filter():", "map() ", "filter() ", "map() ", "int() ", "filter()", "Output", "Time complexity: ", "Auxiliary space: ", "Method #7: Using regular expression and list comprehension:", "Output", "Time complexity:", "Auxiliary space:", "Using numpy:", "Algorithm:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-extract-numbers-from-list-of-strings/"},
{"title": "Python - Convert Binary tuple to Integer - GeeksforGeeks", "h1": ["Python – Convert Binary tuple to Integer"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using join() + list comprehension + int()", "Output", "Method #2: Using bit shift and | operator", "Output", "Method #3 : Using list(),map(),join(),int() methods", "Output", "Method #4: Using for loop", "Output", "Method: Using pow() function", "Output", "Method#5: Using bit shifting and bitwise operations", "Approach:", "Output", "Time Complexity:", "Auxiliary Space:", "Method#6: Using Recursive method.", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-convert-binary-tuple-to-integer/"},
{"title": "Python - Closest Pair to Kth index element in Tuple - GeeksforGeeks", "h1": ["Python – Closest Pair to Kth index element in Tuple"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Input", "Output", "Method #1: Using enumerate() + loop", "Output : ", "Time complexity:", "Auxiliary space:", "Method #2: Using min() + lambda", "Output : ", "Time complexity:", "Auxiliary space: ", "Method#3:Using a lambda function and the min() function", "Step-by-step algorithm:", "Output", "Time complexity: ", "Auxiliary space: ", "Method#4:Using the heapq.nsmallest() function: ", "Algorithm:", "Output", "Time complexity:", "Space complexity:", " Method 5 : using the sorted() function with a custom key. ", "step-by-step approach :", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-closest-pair-to-kth-index-element-in-tuple/"},
{"title": "Python dictionary-programs Archives - GeeksforGeeks", "h1": ["Python dictionary-programs"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/tag/python-dictionary-programs/"},
{"title": "Python - Longest Substring Length of K - GeeksforGeeks", "h1": ["Python – Longest Substring Length of K"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1: Using loop", "Output", "Method #2: Using findall() + max()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3:  Using itertools.groupby", "Output", "Time complexity: ", "Space complexity: ", "Method #4: Using generator expression, max() and re.split() function", "test_str", "Output", "Time complexity: ", "Space complexity: ", "Method 5: Using Regular expression and max()", "Output", "Time complexity:", "Auxiliary space: ", "Method 6: Using numpy:", "Output:", "Time Complexity:", "Auxiliary Space:", "Method #7: Using dynamic programming", "Output", "Time complexity: ", "Auxiliary space: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-longest-substring-length-of-k/"},
{"title": "Python - Extract Indices of substring matches - GeeksforGeeks", "h1": ["Python – Extract Indices of substring matches"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using loop + enumerate()", "Output", " Time complexity : ", "Space Complexity : ", "Method #2 : Using list comprehension + enumerate() ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3 : Using find() method", "Output", "Time complexity : ", "Space Complexity : ", "Method #5 : Using operator.contains() method", "Approach ", "Output", "Time Complexity : O(M*N)", "Auxiliary Space : O(N)", "Method #6: Using map() function + lambda function", " step-by-step approach", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-extract-indices-of-substring-matches/"},
{"title": "Python | Uploading images in Django - GeeksforGeeks", "h1": ["Python | Uploading images in Django"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "html", "Python3", "Python3", "Python3", "html", "What kind of Experience do you want to share?"], "strong": ["image_upload", "MEDIA_ROOT", "MEDIA_URL", "Hotel model", "media", "media", "model form", "templates", "Output: ", "Data Science Training Program ", "Mastering System Design: From Low-Level to High-Level Solutions ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-uploading-images-in-django/"},
{"title": "Python | Extract length of longest string in list - GeeksforGeeks", "h1": ["Python | Extract length of longest string in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using max() + generator expression,", "Output : ", "Method #2 : Using len() + key argument + max()", "Output : ", "Method 3: Alternative method", "Output", "Method 4: Using the enumerate function", "Output", "Method 5: Using the reduce function", "Output", "Method 6: Using the list comprehension:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-extract-length-of-longest-string-in-list/"},
{"title": "Python dictionary-programs Archives - Page 3 of 37 - GeeksforGeeks", "h1": ["Python dictionary-programs"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/tag/python-dictionary-programs/page/3/?type=popular"},
{"title": "Python String isnumeric() Method - GeeksforGeeks", "h1": ["Python String isnumeric() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python String isnumeric() Method Syntax", "Ways to Implement the isnumeric() Method in Python", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["True", "False", "Example", "Output:", "Python String isnumeric() Method Syntax", "Syntax:  ", "Parameters: ", "Returns :", "Ways to Implement the isnumeric() Method in Python", "Output: ", "Counting and Removing numeric characters", "Output: ", "Errors and Exceptions", "Output", "Output", "Output", "Combining isnumeric() with conditions", "Output: ", "String isnumeric() with another numeric type", "Output: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-string-isnumeric-method/"},
{"title": "Python | Thresholding techniques using OpenCV | Set-1 (Simple Thresholding) - GeeksforGeeks", "h1": ["Python | Thresholding techniques using OpenCV | Set-1 (Simple Thresholding)"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Python3", "What kind of Experience do you want to share?"], "strong": ["Thresholding", "cv2.threshold", "Syntax:", "Parameters: ", "source", "thresholdValue", "maxVal", "thresholdingTechnique", "cv2.THRESH_BINARY", "cv2.THRESH_BINARY_INV", "cv.THRESH_TRUNC", "cv.THRESH_TOZERO", "cv.THRESH_TOZERO_INV", "Input: ", "Output: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-thresholding-techniques-using-opencv-set-1-simple-thresholding/?ref=ml_lbp"},
{"title": "Python | How to Concatenate tuples to nested tuples - GeeksforGeeks", "h1": ["Python | How to Concatenate tuples to nested tuples"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using + operator + “, ” operator during initialization", "Output : ", "Time complexity: ", "Auxiliary space:", "Method #2 : Using “, ” operator during concatenation", "Output : ", "Time complexity: ", "Auxiliary space:", "Method #3 : Using list(),extend() and tuple() methods", "Output", "Time complexity: ", "Auxiliary space:", "Method #4: Using the itertools.chain() function", "itertools.chain() ", "itertools.chain()", "tuple() ", "Output", "Time complexity: ", "Auxiliary space: ", "Method #5: Using the reduce() method of functools", "Output", "Time complexity: ", "Auxiliary space: ", "Method 6 : using the extend() method of the list class.", "Approach:", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-how-to-concatenate-tuples-to-nested-tuples/"},
{"title": "Python Web Scraping Tutorial - GeeksforGeeks", "h1": ["Python Web Scraping Tutorial"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to Web Scraping", "Basics of Web Scraping", "Setting Up the Environment", "Extracting Data from Web Pages", "Fetching Web Pages", "HTTP Request Methods", "Searching and Extract for specific tags Beautifulsoup", "Scrapy Basics", "Selenium Python Basics", "Introduction to Web Scraping", "Basics of Web Scraping", "Setting Up the Environment", "Extracting Data from Web Pages", "Fetching Web Pages", "HTTP Request Methods", "Searching and Extract for specific tags Beautifulsoup", "Scrapy Basics", "Selenium Python Basics", "Requests Module", "Python3", "Python3", "BeautifulSoup Library ", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Scraping multiple Pages", "Python3", "Python3", "Python3", "Saving Data to CSV", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output:", "Output:", "1.", "2.", "3.", "Note:", "Output:", "Output:", "Output:", "Output:", "Output:", "Output:", "Output:", "Output:", "Output:", "Output:", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-web-scraping-tutorial/"},
{"title": "Python - Eye blink detection project - GeeksforGeeks", "h1": ["Python – Eye blink detection project"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["haar cascades", "About Haar Cascades: ", "The Excessive calculation: ", "The false features", "AdaBoost", "Algorithm : ", "Code: ", "Sample Output:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-eye-blink-detection-project/"},
{"title": "Python GUI - tkinter - GeeksforGeeks", "h1": ["Python GUI – tkinter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Python", "Python", "Python", "Python", "Python", "Python", "Python", "Python", "Python", "Python", "Python", "Python", "Python", "Python", "Python", "Python", "Python", "Python", "What kind of Experience do you want to share?"], "strong": ["To create a tkinter Python app:", "Tk(screenName=None,  baseName=None,  className=’Tk’,  useTk=1):", "mainloop():", "pack() method:", "grid() method:", "place() method:", "Button", "activebackground", "activeforeground", "bg", "command", "font", "image", "width", "height", "Canvas: ", "bd", "bg", "cursor", "highlightcolor", "width", "height", "CheckButton: ", "Title", "activebackground", "activeforeground", "bg", "command", "font", "image", "Entry:", "bd", "bg", "cursor", "command", "highlightcolor", "width", "height", "Frame:", "highlightcolor", "bd", "bg", "cursor", "width", "height", "Label", "bg", "bg", "command", "font", "image", "width", "height", "Listbox", "highlightcolor", "bg", "bd", "font", "image", "width", "height", "MenuButton", "activebackground", "activeforeground", "bg", "bd", "cursor", "image", "width", "height", "highlightcolor", "Menu", "title", "activebackground", "activeforeground", "bg", "command", "font", "image", "Message", "bd", "bg", "font", "image", "width", "height", "RadioButton: ", "activebackground", "activeforeground", "bg", "command", "font", "image", "width", "height", "Scale: ", "cursor", "activebackground", "bg", "orient", "from_", "to", "image", "width", "Scrollbar", "width", "activebackground", "bg", "bd", "cursor", "Text: ", "highlightcolor", "insertbackground", "bg", "font", "image", "width", "height", "TopLevel: ", "bg", "bd", "cursor", "width", "height", "SpinBox: ", "bg", "bd", "cursor", "command", "width", "activebackground", "disabledbackground", "from_", "to", "PannedWindow", "bg", "bd", "cursor", "width", "height", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-gui-tkinter/"},
{"title": "Python | Thresholding techniques using OpenCV | Set-3 (Otsu Thresholding) - GeeksforGeeks", "h1": ["Python | Thresholding techniques using OpenCV | Set-3 (Otsu Thresholding)"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "Getting Started", "Working with Images - Getting Started", "Working with Images - Image Processing", "Working with Images - Feature Detection and Description", "Working with Images - Drawing Functions", "Working with Videos", "Applications and Projects", "OpenCV Projects", "What kind of Experience do you want to share?"], "strong": ["Otsu Thresholding", "cv2.threshold", "cv2.THRESH_OTSU", "Syntax:", "Parameters: ", "source", "thresholdValue", "maxVal", "thresholdingTechnique", "Input:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-thresholding-techniques-using-opencv-set-3-otsu-thresholding/"},
{"title": "Python Program to detect the edges of an image using OpenCV | Sobel edge detection method - GeeksforGeeks", "h1": ["Python Program to detect the edges of an image using OpenCV | Sobel edge detection method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python", "What kind of Experience do you want to share?"], "strong": ["Steps to download the requirements below:", "Principle behind Edge Detection ", "gradient", " the gradient represents the slope of the tangent of the graph of the function", "Calculation of the derivative of an image", " Laplacian", " Sobel", "Horizontal Sobel derivative (Sobel x)", "Vertical Sobel derivative (Sobel y)", "Convolution", "Factor", "Offset", "Weighted Sum", "O[4,2]", "Parameters:", "cv2.Sobel():", "cv2.Laplacian", "Edge Detection Applications", "Related Article:", "DevOps Engineering - Planning to Production ", "GATE Data Science and Artificial Intelligence 2025 ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-to-detect-the-edges-of-an-image-using-opencv-sobel-edge-detection/"},
{"title": "Python | Creating a button in tkinter - GeeksforGeeks", "h1": ["Python | Creating a button in tkinter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Follow the below steps:", "tkinter.ttk", "tkinter.ttk", "tkinter.ttk", "Code #1: ", "Output:", "Creation of Button without using ", "tk", " themed widget.", "tk", "Code #2: ", "Output:", "Note: ", "tkinter.ttk", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-creating-a-button-in-tkinter/?ref=next_article"},
{"title": "Python - Extract words starting with K in String List - GeeksforGeeks", "h1": ["Python – Extract words starting with K in String List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using loop + split()", "Output", "Method #2 : Using list comprehension + split() ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3 : Using split(),extend(),lower() and find() methods", "Output", "Method #4 : Using startswith(),upper() and lower() methods", "Output", "Method #4 : Using lambda functions, extend(), lower() methods", "Output", "Output", "Time Complexity: O(N*M)", "Auxiliary Space: O(N*M)", "Method #6:Using reduce()", "Output", "Time Complexity: O(n*m)", "Space Complexity: O(n*m)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-extract-words-starting-with-k-in-string-list/"},
{"title": "Python - Remove suffix from string list - GeeksforGeeks", "h1": ["Python – Remove suffix from string list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loop + remove() + endswith()", "Method", "Output", "Time Complexity:", "Auxiliary Space:", "Method #2: Using list comprehension + endswith()", "Output", "Time Complexity:", "Auxiliary Space:", "Method#3: Using filter function + endswith() Method", "Output", "Time Complexity:", "Auxiliary Space:", "Output", "Time Complexity:", "Auxiliary Space:", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method #6 : Using lambda functions", "Output", "Method #7 : Using Regular Expressions", "Output", "Method#8: Using pandas", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method#8: Recursive method", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-remove-suffix-from-string-list/"},
{"title": "Python Dictionary | Check if binary representations of two numbers are anagram - GeeksforGeeks", "h1": ["Python Dictionary | Check if binary representations of two numbers are anagram"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Check if binary representations of two numbers", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Dictionary Comparison", "Counter()", "Output:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-dictionary-check-binary-representations-two-numbers-anagram/"},
{"title": "Python Bokeh - Plotting Patches on a Graph - GeeksforGeeks", "h1": ["Python Bokeh – Plotting Patches on a Graph"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Getting started With Bokeh", "Plotting Different Types of Plots", "Annotations and Legends", "Creating Diffrent Shapes", "Plotting Multiple Plots", "Functions in Bokeh", "Interactive Data Visualization", "Graph", "Building Advanced Visualizations with Glyphs", "Project", "Getting started With Bokeh", "Plotting Different Types of Plots", "Annotations and Legends", "Creating Diffrent Shapes", "Plotting Multiple Plots", "Functions in Bokeh", "Interactive Data Visualization", "Graph", "Building Advanced Visualizations with Glyphs", "Project", "plotting.figure.patch()", "What kind of Experience do you want to share?"], "strong": ["Syntax : ", "Parameters : ", "x : ", "y : ", "Returns : ", "Example 1 : ", "Output : ", "Example 2 : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-bokeh-plotting-patches-on-a-graph/"},
{"title": "Python | Custom sorting in list of tuples - GeeksforGeeks", "h1": ["Python | Custom sorting in list of tuples"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using sorted() + lambda", "Output : ", "Method #2 : Using sorted() + lambda() + sum() ( With sum of tuple condition)", "Output : ", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-custom-sorting-in-list-of-tuples/"},
{"title": "Python - Counter.items(), Counter.keys() and Counter.values() - GeeksforGeeks", "h1": ["Python – Counter.items(), Counter.keys() and Counter.values()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Counter.items()", "Python3", "Counter.keys()", "Python3", "Counter.values()", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax : ", "Parameters : ", "Returns : ", "Example :", "Output :", "Syntax : ", "Parameters : ", "Returns : ", "Example :", "Output :", "Syntax : ", "Parameters : ", "Returns : ", "Example :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-counter-items-counter-keys-and-counter-values/"},
{"title": "Python program to Increment Suffix Number in String - GeeksforGeeks", "h1": ["Python program to Increment Suffix Number in String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using findall() + ", "join()", " + ", "replace()", "Output:", "Method #2 : Using sub() + group() + zfill()", "Output:", "Time Complexity: ", "Space Complexity: ", "Method #3 : Using string slicing and addition", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method #4: Using isalpha(),replace() and slicing", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method#5: Using Recursive method.", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-to-increment-suffix-number-in-string/"},
{"title": "Python - First K consecutive digits in String - GeeksforGeeks", "h1": ["Python – First K consecutive digits in String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using loop", "Output", "Time Complexity: ", "Space Complexity: ", "Method #2 a: Using regex()", "Output", "Time Complexity: ", "Space Complexity: ", "Method 2b:Using findall() method in re module.", "Output", "Method 4 : using list comprehension and string slicing", "Step-by-step explanation:", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-first-k-consecutive-digits-in-string/?ref=next_article"},
{"title": "Python List of Lists - How to Create List of Lists - GeeksforGeeks", "h1": ["Python List of Lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "What is List of Lists in Python?", "Create List of Lists in Python ", "Create a List of Lists Using append() Function", "Python", "Create a List of Lists Using the List Initializer ", "Python", "Create a List of Lists Using List Comprehension", "Python", "Create a List of Lists Using For-Loop  in Python", "Python", "Traverse a List of Lists in Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Output", "Output", "Output", "Output", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-list-of-lists/?ref=previous_article"},
{"title": "Python - Itertools.compress() - GeeksforGeeks", "h1": ["Python – Itertools.compress()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Compress()", "What kind of Experience do you want to share?"], "strong": ["Note:", "Compress():", "Syntax:", "Example 1 :", "Output:", "Example 2 : ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-itertools-compress/"},
{"title": "Python - Combine dictionary with priority - GeeksforGeeks", "h1": ["Python – Combine dictionary with priority"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Input", "Output", "Method #1 : Using ", "copy()", " + loop", "Method #2 : Using ", "** operator", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-combine-dictionary-with-priority/"},
{"title": "Python - Itertools.Permutations() - GeeksforGeeks", "h1": ["Python – Itertools.Permutations()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Itertools.permutation()", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Different types of iterators provided by this module are:", "Note:", "Syntax:", "Example 1:-", "Output :-", "Time Complexity:", "Auxiliary Space:", "Example 2:-", "Output:-", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-itertools-permutations/?ref=lbp"},
{"title": "Python - Itertools.tee() - GeeksforGeeks", "h1": ["Python – Itertools.tee()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "tee() function", "What kind of Experience do you want to share?"], "strong": ["filterfalse().", "Note:", "Syntax:", "Parameter:", "Return Value:", "Example 1:", "Output:", "Example 2:", "Output:", "Example 3:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-itertools-tee/?ref=lbp"},
{"title": "Python - Itertools.Permutations() - GeeksforGeeks", "h1": ["Python – Itertools.Permutations()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Itertools.permutation()", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Different types of iterators provided by this module are:", "Note:", "Syntax:", "Example 1:-", "Output :-", "Time Complexity:", "Auxiliary Space:", "Example 2:-", "Output:-", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-itertools-permutations/"},
{"title": "Python - Itertools.chain.from_iterable() - GeeksforGeeks", "h1": ["Python – Itertools.chain.from_iterable()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Chain.from_iterable() method", "What kind of Experience do you want to share?"], "strong": ["Note:", "Syntax :", "Example #1:", "Output :", "Example #2:", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-itertools-chain-from_iterable/"},
{"title": "Python - Value length dictionary - GeeksforGeeks", "h1": ["Python – Value length dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loop + len()", "Output : ", "Method #2: Using dictionary comprehension", "Output : ", "Method #3: Here is another approach using map and len functions:", "Output", "Method #7: Using collections.defaultdict() and loop", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-value-length-dictionary/"},
{"title": "Python - Itertools.starmap() - GeeksforGeeks", "h1": ["Python – Itertools.starmap()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "starmap() function", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["starmap()", "Note:", "Syntax :", "Output:", "Output:", "Output:", "What if we want to add different numbers to different elements of the list ?", "Output:", "Practical example of using starmap():", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-itertools-starmap/?ref=ml_lbp"},
{"title": "Python - itertools.repeat() - GeeksforGeeks", "h1": ["Python – itertools.repeat()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "repeat()", "What kind of Experience do you want to share?"], "strong": ["Note:", "Syntax:", "Parameters:", "val:", "num:", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-itertools-repeat/?ref=lbp"},
{"title": "Python - itertools.repeat() - GeeksforGeeks", "h1": ["Python – itertools.repeat()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "repeat()", "What kind of Experience do you want to share?"], "strong": ["Note:", "Syntax:", "Parameters:", "val:", "num:", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-itertools-repeat/?ref=ml_lbp"},
{"title": "Python | Multiple indices Replace in String - GeeksforGeeks", "h1": ["Python | Multiple indices Replace in String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loop + join()", "Output : ", "Method #2 : Using list comprehension + join()", "Output : ", "Time Complexity: ", "Space Complexity: ", "Method #3:  Using map() + join() + enumerate() methods and lambda to replace characters in string", "Step by step Algorithm:", "Output", "Time complexity:", "Auxiliary Space: ", "Method #4: Using replace() method inside a loop", "Output", "Time complexity: ", "Auxiliary space: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-multiple-indices-replace-in-string/?ref=leftbar-rightbar"},
{"title": "Python - Replace Different characters in String at Once - GeeksforGeeks", "h1": ["Python – Replace Different characters in String at Once"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using join() + generator expression ", "Output", "Time complexity :", "Space complexity :", "Method #2 : Using regex + lambda", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #3 : Using keys() and replace() methods", "Output", "Time complexity : ", "Space complexity : ", "Method #4: Using List comprehension", "Here are the steps:", "Output", "Method #5: Using reduce():", "Algorithm:", "Output", "Time Complexity:", "Space Complexity:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-replace-different-characters-in-string-at-once/"},
{"title": "Python | os.wait() method - GeeksforGeeks", "h1": ["Python | os.wait() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "Process Parameters", "Inheritance of File Descriptors", "Interface to the scheduler", "System Information", "Files and Directories", "Process Management", "File Descriptor Operations", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Parameter:", "Return type:", "Code:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-os-wait-method/"},
{"title": "Python program to check if the list contains three consecutive common numbers in Python - GeeksforGeeks", "h1": ["Python program to check if the list contains three consecutive common numbers in Python"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example :", "Input : ", "Output : ", "Input : ", "Output ", "Approach :", "Example 1 :", "Output : ", "Example 2 :", "Output : ", "Example #3: Using set() function", "Output", "Time Complexity: O(N)", "Auxiliary Space : O(N)", "Example #4:Using the itertools library:", "Algorithm:", "Output", "Time Complexity:", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-check-if-the-list-contains-three-consecutive-common-numbers-in-python/"},
{"title": "Python | Remove all duplicates and permutations in nested list - GeeksforGeeks", "h1": ["Python | Remove all duplicates and permutations  in nested list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input: ", "Output: ", "Input: ", "Output:", "Code #1:", "Output:", "Code #2:", "Output:", "Code #3: ", "sort() ", "not in ", "Output", "Code #4: Using operator.countOf() method", "Output", "Time Complexity: O(N*N)", "Auxiliary Space: O(N*N)", "Output", "Time complexity", "Space complexity", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-remove-all-duplicates-and-permutations-in-nested-list/?ref=previous_article"},
{"title": "Python OOPS - Aggregation and Composition - GeeksforGeeks", "h1": ["Python OOPS – Aggregation and  Composition"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Concept of Inheritance", "Concept of Composition", "Python3", "Concept of Aggregation", "Python3", "Drawback of Composition", "Why we should use Aggregation over Composition?", "What kind of Experience do you want to share?"], "strong": ["Concept of Inheritance", "Inheritance", "Syntax: ", "Concept of Composition", "Output:", "Concept of Aggregation", "unidirectional association", " both the entries can survive individually", "Output:", " outside", "Salary class", "EmployeeOne class", " EmployeeOne class", " emp", "Salary class", "obj_salary", "EmployeeOne class", "emp", "not vice versa", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures and Algorithms - Self Paced ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-oops-aggregation-and-composition/"},
{"title": "Python - Order Tuples by List - GeeksforGeeks", "h1": ["Python – Order Tuples by List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Input", "Output", "Method #1 : Using dict() + list comprehension", "Output : ", "Time complexity:", "Auxiliary space: ", "Method #2 : Using setdefault() + sorted() + lambda", "Output : ", "Time complexity: ", "Auxiliary space: ", "Method #3: Using lists and index() method", "Output", "Output", "Time complexity: ", "Auxiliary Space:", "METHOD 4:Using sorted() function with itemgetter() function", "APPROACH:", "ALGORITHM:", "Output", "METHOD 5:Using reduce():", "Algorithm:", "Output", "Time Complexity:", "Space Complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-order-tuples-by-list/?ref=ml_lbp"},
{"title": "Python-projects Archives - Page 2 of 13 - GeeksforGeeks", "h1": ["Python-projects"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests"], "strong": ["Complete Machine Learning & Data Science Program ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "JAVA Backend Development - Live "], "link": "https://www.geeksforgeeks.org/tag/python-projects/page/2/?type=popular"},
{"title": "Python | Ways to concatenate tuples - GeeksforGeeks", "h1": ["Python | Ways to concatenate tuples"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using + operator", "Output : ", "Time Complexity: O(N)", "Auxiliary Space: O(N) ", "Method #2 : Using sum()", "Output : ", "Time complexity: ", "Auxiliary space: ", "Method #3: ", "Output", "Output", "Method #5: Using the tuple() constructor and the * operator", "Output", "Time complexity: ", "Auxiliary space: ", "METHOD 6: Using the += operator and the += method:", "APPROACH:", "ALGORITHM:", "Output", "Output", "Time Complexity", "Space Complexity:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-ways-to-concatenate-tuples/?ref=ml_lbp"},
{"title": "Python - Convert dictionary to K sized dictionaries - GeeksforGeeks", "h1": ["Python – Convert dictionary to K sized dictionaries"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method 1: Using loop", "Output", "Method 2: Using dictionary comprehension", "test_dict", "print()", "K", "test_dict", "dict()", "print() ", "Output", "Time complexity: ", "Auxiliary space: ", "Method 3:  Using the iter function and the dict constructor. ", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-convert-dictionary-to-k-sized-dictionaries/"},
{"title": "Python - Successive Characters Frequency - GeeksforGeeks", "h1": ["Python – Successive Characters Frequency"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loop + count() + re.findall()", "Output : ", "Method #2 : Using Counter() + list comprehension + re.findall()", "Output : ", "Time Complexity: ", "Auxiliary Space: ", "Method #3 : Using operator.countOf() ", "Output", "Time Complexity", "Auxiliary Space: ", "Method 4: Using a loop and dictionary", "Example:", "Output", "Time complexity: ", "Auxiliary space: ", "Method #5: Using regex search() and defaultdict()", "Example:", "Output", "Time Complexity: O(n),", "Auxiliary Space: O(k),", "Method  #6: Using itertools.groupby() and Counter()", "Output", "Time complexity: ", "Auxiliary space: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-successive-characters-frequency/"},
{"title": "Python | Create a simple assistant using Wolfram Alpha API. - GeeksforGeeks", "h1": ["Python | Create a simple assistant using Wolfram Alpha API."], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "What kind of Experience do you want to share?"], "strong": ["Prerequisite:", "Getting API Id", "Implementation", "Output:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-create-a-simple-assistant-using-wolfram-alpha-api/?ref=lbp"},
{"title": "Python | Remove empty tuples from a list - GeeksforGeeks", "h1": ["Python | Remove empty tuples from a list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python", "Python3", "Python3", "Python3", "Python3", "Python", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input : ", "Output :", "Method 1: Using the concept of ", "List Comprehension", "Output", "Method 2: Using the filter() method", "Output", "Output", "Method #3 : Using len() method", "Output", "Time Complexity: ", "Auxiliary Space:", "Method #4 : ", "== ", "Output", "Output", "Time Complexity: ", "Auxiliary Space:", "Output", "Method : Using str(), len() and find() method", "Output", "Method: Using lambda functions", "Output", "Method : Using  list comprehension , len() method:", "Output", "Time complexity: O(n)", "Auxiliary Space: O(n)", "Method: Using Recursion method ", "Output", "Time complexity: O(n)", "Auxiliary Space: O(n)", "Method 5: Using itertools.filterfalse()", "Algorithm:", "Output", "Method 6: Using reduce():", "Algorithm:", "Output", "Time Complexity:", "Space Complexity:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-remove-empty-tuples-list/"},
{"title": "Python List Exercise - GeeksforGeeks", "h1": ["Python List Exercise"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic List Programs", "Programs on List of Lists", "Advance List Programs", "Programs on List of Strings", "Programs on SubString and SubLists", "What kind of Experience do you want to share?"], "strong": ["Basic List Programs", "More >>", "More >>", "More >>", "More >>", "More >>", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-list-exercise/"},
{"title": "Python - English (Latin) to Hindi (Devanagiri) text convertor GUI using Tkinter - GeeksforGeeks", "h1": ["Python – English (Latin) to Hindi (Devanagiri) text convertor GUI using Tkinter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisites :", "Output :", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "DevOps Engineering - Planning to Production "], "link": "https://www.geeksforgeeks.org/python-english-latin-to-hindi-devanagiri-text-convertor-gui-using-tkinter/?ref=ml_lbp"},
{"title": "Python - Convert JSON to string - GeeksforGeeks", "h1": ["Python – Convert JSON to string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: ", "Output: ", "Method #2: ", "Output: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-convert-json-to-string/"},
{"title": "Python | Difference in keys of two dictionaries - GeeksforGeeks", "h1": ["Python | Difference in keys of two dictionaries"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Difference in keys of two dictionaries", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example", "Input: ", "Output: ", "Explanation:", "Output", "Time complexity:", "Auxiliary space:", "Output", "Time complexity:", "Auxiliary space:", "Output", "Time complexity:", "Auxiliary space:", "Output", "Time complexity:", "Auxiliary space:", "Finding Keys Difference Using re module", "Output", "Time complexity:", "Auxiliary space:", "Output", "Time complexity:", "Auxiliary space:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-difference-in-keys-of-two-dictionaries/?ref=next_article"},
{"title": "Python - Morse Code Translator GUI using Tkinter - GeeksforGeeks", "h1": ["Python – Morse Code Translator GUI using Tkinter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisites :", "Below is the implementation : ", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-morse-code-translator-gui-using-tkinter/?ref=ml_lbp"},
{"title": "Python SQLite - Deleting Data in Table - GeeksforGeeks", "h1": ["Python SQLite – Deleting Data in Table"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "SQLite in Python - Getting Started", "SQLite Queries", "SQLite Clause", "SQLite Working with Data", "Working with Images", "Python SQLite - Exercise", "Python SQLite Additional", "SQLite in Python - Getting Started", "SQLite Queries", "SQLite Clause", "SQLite Working with Data", "Working with Images", "Python SQLite - Exercise", "Python SQLite Additional", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output:", "Approach:", "Example 1: (Delete some data)", "Output:", "Example 2: (Delete all data)", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sqlite-deleting-data-in-table/"},
{"title": "Python - Group records by Kth column in List - GeeksforGeeks", "h1": ["Python – Group records by Kth column in List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loop + defaultdict()", "Output : ", "Time Complexity: ", "Auxiliary Space: ", "Method #2 : Using itemgetter() + groupby() + list comprehension", "Output : ", "Method #3 : Using numpy", "Method #4: Using a list comprehension with enumerate() function and a set:", "Output", "Method #5: Using setdefault on a dictionary", "Step-by-step algorithm:", "Output", "Time Complexity:", "Auxiliary Space:", "Method #6: Using itertools.groupby()", "Output", "Time complexity:", "Auxiliary space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-group-records-by-kth-column-in-list/?ref=ml_lbp"},
{"title": "Python Plotly: How to set up a color palette? - GeeksforGeeks", "h1": ["Python Plotly: How to set up a color palette?"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Method 1: Setting up the color palette for continuous data", "Python3", "Method 2: Setting up the color palette for discrete data", "Python3", "Python3", "Method 3: Setting up color palettes from already existing color palettes", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output:", "Output:", "Output:", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 "], "link": "https://www.geeksforgeeks.org/python-plotly-how-to-set-up-a-color-palette/"},
{"title": "Python | Ways to remove n characters from start of given string - GeeksforGeeks", "h1": ["Python | Ways to remove n characters from start of given string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using Naive Method", "Output:", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method #2: Using replace()", "Output:", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method #3: String slicing", "Output:", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Approach:", "Output", "Time Complexity:", "Space Complexity", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-ways-to-remove-n-characters-from-start-of-given-string/"},
{"title": "Python | Initialize dictionary with multiple keys - GeeksforGeeks", "h1": ["Python | Initialize dictionary with multiple keys"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using loop", "Output", "Time complexity", "Auxiliary space: ", "Method #2: Using fromkeys()", "Output", "Time complexity:", "O(n)", "Auxiliary space:", "O(n)", "Method #3: Use repeat() function", "Output", "Time Complexity", "O(n)", "Auxiliary Space:", "O(n)", "Method 4: Using dictionary comprehension:", "test_keys ", "res ", "4", "result ", "Output", "Time complexity:", "Auxiliary space: ", "Method #5: Using dict.fromkeys() method", "Output", "Time complexity: O(n)", "Auxiliary space: O(n)", "Method #6: Using zip() function and dictionary comprehension:", "Algorithms:", "Output", "Time Complexity:", "Auxiliary Space:", "Method#7: Using the ", "Recursive", " method:", "init_dict", "{keys[0]: value}", "keys[1:]", "Output", "Time Complexity:", "Space Complexity:", "Method#8: Using heapq:", "Algorithm:", "Output", "Time complexity: O(n log n), ", "Space complexity: O(n),", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-initialize-dictionary-with-multiple-keys/"},
{"title": "Python program to check if any key has all the given list elements - GeeksforGeeks", "h1": ["Python program to check if any key has all the given list elements"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Explanation :", "Input :", "Output :", "Explanation :", "Method #1 : Using ", "issuperset()", " + ", "loop", "Output:", "Method #2 : Using ", "any()", " + ", "issuperset()", "Output:", "Method #3 : Without issuperset()", "Output", "Using Recursion:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #5 : Using filter() and lambda functions: ", "Output", "Time Complexity: O(n*m)", "Auxiliary Space: O(1)", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-check-if-any-key-has-all-the-given-list-elements/"},
{"title": "Python Plotly: How to prevent title from overlapping the plot? - GeeksforGeeks", "h1": ["Python Plotly: How to prevent title from overlapping the plot?"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example for Over-Lapping Title", "Output:", "Solution :", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 "], "link": "https://www.geeksforgeeks.org/python-plotly-how-to-prevent-title-from-overlapping-the-plot/?ref=ml_lbp"},
{"title": "Python strftime() function - GeeksforGeeks", "h1": ["Python strftime() function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Strftime() Syntax", "Strftime() Method in Python Example ", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" Strftime()", "Syntax: ", "Parameters:", "Format: ", "Returns: ", "Output", "Time complexity: ", "Auxiliary Space:", "Output", "Time complexity: ", "Auxiliary Space: ", "Formatting Date and Time with AM/PM", "Time complexity: ", "Auxiliary Space: ", "Output", "Time complexity: ", "Auxiliary Space: ", "List of Format Codes ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-strftime-function/"},
{"title": "Python | Prefix key match in dictionary - GeeksforGeeks", "h1": ["Python | Prefix key match in dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using dictionary comprehension + startswith()", "Output", "Time complexity:", "Auxiliary Space: ", "Method #2 : Using map() + filter() + items() + startswith()", "Output", "Time complexity: ", "Auxiliary Space: ", "Method #3: Using find() method", "Output", "Time complexity:", "Auxiliary space:", "Method #4 : use re.match()", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method #5 : Using slicing", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Method 6: Using a list comprehension ", "Step-by-step approach", "Output", "Method #7: Using a for loop", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-prefix-key-match-in-dictionary/?ref=next_article"},
{"title": "Python | Split string in groups of n consecutive characters - GeeksforGeeks", "h1": ["Python | Split string in groups of n consecutive characters"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples: ", "Input :", "Output :", "Input :", "Output :", "Method #1: Using list comprehension", "Method #2: Using zip_longest", "Output", "Method 3: Using a for loop and string slicing.", "Output", "Time complexity: ", "Auxiliary space: ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-split-string-in-groups-of-n-consecutive-characters/?ref=ml_lbp"},
{"title": "Python program to print odd numbers in a List - GeeksforGeeks", "h1": ["Python program to print odd numbers in a List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "note: install numpy module using command “pip install numpy”", "Python3", "Python", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input:", "Output:", "Input:", "Output:", "Using for loop :", "Output", "Time Complexity:", "Auxiliary Space: ", "Using while loop", " :", "Output", "Time Complexity: ", "Auxiliary Space: ", "Using list comprehension", " : ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Using lambda expressions :", "Output", "Time Complexity: ", "Auxiliary Space:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Output", "Time Complexity:", "Auxiliary Space:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method: Using numpy.array function", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Method: Using bitwise & operator", "Output", "Time Complexity: O(N)", "Auxiliary Space: O(1), As constant extra space is used.", "Method: Using bitwise | operator", "Output", "Time Complexity: O(N)", "Auxiliary Space: O(1), As constant extra space is used.", "Using filter function : ", "Output:", "Time Complexity", "Auxiliary Space:", "Using numpy.where()", "Algorithm:", "Output:", "Algorithm: ", "Output", "Time Complexity:", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-print-odd-numbers-in-a-list/"},
{"title": "Python program to print odd numbers in a List - GeeksforGeeks", "h1": ["Python program to print odd numbers in a List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "note: install numpy module using command “pip install numpy”", "Python3", "Python", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input:", "Output:", "Input:", "Output:", "Using for loop :", "Output", "Time Complexity:", "Auxiliary Space: ", "Using while loop", " :", "Output", "Time Complexity: ", "Auxiliary Space: ", "Using list comprehension", " : ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Using lambda expressions :", "Output", "Time Complexity: ", "Auxiliary Space:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Output", "Time Complexity:", "Auxiliary Space:", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method: Using numpy.array function", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Method: Using bitwise & operator", "Output", "Time Complexity: O(N)", "Auxiliary Space: O(1), As constant extra space is used.", "Method: Using bitwise | operator", "Output", "Time Complexity: O(N)", "Auxiliary Space: O(1), As constant extra space is used.", "Using filter function : ", "Output:", "Time Complexity", "Auxiliary Space:", "Using numpy.where()", "Algorithm:", "Output:", "Algorithm: ", "Output", "Time Complexity:", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-print-odd-numbers-in-a-list/?ref=ml_lbp"},
{"title": "Python Set | Check whether a given string is Heterogram or not - GeeksforGeeks", "h1": ["Python Set | Check whether a given string is Heterogram or not"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python program to check whether a given string is Heterogram or not", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input1:", "Output1:", "Explanation: ", "Input2:", "Output2:", "Explanation: ", "Output", "Time Complexity:", "Auxiliary Space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-set-check-whether-given-string-heterogram-not/"},
{"title": "Python | Create a digital clock using Tkinter - GeeksforGeeks", "h1": ["Python | Create a digital clock using Tkinter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["Prerequisites:", "Using Label widget from Tkinter and time module: ", " Label widget ", "time module", "Output:", "Code Explanation:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-create-a-digital-clock-using-tkinter/?ref=lbp"},
{"title": "Python SQLite - ORDER BY Clause - GeeksforGeeks", "h1": ["Python SQLite – ORDER BY Clause"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "SQLite in Python - Getting Started", "SQLite Queries", "SQLite Clause", "SQLite Working with Data", "Working with Images", "Python SQLite - Exercise", "Python SQLite Additional", "SQLite in Python - Getting Started", "SQLite Queries", "SQLite Clause", "SQLite Working with Data", "Working with Images", "Python SQLite - Exercise", "Python SQLite Additional", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["ORDER BY", "DESC", "ASC", "Syntax: ", "Output:", "Output:", "Example 1: ", "Output:", "Example 2: ", "Output:", "Example 3: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sqlite-order-by-clause/"},
{"title": "Python Mongodb - Delete_one() - GeeksforGeeks", "h1": ["Python Mongodb – Delete_one()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python MongoDB - Introduction", "Python MongoDB - Getting Started", "Python MongoDB - Basic", "Python MongoDB - Method", "Python MongoDB Queries", "Working with Collections and documents in MongoDB", "Indexing in MongoDB", "Conversion between MongoDB data and Structured data", "Python MongoDB - Exercise", "Python MongoDB - Introduction", "Python MongoDB - Getting Started", "Python MongoDB - Basic", "Python MongoDB - Method", "Python MongoDB Queries", "Working with Collections and documents in MongoDB", "Indexing in MongoDB", "Conversion between MongoDB data and Structured data", "Python MongoDB - Exercise", "Connecting to a Database", "Deleting document from Collection or Database", "Python", "What kind of Experience do you want to share?"], "strong": ["Mongodb", "Step 1 –", "Step 2 –", "Note:", "Examples:", "Output :", "MongoDB Shell:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-mongodb-delete_one/?ref=next_article"},
{"title": "Python | Create a GUI Marksheet using Tkinter - GeeksforGeeks", "h1": ["Python | Create a GUI Marksheet using Tkinter"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Projects for Beginners", "Projects for Intermediate", "Web Scraping", "Automating boring Stuff Using Python", "Tkinter Projects", "Turtle Projects", "OpenCV Projects", "Python Django Projects", "Python Text to Speech and Vice-Versa", "More Projects on Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["To create a Tkinter:", "Below is the implementation:", "Output:", "Code Explanation:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-create-a-gui-marksheet-using-tkinter/?ref=lbp"},
{"title": "Python - Remove Dictionary Key Words - GeeksforGeeks", "h1": ["Python – Remove Dictionary Key Words"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using split() + loop + replace()", "Output : ", "Time Complexity:", "Auxiliary Space:", "Method #2: Using join() + split()", "Output : ", "Time Complexity:", "Auxiliary Space: ", "Method #3: Using keys(),split() methods and in operator", "Output", "Time Complexity: ", "Auxiliary", "Space: ", "Method #4: Using List Comprehension and Join() Method", "Output", "Time Complexity:", "Auxiliary Space:", "Method #5: Using filter() + lambda function", "Output", "Method 6:  Using the re module ", "Explanation:", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(1),", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-remove-dictionary-key-words/"},
{"title": "Python Program to Find Largest Number in a List - GeeksforGeeks", "h1": ["Python Program to Find Largest Number in a List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Output", "Time Complexity: O(nlogn)", "Auxiliary Space: O(1)", "Find Largest Number in a List", "Output", "Time complexity : O(n)", "Auxiliary Space : O(1)", "Time complexity : O(n)", "Auxiliary Space : O(1)", "Find Largest Number in a List ", "Output", "Time complexity : O(n)", "Auxiliary Space : O(1)", "Output", "Time complexity :", "Auxiliary Space:", "Output", "Time Complexity: ", "Auxiliary Space:", "Output", "Time Complexity:", "Auxiliary Space:", "Find Largest Number in a List Using heapq.nlargest()", "Algorithm:", "Output", "Time complexity: O(nlogk),", "Auxiliary Space: O(k),", "Find Largest Number in a List Using np.max() method", "Output:", "Time Complexity:", "Auxiliary Space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-find-largest-number-in-a-list/"},
{"title": "Python | Get positional characters from String - GeeksforGeeks", "h1": ["Python | Get positional characters from String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using loop", "Output : ", "Time Complexity:", "Auxiliary Space:", "Method #2: Using generator expression + enumerate()", "Output : ", "Time Complexity:", "Auxiliary Space:", "Method #3: Using for loop", "Output", "Method #4: Using for list comprehension", "Output", "Method #5: Using map() and lambda function", "Output", "Method 6 :  using the reduce() function from the functools module. ", "step by step:", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-get-positional-characters-from-string/?ref=ml_lbp"},
{"title": "Python - datetime.tzinfo() - GeeksforGeeks", "h1": ["Python – datetime.tzinfo()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Date class", "Time class", "Datetime class", "Timedelta class", "Date class", "Time class", "Datetime class", "Timedelta class", "DateTime.tzinfo()", "Naive and Aware datetime objects", "What kind of Experience do you want to share?"], "strong": ["Note:", "tzinfo", "naive datetime object", "What does this offset refer to ?", "minutes east of UTC", "For fixed offset :", "For time aware objects :", "D", "S", "T", "‘1’", "‘0’", "‘-1’", "For fixed offset class :", "For time aware objects :", "Example:", "Note:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-datetime-tzinfo/?ref=ml_lbp"},
{"title": "Python Plotly: How to set up a color palette? - GeeksforGeeks", "h1": ["Python Plotly: How to set up a color palette?"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Method 1: Setting up the color palette for continuous data", "Python3", "Method 2: Setting up the color palette for discrete data", "Python3", "Python3", "Method 3: Setting up color palettes from already existing color palettes", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output:", "Output:", "Output:", "Output:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "GATE Data Science and Artificial Intelligence 2025 "], "link": "https://www.geeksforgeeks.org/python-plotly-how-to-set-up-a-color-palette/?ref=ml_lbp"},
{"title": "Python Try Except - GeeksforGeeks", "h1": ["Python Try Except"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Try Except in Python", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Note:", "Some of the common Exception Errors are : ", "IOError: ", "KeyboardInterrupt: ", "ValueError: ", "EOFError: ", "ImportError: ", "Syntax:", "How try() works?", "try", "try.", "try", "except", "try", "except", "except", "try", "try", "except", "Code 1: ", "try", "Auxiliary Space:", "Output : ", "Code 1: ", "except", "Output : ", "Code 2:  ", "except", "Output:", "Syntax:", "Code:", "Output:", "Syntax:", "Code:", "Output:", "Related Articles:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Master Java Programming - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-try-except/?ref=lbp"},
{"title": "Python Exception Handling - GeeksforGeeks", "h1": ["Python Exception Handling"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Difference between Syntax Error and Exceptions", "Python3", "Python3", "Python3", "Python3", "Try and Except Statement – Catching Exceptions", "Python3", "Catching Specific Exception", "Python3", "Try with Else Clause", "Python3", "Finally Keyword in Python", "Python3", "Raising Exception", "Python3", "What kind of Experience do you want to share?"], "strong": ["SyntaxError:", "TypeError", "NameError", "IndexError", "KeyError", "ValueError", "AttributeError", "IOError", "ZeroDivisionError", "ImportError", "Syntax Error:", "Example:", "‘", "if'", "‘", "print'", "‘", "if'", "Output:", "Exceptions:", "Example:", "‘marks’", "‘ZeroDivisionError’ ", "Output:", "Note:", "‘TypeError’", "‘", "x'", "‘", "y'", "‘", "TypeError'", "‘", "try'", " ", "‘", "except'", "Output", "Example: ", "Output", "Example: ", "‘", "fun(a)'", "‘", "ZeroDivisionError'", "“ZeroDivisionError Occurred and Handled.” ", "‘", "NameError'", "‘", "NameError'", "Output", " Try with else clause", "AbyB(a, b)", " ", "AbyB(2.0, 3.0)", " ", "AbyB(3.0, 3.0)", "ZeroDivisionError", "“a/b results in 0” ", "Output:", "Syntax:", "Example:", " ", "ZeroDivisionError", " “Can’t divide by zero.”", "“This is always executed.”", "Output:", "“Hi there” ", "“An exception,” ", "Improved program reliability", "Simplified error handling", "Cleaner code:", "Easier debugging", "Performance overhead:", "Increased code complexity", "Possible security risks:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-exception-handling/?ref=lbp"},
{"title": "Python Mongodb - Delete_many() - GeeksforGeeks", "h1": ["Python Mongodb – Delete_many()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python MongoDB - Introduction", "Python MongoDB - Getting Started", "Python MongoDB - Basic", "Python MongoDB - Method", "Python MongoDB Queries", "Working with Collections and documents in MongoDB", "Indexing in MongoDB", "Conversion between MongoDB data and Structured data", "Python MongoDB - Exercise", "Python MongoDB - Introduction", "Python MongoDB - Getting Started", "Python MongoDB - Basic", "Python MongoDB - Method", "Python MongoDB Queries", "Working with Collections and documents in MongoDB", "Indexing in MongoDB", "Conversion between MongoDB data and Structured data", "Python MongoDB - Exercise", "Delete_many()", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["MongoDB", "Syntax:", "Parameters:", "filter", "collation", "hint", "session", "Sample Database:", "Example 1:", "Output:", "MongoDB Shell:", "Example 2:", "Output:", "MongoDB Shell:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-mongodb-delete_many/?ref=lbp"},
{"title": "Python Dictionary copy() - GeeksforGeeks", "h1": ["Python Dictionary copy()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Syntax of copy() method", "Python3", "Python3", "Difference between shallow copy and deep copy", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python Dictionary copy() method", "shallow copy", " Examples", "Input:", "Output:", "Syntax of copy() method", "Syntax:", "Return:", "Python ", "Error:", "Output:", "Example 2: Python Dictionary copy()", "Output:", "Example 1: Using copy()", "Output: ", "Output: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-dictionary-copy/?ref=next_article"},
{"title": "Python - Key with maximum unique values - GeeksforGeeks", "h1": ["Python – Key with maximum unique values"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using loop", "Output", "Time complexity: O(n*k*log k)", "Auxiliary space: O(k)", "Method #2: Using sorted() + lambda() + set() + values() + len()", "Output", "Time complexity: ", "Auxiliary space:", "Method #3:Using Counter() method", "Output", "Time Complexity: O(N*N)", "Auxiliary Space: O(N*N)", "Method #4: Using  a list comprehension:", "Algorithm:", "Output", "Time complexity: O(n), ", "Auxiliary Space: O(n),", "Method #5: Using defaultdict and set", "Output", "Method #6: Using dictionary comprehension and set", "Stepwise Approach:", "Output", "Time complexity: O(n logn)", "Auxiliary space: O(n)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-key-with-maximum-unique-values/"},
{"title": "Python Program to find transpose of a matrix - GeeksforGeeks", "h1": ["Python Program to find transpose of a matrix"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["For Square Matrix: ", "Output:", "Time Complexity: ", "Auxiliary Space:", "For Rectangular Matrix: ", "Output:", "Time Complexity", "Auxiliary Space", "In-Place for Square Matrix:", "Output:", "Time Complexity", "Auxiliary Space", "Output", "Time Complexity:", "Space Complexity:", "METHOD 5:Using list comprehension ", "APPROACH:", "ALGORITHM:", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-to-find-transpose-of-a-matrix/?ref=ml_lbp"},
{"title": "Python MongoDB - insert_many Query - GeeksforGeeks", "h1": ["Python MongoDB – insert_many Query"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python MongoDB - Introduction", "Python MongoDB - Getting Started", "Python MongoDB - Basic", "Python MongoDB - Method", "Python MongoDB Queries", "Working with Collections and documents in MongoDB", "Indexing in MongoDB", "Conversion between MongoDB data and Structured data", "Python MongoDB - Exercise", "Python MongoDB - Introduction", "Python MongoDB - Getting Started", "Python MongoDB - Basic", "Python MongoDB - Method", "Python MongoDB Queries", "Working with Collections and documents in MongoDB", "Indexing in MongoDB", "Conversion between MongoDB data and Structured data", "Python MongoDB - Exercise", "insert_many()", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["MongoDB", "Syntax:", "Parameters:", "‘documents’", "‘ordered’ (optional):", "‘bypass_document_validation’ (optional) :", "‘session’ (optional):", "comment (optional):", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-mongodb-insert_many-query/"},
{"title": "Python program to extract characters in given range from a string list - GeeksforGeeks", "h1": ["Python program to extract characters in given range from a string list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method 1 : Using join() + list comprehension", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 2: Using chain.from_iterable() + join()", "Output", "Time Complexity: ", "Space Complexity: ", "Approach 3: Using reduce() + join()", "Output", "Time complexity: ", "Auxiliary space:", "Approach 4: use a simple for loop to iterate through the strings and concatenate them.", "Output", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-program-to-extract-characters-in-given-range-from-a-string-list/"},
{"title": "Python | Cloning or Copying a list - GeeksforGeeks", "h1": ["Python | Cloning or Copying a list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Cloning or Copying a list", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" copy lists in Python", "copying list ", "Output: ", "Time Complexity:", "Auxiliary Space: ", "Clone or Copy Using Python extend() method", "Output", "Python Copy List Using Assignment Operator", "Python operators", ". ", " ", "Output: ", "Time Complexity:", "Auxiliary Space: ", "Using Shallow Copy", "Output:", "Python Cloning or Copying a list Using List Comprehension", "Output: ", "Python append() to Clone or Copy a list", "Output: ", "Using the copy() method", "Python List ", "copy()", "Output: ", "Using the method of Deep Copy", "Output:", "Output", "Python Copy or Clone a List using Map Function", "Output:", "Using slice() function", "Output", "Using the deque() function", "Output", "Copy a Python List Using reduce()", "Output", "Time complexity : O(n), ", "Space complexity : O(n)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-cloning-copying-list/"},
{"title": "Python | Checking if starting digits are similar in list - GeeksforGeeks", "h1": ["Python | Checking if starting digits are similar in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using list comprehension + map()", "Output", "Time Complexity:", "Auxiliary Space:", "Method #2: Using all() + list comprehension", "Output", "Time complexity: ", "Auxiliary space: ", "Method #3: Using startswith() method", "Output", "Time complexity:", "Auxiliary space:", "Method #4 : Using for loop,len() method", "Output", "Method #5 : Using re", "Output", "Time complexity:", "Auxiliary space:", "Method #6 : Using str() and count() methods", "using count()", "Output", "Time Complexity : O(N)", "Auxiliary Space : O(1)", "Method #7: Using set comprehension and string slicing", "Output", "Time complexity: ", "Auxiliary space: ", "Method #8: Using a while loop and integer division", "first_digit", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-checking-if-starting-digits-are-similar-in-list/"},
{"title": "Python program to Convert a Matrix to Sparse Matrix - GeeksforGeeks", "h1": ["Python program to Convert a Matrix to Sparse Matrix"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input:", "Output:", "Explanation:", "Row Column Value", "Approach:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Data Structures & Algorithms in Python - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-convert-a-matrix-to-sparse-matrix/"},
{"title": "Python Program for Sum the digits of a given number - GeeksforGeeks", "h1": ["Python Program for Sum the digits of a given number"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Method-1: Using str() and int() methods.", "Output:", "Method-2: Using sum() methods.: ", "Output:", "Method-3: Using General Approach: ", "A. Iterative Approach:", "Output:", "B. Recursive Approach:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-program-for-sum-the-digits-of-a-given-number/"},
{"title": "Python | Frequency of each character in String - GeeksforGeeks", "h1": ["Python | Frequency of each character in String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 :", "Output", "Method #2:", "Output", "Method #3 :", "Output", "Method #4:", "Output", "Method #5:", "Using set() + operator.countOf() operator.countOf()", "Output", "Method #6:Using reduce", "Output", "Time complexity: O(n)", "Auxiliary space: O(k), ", "Method #7: Using  numpy:", "Output:", "Time Complexity: ", "Auxiliary Space: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-frequency-of-each-character-in-string/"},
{"title": "Python Seaborn Tutorial - GeeksforGeeks", "h1": ["Python Seaborn Tutorial"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Styling Plots", "Multiple Plots", "Scatter Plot", "Line Plot", "Bar Plot", "Count Plot", "Box Plot", "Violin Plot", "Strip Plot", "Swarm Plot", "Factor Plot", "Histogram", "Pairplot", "KDE Plot", "Heatmap", "Catplot", "Introduction", "Styling Plots", "Multiple Plots", "Scatter Plot", "Line Plot", "Bar Plot", "Count Plot", "Box Plot", "Violin Plot", "Strip Plot", "Swarm Plot", "Factor Plot", "Histogram", "Pairplot", "KDE Plot", "Heatmap", "Catplot", "Getting Started", "Python3", "Using Seaborn with Matplotlib", "Python3", "Python3", "Customizing Seaborn Plots", "Python3", "Python3", "Python3", "Python3", "Python3", "Color Palette", "Python3", "Python3", "Python3", "Python3", "Multiple plots with Seaborn", "Python3", "Python3", "Python3", "Python3", "Python3", "Creating Different Types of Plots", "Relational Plots", "Python3", "Python3", "Python3", "Categorical Plots", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Distribution Plots", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Regression Plots", "Python3", "Python3", "Python3", "Python3", "More Gaphs in Seaborn", "More Topics on Seaborn", "What kind of Experience do you want to share?"], "strong": ["Seaborn", "Table Of Content", "Recent articles on Seaborn !!", "Note: ", "Example:", "Output:", "Example 1: ", "Output:", "Example 2:", "Output:", "set_style() ", "Syntax:", "Example: ", "Output:", "Syntax:", "Example:", "Output:", "figure()", "figsize", "Example:", "Output:", "Syntax:", "Example:", "Output:", "with", "Syntax:", "Example:", "Output:", "color_palette() ", "palplot() ", "Example:", "Output:", "Example:", "Output:", "Example:", "Output:", "set_palette() ", "Example:", "Output:", "Example 1: ", "Output:", "Example 2: ", " ", "Output:", "Example 3: ", "Output:", "Method 1:", "Syntax:", "Example:", "Output:", "Method 2:", "Syntax:", "Example:", "Output:", "Relational plots", "There are different types of Relational Plots. We will discuss each of them in detail –", "relplot()", "Syntax:", "Example:", "Output:", "scatter plot", "scatterplot()", "Syntax:", "Example:", "Output:", "lineplot()", "Syntax:", "Example:", "Output:", "Categorical Plots", "categorical", " ", "barplot", "barplot()", "Syntax:", "Example:", "Output:", "countplot", "countplot()", "Syntax:", "Example:", "Output:", "boxplot", "boxplot()", "Syntax:", "Example:", "Output:", "violinplot()", "Syntax:", "Example:", "Output:", "stripplot()", "Syntax:", "Example:", "Output:", "Swarmplot", "swarmplot()", "Syntax:", "Example:", "Output:", "Factorplot", "factorplot()", "Syntax:", "Example:", "Distribution Plots", "histplot()", "Syntax:", "Example:", "Output:", "Distplot", "distplot()", "Syntax:", "Example:", "Output:", "jointplot()", "Syntax:", "Example:", "Output:", "Pairplot", "pairplot()", "Syntax:", "Example:", "Output:", "Rugplot", "rugplot()", "Syntax:", "Example:", "Output:", "KDE Plot", "Kernel Density Estimate", "Syntax:", "Example:", "Output:", "regression plots", "lmplot()", "Syntax:", "Example:", "Output:", "Syntax:", "Example:", "Output:", "Note: ", "matrix plot", "Heatmap", "heatmap()", "Syntax:", "Example:", "Output:", "Syntax:", "Example:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-seaborn-tutorial/"},
{"title": "Python - Insertion at the beginning in OrderedDict - GeeksforGeeks", "h1": ["Python –  Insertion at the beginning in OrderedDict"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input: ", "Output: ", "Input: ", "Output: ", "Method #1: Using OrderedDict.move_to_end()", "Output", "Method #2: Using Naive Approach", "Output", "Method #3: Using OrderedDict.popitem() ", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-insertion-at-the-beginning-in-ordereddict/?ref=leftbar-rightbar"},
{"title": "Python Program to Check if a given matrix is sparse or not - GeeksforGeeks", "h1": ["Python Program to Check if a given matrix is sparse or not"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Method #2:Using count() function", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Output", "Time complexity", "Auxiliary Space: ", "Output", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "DSA for Interview Preparation "], "link": "https://www.geeksforgeeks.org/python-program-to-check-if-a-given-matrix-is-sparse-or-not/"},
{"title": "Python | Indices of numbers greater than K - GeeksforGeeks", "h1": ["Python | Indices of numbers greater than K"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loop", "Output : ", "Time Complexity: O(n), ", "Space Complexity: O(k)", "Method #2 : Using list comprehension + enumerate()", "Output : ", "Method #3 : Using filter + lambda", "Output", "Method 4: Using the NumPy library. ", "Time complexity: ", "Auxiliary space: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-indices-of-numbers-greater-than-k/?ref=next_article"},
{"title": "Python | Convert list of string into sorted list of integer - GeeksforGeeks", "h1": ["Python | Convert list of string into sorted list of integer"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input:", "Output:", "Input:", "Output:", "Method #1:", "Output:", "Method #2:", "Output:", "Method #3:", "Output:", "Output", " Method #: Using lambda ", "Output", " Method #: Using the sorted method and a key function", "Output", "Time Complexity: O(nlogn)", "Auxiliary Space: O(n)", "Method#: Using Recursive method.", "Output", "Time Complexity: O(n log n)", "Auxiliary Space: O(n)", "Method #8: Using the built-in function sorted with a key argument", "Output", "Time complexity: ", "Auxiliary space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-convert-list-of-string-into-sorted-list-of-integer/?ref=ml_lbp"},
{"title": "Python - Find dictionary keys present in a Strings List - GeeksforGeeks", "h1": ["Python – Find dictionary keys present in a Strings List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using list comprehension", "Output : ", "Time complexity: ", "Auxiliary space:", "Method #2: Using filter() + lambda + list comprehension", "Output : ", "Time complexity: ", "Auxiliary space: ", "Method #3: Using for loop", "Output", "Time complexity:", "Auxiliary space: ", "Method #4: Using the map() function", "Output", "Time complexity: ", "Auxiliary space: ", "Method #5: Using Pandas", "Output: ", "Time complexity: ", "Auxiliary space:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-find-dictionary-keys-present-in-a-strings-list/?ref=previous_article"},
{"title": "Python | Column deletion from list of lists - GeeksforGeeks", "h1": ["Python | Column deletion from list of lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using del + loop ", "Output :", "Method #2 : Using pop() + list comprehension", "Output :", "Method 3 :  using NumPy library. ", " steps for this approach:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-column-deletion-from-list-of-lists/"},
{"title": "Python | Get Unique values from list of dictionary - GeeksforGeeks", "h1": ["Python | Get Unique values from list of dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using set() + values() + dictionary comprehension", "Output : ", "Method #2 : Using set() + values() + from_iterable()", "Output : ", "Method #3 : Using extend(),values(),list(),set() methods", "Output", "Method #4 : Using Counter() + set()", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-get-unique-values-from-list-of-dictionary/"},
{"title": "Python | Convert a string representation of list into list - GeeksforGeeks", "h1": ["Python | Convert a string representation of list into list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Convert a string of a list into a list", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" ", "Output", "Time complexity: ", "Auxiliary space:", "Output", "Time complexity:", "Auxiliary space complexity:", "Output", "Time complexity: ", "Auxiliary space: ", "Note:", "Output", "Time complexity:", "Auxiliary space: ", "Convert a string list into list using eval Method", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-convert-a-string-representation-of-list-into-list/?ref=next_article"},
{"title": "Python program to check if a string has at least one letter and one number - GeeksforGeeks", "h1": ["Python program to check if a string has at least one letter and one number"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input: ", "Output: ", "Input:", "Output:", "Approach: ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Approach: Without using builtin methods", "Output", "Time Complexity: ", "Auxiliary Space: ", "Approach : Using operator.countOf() method", "Output", "Time Complexity: O(N)", "Auxiliary Space : O(1)", "Approach : Using regular Expressions", "Output", "Time Complexity: O(N)", "Auxiliary Space : O(1)", "Approach: Using  set intersection: ", "Algorithm:", "Output", "Time Complexity:", "Space Complexity:", "Approach: Using lambda function ", "Output", "Time Complexity: ", "Space Complexity: ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-program-to-check-if-a-string-has-at-least-one-letter-and-one-number/"},
{"title": "Python Program for Counting sets of 1s and 0s in a binary matrix - GeeksforGeeks", "h1": ["Python Program for Counting sets of 1s and 0s in a binary matrix"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Output: ", " ", "Time Complexity:", "Space Complexity: ", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "DSA for Interview Preparation "], "link": "https://www.geeksforgeeks.org/python-program-for-counting-sets-of-1s-and-0s-in-a-binary-matrix/?ref=ml_lbp"},
{"title": "Python program to count the number of characters in a String - GeeksforGeeks", "h1": ["Python program to count the number of characters in a String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using isalpha() + len()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #2: Using", " ascii_uppercase() ", "+ ", "ascii_lowercase()", " + ", "len()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method 3: Using the sum() function ", "sum()", "isalpha().", "Output", "Time Complexity:", "Auxiliary Space:", "METHOD 4:Using re module .", "APPROACH:", "ALGORITHM:", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-to-count-the-number-of-characters-in-a-string/"},
{"title": "Python | Check if two lists are identical - GeeksforGeeks", "h1": ["Python | Check if two lists are identical"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method 1: Using list.sort() and == operator", "Output", "Output :", "Method 2: Using collections.Counter()", "Output", "Output :", "Method 3: Using sum() + zip() + len()", "Output", "Output :", "Method 4 : Using reduce() + map() ", "Output", "Output : ", "Method 5: Using all() and zip()", "Output", "Method 6: Using operator.countOf() method", "Output", "Method 7: Using counter():", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-check-if-two-lists-are-identical/?ref=ml_lbp"},
{"title": "Python | Permutation of a given string using inbuilt function - GeeksforGeeks", "h1": ["Python | Permutation of a given string using inbuilt function"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output:", "Permutations of a given string with repeating characters", "Output:", "Time Complexity:", "Auxiliary Space:", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-permutation-given-string-using-inbuilt-function/?ref=ml_lbp"},
{"title": "Python | Which is faster to initialize lists? - GeeksforGeeks", "h1": ["Python | Which is faster to initialize lists?"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": [" Using a for loop and append()", " Using a while loop with a counter variable ", "Using list comprehensions ", " Using the * operator", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-which-is-faster-to-initialize-lists/?ref=ml_lbp"},
{"title": "Python Program to swap the First and the Last Character of a string - GeeksforGeeks", "h1": ["Python Program to swap the First and the Last Character of a string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input: ", "Output:", "Input: ", "Output: ", "start,", "string[0]", "end", "string[-1]", "string[1:-1]", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method : Using lists without slicing", "Output", "Method 3: Using the built-in function join() and list comprehension.", "Output", "Time complexity:", "Auxiliary space: ", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-to-swap-the-first-and-the-last-character-of-a-string/"},
{"title": "Python | Count the Number of matching characters in a pair of string - GeeksforGeeks", "h1": ["Python | Count the Number of matching characters in a pair of string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Recommended: Please try your approach on ", "{IDE}", " first, before moving on to the solution.", "Python", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input : ", "Output : ", "Input :", "Output :", "{IDE}", "Approach 1:", "Note:", "string.find(character)", "4.", "Output :", "Approach 2: ", "Output :", "Approach 3:", "Output", "Time complexity:", "Auxiliary space:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-count-the-number-of-matching-characters-in-a-pair-of-string/?ref=ml_lbp"},
{"title": "Python | Compare tuples - GeeksforGeeks", "h1": ["Python | Compare tuples"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Note: Install numpy module using command “pip install numpy”", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using all() + generator expression + zip()", "Output", "Method #2 : Using all() + map() + lambda", "Output", "Using Numpy:", "Note: Install numpy module using command “pip install numpy”", "Output:", "Time and Auxiliary space", "Method #2 : Using tuple():", "Output", "Time complexity: O(N)", "Auxiliary Space: O(1)", "Example #3: Using all() and zip()", "Output", "Time complexity: O(N)", "Auxiliary Space: O(1)", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-compare-tuples/?ref=lbp"},
{"title": "Python MySQL - Drop Table - GeeksforGeeks", "h1": ["Python MySQL –  Drop Table"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to SQL", "Setting Up the Environment", "SQL Basics", "SQL Operators", "Working with Data", "SQL Queries", "Data Manipulation", "Data Analysis", "Data Visualization", "Connecting SQL with Python", "Advanced SQL Techniques for Data Science", "Optimizing SQL Queries for Performance", "Working with NoSQL and NewSQL Databases", "Introduction to SQL", "Setting Up the Environment", "SQL Basics", "SQL Operators", "Working with Data", "SQL Queries", "Data Manipulation", "Data Analysis", "Data Visualization", "Connecting SQL with Python", "Advanced SQL Techniques for Data Science", "Optimizing SQL Queries for Performance", "Working with NoSQL and NewSQL Databases", "Drop Table Command", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["DROP TABLE IF EXISTS", "Syntax:", "Tables before drop:", "Example 1:", "Output:", "Example 2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-mysql-drop-table/"},
{"title": "Python Tkinter - Entry Widget - GeeksforGeeks", "h1": ["Python Tkinter – Entry Widget"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Introduction", "Widgets", "Geometry Management", "Binding Functions", "Working with Images in Tkinter", "Tkinter Advance", "Applications and Projects", "Python3", "The Entry Widget", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Output :", "Syntax : ", "Parameters:", "1) Parent:", "2) Options:", "bg : ", "bd : ", "font : ", "fg : ", "justify : ", "relief : ", "show : ", "textvariable : ", "Methods: ", "get() : ", "delete() :", "insert ( index, ‘name’) :", "Example:", "Output : ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-tkinter-entry-widget/?ref=lbp"},
{"title": "Python program to print even length words in a string - GeeksforGeeks", "h1": ["Python program to print even length words in a string"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python", "Python3", "Python3", "Python3", "Python3", "Approach: Word-by-word parsing", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples: ", "Input:", "Output:", "Input:", "Output: ", "Method: ", " ", "Output", "Time Complexity:", "Auxiliary Space:", "Approach:", "Output", "Time Complexity:", "Auxiliary Space:", "Output", "Time Complexity:", "Auxiliary Space:", "Output", "Time Complexity:", "Auxiliary Space:", "Output", "Time Complexity:", "Auxiliary Space:", "Output", "Time Complexity: ", "Auxiliary Space", "Output", "Output", "Output", "Output", "The time complexity of this “iterative character-by-character parsing” approach to print all words with even length in a given string is O(n), where n is the length of the input string.", "The auxiliary space complexity of this approach is O(m), where m is the length of the longest word in the input string. ", "Method: Using itertools.compress() function", "Output", "Output", "DevOps Engineering - Planning to Production ", "GATE Data Science and Artificial Intelligence 2025 ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-to-print-even-length-words-in-a-string/"},
{"title": "Python String | strip() - GeeksforGeeks", "h1": ["Python String | strip()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["strip() method", "Syntax :", "Parameter:", "chars(optional):", "Returns:", "Example #1: ", "Output :", "Example #2:", "Output:", "Example #3:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-string-strip-2/"},
{"title": "Python: MySQL Create Table - GeeksforGeeks", "h1": ["Python: MySQL Create Table"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to SQL", "Setting Up the Environment", "SQL Basics", "SQL Operators", "Working with Data", "SQL Queries", "Data Manipulation", "Data Analysis", "Data Visualization", "Connecting SQL with Python", "Advanced SQL Techniques for Data Science", "Optimizing SQL Queries for Performance", "Working with NoSQL and NewSQL Databases", "Introduction to SQL", "Setting Up the Environment", "SQL Basics", "SQL Operators", "Working with Data", "SQL Queries", "Data Manipulation", "Data Analysis", "Data Visualization", "Connecting SQL with Python", "Advanced SQL Techniques for Data Science", "Optimizing SQL Queries for Performance", "Working with NoSQL and NewSQL Databases", "python", "Table", "python", "What kind of Experience do you want to share?"], "strong": ["SQL commands are case insensitive", "Installation", "1. connect():", "user:", "password:", "database:", "2. cursor()", "3. execute()", "SQL command for Creating Database :", "Example:", "Output :", "SQL command for Creating Table : ", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-mysql-create-table/?ref=lbp"},
{"title": "Python String splitlines() Method - GeeksforGeeks", "h1": ["Python String splitlines() Method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["splitlines()", "Syntax:", "Parameters:", "keepends ", ": ", "True", "can be a number", "Unicode characters", "Return Value:", "splitlines() splits on the following line boundaries:", "Output: ", "Output: ", "Practical Application", "Output: ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced "], "link": "https://www.geeksforgeeks.org/python-string-splitlines-method/?ref=next_article"},
{"title": "Python MySQL - GROUP BY and HAVING Clause - GeeksforGeeks", "h1": ["Python MySQL – GROUP BY and HAVING  Clause"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax: ", "Database in use:", "Example:", "Output:", "Syntax: ", "Database in use:", "Example:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-mysql-group-by-and-having-clause/"},
{"title": "Python | Removing duplicate dicts in list - GeeksforGeeks", "h1": ["Python | Removing duplicate dicts in list"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Using Loop for Removing duplicate dictionaries in a list", "Python3", "Using list comprehension for Removing duplicate dictionaries in a list", "Python3", "Using frozenset", " ", "for Removing duplicate dictionaries in a list", "Python3", "Using unique everseen()", " ", "for Removing duplicate dictionaries in a list", "Python3", "What kind of Experience do you want to share?"], "strong": ["Output:", "Using list comprehension for Removing duplicate dictionaries in a list", "Output:", "Using frozenset", "for Removing duplicate dictionaries in a list", "Output:", "Using unique everseen()", "for Removing duplicate dictionaries in a list", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-removing-duplicate-dicts-in-list/?ref=ml_lbp"},
{"title": "Python - Convert List of Dictionaries to List of Lists - GeeksforGeeks", "h1": ["Python – Convert List of Dictionaries to List of Lists"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Input", "Output", "Explanation:", "Convert List of Dictionaries to List of Lists using Loop", "Output ", "Time complexity: ", "Auxiliary space:", "Convert List of Dictionaries to List of Lists using List Comprehension", "Output ", "Time complexity: ", "Auxiliary space: ", "Convert List of Dictionaries to List of Lists using Map() function and Lambda function", "OUTPUT:", "Time complexity: ", "Auxiliary space:", "Convert List of Dictionaries to List of Lists using Pandas Library", "Time complexity: ", "Auxiliary space: ", "Convert List of Dictionaries to List of Lists using Zip() function", "Output", "Time complexity: ", "Auxiliary space: ", "Master C Programming with Data Structures ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-convert-list-of-dictionaries-to-list-of-lists/"},
{"title": "Python SQLite - WHERE Clause - GeeksforGeeks", "h1": ["Python SQLite – WHERE Clause"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "SQLite in Python - Getting Started", "SQLite Queries", "SQLite Clause", "SQLite Working with Data", "Working with Images", "Python SQLite - Exercise", "Python SQLite Additional", "SQLite in Python - Getting Started", "SQLite Queries", "SQLite Clause", "SQLite Working with Data", "Working with Images", "Python SQLite - Exercise", "Python SQLite Additional", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["WHERE Clause in SQL:", "Syntax:  ", "WHERE Clause in SQLite using Python:", "Let’s Creates Database (geekforgeeks_student.db) and a Table (STUDENT).", "Output:", "Now we will insert data into STUDENT table.", "Output:", "The following codes show the use of Where Clause", "Example 1: ", "Output:", "Example 2:", "Wildcard characters", "Output:", "Example 3:", "Output:", "Example 4:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sqlite-where-clause/?ref=previous_article"},
{"title": "Python MySQL - Drop Table - GeeksforGeeks", "h1": ["Python MySQL –  Drop Table"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction to SQL", "Setting Up the Environment", "SQL Basics", "SQL Operators", "Working with Data", "SQL Queries", "Data Manipulation", "Data Analysis", "Data Visualization", "Connecting SQL with Python", "Advanced SQL Techniques for Data Science", "Optimizing SQL Queries for Performance", "Working with NoSQL and NewSQL Databases", "Introduction to SQL", "Setting Up the Environment", "SQL Basics", "SQL Operators", "Working with Data", "SQL Queries", "Data Manipulation", "Data Analysis", "Data Visualization", "Connecting SQL with Python", "Advanced SQL Techniques for Data Science", "Optimizing SQL Queries for Performance", "Working with NoSQL and NewSQL Databases", "Drop Table Command", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["DROP TABLE IF EXISTS", "Syntax:", "Tables before drop:", "Example 1:", "Output:", "Example 2: ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-mysql-drop-table/?ref=ml_lbp"},
{"title": "Python program to find start and end indices of all Words in a String - GeeksforGeeks", "h1": ["Python program to find start and end indices of all Words in a String"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method : Using ", "list comprehension", " + ", "regex", " + finditer()", "Output", "Time Complexity: ", "Auxiliary Space:", "word_indices", "start_index", "start_index", "word_indices", "Output", "Output", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-to-find-start-and-end-indices-of-all-words-in-a-string/"},
{"title": "Python del to delete objects - GeeksforGeeks", "h1": ["Python del to delete objects"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" del", "Syntax:", "Del Keyword for Deleting Objects", "Output:", "Output:", "Del Keyword for Deleting List and List Slicing", "Output:", "Del Keyword for Deleting Dictionaries and Removing key-value Pairs", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master Java Programming - Complete Beginner to Advanced "], "link": "https://www.geeksforgeeks.org/python-del-to-delete-objects/?ref=previous_article"},
{"title": "Python - tensorflow.identity() - GeeksforGeeks", "h1": ["Python – tensorflow.identity()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["identity() ", "Syntax: ", "Parameters:", "input: ", "name(optional): ", "Returns: ", "Example 1:", "Output:", "Example 2:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-tensorflow-identity/"},
{"title": "Python - turtle.pencolor() method - GeeksforGeeks", "h1": ["Python – turtle.pencolor() method"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "turtle.pencolor() :", "Python3", "What kind of Experience do you want to share?"], "strong": ["Syntax:", "Arguments: ", "colorstring:", "(r, g, b):", "r, g, b:", "Return:", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-turtle-pencolor-method/"},
{"title": "Python | Check if all values are 0 in dictionary - GeeksforGeeks", "h1": ["Python | Check if all values are 0 in dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using a loop", "Output", "Time complexity: ", "Auxiliary space: ", "Method #2: Using all() + dictionary comprehension", "Output", "Method #3: Using any() + not operator", "Output", "Method #4: Using values(),len() and count()", "Output", "Method #5: Using * and len() method", "Output", "Method #6: Using reduce() & lambda", "Output", "Time complexity:", "Auxiliary Space: ", "Method #7 : Using operator.countOf() method", "Approach", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-check-if-all-values-are-0-in-dictionary/?ref=ml_lbp"},
{"title": "Python - String Repetition and spacing in List - GeeksforGeeks", "h1": ["Python – String Repetition and spacing in List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using loop", "Output : ", "Time complexity: ", "Auxiliary space: ", "Method #2 : Using join() + list comprehension", "Output : ", "Time complexity: ", "Auxiliary space: ", "Method #3: Using itertools.repeat() ", "res", "test_list", "itertools.repeat() ", "delim", "join()", "res", "print() ", "Output", "Time complexity: ", "Auxiliary Space: ", "Method 4: Using map() and lambda functions.", "K", "K", "map()", "map()", "Output", "Time complexity:", "Auxiliary space: ", "Method 5: Using numpy.tile() and numpy.ravel()", "Step-by-step approach:", "Method 6: Using list multiplication and string concatenation", "delim", "K", "test_list", "K", "K-1", "delim ", "*", "res", "print()", "res", "Output", " Time complexity: ", "Auxiliary space:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-string-repetition-and-spacing-in-list/?ref=lbp"},
{"title": "Python - Append Dictionary Keys and Values ( In order ) in dictionary - GeeksforGeeks", "h1": ["Python – Append Dictionary Keys and Values ( In order ) in dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using list() + keys() + values()", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #2 : Using chain() + keys() + values()", "Output", "Time complexity: ", "Auxiliary space: ", "Method #3 : Using  list() +keys() + values() + extend()", "Output", "Time complexity: ", "Auxiliary space:", "Method #4: Using zip() function and list comprehension", "Output", "Time complexity:", "Auxiliary space: ", "Method #5: Using sorted() function and list comprehension", "Output", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-append-dictionary-keys-and-values-in-order-in-dictionary/?ref=ml_lbp"},
{"title": "Python | Check if dictionary is empty - GeeksforGeeks", "h1": ["Python | Check if dictionary is empty"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Check if a Dictionary is Empty using bool()", "Python3", "Check if a Dictionary is Empty using not operator", " ", "Python3", "Check if a Dictionary is Empty using", " len()", "Python3", "Check if a Dictionary is Empty using", " the Equality Operator", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Check if a Dictionary is Empty using bool()", "Output :", "Check if a Dictionary is Empty using not operator", "Output:", "Check if a Dictionary is Empty using", "Output:", "Check if a Dictionary is Empty using", "Output", "Output", "Method: Using reduce():", "Algorithm:", "Output", "Time complexity:", "Space complexity:", "Using heapq:", "Algorithm:", "Output", "Time Complexity: O(n log k),", "Space Complexity: O(k), ", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-check-if-dictionary-is-empty/?ref=ml_lbp"},
{"title": "Python SQLite - Select Data from Table - GeeksforGeeks", "h1": ["Python SQLite – Select Data from Table"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "SQLite in Python - Getting Started", "SQLite Queries", "SQLite Clause", "SQLite Working with Data", "Working with Images", "Python SQLite - Exercise", "Python SQLite Additional", "SQLite in Python - Getting Started", "SQLite Queries", "SQLite Clause", "SQLite Working with Data", "Working with Images", "Python SQLite - Exercise", "Python SQLite Additional", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Demonstration of our GEEK table:", "Creating the above table:", "Syntax:", "Code:", "Output:", "Syntax:", "Parameters: ", "Code:", "Output:", "Syntax:", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-sqlite-select-data-from-table/?ref=previous_article"},
{"title": "Python - Check if all values are K in dictionary - GeeksforGeeks", "h1": ["Python – Check if all values are K in dictionary"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using all() + dictionary comprehension", "Output", "Time complexity: ", "Auxiliary space:", "Method #2: Using loop", "Output", "Time complexity: ", "Auxiliary space: ", "Method #3 : Using values() and len() method", "Output", "Method #4: Using set() and len()", "Output", "Time complexity: O(n)", " ", "Auxiliary Space ", "Method #5: Using collections.counter():", "Output", "Time complexity: O(n)", "Auxiliary Space: O(n) ", "Method #6: Using reduce() ", "Output", "Time complexity: O(n)", "Auxiliary Space: O(n) ", "Method #7 : Using count() method", "Approach", "Output", "Time Complexity : O(N)", "Auxiliary Space : O(1)", "Method #8: Using map() and all() functions", "Output", "Time Complexity: O(N)", "Auxiliary Space: O(N)", "Method#9: Using Recursive method.", "Output", "Method #10: Using list comprehension and len() function", "True/False", "K", "yes", "K", "True/False", "K", "yes", "K", "Output", "Time complexity:", "Auxiliary space:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-check-if-all-values-are-k-in-dictionary/"},
{"title": "Python | Add list elements with a multi-list based on index - GeeksforGeeks", "h1": ["Python | Add list elements with a multi-list based on index"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example: ", "Input:", "Output:", "Explanation:", "Method #1: Using iteration", "Output:", "Method #2: Using enumerate()", "Output:", "Method #3: Using Zip() ", "Output:", "Method #4: Using map()", "Output", "Method #5: Using nested list comprehension", "Output", "Time Complexity: O(n)", "Auxiliary Space: O(n)", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-add-list-elements-with-a-multi-list-based-on-index/?ref=next_article"},
{"title": "Python string | digits - GeeksforGeeks", "h1": ["Python string | digits"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What kind of Experience do you want to share?"], "strong": ["string.digits", "Syntax : ", "Parameters :", "Returns :", "Note :", "Code #1 :", "Output :", "Code #2 :", "Output:", "Applications :", "digits ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau "], "link": "https://www.geeksforgeeks.org/python-string-digits/"},
{"title": "Python | Ways to concatenate tuples - GeeksforGeeks", "h1": ["Python | Ways to concatenate tuples"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using + operator", "Output : ", "Time Complexity: O(N)", "Auxiliary Space: O(N) ", "Method #2 : Using sum()", "Output : ", "Time complexity: ", "Auxiliary space: ", "Method #3: ", "Output", "Output", "Method #5: Using the tuple() constructor and the * operator", "Output", "Time complexity: ", "Auxiliary space: ", "METHOD 6: Using the += operator and the += method:", "APPROACH:", "ALGORITHM:", "Output", "Output", "Time Complexity", "Space Complexity:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-ways-to-concatenate-tuples/?ref=lbp"},
{"title": "Python - Append Multiple elements in set - GeeksforGeeks", "h1": ["Python – Append Multiple elements in set"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Append Multiple Elements in Set in Python", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Example:", "Input:", "Output:", "Explanation:", "Input:", "Output:", "Explanation:", "Using update() Method", "Output:", "Using | Operator (Pipe Operator)", "Output:", "Using List Comprehension", "Output:", "Output:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-append-multiple-elements-in-set/?ref=lbp"},
{"title": "Python | Ways to concatenate tuples - GeeksforGeeks", "h1": ["Python | Ways to concatenate tuples"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1 : Using + operator", "Output : ", "Time Complexity: O(N)", "Auxiliary Space: O(N) ", "Method #2 : Using sum()", "Output : ", "Time complexity: ", "Auxiliary space: ", "Method #3: ", "Output", "Output", "Method #5: Using the tuple() constructor and the * operator", "Output", "Time complexity: ", "Auxiliary space: ", "METHOD 6: Using the += operator and the += method:", "APPROACH:", "ALGORITHM:", "Output", "Output", "Time Complexity", "Space Complexity:", "Complete Machine Learning & Data Science Program ", "Data Structures & Algorithms in Python - Self Paced ", "Data Science Training Program "], "link": "https://www.geeksforgeeks.org/python-ways-to-concatenate-tuples/"},
{"title": "How to Add Two Numbers in Python - Easy Programs - GeeksforGeeks", "h1": ["How to Add Two Numbers in Python – Easy Programs"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Basic Programs", "Array Programs", "List Programs", "Matrix Programs", "String Programs", "Dictionary Programs", "Tuple Programs", "Searching and Sorting Programs", "Pattern Printing Programs", "Date-Time Programs", "Python Regex Programs", "Python File Handling Programs", "More Python Programs", "Add Two Numbers with “+” Operator", "Python3", "Add Two Numbers with User Input", "Python3", "Add Two Numbers in Python Using Function", "Python3", "Add Two Numbers Using operator.add() Method", "Python3", "Add Two Number Using Lambda Function", "Python3", "Add Two Numbers Using Recursive Function", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Output:", "Output:", "Output", "Output", "Read More: ", "Operator Functions", "Output:", "Output:", "You can also check other operations:", "Complete Machine Learning & Data Science Program ", "Data Science Training Program ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-program-to-add-two-numbers/?ref=lbp"},
{"title": "Python | Create list of numbers with given range - GeeksforGeeks", "h1": ["Python | Create list of numbers with given range"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Naive Approach using a loop", "Python3", "Using List comprehension ", "Python3", "Using Python range()", "Python3", "Using itertools:", "Python3", "Using numpy.arange() ", "Python3", "Using numpy to create list of numbers with given range", "Python3", "Python3", "Approach 5: Using map() and lambda function", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input :", "Output :", "Input :", "Output :", "Creating a list of numbers with a given range in ", "Python", "Output:", "Output:", "Output:", "Output", "Output:", "Output:", "Output", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-create-list-of-numbers-with-given-range/?ref=lbp"},
{"title": "Python RegEx - GeeksforGeeks", "h1": ["Python RegEx"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Python3", "MetaCharacters", "Why RegEx?", "Basic RegEx", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "More RegEx", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Compiled RegEx", "Python3", "Summary", "What kind of Experience do you want to share?"], "strong": ["re module", "Output", "Data Mining", "Data Validation", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-regex/?ref=lbp"},
{"title": "Python | Pandas Merging, Joining, and Concatenating - GeeksforGeeks", "h1": ["Python | Pandas Merging, Joining, and Concatenating"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects", "Introduction", "Creating Objects", "Viewing Data", "Selection & Slicing", "Operations", "Manipulating Data", "Grouping Data", "Merging, Joining, Concatenating and Comparing", "Working with Date and Time", "Working With Text Data", "Working with CSV and Excel files", "Visualization", "Applications and Projects"], "strong": ["Concatenating DataFrame using ", ".concat()", " :", "Output :", "Concatenating DataFrame by setting logic on axes :", "Output :", "Output :", "Output :", "Concatenating DataFrame using ", ".append()", "Output :", "Concatenating DataFrame by ignoring indexes :", "Output :", "Concatenating DataFrame with group keys :", "Output :", "Concatenating with mixed ndims :", "Output :", "Code #1 :", "Output :", "Code #2:", "Output :", "Merging dataframe using ", "how", " in an argument:", "left", "right", "outer", "inner", "Output :", "Output :", "Output :", "Output :", "Output :", "Output :", "Joining dataframe using ", "on", " in an argument :", "Output :", "Joining singly-indexed DataFrame with multi-indexed DataFrame :", "Output :", "Data Structures & Algorithms in Python - Self Paced ", "Mastering Data Analytics - Python, SQL, Excel, Tableau ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-pandas-merging-joining-and-concatenating/"},
{"title": "Python Requests Tutorial - GeeksforGeeks", "h1": ["Python Requests Tutorial"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Getting Started with python-requests", "HTTP Request Methods", "Response Methods", "Projects", "Getting Started with python-requests", "HTTP Request Methods", "Response Methods", "Projects", "What is Python Requests module?", "Installing Requests", "How to make GET request through Python Requests", "Python3", "Http Request Methods ", "Response object", "Python3", "Response Methods", "Authentication using Python Requests", "Python3", "SSL Certificate Verification", "Python3", "Python3", "Session Objects ", "Python3", "Conclusion", "What kind of Experience do you want to share?"], "strong": ["Requests library in Python ", "Python Request Library", "GET requests ", ".", "get()", "Syntax", "Example :", "Output –", "response.status_code", "Example :", "Example – ", "Output :-", " Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-requests-tutorial/?ref=dhm"},
{"title": "Python Exercises, Practice Questions and Solutions - GeeksforGeeks", "h1": ["Python Exercises, Practice Questions and Solutions"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "List of Python Programming Exercises", "Python List Exercises", "Python String Exercises", "Python Tuple Exercises", "Python Dictionary Exercises", "Python Set Exercises", "Python Matrix Exercises", "Python Functions Exercises", "Python Lambda Exercises", "Python Pattern printing Exercises", "Python DateTime Exercises", "Python OOPS Exercises", "Python Regex Exercises", "Python LinkedList Exercises", "Python Searching Exercises", "Python Sorting Exercises", "Python DSA Exercises", "Python File Handling Exercises", "Python CSV Exercises", "Python JSON Exercises", "Python OS Module Exercises", "Python Tkinter Exercises", "NumPy Exercises", "Pandas Exercises", "Python Web Scraping Exercises", "Python Selenium Exercises", "Python Projects", "Conclusion", "What kind of Experience do you want to share?"], "strong": ["Python Exercise: ", "Python", " ", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-exercises-practice-questions-and-solutions/?ref=dhm"},
{"title": "Python Requests Tutorial - GeeksforGeeks", "h1": ["Python Requests Tutorial"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Getting Started with python-requests", "HTTP Request Methods", "Response Methods", "Projects", "Getting Started with python-requests", "HTTP Request Methods", "Response Methods", "Projects", "What is Python Requests module?", "Installing Requests", "How to make GET request through Python Requests", "Python3", "Http Request Methods ", "Response object", "Python3", "Response Methods", "Authentication using Python Requests", "Python3", "SSL Certificate Verification", "Python3", "Python3", "Session Objects ", "Python3", "Conclusion", "What kind of Experience do you want to share?"], "strong": ["Requests library in Python ", "Python Request Library", "GET requests ", ".", "get()", "Syntax", "Example :", "Output –", "response.status_code", "Example :", "Example – ", "Output :-", " Output:", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-requests-tutorial/?ref=lbp"},
{"title": "Python Linked List - GeeksforGeeks", "h1": ["Python Linked List"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "What is Linked List in Python", "Creating a linked list in Python", "Python3", "Insertion in Linked List", "Python3", "Python3", "Python3", "Python3", "Delete Node in a Linked List", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Example of the Linked list in Python", "Python3", "What kind of Experience do you want to share?"], "strong": ["head", "head.", "__init__ ", "insertAtBegin()", "insertAtIndex()", "insertAtEnd()", "remove_node() ", "remove_node()", "sizeOfLL() ", "printLL()", "__init__", "new_node", "data ", "new_node", "head", "return ", "new_node", "head", "new_node.", "new_node ", "‘position’ ", "0. ", "insertAtBegin() method ", "current_node", "None ", " (position+1)", "current_node", "current_node", "None ", "current_node. ", "current_node", "None", "“Index not present”.", "new_node ", " head", " head", "new_node", "head", " ", "else", " current_node equal ", " the head", "node", "None ", "new_node ", "current_node ", "head ", "None ", " ", " insert_at_inded()", "head", "None ", "return ", "current_node", "self.head", "position", "0. ", "remove_first_node()", " that current_node", "None", "“Index not present” ", "current_node", "None.", "current_node", "head ", "while loop", "current_node", "None ", "current_node", " None ", " current_node", "current_node", "head", " while loop", "current_node", "current_node", "current_node", " ‘size’ ", "while loop", "size", "current_node", "None else ", "“llist” ", "‘a’, ‘b’, ‘c’, ‘d’ ", "‘g’", " printLL()", " ", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Data Structures & Algorithms in JavaScript - Self Paced ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-linked-list/?ref=dhm"},
{"title": "Python If Else Statements - Conditional Statements - GeeksforGeeks", "h1": ["Python If Else Statements – Conditional Statements"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Types of Control Flow in Python", "Python if statement", "Python", "Python If-Else Statement", "Python", "Python", "Nested-If Statement in Python", "Python", "Python if-elif-else Ladder", "Python", "Short Hand if statement", "Python", "Short Hand if-else statement", "Python", "Python if-else Statements Exercise Questions", "Python", "Python", "What kind of Experience do you want to share?"], "strong": ["Python if statement", "Syntax", "Flowchart of Python if statement", "Output:", "Python If-Else Statement", "Syntax of Python If-Else", "Flowchart of Python if-else statement", "Output:", "Output :", "Nested-If Statement in Python", "Syntax", "Output:", "Python if-elif-else Ladder", "Syntax", "Flowchart of Python if-elif-else ladder", "Example of Python if-elif-else ladder", "Output:", "Short Hand if statement", "Syntax:", "Example of Python if shorthand", "Output:", "Short Hand if-else statement", "Syntax:", "Example of Python if else shorthand", "Output:", "Q1.", "Output", "Q2. ", "Output", "Similar Reads:", "Python3 – if , if..else, Nested if, if-elif statements", "Using Else Conditional Statement With For loop in Python", "How to use if, else & elif in Python Lambda Functions", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-if-else/?ref=dhm"},
{"title": "Python | Django Admin Interface - GeeksforGeeks", "h1": ["Python | Django Admin Interface"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Django Basics", "Django view", "Django Model", "Django Forms", "Django URLS", "More topics on Django", "Projects", "Django Interview Questions and Answers", "Django Basics", "Django view", "Django Model", "Django Forms", "Django URLS", "More topics on Django", "Projects", "Django Interview Questions and Answers", "Django  Admin Interface", "What kind of Experience do you want to share?"], "strong": ["Prerequisites: ", "Django  Admin Interface", "Creating a Superuser in Django Project", "Note: ", " Then run the command:", "python manage.py changepassword <username>", "python manage.py changepassword Abhishek_Shakya", "python manage.py createapp myapp", "from .models import <model.name>", "from .models import Faclity_details", "admin.site.register<Model.name>", "admin.site.register(Faclity_details)", "python manage.py makemigrations", "pyhton manage.py migrate", "Data Structures & Algorithms in Python - Self Paced ", "Python Programming Foundation - Self Paced ", "Complete Machine Learning & Data Science Program "], "link": "https://www.geeksforgeeks.org/python-django-admin-interface/?ref=ghm"},
{"title": "Top 50+ Python Interview Questions and Answers (Latest 2024)", "h1": ["Top 50+ Python Interview Questions and Answers (Latest 2024)"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "What is Python?", "Basic Python Interview Questions for Freshers", "Intermediate Python Interview Questions", "Advanced Python Interview Questions & Answers ", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": [" Python Interview Questions ", "Top 50 Python Interview Questions", "1. What is Python? List some popular applications of Python in the world of technology.", "2. What are the benefits of using Python language as a tool in the present scenario?", "3. Is Python a compiled language or an interpreted language?", "4. What does the ‘#’ symbol do in Python?", "5. What is the difference between a Mutable datatype and an Immutable data type?", "6. How are arguments passed by value or by reference in Python?", "7. What is the difference between a Set and Dictionary?", "8. What is List Comprehension? Give an Example.", "9. What is a lambda function?", "10. What is a pass in Python?", "11. What is the difference between / and // in Python?", "12. How is Exceptional handling done in Python?", "13. What is swapcase function in Python?", "14. Difference between for loop and while loop in Python", "Python Local variable:", "Python Global variables:", "Module-level scope:", "Outermost scope: ", "Declaring Docstrings:", "Accessing Docstrings:", "Statically typed languages: ", "Dynamically typed languages: ", "Numeric: ", ", ", "Sequence Type: T", "Mapping Types: ", "Set Types: ", "24. What is the difference between xrange and range functions?", "25. What is Dictionary Comprehension? Give an Example", "26. Is Tuple Comprehension? If yes, how, and if not why?", "27. Differentiate between List and Tuple?", "List", "Tuple", "28. What is the difference between a shallow copy and a deep copy?", "29. Which sorting technique is used by sort() and sorted() functions of python?", "Tim Sort", "30. What are Decorators?", "31. How do you debug a Python program?", "32. What are Iterators in Python?", "33. What are Generators in Python?", "34. Does Python supports multiple Inheritance?", "35. What is Polymorphism in Python?", "36. Define encapsulation in Python?", "37. How do you do data abstraction in Python?", "38. How is memory management done in Python?", "39. How to delete a file using Python?", "41. What is a namespace in Python?", "42. What is PIP?", "43. What is a zip function?", "44. What are Pickling and Unpickling?", "45. What is monkey patching in Python?", "46. What is __init__() in Python?", "47. Write a code to display the current time?", "Public Access Modifier:", "Protected Access Modifier: ", "Private Access Modifier: ", "53. What is Python Switch Statement ", "Note", "Note: ", "Complete Test Series for Service-Based Companies ", "Data Structures and Algorithms - Self Paced ", "Coding for Everyone "], "link": "https://www.geeksforgeeks.org/python-interview-questions/?ref=ghm"},
{"title": "Python Variables - GeeksforGeeks", "h1": ["Python Variables"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Example of Variable in Python", "Python3", "Python3", "Variables Assignment in Python", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Python3", "Global and Local Python Variables", "Python3", "Python3", "Global keyword in Python", "Python3", "Variable Types in Python", "Python3", "Object Reference in Python", "Python3", "Frequently Asked Questions", "Python3", "What kind of Experience do you want to share?"], "strong": ["Geeksforgeeks", " ", "var", "Output:", "Notes:", "Rules for Python variables", " ", "Example ", "Output:", "Variables Assignment in Python", "Output:", "Declaration and Initialization of Variables", "Output:", "Redeclaring variables in Python", "Output:", "Python Assign Values to Multiple Variables ", "Output:", "Assigning different values to multiple variables", "Output:", "Can We Use ", "ame Name for Different Types?", "Output:", "How does + operator work with variables?", "Output", "Can we use + for different Datatypes also?", "Output : ", "Local variables", "Output:", "Global variables", "Output:", "Rules of global keyword", "Example:", "Output:", "Example:", "Output:", "Object Reference in Python", "y", "x.", "Shared Reference", "Y, ", "Creating objects (or variables of a class type)", "Output", "Are there naming conventions for Python variables?", "Can I change the type of a Python variable?", "Data Structures & Algorithms in Python - Self Paced ", "Master Java Programming - Complete Beginner to Advanced ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-variables/?ref=dhm"},
{"title": "Python Set | update() - GeeksforGeeks", "h1": ["Python Set | update()"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Introduction", "Python Input/Output", "Python Operators", "Python Data Types", "Python String", "Python RegEx", "Python List", "Python Tuples", "Python Sets", "Python Dictionary", "Python Control Flow", "Python Functions", "Python OOP", "Python Exception Handling", "Python File handling", "Python Set update() Method Syntax", "Set update() Method Example", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Python update() function", "Syntax :  ", "Parameters : ", "Return value : ", "‘", "set2'", "‘", "set1'", "list3'", "‘", "set1'", "‘", "set2'", "list3' ", "‘", "set1'", "Output : ", "‘", "list1'", "‘", "list2'", "‘", "set1'", "‘", "set2'", "‘", "set2'", "‘", "set1'", "‘", "alphabet_set'", "‘a’", "‘b’", "‘c’", "‘", "set1'", "‘", "set2'", "‘", "alphabet_set'", "Output : ", "‘", "num_Dict'", "‘", "num_Dict'", "‘", "num_Dict'", "‘", "number' ", "Output:", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-set-update/?ref=next_article"},
{"title": "Python | Append Odd element twice - GeeksforGeeks", "h1": ["Python | Append Odd element twice"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Method #1: Using list comprehension", "Output", "Time Complexity:", "Auxiliary Space:", "Method #2: Using itertools", "Output", "Time Complexity:", "Auxiliary Space:", "Method #3: Using Numpy array", "Output:", "Time Complexity:", "Auxiliary Space:", "Method #4 : Using extend() method", "Output", "Time Complexity : O(N)", "Auxiliary Space : O(N)", "Method#5: Using Recursive method.", "Output", "Data Structures & Algorithms in Python - Self Paced ", "Master C Programming with Data Structures ", "Python Programming Foundation - Self Paced "], "link": "https://www.geeksforgeeks.org/python-append-odd-element-twice/"},
{"title": "Python - Combine list with other list elements - GeeksforGeeks", "h1": ["Python – Combine list with other list elements"], "h2": ["Data Structures and Algorithms", "ML & Data Science", "Web Development", "Languages", "Interview Corner", "CS Subjects", "Jobs", "Practice", "Contests", "Python3", "Python3", "Python3", "Python3", "Python3", "What kind of Experience do you want to share?"], "strong": ["Examples:", "Input", "Output", "Explanation", "Input", "Output", "Explanation", "Method #1 : Using ", "zip()", " + ", "len()", " + list()", "Output", "Method #2 : Using ", "product()", "Output", "Method #3:  ", "Output", "Time Complexity: ", "Auxiliary Space: ", "Method #4: Using map() function and lambda function", "Step-by-step algorithm:", "Output", "Time complexity:", "Auxiliary space:", "Method #5: Using reduce():", "Output", "The time complexity: O(n * m^2),", "The space complexity : O(n * m^2),", "Data Structures & Algorithms in Python - Self Paced ", "Complete Machine Learning & Data Science Program ", "Master C Programming with Data Structures "], "link": "https://www.geeksforgeeks.org/python-combine-list-with-other-list-elements/?ref=ml_lbp"}
]